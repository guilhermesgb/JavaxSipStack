//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:lib/slf4j-api-1.7.13-sources.jar!org/slf4j/helpers/SubstituteLoggerFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_SubstituteLoggerFactory")
#ifdef RESTRICT_SubstituteLoggerFactory
#define INCLUDE_ALL_SubstituteLoggerFactory 0
#else
#define INCLUDE_ALL_SubstituteLoggerFactory 1
#endif
#undef RESTRICT_SubstituteLoggerFactory

#if !defined (OrgSlf4jHelpersSubstituteLoggerFactory_) && (INCLUDE_ALL_SubstituteLoggerFactory || defined(INCLUDE_OrgSlf4jHelpersSubstituteLoggerFactory))
#define OrgSlf4jHelpersSubstituteLoggerFactory_

#define RESTRICT_ILoggerFactory 1
#define INCLUDE_OrgSlf4jILoggerFactory 1
#include "ILoggerFactory.h"

@protocol JavaUtilConcurrentConcurrentMap;
@protocol JavaUtilList;
@protocol OrgSlf4jLogger;

@interface OrgSlf4jHelpersSubstituteLoggerFactory : NSObject < OrgSlf4jILoggerFactory > {
 @public
  id<JavaUtilConcurrentConcurrentMap> loggers_;
}

#pragma mark Public

- (instancetype)init;

- (void)clear;

- (id<OrgSlf4jLogger>)getLoggerWithNSString:(NSString *)name;

- (id<JavaUtilList>)getLoggerNames;

- (id<JavaUtilList>)getLoggers;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSlf4jHelpersSubstituteLoggerFactory)

J2OBJC_FIELD_SETTER(OrgSlf4jHelpersSubstituteLoggerFactory, loggers_, id<JavaUtilConcurrentConcurrentMap>)

FOUNDATION_EXPORT void OrgSlf4jHelpersSubstituteLoggerFactory_init(OrgSlf4jHelpersSubstituteLoggerFactory *self);

FOUNDATION_EXPORT OrgSlf4jHelpersSubstituteLoggerFactory *new_OrgSlf4jHelpersSubstituteLoggerFactory_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSlf4jHelpersSubstituteLoggerFactory *create_OrgSlf4jHelpersSubstituteLoggerFactory_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgSlf4jHelpersSubstituteLoggerFactory)

#endif

#pragma pop_macro("INCLUDE_ALL_SubstituteLoggerFactory")
