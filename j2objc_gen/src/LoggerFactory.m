//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:lib/slf4j-api-1.7.13-sources.jar!org/slf4j/LoggerFactory.java
//

#include "ILoggerFactory.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Logger.h"
#include "LoggerFactory.h"
#include "NOPLoggerFactory.h"
#include "StaticLoggerBinder.h"
#include "SubstituteLogger.h"
#include "SubstituteLoggerFactory.h"
#include "Util.h"
#include "java/io/IOException.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NoClassDefFoundError.h"
#include "java/lang/NoSuchFieldError.h"
#include "java/lang/NoSuchMethodError.h"
#include "java/net/URL.h"
#include "java/util/Arrays.h"
#include "java/util/Enumeration.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface OrgSlf4jLoggerFactory ()

- (instancetype)init;

+ (void)performInitialization;

+ (jboolean)messageContainsOrgSlf4jImplStaticLoggerBinderWithNSString:(NSString *)msg;

+ (void)bind;

+ (void)fixSubstitutedLoggers;

+ (void)versionSanityCheck;

+ (id<JavaUtilSet>)findPossibleStaticLoggerBinderPathSet;

+ (jboolean)isAmbiguousStaticLoggerBinderPathSetWithJavaUtilSet:(id<JavaUtilSet>)staticLoggerBinderPathSet;

+ (void)reportMultipleBindingAmbiguityWithJavaUtilSet:(id<JavaUtilSet>)staticLoggerBinderPathSet;

+ (void)reportActualBindingWithJavaUtilSet:(id<JavaUtilSet>)staticLoggerBinderPathSet;

+ (jboolean)nonMatchingClassesWithIOSClass:(IOSClass *)clazz
                              withIOSClass:(IOSClass *)autoComputedCallingClass;

@end

inline IOSObjectArray *OrgSlf4jLoggerFactory_get_API_COMPATIBILITY_LIST();
static IOSObjectArray *OrgSlf4jLoggerFactory_API_COMPATIBILITY_LIST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSlf4jLoggerFactory, API_COMPATIBILITY_LIST, IOSObjectArray *)

inline NSString *OrgSlf4jLoggerFactory_get_STATIC_LOGGER_BINDER_PATH();
inline NSString *OrgSlf4jLoggerFactory_set_STATIC_LOGGER_BINDER_PATH(NSString *value);
static NSString *OrgSlf4jLoggerFactory_STATIC_LOGGER_BINDER_PATH = @"org/slf4j/impl/StaticLoggerBinder.class";
J2OBJC_STATIC_FIELD_OBJ(OrgSlf4jLoggerFactory, STATIC_LOGGER_BINDER_PATH, NSString *)

__attribute__((unused)) static void OrgSlf4jLoggerFactory_init(OrgSlf4jLoggerFactory *self);

__attribute__((unused)) static OrgSlf4jLoggerFactory *new_OrgSlf4jLoggerFactory_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSlf4jLoggerFactory *create_OrgSlf4jLoggerFactory_init();

__attribute__((unused)) static void OrgSlf4jLoggerFactory_performInitialization();

__attribute__((unused)) static jboolean OrgSlf4jLoggerFactory_messageContainsOrgSlf4jImplStaticLoggerBinderWithNSString_(NSString *msg);

__attribute__((unused)) static void OrgSlf4jLoggerFactory_bind();

__attribute__((unused)) static void OrgSlf4jLoggerFactory_fixSubstitutedLoggers();

__attribute__((unused)) static void OrgSlf4jLoggerFactory_versionSanityCheck();

__attribute__((unused)) static id<JavaUtilSet> OrgSlf4jLoggerFactory_findPossibleStaticLoggerBinderPathSet();

__attribute__((unused)) static jboolean OrgSlf4jLoggerFactory_isAmbiguousStaticLoggerBinderPathSetWithJavaUtilSet_(id<JavaUtilSet> staticLoggerBinderPathSet);

__attribute__((unused)) static void OrgSlf4jLoggerFactory_reportMultipleBindingAmbiguityWithJavaUtilSet_(id<JavaUtilSet> staticLoggerBinderPathSet);

__attribute__((unused)) static void OrgSlf4jLoggerFactory_reportActualBindingWithJavaUtilSet_(id<JavaUtilSet> staticLoggerBinderPathSet);

__attribute__((unused)) static jboolean OrgSlf4jLoggerFactory_nonMatchingClassesWithIOSClass_withIOSClass_(IOSClass *clazz, IOSClass *autoComputedCallingClass);

#line 1 "org/slf4j/LoggerFactory.java"

J2OBJC_INITIALIZED_DEFN(OrgSlf4jLoggerFactory)

NSString *OrgSlf4jLoggerFactory_CODES_PREFIX = @"http://www.slf4j.org/codes.html";
NSString *OrgSlf4jLoggerFactory_NO_STATICLOGGERBINDER_URL = @"http://www.slf4j.org/codes.html#StaticLoggerBinder";
NSString *OrgSlf4jLoggerFactory_MULTIPLE_BINDINGS_URL = @"http://www.slf4j.org/codes.html#multiple_bindings";
NSString *OrgSlf4jLoggerFactory_NULL_LF_URL = @"http://www.slf4j.org/codes.html#null_LF";
NSString *OrgSlf4jLoggerFactory_VERSION_MISMATCH = @"http://www.slf4j.org/codes.html#version_mismatch";
NSString *OrgSlf4jLoggerFactory_SUBSTITUTE_LOGGER_URL = @"http://www.slf4j.org/codes.html#substituteLogger";
NSString *OrgSlf4jLoggerFactory_LOGGER_NAME_MISMATCH_URL = @"http://www.slf4j.org/codes.html#loggerNameMismatch";
NSString *OrgSlf4jLoggerFactory_UNSUCCESSFUL_INIT_URL = @"http://www.slf4j.org/codes.html#unsuccessfulInit";
NSString *OrgSlf4jLoggerFactory_UNSUCCESSFUL_INIT_MSG = @"org.slf4j.LoggerFactory could not be successfully initialized. See also http://www.slf4j.org/codes.html#unsuccessfulInit";
jint OrgSlf4jLoggerFactory_INITIALIZATION_STATE = 0;
OrgSlf4jHelpersSubstituteLoggerFactory *OrgSlf4jLoggerFactory_TEMP_FACTORY;
OrgSlf4jHelpersNOPLoggerFactory *OrgSlf4jLoggerFactory_NOP_FALLBACK_FACTORY;
NSString *OrgSlf4jLoggerFactory_DETECT_LOGGER_NAME_MISMATCH_PROPERTY = @"slf4j.detectLoggerNameMismatch";
jboolean OrgSlf4jLoggerFactory_DETECT_LOGGER_NAME_MISMATCH;


#line 61
@implementation OrgSlf4jLoggerFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 99
- (instancetype)init {
  OrgSlf4jLoggerFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 113
+ (void)reset {
  OrgSlf4jLoggerFactory_reset();
}


#line 118
+ (void)performInitialization {
  OrgSlf4jLoggerFactory_performInitialization();
}


#line 125
+ (jboolean)messageContainsOrgSlf4jImplStaticLoggerBinderWithNSString:(NSString *)msg {
  return OrgSlf4jLoggerFactory_messageContainsOrgSlf4jImplStaticLoggerBinderWithNSString_(msg);
}


#line 135
+ (void)bind {
  OrgSlf4jLoggerFactory_bind();
}


#line 170
+ (void)failedBindingWithNSException:(NSException *)t {
  OrgSlf4jLoggerFactory_failedBindingWithNSException_(t);
}


#line 175
+ (void)fixSubstitutedLoggers {
  OrgSlf4jLoggerFactory_fixSubstitutedLoggers();
}


#line 195
+ (void)versionSanityCheck {
  OrgSlf4jLoggerFactory_versionSanityCheck();
}


#line 225
+ (id<JavaUtilSet>)findPossibleStaticLoggerBinderPathSet {
  return OrgSlf4jLoggerFactory_findPossibleStaticLoggerBinderPathSet();
}


#line 247
+ (jboolean)isAmbiguousStaticLoggerBinderPathSetWithJavaUtilSet:(id<JavaUtilSet>)staticLoggerBinderPathSet {
  return OrgSlf4jLoggerFactory_isAmbiguousStaticLoggerBinderPathSetWithJavaUtilSet_(staticLoggerBinderPathSet);
}


#line 256
+ (void)reportMultipleBindingAmbiguityWithJavaUtilSet:(id<JavaUtilSet>)staticLoggerBinderPathSet {
  OrgSlf4jLoggerFactory_reportMultipleBindingAmbiguityWithJavaUtilSet_(staticLoggerBinderPathSet);
}


#line 266
+ (void)reportActualBindingWithJavaUtilSet:(id<JavaUtilSet>)staticLoggerBinderPathSet {
  OrgSlf4jLoggerFactory_reportActualBindingWithJavaUtilSet_(staticLoggerBinderPathSet);
}


#line 279
+ (id<OrgSlf4jLogger>)getLoggerWithNSString:(NSString *)name {
  return OrgSlf4jLoggerFactory_getLoggerWithNSString_(name);
}


#line 300
+ (id<OrgSlf4jLogger>)getLoggerWithIOSClass:(IOSClass *)clazz {
  return OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(clazz);
}


#line 313
+ (jboolean)nonMatchingClassesWithIOSClass:(IOSClass *)clazz
                              withIOSClass:(IOSClass *)autoComputedCallingClass {
  return OrgSlf4jLoggerFactory_nonMatchingClassesWithIOSClass_withIOSClass_(clazz, autoComputedCallingClass);
}


#line 325
+ (id<OrgSlf4jILoggerFactory>)getILoggerFactory {
  return OrgSlf4jLoggerFactory_getILoggerFactory();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0xa, -1, -1, -1, 4, -1, -1 },
    { NULL, "Z", 0xa, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0xa, 8, 6, -1, 9, -1, -1 },
    { NULL, "V", 0xa, 10, 6, -1, 9, -1, -1 },
    { NULL, "LOrgSlf4jLogger;", 0x9, 11, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSlf4jLogger;", 0x9, 11, 12, -1, 13, -1, -1 },
    { NULL, "Z", 0xa, 14, 15, -1, 16, -1, -1 },
    { NULL, "LOrgSlf4jILoggerFactory;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(reset);
  methods[2].selector = @selector(performInitialization);
  methods[3].selector = @selector(messageContainsOrgSlf4jImplStaticLoggerBinderWithNSString:);
  methods[4].selector = @selector(bind);
  methods[5].selector = @selector(failedBindingWithNSException:);
  methods[6].selector = @selector(fixSubstitutedLoggers);
  methods[7].selector = @selector(versionSanityCheck);
  methods[8].selector = @selector(findPossibleStaticLoggerBinderPathSet);
  methods[9].selector = @selector(isAmbiguousStaticLoggerBinderPathSetWithJavaUtilSet:);
  methods[10].selector = @selector(reportMultipleBindingAmbiguityWithJavaUtilSet:);
  methods[11].selector = @selector(reportActualBindingWithJavaUtilSet:);
  methods[12].selector = @selector(getLoggerWithNSString:);
  methods[13].selector = @selector(getLoggerWithIOSClass:);
  methods[14].selector = @selector(nonMatchingClassesWithIOSClass:withIOSClass:);
  methods[15].selector = @selector(getILoggerFactory);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CODES_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 17, -1, -1 },
    { "NO_STATICLOGGERBINDER_URL", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 18, -1, -1 },
    { "MULTIPLE_BINDINGS_URL", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 19, -1, -1 },
    { "NULL_LF_URL", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 20, -1, -1 },
    { "VERSION_MISMATCH", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 21, -1, -1 },
    { "SUBSTITUTE_LOGGER_URL", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 22, -1, -1 },
    { "LOGGER_NAME_MISMATCH_URL", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 23, -1, -1 },
    { "UNSUCCESSFUL_INIT_URL", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 24, -1, -1 },
    { "UNSUCCESSFUL_INIT_MSG", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 25, -1, -1 },
    { "UNINITIALIZED", "I", .constantValue.asInt = OrgSlf4jLoggerFactory_UNINITIALIZED, 0x18, -1, -1, -1, -1 },
    { "ONGOING_INITIALIZATION", "I", .constantValue.asInt = OrgSlf4jLoggerFactory_ONGOING_INITIALIZATION, 0x18, -1, -1, -1, -1 },
    { "FAILED_INITIALIZATION", "I", .constantValue.asInt = OrgSlf4jLoggerFactory_FAILED_INITIALIZATION, 0x18, -1, -1, -1, -1 },
    { "SUCCESSFUL_INITIALIZATION", "I", .constantValue.asInt = OrgSlf4jLoggerFactory_SUCCESSFUL_INITIALIZATION, 0x18, -1, -1, -1, -1 },
    { "NOP_FALLBACK_INITIALIZATION", "I", .constantValue.asInt = OrgSlf4jLoggerFactory_NOP_FALLBACK_INITIALIZATION, 0x18, -1, -1, -1, -1 },
    { "INITIALIZATION_STATE", "I", .constantValue.asLong = 0, 0x8, -1, 26, -1, -1 },
    { "TEMP_FACTORY", "LOrgSlf4jHelpersSubstituteLoggerFactory;", .constantValue.asLong = 0, 0x8, -1, 27, -1, -1 },
    { "NOP_FALLBACK_FACTORY", "LOrgSlf4jHelpersNOPLoggerFactory;", .constantValue.asLong = 0, 0x8, -1, 28, -1, -1 },
    { "DETECT_LOGGER_NAME_MISMATCH_PROPERTY", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 29, -1, -1 },
    { "DETECT_LOGGER_NAME_MISMATCH", "Z", .constantValue.asLong = 0, 0x8, -1, 30, -1, -1 },
    { "API_COMPATIBILITY_LIST", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "STATIC_LOGGER_BINDER_PATH", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 32, -1, -1 },
  };
  static const void *ptrTable[] = { "messageContainsOrgSlf4jImplStaticLoggerBinder", "LNSString;", "failedBinding", "LNSException;", "()Ljava/util/Set<Ljava/net/URL;>;", "isAmbiguousStaticLoggerBinderPathSet", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/net/URL;>;)Z", "reportMultipleBindingAmbiguity", "(Ljava/util/Set<Ljava/net/URL;>;)V", "reportActualBinding", "getLogger", "LIOSClass;", "(Ljava/lang/Class<*>;)Lorg/slf4j/Logger;", "nonMatchingClasses", "LIOSClass;LIOSClass;", "(Ljava/lang/Class<*>;Ljava/lang/Class<*>;)Z", &OrgSlf4jLoggerFactory_CODES_PREFIX, &OrgSlf4jLoggerFactory_NO_STATICLOGGERBINDER_URL, &OrgSlf4jLoggerFactory_MULTIPLE_BINDINGS_URL, &OrgSlf4jLoggerFactory_NULL_LF_URL, &OrgSlf4jLoggerFactory_VERSION_MISMATCH, &OrgSlf4jLoggerFactory_SUBSTITUTE_LOGGER_URL, &OrgSlf4jLoggerFactory_LOGGER_NAME_MISMATCH_URL, &OrgSlf4jLoggerFactory_UNSUCCESSFUL_INIT_URL, &OrgSlf4jLoggerFactory_UNSUCCESSFUL_INIT_MSG, &OrgSlf4jLoggerFactory_INITIALIZATION_STATE, &OrgSlf4jLoggerFactory_TEMP_FACTORY, &OrgSlf4jLoggerFactory_NOP_FALLBACK_FACTORY, &OrgSlf4jLoggerFactory_DETECT_LOGGER_NAME_MISMATCH_PROPERTY, &OrgSlf4jLoggerFactory_DETECT_LOGGER_NAME_MISMATCH, &OrgSlf4jLoggerFactory_API_COMPATIBILITY_LIST, &OrgSlf4jLoggerFactory_STATIC_LOGGER_BINDER_PATH };
  static const J2ObjcClassInfo _OrgSlf4jLoggerFactory = { "LoggerFactory", "org.slf4j", ptrTable, methods, fields, 7, 0x11, 16, 21, -1, -1, -1, -1, -1 };
  return &_OrgSlf4jLoggerFactory;
}

+ (void)initialize {
  if (self == [OrgSlf4jLoggerFactory class]) {
    JreStrongAssignAndConsume(&OrgSlf4jLoggerFactory_TEMP_FACTORY, new_OrgSlf4jHelpersSubstituteLoggerFactory_init());
    JreStrongAssignAndConsume(&OrgSlf4jLoggerFactory_NOP_FALLBACK_FACTORY, new_OrgSlf4jHelpersNOPLoggerFactory_init());
    OrgSlf4jLoggerFactory_DETECT_LOGGER_NAME_MISMATCH = OrgSlf4jHelpersUtil_safeGetBooleanSystemPropertyWithNSString_(
#line 87
    OrgSlf4jLoggerFactory_DETECT_LOGGER_NAME_MISMATCH_PROPERTY);
    JreStrongAssignAndConsume(&OrgSlf4jLoggerFactory_API_COMPATIBILITY_LIST, [IOSObjectArray newArrayWithObjects:(id[]){
#line 96
      @"1.6", @"1.7" } count:2 type:NSString_class_()]);
      J2OBJC_SET_INITIALIZED(OrgSlf4jLoggerFactory)
    }
  }

@end


#line 99
void OrgSlf4jLoggerFactory_init(OrgSlf4jLoggerFactory *self) {
  NSObject_init(self);
}


#line 99
OrgSlf4jLoggerFactory *new_OrgSlf4jLoggerFactory_init() {
  J2OBJC_NEW_IMPL(OrgSlf4jLoggerFactory, init)
}


#line 99
OrgSlf4jLoggerFactory *create_OrgSlf4jLoggerFactory_init() {
  J2OBJC_CREATE_IMPL(OrgSlf4jLoggerFactory, init)
}


#line 113
void OrgSlf4jLoggerFactory_reset() {
  OrgSlf4jLoggerFactory_initialize();
  
#line 114
  OrgSlf4jLoggerFactory_INITIALIZATION_STATE = OrgSlf4jLoggerFactory_UNINITIALIZED;
  JreStrongAssignAndConsume(&OrgSlf4jLoggerFactory_TEMP_FACTORY, new_OrgSlf4jHelpersSubstituteLoggerFactory_init());
}


#line 118
void OrgSlf4jLoggerFactory_performInitialization() {
  OrgSlf4jLoggerFactory_initialize();
  
#line 119
  OrgSlf4jLoggerFactory_bind();
  if (OrgSlf4jLoggerFactory_INITIALIZATION_STATE == OrgSlf4jLoggerFactory_SUCCESSFUL_INITIALIZATION) {
    OrgSlf4jLoggerFactory_versionSanityCheck();
  }
}


#line 125
jboolean OrgSlf4jLoggerFactory_messageContainsOrgSlf4jImplStaticLoggerBinderWithNSString_(NSString *msg) {
  OrgSlf4jLoggerFactory_initialize();
  
#line 126
  if (msg == nil)
#line 127
  return false;
  if ([msg java_contains:@"org/slf4j/impl/StaticLoggerBinder"])
#line 129
  return true;
  if ([msg java_contains:@"org.slf4j.impl.StaticLoggerBinder"])
#line 131
  return true;
  return false;
}


#line 135
void OrgSlf4jLoggerFactory_bind() {
  OrgSlf4jLoggerFactory_initialize();
  
#line 136
  @try {
    id<JavaUtilSet> staticLoggerBinderPathSet = OrgSlf4jLoggerFactory_findPossibleStaticLoggerBinderPathSet();
    OrgSlf4jLoggerFactory_reportMultipleBindingAmbiguityWithJavaUtilSet_(staticLoggerBinderPathSet);
    
#line 140
    OrgSlf4jImplStaticLoggerBinder_getSingleton();
    OrgSlf4jLoggerFactory_INITIALIZATION_STATE = OrgSlf4jLoggerFactory_SUCCESSFUL_INITIALIZATION;
    OrgSlf4jLoggerFactory_reportActualBindingWithJavaUtilSet_(staticLoggerBinderPathSet);
    OrgSlf4jLoggerFactory_fixSubstitutedLoggers();
  }
  @catch (
#line 144
  JavaLangNoClassDefFoundError *ncde) {
    NSString *msg = [((JavaLangNoClassDefFoundError *) nil_chk(ncde)) getMessage];
    if (OrgSlf4jLoggerFactory_messageContainsOrgSlf4jImplStaticLoggerBinderWithNSString_(msg)) {
      OrgSlf4jLoggerFactory_INITIALIZATION_STATE = OrgSlf4jLoggerFactory_NOP_FALLBACK_INITIALIZATION;
      OrgSlf4jHelpersUtil_reportWithNSString_(@"Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".");
      OrgSlf4jHelpersUtil_reportWithNSString_(@"Defaulting to no-operation (NOP) logger implementation");
      OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$$$", @"See ", OrgSlf4jLoggerFactory_NO_STATICLOGGERBINDER_URL, @" for further details."));
    }
    else {
      
#line 152
      OrgSlf4jLoggerFactory_failedBindingWithNSException_(ncde);
      @throw ncde;
    }
  }
  @catch (
#line 155
  JavaLangNoSuchMethodError *nsme) {
    NSString *msg = [((JavaLangNoSuchMethodError *) nil_chk(nsme)) getMessage];
    if (msg != nil && [msg java_contains:@"org.slf4j.impl.StaticLoggerBinder.getSingleton()"]) {
      OrgSlf4jLoggerFactory_INITIALIZATION_STATE = OrgSlf4jLoggerFactory_FAILED_INITIALIZATION;
      OrgSlf4jHelpersUtil_reportWithNSString_(@"slf4j-api 1.6.x (or later) is incompatible with this binding.");
      OrgSlf4jHelpersUtil_reportWithNSString_(@"Your binding is version 1.5.5 or earlier.");
      OrgSlf4jHelpersUtil_reportWithNSString_(@"Upgrade your binding to version 1.6.x.");
    }
    @throw nsme;
  }
  @catch (
#line 164
  JavaLangException *e) {
    OrgSlf4jLoggerFactory_failedBindingWithNSException_(e);
    @throw create_JavaLangIllegalStateException_initWithNSString_withNSException_(@"Unexpected initialization failure", e);
  }
}


#line 170
void OrgSlf4jLoggerFactory_failedBindingWithNSException_(NSException *t) {
  OrgSlf4jLoggerFactory_initialize();
  
#line 171
  OrgSlf4jLoggerFactory_INITIALIZATION_STATE = OrgSlf4jLoggerFactory_FAILED_INITIALIZATION;
  OrgSlf4jHelpersUtil_reportWithNSString_withNSException_(@"Failed to instantiate SLF4J LoggerFactory", t);
}


#line 175
void OrgSlf4jLoggerFactory_fixSubstitutedLoggers() {
  OrgSlf4jLoggerFactory_initialize();
  
#line 176
  id<JavaUtilList> loggers = [((OrgSlf4jHelpersSubstituteLoggerFactory *) nil_chk(OrgSlf4jLoggerFactory_TEMP_FACTORY)) getLoggers];
  
#line 178
  if ([((id<JavaUtilList>) nil_chk(loggers)) isEmpty]) {
    return;
  }
  
#line 182
  OrgSlf4jHelpersUtil_reportWithNSString_(@"The following set of substitute loggers may have been accessed");
  OrgSlf4jHelpersUtil_reportWithNSString_(@"during the initialization phase. Logging calls during this");
  OrgSlf4jHelpersUtil_reportWithNSString_(@"phase were not honored. However, subsequent logging calls to these");
  OrgSlf4jHelpersUtil_reportWithNSString_(@"loggers will work as normally expected.");
  OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$$", @"See also ", OrgSlf4jLoggerFactory_SUBSTITUTE_LOGGER_URL));
  for (OrgSlf4jHelpersSubstituteLogger * __strong subLogger in loggers) {
    [((OrgSlf4jHelpersSubstituteLogger *) nil_chk(subLogger)) setDelegateWithOrgSlf4jLogger:OrgSlf4jLoggerFactory_getLoggerWithNSString_([subLogger getName])];
    OrgSlf4jHelpersUtil_reportWithNSString_([subLogger getName]);
  }
  
#line 192
  [((OrgSlf4jHelpersSubstituteLoggerFactory *) nil_chk(OrgSlf4jLoggerFactory_TEMP_FACTORY)) clear];
}


#line 195
void OrgSlf4jLoggerFactory_versionSanityCheck() {
  OrgSlf4jLoggerFactory_initialize();
  
#line 196
  @try {
    NSString *requested = JreLoadStatic(OrgSlf4jImplStaticLoggerBinder, REQUESTED_API_VERSION);
    
#line 199
    jboolean match = false;
    {
      IOSObjectArray *a__ =
#line 200
      OrgSlf4jLoggerFactory_API_COMPATIBILITY_LIST;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *aAPI_COMPATIBILITY_LIST = *b__++;
        
#line 201
        if ([((NSString *) nil_chk(requested)) hasPrefix:aAPI_COMPATIBILITY_LIST]) {
          match = true;
        }
      }
    }
    
#line 205
    if (!match) {
      OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$$$$", @"The requested version ", requested, @" by your slf4j binding is not compatible with ",
#line 207
      [((id<JavaUtilList>) nil_chk(JavaUtilArrays_asListWithNSObjectArray_(OrgSlf4jLoggerFactory_API_COMPATIBILITY_LIST))) description]));
      OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$$$", @"See ", OrgSlf4jLoggerFactory_VERSION_MISMATCH, @" for further details."));
    }
  }
  @catch (
#line 210
  JavaLangNoSuchFieldError *nsfe) {
  }
  @catch (
#line 215
  NSException *e) {
    
#line 217
    OrgSlf4jHelpersUtil_reportWithNSString_withNSException_(@"Unexpected problem occured during version sanity check", e);
  }
}


#line 225
id<JavaUtilSet> OrgSlf4jLoggerFactory_findPossibleStaticLoggerBinderPathSet() {
  OrgSlf4jLoggerFactory_initialize();
  
#line 228
  id<JavaUtilSet> staticLoggerBinderPathSet = create_JavaUtilLinkedHashSet_init();
  @try {
    JavaLangClassLoader *loggerFactoryClassLoader = [OrgSlf4jLoggerFactory_class_() getClassLoader];
    id<JavaUtilEnumeration> paths;
    if (loggerFactoryClassLoader == nil) {
      paths = JavaLangClassLoader_getSystemResourcesWithNSString_(OrgSlf4jLoggerFactory_STATIC_LOGGER_BINDER_PATH);
    }
    else {
      
#line 235
      paths = [loggerFactoryClassLoader getResourcesWithNSString:OrgSlf4jLoggerFactory_STATIC_LOGGER_BINDER_PATH];
    }
    while ([((id<JavaUtilEnumeration>) nil_chk(paths)) hasMoreElements]) {
      JavaNetURL *path = [paths nextElement];
      [staticLoggerBinderPathSet addWithId:path];
    }
  }
  @catch (
#line 241
  JavaIoIOException *ioe) {
    OrgSlf4jHelpersUtil_reportWithNSString_withNSException_(@"Error getting resources from path", ioe);
  }
  return staticLoggerBinderPathSet;
}


#line 247
jboolean OrgSlf4jLoggerFactory_isAmbiguousStaticLoggerBinderPathSetWithJavaUtilSet_(id<JavaUtilSet> staticLoggerBinderPathSet) {
  OrgSlf4jLoggerFactory_initialize();
  
#line 248
  return [((id<JavaUtilSet>) nil_chk(staticLoggerBinderPathSet)) size] > 1;
}


#line 256
void OrgSlf4jLoggerFactory_reportMultipleBindingAmbiguityWithJavaUtilSet_(id<JavaUtilSet> staticLoggerBinderPathSet) {
  OrgSlf4jLoggerFactory_initialize();
  
#line 257
  if (OrgSlf4jLoggerFactory_isAmbiguousStaticLoggerBinderPathSetWithJavaUtilSet_(staticLoggerBinderPathSet)) {
    OrgSlf4jHelpersUtil_reportWithNSString_(@"Class path contains multiple SLF4J bindings.");
    for (JavaNetURL * __strong path in nil_chk(staticLoggerBinderPathSet)) {
      OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$@C", @"Found binding in [", path, ']'));
    }
    OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$$$", @"See ", OrgSlf4jLoggerFactory_MULTIPLE_BINDINGS_URL, @" for an explanation."));
  }
}


#line 266
void OrgSlf4jLoggerFactory_reportActualBindingWithJavaUtilSet_(id<JavaUtilSet> staticLoggerBinderPathSet) {
  OrgSlf4jLoggerFactory_initialize();
  
#line 267
  if (OrgSlf4jLoggerFactory_isAmbiguousStaticLoggerBinderPathSetWithJavaUtilSet_(staticLoggerBinderPathSet)) {
    OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$$C", @"Actual binding is of type [", [((OrgSlf4jImplStaticLoggerBinder *) nil_chk(OrgSlf4jImplStaticLoggerBinder_getSingleton())) getLoggerFactoryClassStr], ']'));
  }
}


#line 279
id<OrgSlf4jLogger> OrgSlf4jLoggerFactory_getLoggerWithNSString_(NSString *name) {
  OrgSlf4jLoggerFactory_initialize();
  
#line 280
  id<OrgSlf4jILoggerFactory> iLoggerFactory = OrgSlf4jLoggerFactory_getILoggerFactory();
  return [((id<OrgSlf4jILoggerFactory>) nil_chk(iLoggerFactory)) getLoggerWithNSString:name];
}


#line 300
id<OrgSlf4jLogger> OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(IOSClass *clazz) {
  OrgSlf4jLoggerFactory_initialize();
  
#line 301
  id<OrgSlf4jLogger> logger = OrgSlf4jLoggerFactory_getLoggerWithNSString_([((IOSClass *) nil_chk(clazz)) getName]);
  if (OrgSlf4jLoggerFactory_DETECT_LOGGER_NAME_MISMATCH) {
    IOSClass *autoComputedCallingClass = OrgSlf4jHelpersUtil_getCallingClass();
    if (autoComputedCallingClass != nil && OrgSlf4jLoggerFactory_nonMatchingClassesWithIOSClass_withIOSClass_(clazz, autoComputedCallingClass)) {
      OrgSlf4jHelpersUtil_reportWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Detected logger name mismatch. Given name: \"%s\"; computed name: \"%s\".", [IOSObjectArray arrayWithObjects:(id[]){ [((id<OrgSlf4jLogger>) nil_chk(logger)) getName],
#line 306
      [autoComputedCallingClass getName] } count:2 type:NSObject_class_()]));
      OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$$$", @"See ", OrgSlf4jLoggerFactory_LOGGER_NAME_MISMATCH_URL, @" for an explanation"));
    }
  }
  return logger;
}


#line 313
jboolean OrgSlf4jLoggerFactory_nonMatchingClassesWithIOSClass_withIOSClass_(IOSClass *clazz, IOSClass *autoComputedCallingClass) {
  OrgSlf4jLoggerFactory_initialize();
  
#line 314
  return ![((IOSClass *) nil_chk(autoComputedCallingClass)) isAssignableFrom:clazz];
}


#line 325
id<OrgSlf4jILoggerFactory> OrgSlf4jLoggerFactory_getILoggerFactory() {
  OrgSlf4jLoggerFactory_initialize();
  
#line 326
  if (OrgSlf4jLoggerFactory_INITIALIZATION_STATE == OrgSlf4jLoggerFactory_UNINITIALIZED) {
    OrgSlf4jLoggerFactory_INITIALIZATION_STATE = OrgSlf4jLoggerFactory_ONGOING_INITIALIZATION;
    OrgSlf4jLoggerFactory_performInitialization();
  }
  switch (OrgSlf4jLoggerFactory_INITIALIZATION_STATE) {
    case OrgSlf4jLoggerFactory_SUCCESSFUL_INITIALIZATION:
    return [((OrgSlf4jImplStaticLoggerBinder *) nil_chk(OrgSlf4jImplStaticLoggerBinder_getSingleton())) getLoggerFactory];
    case OrgSlf4jLoggerFactory_NOP_FALLBACK_INITIALIZATION:
    return OrgSlf4jLoggerFactory_NOP_FALLBACK_FACTORY;
    case OrgSlf4jLoggerFactory_FAILED_INITIALIZATION:
    @throw create_JavaLangIllegalStateException_initWithNSString_(OrgSlf4jLoggerFactory_UNSUCCESSFUL_INIT_MSG);
    case OrgSlf4jLoggerFactory_ONGOING_INITIALIZATION:
    
#line 340
    return OrgSlf4jLoggerFactory_TEMP_FACTORY;
  }
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"Unreachable code");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSlf4jLoggerFactory)
