//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:lib/slf4j-api-1.7.13-sources.jar!org/slf4j/LoggerFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_LoggerFactory")
#ifdef RESTRICT_LoggerFactory
#define INCLUDE_ALL_LoggerFactory 0
#else
#define INCLUDE_ALL_LoggerFactory 1
#endif
#undef RESTRICT_LoggerFactory

#if !defined (OrgSlf4jLoggerFactory_) && (INCLUDE_ALL_LoggerFactory || defined(INCLUDE_OrgSlf4jLoggerFactory))
#define OrgSlf4jLoggerFactory_

@class IOSClass;
@class OrgSlf4jHelpersNOPLoggerFactory;
@class OrgSlf4jHelpersSubstituteLoggerFactory;
@protocol OrgSlf4jILoggerFactory;
@protocol OrgSlf4jLogger;

@interface OrgSlf4jLoggerFactory : NSObject

#pragma mark Public

+ (id<OrgSlf4jILoggerFactory>)getILoggerFactory;

+ (id<OrgSlf4jLogger>)getLoggerWithIOSClass:(IOSClass *)clazz;

+ (id<OrgSlf4jLogger>)getLoggerWithNSString:(NSString *)name;

#pragma mark Package-Private

+ (void)failedBindingWithNSException:(NSException *)t;

+ (void)reset;

@end

J2OBJC_STATIC_INIT(OrgSlf4jLoggerFactory)

inline NSString *OrgSlf4jLoggerFactory_get_CODES_PREFIX();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSlf4jLoggerFactory_CODES_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSlf4jLoggerFactory, CODES_PREFIX, NSString *)

inline NSString *OrgSlf4jLoggerFactory_get_NO_STATICLOGGERBINDER_URL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSlf4jLoggerFactory_NO_STATICLOGGERBINDER_URL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSlf4jLoggerFactory, NO_STATICLOGGERBINDER_URL, NSString *)

inline NSString *OrgSlf4jLoggerFactory_get_MULTIPLE_BINDINGS_URL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSlf4jLoggerFactory_MULTIPLE_BINDINGS_URL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSlf4jLoggerFactory, MULTIPLE_BINDINGS_URL, NSString *)

inline NSString *OrgSlf4jLoggerFactory_get_NULL_LF_URL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSlf4jLoggerFactory_NULL_LF_URL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSlf4jLoggerFactory, NULL_LF_URL, NSString *)

inline NSString *OrgSlf4jLoggerFactory_get_VERSION_MISMATCH();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSlf4jLoggerFactory_VERSION_MISMATCH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSlf4jLoggerFactory, VERSION_MISMATCH, NSString *)

inline NSString *OrgSlf4jLoggerFactory_get_SUBSTITUTE_LOGGER_URL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSlf4jLoggerFactory_SUBSTITUTE_LOGGER_URL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSlf4jLoggerFactory, SUBSTITUTE_LOGGER_URL, NSString *)

inline NSString *OrgSlf4jLoggerFactory_get_LOGGER_NAME_MISMATCH_URL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSlf4jLoggerFactory_LOGGER_NAME_MISMATCH_URL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSlf4jLoggerFactory, LOGGER_NAME_MISMATCH_URL, NSString *)

inline NSString *OrgSlf4jLoggerFactory_get_UNSUCCESSFUL_INIT_URL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSlf4jLoggerFactory_UNSUCCESSFUL_INIT_URL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSlf4jLoggerFactory, UNSUCCESSFUL_INIT_URL, NSString *)

inline NSString *OrgSlf4jLoggerFactory_get_UNSUCCESSFUL_INIT_MSG();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSlf4jLoggerFactory_UNSUCCESSFUL_INIT_MSG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSlf4jLoggerFactory, UNSUCCESSFUL_INIT_MSG, NSString *)

inline jint OrgSlf4jLoggerFactory_get_UNINITIALIZED();
#define OrgSlf4jLoggerFactory_UNINITIALIZED 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgSlf4jLoggerFactory, UNINITIALIZED, jint)

inline jint OrgSlf4jLoggerFactory_get_ONGOING_INITIALIZATION();
#define OrgSlf4jLoggerFactory_ONGOING_INITIALIZATION 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgSlf4jLoggerFactory, ONGOING_INITIALIZATION, jint)

inline jint OrgSlf4jLoggerFactory_get_FAILED_INITIALIZATION();
#define OrgSlf4jLoggerFactory_FAILED_INITIALIZATION 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgSlf4jLoggerFactory, FAILED_INITIALIZATION, jint)

inline jint OrgSlf4jLoggerFactory_get_SUCCESSFUL_INITIALIZATION();
#define OrgSlf4jLoggerFactory_SUCCESSFUL_INITIALIZATION 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgSlf4jLoggerFactory, SUCCESSFUL_INITIALIZATION, jint)

inline jint OrgSlf4jLoggerFactory_get_NOP_FALLBACK_INITIALIZATION();
#define OrgSlf4jLoggerFactory_NOP_FALLBACK_INITIALIZATION 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgSlf4jLoggerFactory, NOP_FALLBACK_INITIALIZATION, jint)

inline jint OrgSlf4jLoggerFactory_get_INITIALIZATION_STATE();
inline jint OrgSlf4jLoggerFactory_set_INITIALIZATION_STATE(jint value);
inline jint *OrgSlf4jLoggerFactory_getRef_INITIALIZATION_STATE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint OrgSlf4jLoggerFactory_INITIALIZATION_STATE;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgSlf4jLoggerFactory, INITIALIZATION_STATE, jint)

inline OrgSlf4jHelpersSubstituteLoggerFactory *OrgSlf4jLoggerFactory_get_TEMP_FACTORY();
inline OrgSlf4jHelpersSubstituteLoggerFactory *OrgSlf4jLoggerFactory_set_TEMP_FACTORY(OrgSlf4jHelpersSubstituteLoggerFactory *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgSlf4jHelpersSubstituteLoggerFactory *OrgSlf4jLoggerFactory_TEMP_FACTORY;
J2OBJC_STATIC_FIELD_OBJ(OrgSlf4jLoggerFactory, TEMP_FACTORY, OrgSlf4jHelpersSubstituteLoggerFactory *)

inline OrgSlf4jHelpersNOPLoggerFactory *OrgSlf4jLoggerFactory_get_NOP_FALLBACK_FACTORY();
inline OrgSlf4jHelpersNOPLoggerFactory *OrgSlf4jLoggerFactory_set_NOP_FALLBACK_FACTORY(OrgSlf4jHelpersNOPLoggerFactory *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgSlf4jHelpersNOPLoggerFactory *OrgSlf4jLoggerFactory_NOP_FALLBACK_FACTORY;
J2OBJC_STATIC_FIELD_OBJ(OrgSlf4jLoggerFactory, NOP_FALLBACK_FACTORY, OrgSlf4jHelpersNOPLoggerFactory *)

inline NSString *OrgSlf4jLoggerFactory_get_DETECT_LOGGER_NAME_MISMATCH_PROPERTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSlf4jLoggerFactory_DETECT_LOGGER_NAME_MISMATCH_PROPERTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSlf4jLoggerFactory, DETECT_LOGGER_NAME_MISMATCH_PROPERTY, NSString *)

inline jboolean OrgSlf4jLoggerFactory_get_DETECT_LOGGER_NAME_MISMATCH();
inline jboolean OrgSlf4jLoggerFactory_set_DETECT_LOGGER_NAME_MISMATCH(jboolean value);
inline jboolean *OrgSlf4jLoggerFactory_getRef_DETECT_LOGGER_NAME_MISMATCH();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean OrgSlf4jLoggerFactory_DETECT_LOGGER_NAME_MISMATCH;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgSlf4jLoggerFactory, DETECT_LOGGER_NAME_MISMATCH, jboolean)

FOUNDATION_EXPORT void OrgSlf4jLoggerFactory_reset();

FOUNDATION_EXPORT void OrgSlf4jLoggerFactory_failedBindingWithNSException_(NSException *t);

FOUNDATION_EXPORT id<OrgSlf4jLogger> OrgSlf4jLoggerFactory_getLoggerWithNSString_(NSString *name);

FOUNDATION_EXPORT id<OrgSlf4jLogger> OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(IOSClass *clazz);

FOUNDATION_EXPORT id<OrgSlf4jILoggerFactory> OrgSlf4jLoggerFactory_getILoggerFactory();

J2OBJC_TYPE_LITERAL_HEADER(OrgSlf4jLoggerFactory)

#endif

#pragma pop_macro("INCLUDE_ALL_LoggerFactory")
