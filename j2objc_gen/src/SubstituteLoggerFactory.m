//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:lib/slf4j-api-1.7.13-sources.jar!org/slf4j/helpers/SubstituteLoggerFactory.java
//

#include "J2ObjC_source.h"
#include "Logger.h"
#include "SubstituteLogger.h"
#include "SubstituteLoggerFactory.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"

#line 1 "org/slf4j/helpers/SubstituteLoggerFactory.java"


#line 41
@implementation OrgSlf4jHelpersSubstituteLoggerFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSlf4jHelpersSubstituteLoggerFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 45
- (id<OrgSlf4jLogger>)getLoggerWithNSString:(NSString *)name {
  OrgSlf4jHelpersSubstituteLogger *logger = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(loggers_)) getWithId:name];
  if (logger == nil) {
    logger = create_OrgSlf4jHelpersSubstituteLogger_initWithNSString_(name);
    OrgSlf4jHelpersSubstituteLogger *oldLogger = [loggers_ putIfAbsentWithId:name withId:logger];
    if (oldLogger != nil)
#line 51
    logger = oldLogger;
  }
  return logger;
}


#line 56
- (id<JavaUtilList>)getLoggerNames {
  return create_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(loggers_)) keySet]);
}

- (id<JavaUtilList>)getLoggers {
  return create_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(loggers_)) values]);
}

- (void)clear {
  [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(loggers_)) clear];
}

- (void)dealloc {
  RELEASE_(loggers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSlf4jLogger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getLoggerWithNSString:);
  methods[2].selector = @selector(getLoggerNames);
  methods[3].selector = @selector(getLoggers);
  methods[4].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "loggers_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "getLogger", "LNSString;", "()Ljava/util/List<Ljava/lang/String;>;", "()Ljava/util/List<Lorg/slf4j/helpers/SubstituteLogger;>;", "Ljava/util/concurrent/ConcurrentMap<Ljava/lang/String;Lorg/slf4j/helpers/SubstituteLogger;>;" };
  static const J2ObjcClassInfo _OrgSlf4jHelpersSubstituteLoggerFactory = { "SubstituteLoggerFactory", "org.slf4j.helpers", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_OrgSlf4jHelpersSubstituteLoggerFactory;
}

@end

void OrgSlf4jHelpersSubstituteLoggerFactory_init(OrgSlf4jHelpersSubstituteLoggerFactory *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->loggers_, new_JavaUtilConcurrentConcurrentHashMap_init());
}

OrgSlf4jHelpersSubstituteLoggerFactory *new_OrgSlf4jHelpersSubstituteLoggerFactory_init() {
  J2OBJC_NEW_IMPL(OrgSlf4jHelpersSubstituteLoggerFactory, init)
}

OrgSlf4jHelpersSubstituteLoggerFactory *create_OrgSlf4jHelpersSubstituteLoggerFactory_init() {
  J2OBJC_CREATE_IMPL(OrgSlf4jHelpersSubstituteLoggerFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSlf4jHelpersSubstituteLoggerFactory)
