//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/Test.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Test.h"
#include "com/google/common/eventbus/EventBus.h"
#include "com/google/common/eventbus/Subscribe.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Random.h"
#include "java/util/UUID.h"

@interface Test () {
 @public
  ComGoogleCommonEventbusEventBus *internalEventBus_;
  id<Test_OperationListener> listener_;
}

- (void)doPerformOperationWithNSString:(NSString *)operationId;

@end

J2OBJC_FIELD_SETTER(Test, internalEventBus_, ComGoogleCommonEventbusEventBus *)
J2OBJC_FIELD_SETTER(Test, listener_, id<Test_OperationListener>)

__attribute__((unused)) static void Test_doPerformOperationWithNSString_(Test *self, NSString *operationId);

@interface Test_OperationListener : NSObject

@end

@interface Test_OperationCanceled () {
 @public
  NSString *operationId_;
  NSString *reason_;
}

@end

J2OBJC_FIELD_SETTER(Test_OperationCanceled, operationId_, NSString *)
J2OBJC_FIELD_SETTER(Test_OperationCanceled, reason_, NSString *)

@interface Test_1 : NSObject {
 @public
  Test *this$0_;
  NSString *val$operationId_;
}

- (instancetype)initWithTest:(Test *)outer$
                withNSString:(NSString *)capture$0;

- (void)onEventWithTest_OperationCanceled:(Test_OperationCanceled *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(Test_1)

__attribute__((unused)) static void Test_1_initWithTest_withNSString_(Test_1 *self, Test *outer$, NSString *capture$0);

__attribute__((unused)) static Test_1 *new_Test_1_initWithTest_withNSString_(Test *outer$, NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static Test_1 *create_Test_1_initWithTest_withNSString_(Test *outer$, NSString *capture$0);

__attribute__((unused)) static IOSObjectArray *Test_1__Annotations$0();

@interface Test_2 : NSObject < Test_OperationListener >

- (instancetype)init;

- (void)onOperationSucceededWithNSString:(NSString *)operationId;

- (void)onOperationCanceledWithNSString:(NSString *)operationId
                           withNSString:(NSString *)reason;

@end

J2OBJC_EMPTY_STATIC_INIT(Test_2)

__attribute__((unused)) static void Test_2_init(Test_2 *self);

__attribute__((unused)) static Test_2 *new_Test_2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Test_2 *create_Test_2_init();

#line 1 "./src/Test.java"


#line 7
@implementation Test


#line 40
- (instancetype)initWithTest_OperationListener:(id<Test_OperationListener>)listener {
  Test_initWithTest_OperationListener_(self, listener);
  return self;
}


#line 44
- (void)performOperation {
  Test_doPerformOperationWithNSString_(self, [((JavaUtilUUID *) nil_chk(JavaUtilUUID_randomUUID())) description]);
}

- (void)doPerformOperationWithNSString:(NSString *)operationId {
  Test_doPerformOperationWithNSString_(self, operationId);
}


#line 73
+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  Test_mainWithNSStringArray_(args);
}

- (void)dealloc {
  RELEASE_(internalEventBus_);
  RELEASE_(listener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithTest_OperationListener:);
  methods[1].selector = @selector(performOperation);
  methods[2].selector = @selector(doPerformOperationWithNSString:);
  methods[3].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "internalEventBus_", "LComGoogleCommonEventbusEventBus;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "listener_", "LTest_OperationListener;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LTest_OperationListener;", "doPerformOperation", "LNSString;", "main", "[LNSString;", "LTest_OperationListener;LTest_OperationCanceled;" };
  static const J2ObjcClassInfo _Test = { "Test", NULL, ptrTable, methods, fields, 7, 0x1, 4, 2, -1, 5, -1, -1, -1 };
  return &_Test;
}

@end


#line 40
void Test_initWithTest_OperationListener_(Test *self, id<Test_OperationListener> listener) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->internalEventBus_, new_ComGoogleCommonEventbusEventBus_init());
  
#line 41
  JreStrongAssign(&self->listener_, listener);
}


#line 40
Test *new_Test_initWithTest_OperationListener_(id<Test_OperationListener> listener) {
  J2OBJC_NEW_IMPL(Test, initWithTest_OperationListener_, listener)
}


#line 40
Test *create_Test_initWithTest_OperationListener_(id<Test_OperationListener> listener) {
  J2OBJC_CREATE_IMPL(Test, initWithTest_OperationListener_, listener)
}


#line 48
void Test_doPerformOperationWithNSString_(Test *self, NSString *operationId) {
  id eventBusSubscriber = create_Test_1_initWithTest_withNSString_(self, operationId);
  
#line 60
  [((ComGoogleCommonEventbusEventBus *) nil_chk(self->internalEventBus_)) register__WithId:eventBusSubscriber];
  @try {
    JavaLangThread_sleepWithLong_(500);
  }
  @catch (
#line 63
  JavaLangInterruptedException *issue) {
  }
  
#line 64
  jint percentage = [(create_JavaUtilRandom_init()) nextIntWithInt:100];
  if (percentage > 50) {
    [self->internalEventBus_ postWithId:create_Test_OperationCanceled_initWithTest_withNSString_withNSString_(self, operationId, NSString_java_formatWithNSString_withNSObjectArray_(
#line 67
    @"such a bad luck!... (value was %d)", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(percentage) } count:1 type:NSObject_class_()]))];
  }
  else {
    
#line 69
    [((id<Test_OperationListener>) nil_chk(self->listener_)) onOperationSucceededWithNSString:operationId];
  }
}


#line 73
void Test_mainWithNSStringArray_(IOSObjectArray *args) {
  Test_initialize();
  
#line 74
  Test *test = create_Test_initWithTest_OperationListener_(create_Test_2_init());
  
#line 85
  for (jint i = 0; i < 50; i++) {
    [test performOperation];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Test)

#line 1 "./src/Test.java"


#line 9
@implementation Test_OperationListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onOperationSucceededWithNSString:);
  methods[1].selector = @selector(onOperationCanceledWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onOperationSucceeded", "LNSString;", "onOperationCanceled", "LNSString;LNSString;", "LTest;" };
  static const J2ObjcClassInfo _Test_OperationListener = { "OperationListener", NULL, ptrTable, methods, NULL, 7, 0x609, 2, 0, 4, -1, -1, -1, -1 };
  return &_Test_OperationListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(Test_OperationListener)

#line 1 "./src/Test.java"


#line 17
@implementation Test_OperationCanceled


#line 22
- (instancetype)initWithTest:(Test *)outer$
                withNSString:(NSString *)operationId
                withNSString:(NSString *)reason {
  Test_OperationCanceled_initWithTest_withNSString_withNSString_(self, outer$, operationId, reason);
  return self;
}


#line 27
- (NSString *)getOperationId {
  return operationId_;
}

- (NSString *)getReason {
  return reason_;
}

- (void)dealloc {
  RELEASE_(operationId_);
  RELEASE_(reason_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithTest:withNSString:withNSString:);
  methods[1].selector = @selector(getOperationId);
  methods[2].selector = @selector(getReason);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "operationId_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "reason_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "LTest;" };
  static const J2ObjcClassInfo _Test_OperationCanceled = { "OperationCanceled", NULL, ptrTable, methods, fields, 7, 0x1, 3, 2, 1, -1, -1, -1, -1 };
  return &_Test_OperationCanceled;
}

@end


#line 22
void Test_OperationCanceled_initWithTest_withNSString_withNSString_(Test_OperationCanceled *self, Test *outer$, NSString *operationId, NSString *reason) {
  NSObject_init(self);
  
#line 23
  JreStrongAssign(&self->operationId_, operationId);
  JreStrongAssign(&self->reason_, reason);
}


#line 22
Test_OperationCanceled *new_Test_OperationCanceled_initWithTest_withNSString_withNSString_(Test *outer$, NSString *operationId, NSString *reason) {
  J2OBJC_NEW_IMPL(Test_OperationCanceled, initWithTest_withNSString_withNSString_, outer$, operationId, reason)
}


#line 22
Test_OperationCanceled *create_Test_OperationCanceled_initWithTest_withNSString_withNSString_(Test *outer$, NSString *operationId, NSString *reason) {
  J2OBJC_CREATE_IMPL(Test_OperationCanceled, initWithTest_withNSString_withNSString_, outer$, operationId, reason)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Test_OperationCanceled)

#line 1 "./src/Test.java"

@implementation Test_1

- (instancetype)initWithTest:(Test *)outer$
                withNSString:(NSString *)capture$0 {
  Test_1_initWithTest_withNSString_(self, outer$, capture$0);
  return self;
}


#line 52
- (void)onEventWithTest_OperationCanceled:(Test_OperationCanceled *)event {
  if ([((NSString *) nil_chk([((Test_OperationCanceled *) nil_chk(event)) getOperationId])) isEqual:val$operationId_]) {
    [((ComGoogleCommonEventbusEventBus *) nil_chk(this$0_->internalEventBus_)) unregisterWithId:self];
    [((id<Test_OperationListener>) nil_chk(this$0_->listener_)) onOperationCanceledWithNSString:val$operationId_ withNSString:[event getReason]];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$operationId_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, 2, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithTest:withNSString:);
  methods[1].selector = @selector(onEventWithTest_OperationCanceled:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$operationId_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onEvent", "LTest_OperationCanceled;", (void *)&Test_1__Annotations$0, "LTest;", "doPerformOperationWithNSString:" };
  static const J2ObjcClassInfo _Test_1 = { "", NULL, ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_Test_1;
}

@end

void Test_1_initWithTest_withNSString_(Test_1 *self, Test *outer$, NSString *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$operationId_, capture$0);
  NSObject_init(self);
}

Test_1 *new_Test_1_initWithTest_withNSString_(Test *outer$, NSString *capture$0) {
  J2OBJC_NEW_IMPL(Test_1, initWithTest_withNSString_, outer$, capture$0)
}

Test_1 *create_Test_1_initWithTest_withNSString_(Test *outer$, NSString *capture$0) {
  J2OBJC_CREATE_IMPL(Test_1, initWithTest_withNSString_, outer$, capture$0)
}

IOSObjectArray *Test_1__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_ComGoogleCommonEventbusSubscribe() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

#line 1 "./src/Test.java"

@implementation Test_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Test_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 76
- (void)onOperationSucceededWithNSString:(NSString *)operationId {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"Operation ", operationId, @" is successful! :)")];
}

- (void)onOperationCanceledWithNSString:(NSString *)operationId
                           withNSString:(NSString *)reason {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$$", @"Operation ", operationId, @" failed due to ", reason, @"... :/")];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onOperationSucceededWithNSString:);
  methods[2].selector = @selector(onOperationCanceledWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onOperationSucceeded", "LNSString;", "onOperationCanceled", "LNSString;LNSString;", "LTest;", "mainWithNSStringArray:" };
  static const J2ObjcClassInfo _Test_2 = { "", NULL, ptrTable, methods, NULL, 7, 0x8008, 3, 0, 4, -1, 5, -1, -1 };
  return &_Test_2;
}

@end

void Test_2_init(Test_2 *self) {
  NSObject_init(self);
}

Test_2 *new_Test_2_init() {
  J2OBJC_NEW_IMPL(Test_2, init)
}

Test_2 *create_Test_2_init() {
  J2OBJC_CREATE_IMPL(Test_2, init)
}
