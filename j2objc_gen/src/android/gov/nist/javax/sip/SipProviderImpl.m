//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/SipProviderImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/core/net/AddressResolver.h"
#include "android/gov/nist/javax/sip/DialogTimeoutEvent.h"
#include "android/gov/nist/javax/sip/EventScanner.h"
#include "android/gov/nist/javax/sip/EventWrapper.h"
#include "android/gov/nist/javax/sip/ListeningPointImpl.h"
#include "android/gov/nist/javax/sip/SIPConstants.h"
#include "android/gov/nist/javax/sip/SipProviderImpl.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/Utils.h"
#include "android/gov/nist/javax/sip/address/RouterExt.h"
#include "android/gov/nist/javax/sip/header/CallID.h"
#include "android/gov/nist/javax/sip/header/RequestLine.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/message/SIPRequest.h"
#include "android/gov/nist/javax/sip/message/SIPResponse.h"
#include "android/gov/nist/javax/sip/stack/HopImpl.h"
#include "android/gov/nist/javax/sip/stack/MessageChannel.h"
#include "android/gov/nist/javax/sip/stack/MessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/SIPClientTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPDialog.h"
#include "android/gov/nist/javax/sip/stack/SIPDialogErrorEvent.h"
#include "android/gov/nist/javax/sip/stack/SIPServerTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionErrorEvent.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/javax/sip/ClientTransaction.h"
#include "android/javax/sip/Dialog.h"
#include "android/javax/sip/DialogState.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "android/javax/sip/ListeningPoint.h"
#include "android/javax/sip/ObjectInUseException.h"
#include "android/javax/sip/RequestEvent.h"
#include "android/javax/sip/ResponseEvent.h"
#include "android/javax/sip/ServerTransaction.h"
#include "android/javax/sip/SipException.h"
#include "android/javax/sip/SipListener.h"
#include "android/javax/sip/SipStack.h"
#include "android/javax/sip/Timeout.h"
#include "android/javax/sip/TimeoutEvent.h"
#include "android/javax/sip/Transaction.h"
#include "android/javax/sip/TransactionAlreadyExistsException.h"
#include "android/javax/sip/TransactionState.h"
#include "android/javax/sip/TransactionUnavailableException.h"
#include "android/javax/sip/address/Hop.h"
#include "android/javax/sip/address/Router.h"
#include "android/javax/sip/header/CallIdHeader.h"
#include "android/javax/sip/message/Request.h"
#include "android/javax/sip/message/Response.h"
#include "java/io/IOException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/NullPointerException.h"
#include "java/text/ParseException.h"
#include "java/util/Collection.h"
#include "java/util/EventObject.h"
#include "java/util/Iterator.h"
#include "java/util/TooManyListenersException.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface AndroidGovNistJavaxSipSipProviderImpl () {
 @public
  id<AndroidJavaxSipSipListener> sipListener_;
  JavaUtilConcurrentConcurrentHashMap *listeningPoints_;
  jboolean automaticDialogSupportEnabled_;
  jboolean dialogErrorsAutomaticallyHandled_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipSipProviderImpl, sipListener_, id<AndroidJavaxSipSipListener>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipSipProviderImpl, listeningPoints_, JavaUtilConcurrentConcurrentHashMap *)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipSipProviderImpl_get_logger();
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipSipProviderImpl_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipSipProviderImpl, logger, id<OrgSlf4jLogger>)

__attribute__((unused)) static void AndroidGovNistJavaxSipSipProviderImpl_init(AndroidGovNistJavaxSipSipProviderImpl *self);

__attribute__((unused)) static AndroidGovNistJavaxSipSipProviderImpl *new_AndroidGovNistJavaxSipSipProviderImpl_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipSipProviderImpl *create_AndroidGovNistJavaxSipSipProviderImpl_init();

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipSipProviderImpl)

@implementation AndroidGovNistJavaxSipSipProviderImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipSipProviderImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)stop {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipProviderImpl_logger)) debugWithNSString:@"Exiting provider"];
  for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(listeningPoints_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    AndroidGovNistJavaxSipListeningPointImpl *listeningPoint = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk([it next], [AndroidGovNistJavaxSipListeningPointImpl class]);
    [((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(listeningPoint)) removeSipProvider];
  }
  [((AndroidGovNistJavaxSipEventScanner *) nil_chk(self->eventScanner_)) stop];
}

- (id<AndroidJavaxSipListeningPoint>)getListeningPointWithNSString:(NSString *)transport {
  if (transport == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Null transport param");
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->listeningPoints_)) getWithId:[transport uppercaseString]];
}

- (void)handleEventWithJavaUtilEventObject:(JavaUtilEventObject *)sipEvent
withAndroidGovNistJavaxSipStackSIPTransaction:(id<AndroidGovNistJavaxSipStackSIPTransaction>)transaction {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipProviderImpl_logger)) debugWithNSString:JreStrcat("$@$@$@$@", @"handleEvent ", sipEvent, @"currentTransaction = ", transaction, @"this.sipListener = ", [self getSipListener], @"sipEvent.source = ", [((JavaUtilEventObject *) nil_chk(sipEvent)) getSource])];
  if ([sipEvent isKindOfClass:[AndroidJavaxSipRequestEvent class]]) {
    id<AndroidJavaxSipDialog> dialog = [((AndroidJavaxSipRequestEvent *) cast_chk(sipEvent, [AndroidJavaxSipRequestEvent class])) getDialog];
    [AndroidGovNistJavaxSipSipProviderImpl_logger debugWithNSString:JreStrcat("$@", @"Dialog = ", dialog)];
  }
  else if ([sipEvent isKindOfClass:[AndroidJavaxSipResponseEvent class]]) {
    id<AndroidJavaxSipDialog> dialog = [((AndroidJavaxSipResponseEvent *) cast_chk(sipEvent, [AndroidJavaxSipResponseEvent class])) getDialog];
    [AndroidGovNistJavaxSipSipProviderImpl_logger debugWithNSString:JreStrcat("$@", @"Dialog = ", dialog)];
  }
  AndroidGovNistJavaxSipEventWrapper *eventWrapper = create_AndroidGovNistJavaxSipEventWrapper_initWithJavaUtilEventObject_withAndroidGovNistJavaxSipStackSIPTransaction_(sipEvent, transaction);
  if (![((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) isReEntrantListener]) {
    [((AndroidGovNistJavaxSipEventScanner *) nil_chk(self->eventScanner_)) addEventWithAndroidGovNistJavaxSipEventWrapper:eventWrapper];
  }
  else {
    [((AndroidGovNistJavaxSipEventScanner *) nil_chk(self->eventScanner_)) deliverEventWithAndroidGovNistJavaxSipEventWrapper:eventWrapper];
  }
}

- (instancetype)initWithAndroidGovNistJavaxSipSipStackImpl:(AndroidGovNistJavaxSipSipStackImpl *)sipStack {
  AndroidGovNistJavaxSipSipProviderImpl_initWithAndroidGovNistJavaxSipSipStackImpl_(self, sipStack);
  return self;
}

- (id)java_clone {
  @throw create_JavaLangCloneNotSupportedException_init();
}

- (void)addSipListenerWithAndroidJavaxSipSipListener:(id<AndroidJavaxSipSipListener>)sipListener {
  if (((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_))->sipListener_ == nil) {
    JreStrongAssign(&sipStack_->sipListener_, sipListener);
  }
  else if (sipStack_->sipListener_ != sipListener) {
    @throw create_JavaUtilTooManyListenersException_initWithNSString_(@"Stack already has a listener. Only one listener per stack allowed");
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipProviderImpl_logger)) debugWithNSString:JreStrcat("$@", @"add SipListener ", sipListener)];
  JreStrongAssign(&self->sipListener_, sipListener);
}

- (id<AndroidJavaxSipListeningPoint>)getListeningPoint {
  if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->listeningPoints_)) size] > 0) return [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->listeningPoints_)) values])) iterator])) next];
  else return nil;
}

- (id<AndroidJavaxSipHeaderCallIdHeader>)getNewCallId {
  NSString *callId = [((AndroidGovNistJavaxSipUtils *) nil_chk(AndroidGovNistJavaxSipUtils_getInstance())) generateCallIdentifierWithNSString:[((id<AndroidJavaxSipListeningPoint>) nil_chk([self getListeningPoint])) getIPAddress]];
  AndroidGovNistJavaxSipHeaderCallID *callid = create_AndroidGovNistJavaxSipHeaderCallID_init();
  @try {
    [callid setCallIdWithNSString:callId];
  }
  @catch (JavaTextParseException *ex) {
  }
  return callid;
}

- (id<AndroidGovNistJavaxSipStackSIPClientTransaction>)createClientTransactionWithAndroidJavaxSipMessageRequest:(id<AndroidJavaxSipMessageRequest>)request
                                                                                  withAndroidJavaxSipAddressHop:(id<AndroidJavaxSipAddressHop>)hop {
  if (request == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null request");
  if (hop == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null hop");
  if (![((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) isAlive]) @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_(@"Stack is stopped");
  AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class]);
  if ([sipRequest getTransaction] != nil) @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_(@"Transaction already assigned to request");
  if ([((NSString *) nil_chk([sipRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_ACK]) {
    @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_(JreStrcat("$$", @"Cannot create client transaction for  ", AndroidJavaxSipMessageRequest_ACK));
  }
  if ([sipRequest getTopmostVia] == nil) {
    NSString *transport = nil;
    transport = [hop getTransport];
    if (transport == nil) transport = @"udp";
    AndroidGovNistJavaxSipListeningPointImpl *lp = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk([self getListeningPointWithNSString:transport], [AndroidGovNistJavaxSipListeningPointImpl class]);
    if (lp == nil) {
      lp = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk(IOSObjectArray_Get(nil_chk([self getListeningPoints]), 0), [AndroidGovNistJavaxSipListeningPointImpl class]);
    }
    AndroidGovNistJavaxSipHeaderVia *via = [((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(lp)) getViaHeader];
    [sipRequest setHeaderWithAndroidJavaxSipHeaderHeader:via];
  }
  @try {
    [sipRequest checkHeaders];
  }
  @catch (JavaTextParseException *ex) {
    @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_withNSException_([((JavaTextParseException *) nil_chk(ex)) getMessage], ex);
  }
  if ([((AndroidGovNistJavaxSipHeaderVia *) nil_chk([sipRequest getTopmostVia])) getBranch] != nil && [((NSString *) nil_chk([((AndroidGovNistJavaxSipHeaderVia *) nil_chk([sipRequest getTopmostVia])) getBranch])) hasPrefix:AndroidGovNistJavaxSipSIPConstants_BRANCH_MAGIC_COOKIE] && [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) findTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:sipRequest withBoolean:false] != nil) {
    @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_(@"Transaction already exists!");
  }
  if ([((NSString *) nil_chk([sipRequest getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_CANCEL]) {
    id<AndroidGovNistJavaxSipStackSIPClientTransaction> ct = (id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) findCancelTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest withBoolean:false], AndroidGovNistJavaxSipStackSIPClientTransaction_class_());
    if (ct != nil) {
      id<AndroidGovNistJavaxSipStackSIPClientTransaction> retval = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) createClientTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest withAndroidGovNistJavaxSipStackMessageChannel:[ct getMessageChannel]];
      [((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk((retval))) addEventListenerWithAndroidGovNistJavaxSipStackSIPTransactionEventListener:self];
      [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) addTransactionWithAndroidGovNistJavaxSipStackSIPClientTransaction:retval];
      if ([ct getDialog] != nil) {
        [((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) nil_chk(retval)) setDialogWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *) cast_chk([ct getDialog], [AndroidGovNistJavaxSipStackSIPDialog class]) withNSString:[sipRequest getDialogIdWithBoolean:false]];
      }
      return retval;
    }
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipProviderImpl_logger)) debugWithNSString:JreStrcat("$$$", @"could not find existing transaction for ", [sipRequest getFirstLine], @" creating a new one ")];
  NSString *transport = [hop getTransport];
  AndroidGovNistJavaxSipListeningPointImpl *listeningPoint = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk([self getListeningPointWithNSString:transport], [AndroidGovNistJavaxSipListeningPointImpl class]);
  NSString *dialogId = [sipRequest getDialogIdWithBoolean:false];
  AndroidGovNistJavaxSipStackSIPDialog *dialog = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getDialogWithNSString:dialogId];
  if (dialog != nil && [dialog getState] == JreLoadStatic(AndroidJavaxSipDialogState, TERMINATED)) {
    [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) removeDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog];
  }
  @try {
    NSString *branchId = nil;
    if ([((AndroidGovNistJavaxSipHeaderVia *) nil_chk([sipRequest getTopmostVia])) getBranch] == nil || ![((NSString *) nil_chk([((AndroidGovNistJavaxSipHeaderVia *) nil_chk([sipRequest getTopmostVia])) getBranch])) hasPrefix:AndroidGovNistJavaxSipSIPConstants_BRANCH_MAGIC_COOKIE] || [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) checkBranchId]) {
      branchId = [((AndroidGovNistJavaxSipUtils *) nil_chk(AndroidGovNistJavaxSipUtils_getInstance())) generateBranchId];
      [((AndroidGovNistJavaxSipHeaderVia *) nil_chk([sipRequest getTopmostVia])) setBranchWithNSString:branchId];
    }
    AndroidGovNistJavaxSipHeaderVia *topmostVia = [sipRequest getTopmostVia];
    if ([((AndroidGovNistJavaxSipHeaderVia *) nil_chk(topmostVia)) getTransport] == nil) [topmostVia setTransportWithNSString:transport];
    if ([topmostVia getPort] == -1) [topmostVia setPortWithInt:[((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(listeningPoint)) getPort]];
    branchId = [((AndroidGovNistJavaxSipHeaderVia *) nil_chk([sipRequest getTopmostVia])) getBranch];
    AndroidGovNistJavaxSipStackMessageChannel *messageChannel = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) createMessageChannelWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest withAndroidGovNistJavaxSipStackMessageProcessor:[((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(listeningPoint)) getMessageProcessor] withAndroidJavaxSipAddressHop:hop];
    id<AndroidGovNistJavaxSipStackSIPClientTransaction> ct = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) createClientTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest withAndroidGovNistJavaxSipStackMessageChannel:messageChannel];
    if (ct == nil) @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_(@"Cound not create tx");
    [ct setNextHopWithAndroidJavaxSipAddressHop:hop];
    [ct setOriginalRequestWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
    [ct setBranchWithNSString:branchId];
    if (AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_([sipRequest getMethod])) {
      if (dialog != nil) [ct setDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog withNSString:[sipRequest getDialogIdWithBoolean:false]];
      else if ([self isAutomaticDialogSupportEnabled]) {
        AndroidGovNistJavaxSipStackSIPDialog *sipDialog = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) createDialogWithAndroidGovNistJavaxSipStackSIPTransaction:ct];
        [ct setDialogWithAndroidGovNistJavaxSipStackSIPDialog:sipDialog withNSString:[sipRequest getDialogIdWithBoolean:false]];
      }
    }
    else {
      if (dialog != nil) {
        [ct setDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog withNSString:[sipRequest getDialogIdWithBoolean:false]];
      }
    }
    [ct addEventListenerWithAndroidGovNistJavaxSipStackSIPTransactionEventListener:self];
    return ct;
  }
  @catch (JavaIoIOException *ex) {
    @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_withNSException_(@"Could not resolve next hop or listening point unavailable! ", ex);
  }
  @catch (JavaTextParseException *ex) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
    @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_withNSException_(@"Unexpected Exception FIXME! ", ex);
  }
  @catch (AndroidJavaxSipInvalidArgumentException *ex) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
    @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_withNSException_(@"Unexpected Exception FIXME! ", ex);
  }
}

- (id<AndroidJavaxSipClientTransaction>)getNewClientTransactionWithAndroidJavaxSipMessageRequest:(id<AndroidJavaxSipMessageRequest>)request {
  id<AndroidJavaxSipAddressHop> hop = nil;
  @try {
    hop = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getNextHopWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class])];
    if (hop == nil) @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_(@"Cannot resolve next hop -- transaction unavailable");
  }
  @catch (AndroidJavaxSipSipException *ex) {
    @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_withNSException_(@"Cannot resolve next hop -- transaction unavailable", ex);
  }
  id<AndroidGovNistJavaxSipStackSIPClientTransaction> newClientTransaction = [self createClientTransactionWithAndroidJavaxSipMessageRequest:request withAndroidJavaxSipAddressHop:hop];
  [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) addTransactionWithAndroidGovNistJavaxSipStackSIPClientTransaction:newClientTransaction];
  return newClientTransaction;
}

- (id<AndroidJavaxSipServerTransaction>)getNewServerTransactionWithAndroidJavaxSipMessageRequest:(id<AndroidJavaxSipMessageRequest>)request {
  if (![((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) isAlive]) @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_(@"Stack is stopped");
  id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction = nil;
  AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class]);
  @try {
    [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) checkHeaders];
  }
  @catch (JavaTextParseException *ex) {
    @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_withNSException_([((JavaTextParseException *) nil_chk(ex)) getMessage], ex);
  }
  if ([((NSString *) nil_chk([((id<AndroidJavaxSipMessageRequest>) nil_chk(request)) getMethod])) isEqual:AndroidJavaxSipMessageRequest_ACK]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipProviderImpl_logger)) errorWithNSString:@"Creating server transaction for ACK -- makes no sense!"];
    @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_(@"Cannot create Server transaction for ACK ");
  }
  if ([((NSString *) nil_chk([sipRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_NOTIFY] && [sipRequest getFromTag] != nil && [sipRequest getToTag] == nil) {
    id<AndroidGovNistJavaxSipStackSIPClientTransaction> ct = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) findSubscribeTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest withAndroidGovNistJavaxSipListeningPointImpl:(AndroidGovNistJavaxSipListeningPointImpl *) cast_chk([self getListeningPoint], [AndroidGovNistJavaxSipListeningPointImpl class])];
    if (ct == nil && ![((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) isDeliverUnsolicitedNotify]) {
      @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_(@"Cannot find matching Subscription (and android.gov.nist.javax.sip.DELIVER_UNSOLICITED_NOTIFY not set)");
    }
  }
  if (![((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) acquireSem]) {
    @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_(@"Transaction not available -- could not acquire stack lock");
  }
  @try {
    if (AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_([sipRequest getMethod])) {
      if ([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) findTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class]) withBoolean:true] != nil) @throw create_AndroidJavaxSipTransactionAlreadyExistsException_initWithNSString_(@"server transaction already exists!");
      transaction = (id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check([((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class])) getTransaction], AndroidGovNistJavaxSipStackSIPServerTransaction_class_());
      if (transaction == nil) @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_(@"Transaction not available");
      if ([transaction getOriginalRequest] == nil) [transaction setOriginalRequestWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
      @try {
        [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) addTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
      }
      @catch (JavaIoIOException *ex) {
        @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_(@"Error sending provisional response");
      }
      [transaction addEventListenerWithAndroidGovNistJavaxSipStackSIPTransactionEventListener:self];
      if ([self isAutomaticDialogSupportEnabled]) {
        NSString *dialogId = [sipRequest getDialogIdWithBoolean:true];
        AndroidGovNistJavaxSipStackSIPDialog *dialog = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getDialogWithNSString:dialogId];
        if (dialog == nil) {
          dialog = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) createDialogWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
        }
        [transaction setDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog withNSString:[sipRequest getDialogIdWithBoolean:true]];
        if ([((NSString *) nil_chk([sipRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_INVITE] && [self isDialogErrorsAutomaticallyHandled]) {
          [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) putInMergeTableWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction withAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
        }
        [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(dialog)) addRouteWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
        if ([dialog getRemoteTag] != nil && [dialog getLocalTag] != nil) {
          [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(self->sipStack_)) putDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog];
        }
      }
    }
    else {
      if ([self isAutomaticDialogSupportEnabled]) {
        transaction = (id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) findTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class]) withBoolean:true], AndroidGovNistJavaxSipStackSIPServerTransaction_class_());
        if (transaction != nil) @throw create_AndroidJavaxSipTransactionAlreadyExistsException_initWithNSString_(@"Transaction exists! ");
        transaction = (id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check([((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class])) getTransaction], AndroidGovNistJavaxSipStackSIPServerTransaction_class_());
        if (transaction == nil) @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_(@"Transaction not available!");
        if ([transaction getOriginalRequest] == nil) [transaction setOriginalRequestWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
        @try {
          [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) addTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
        }
        @catch (JavaIoIOException *ex) {
          @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_(@"Could not send back provisional response!");
        }
        NSString *dialogId = [sipRequest getDialogIdWithBoolean:true];
        AndroidGovNistJavaxSipStackSIPDialog *dialog = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getDialogWithNSString:dialogId];
        if (dialog != nil) {
          [dialog addTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
          [dialog addRouteWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
          [transaction setDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog withNSString:[sipRequest getDialogIdWithBoolean:true]];
        }
      }
      else {
        transaction = (id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) findTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class]) withBoolean:true], AndroidGovNistJavaxSipStackSIPServerTransaction_class_());
        if (transaction != nil) @throw create_AndroidJavaxSipTransactionAlreadyExistsException_initWithNSString_(@"Transaction exists! ");
        transaction = (id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check([((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class])) getTransaction], AndroidGovNistJavaxSipStackSIPServerTransaction_class_());
        if (transaction != nil) {
          if ([transaction getOriginalRequest] == nil) [transaction setOriginalRequestWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
          [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) mapTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
          NSString *dialogId = [sipRequest getDialogIdWithBoolean:true];
          AndroidGovNistJavaxSipStackSIPDialog *dialog = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getDialogWithNSString:dialogId];
          if (dialog != nil) {
            [dialog addTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
            [dialog addRouteWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
            [transaction setDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog withNSString:[sipRequest getDialogIdWithBoolean:true]];
          }
          return transaction;
        }
        else {
          AndroidGovNistJavaxSipStackMessageChannel *mc = (AndroidGovNistJavaxSipStackMessageChannel *) cast_chk([sipRequest getMessageChannel], [AndroidGovNistJavaxSipStackMessageChannel class]);
          transaction = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) createServerTransactionWithAndroidGovNistJavaxSipStackMessageChannel:mc];
          if (transaction == nil) @throw create_AndroidJavaxSipTransactionUnavailableException_initWithNSString_(@"Transaction unavailable -- too many servrer transactions");
          [transaction setOriginalRequestWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
          [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) mapTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
          NSString *dialogId = [sipRequest getDialogIdWithBoolean:true];
          AndroidGovNistJavaxSipStackSIPDialog *dialog = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getDialogWithNSString:dialogId];
          if (dialog != nil) {
            [dialog addTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
            [dialog addRouteWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
            [transaction setDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog withNSString:[sipRequest getDialogIdWithBoolean:true]];
          }
          return transaction;
        }
      }
    }
    return transaction;
  }
  @finally {
    [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) releaseSem];
  }
}

- (id<AndroidJavaxSipSipStack>)getSipStack {
  return self->sipStack_;
}

- (void)removeSipListenerWithAndroidJavaxSipSipListener:(id<AndroidJavaxSipSipListener>)sipListener {
  if (sipListener == [self getSipListener]) {
    JreStrongAssign(&self->sipListener_, nil);
  }
  jboolean found = false;
  for (id<JavaUtilIterator> it = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getSipProviders]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    AndroidGovNistJavaxSipSipProviderImpl *nextProvider = [it next];
    if ([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(nextProvider)) getSipListener] != nil) found = true;
  }
  if (!found) {
    JreStrongAssign(&((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_))->sipListener_, nil);
  }
}

- (void)sendRequestWithAndroidJavaxSipMessageRequest:(id<AndroidJavaxSipMessageRequest>)request {
  if (![((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) isAlive]) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Stack is stopped.");
  if ([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class])))) getRequestLine] != nil && [((NSString *) nil_chk([((id<AndroidJavaxSipMessageRequest>) nil_chk(request)) getMethod])) isEqual:AndroidJavaxSipMessageRequest_ACK]) {
    id<AndroidJavaxSipDialog> dialog = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getDialogWithNSString:[((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class])))) getDialogIdWithBoolean:false]];
    if (dialog != nil && [dialog getState] != nil) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipProviderImpl_logger)) warnWithNSString:JreStrcat("$@", @"Dialog exists -- you may want to use Dialog.sendAck() ", [dialog getState])];
    }
  }
  id<AndroidJavaxSipAddressHop> hop = [((id<AndroidJavaxSipAddressRouter>) nil_chk([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getRouterWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class])])) getNextHopWithAndroidJavaxSipMessageRequest:request];
  if (hop == nil) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"could not determine next hop!");
  AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class]);
  if ((![((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) isNullRequest]) && [sipRequest getTopmostVia] == nil) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Invalid SipRequest -- no via header!");
  @try {
    if (![sipRequest isNullRequest]) {
      AndroidGovNistJavaxSipHeaderVia *via = [sipRequest getTopmostVia];
      NSString *branch = [((AndroidGovNistJavaxSipHeaderVia *) nil_chk(via)) getBranch];
      if (branch == nil || ((jint) [branch length]) == 0) {
        [via setBranchWithNSString:[sipRequest getTransactionId]];
      }
    }
    AndroidGovNistJavaxSipStackMessageChannel *messageChannel = nil;
    if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->listeningPoints_)) containsKeyWithId:[((NSString *) nil_chk([hop getTransport])) uppercaseString]]) {
      messageChannel = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) createRawMessageChannelWithNSString:[((id<AndroidJavaxSipListeningPoint>) nil_chk([self getListeningPointWithNSString:[hop getTransport]])) getIPAddress] withInt:[((id<AndroidJavaxSipListeningPoint>) nil_chk([self getListeningPointWithNSString:[hop getTransport]])) getPort] withAndroidJavaxSipAddressHop:hop];
    }
    if (messageChannel != nil) {
      [messageChannel sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:sipRequest withAndroidJavaxSipAddressHop:hop];
    }
    else {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipProviderImpl_logger)) debugWithNSString:JreStrcat("$$$@", @"Could not create a message channel for ", [hop description], @" listeningPoints = ", self->listeningPoints_)];
      @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$$", @"Could not create a message channel for ", [hop description]));
    }
  }
  @catch (JavaIoIOException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipProviderImpl_logger)) errorWithNSString:@"IOException" withNSException:ex];
    @throw create_AndroidJavaxSipSipException_initWithNSString_withNSException_(@"IO Exception occured while Sending Request", ex);
  }
  @catch (JavaTextParseException *ex1) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex1);
  }
  @finally {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipProviderImpl_logger)) debugWithNSString:JreStrcat("$$$@", @"done sending ", [((id<AndroidJavaxSipMessageRequest>) nil_chk(request)) getMethod], @" to hop ", hop)];
  }
}

- (void)sendResponseWithAndroidJavaxSipMessageResponse:(id<AndroidJavaxSipMessageResponse>)response {
  if (![((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) isAlive]) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Stack is stopped");
  AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = (AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(response, [AndroidGovNistJavaxSipMessageSIPResponse class]);
  AndroidGovNistJavaxSipHeaderVia *via = [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) getTopmostVia];
  if (via == nil) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"No via header in response!");
  id<AndroidGovNistJavaxSipStackSIPServerTransaction> st = (id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) findTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *) cast_chk(response, [AndroidGovNistJavaxSipMessageSIPMessage class]) withBoolean:true], AndroidGovNistJavaxSipStackSIPServerTransaction_class_());
  if (st != nil && [st getInternalState] != AndroidJavaxSipTransactionState__TERMINATED && [self isAutomaticDialogSupportEnabled]) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Transaction exists -- cannot send response statelessly");
  }
  NSString *transport = [via getTransport];
  NSString *host = [via getReceived];
  if (host == nil) host = [via getHost];
  jint port = [via getRPort];
  if (port == -1) {
    port = [via getPort];
    if (port == -1) {
      if ([((NSString *) nil_chk(transport)) java_equalsIgnoreCase:@"TLS"] || [transport java_equalsIgnoreCase:@"SCTP-TLS"]) port = 5061;
      else port = 5060;
    }
  }
  if ([((NSString *) nil_chk(host)) java_indexOfString:@":"] > 0) if ([host java_indexOfString:@"["] < 0) host = JreStrcat("C$C", '[', host, ']');
  id<AndroidJavaxSipAddressHop> hop = [((id<AndroidGovNistCoreNetAddressResolver>) nil_chk([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getAddressResolver])) resolveAddressWithAndroidJavaxSipAddressHop:create_AndroidGovNistJavaxSipStackHopImpl_initWithNSString_withInt_withNSString_(host, port, transport)];
  @try {
    AndroidGovNistJavaxSipListeningPointImpl *listeningPoint = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk([self getListeningPointWithNSString:transport], [AndroidGovNistJavaxSipListeningPointImpl class]);
    if (listeningPoint == nil) @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$$", @"whoopsa daisy! no listening point found for transport ", transport));
    AndroidGovNistJavaxSipStackMessageChannel *messageChannel = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) createRawMessageChannelWithNSString:[((id<AndroidJavaxSipListeningPoint>) nil_chk([self getListeningPointWithNSString:[((id<AndroidJavaxSipAddressHop>) nil_chk(hop)) getTransport]])) getIPAddress] withInt:listeningPoint->port_ withAndroidJavaxSipAddressHop:hop];
    [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(messageChannel)) sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:sipResponse];
  }
  @catch (JavaIoIOException *ex) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_([((JavaIoIOException *) nil_chk(ex)) getMessage]);
  }
}

- (void)setListeningPointWithAndroidJavaxSipListeningPoint:(id<AndroidJavaxSipListeningPoint>)listeningPoint {
  @synchronized(self) {
    if (listeningPoint == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Null listening point");
    AndroidGovNistJavaxSipListeningPointImpl *lp = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk(listeningPoint, [AndroidGovNistJavaxSipListeningPointImpl class]);
    JreStrongAssign(&lp->sipProvider_, self);
    NSString *transport = [((NSString *) nil_chk([lp getTransport])) uppercaseString];
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->listeningPoints_)) clear];
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->listeningPoints_)) putWithId:transport withId:listeningPoint];
  }
}

- (id<AndroidJavaxSipDialog>)getNewDialogWithAndroidJavaxSipTransaction:(id<AndroidJavaxSipTransaction>)transaction {
  if (transaction == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Null transaction!");
  if (![((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) isAlive]) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Stack is stopped.");
  if ([self isAutomaticDialogSupportEnabled]) @throw create_AndroidJavaxSipSipException_initWithNSString_(@" Error - AUTOMATIC_DIALOG_SUPPORT is on");
  if (!AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_([((id<AndroidJavaxSipMessageRequest>) nil_chk([transaction getRequest])) getMethod])) @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$$", @"Dialog cannot be created for this method ", [((id<AndroidJavaxSipMessageRequest>) nil_chk([transaction getRequest])) getMethod]));
  AndroidGovNistJavaxSipStackSIPDialog *dialog = nil;
  id<AndroidGovNistJavaxSipStackSIPTransaction> sipTransaction = (id<AndroidGovNistJavaxSipStackSIPTransaction>) cast_check(transaction, AndroidGovNistJavaxSipStackSIPTransaction_class_());
  if ([AndroidJavaxSipServerTransaction_class_() isInstance:transaction]) {
    id<AndroidGovNistJavaxSipStackSIPServerTransaction> st = (id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check(transaction, AndroidGovNistJavaxSipStackSIPServerTransaction_class_());
    id<AndroidJavaxSipMessageResponse> response = [st getLastResponse];
    if (response != nil) {
      if ([response getStatusCode] != 100) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Cannot set dialog after response has been sent");
    }
    AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([transaction getRequest], [AndroidGovNistJavaxSipMessageSIPRequest class]);
    NSString *dialogId = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getDialogIdWithBoolean:true];
    dialog = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getDialogWithNSString:dialogId];
    if (dialog == nil) {
      dialog = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) createDialogWithAndroidGovNistJavaxSipStackSIPTransaction:(id<AndroidGovNistJavaxSipStackSIPTransaction>) cast_check(transaction, AndroidGovNistJavaxSipStackSIPTransaction_class_())];
      [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(dialog)) addTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:sipTransaction];
      [dialog addRouteWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
      [sipTransaction setDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog withNSString:nil];
    }
    else {
      [sipTransaction setDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog withNSString:[sipRequest getDialogIdWithBoolean:true]];
    }
    if ([((NSString *) nil_chk([sipRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_INVITE] && [self isDialogErrorsAutomaticallyHandled]) {
      [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) putInMergeTableWithAndroidGovNistJavaxSipStackSIPServerTransaction:st withAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
    }
  }
  else {
    id<AndroidGovNistJavaxSipStackSIPClientTransaction> sipClientTx = (id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(transaction, AndroidGovNistJavaxSipStackSIPClientTransaction_class_());
    AndroidGovNistJavaxSipMessageSIPResponse *response = [sipClientTx getLastResponse];
    if (response == nil) {
      AndroidGovNistJavaxSipMessageSIPRequest *request = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([sipClientTx getRequest], [AndroidGovNistJavaxSipMessageSIPRequest class]);
      NSString *dialogId = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(request)) getDialogIdWithBoolean:false];
      dialog = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getDialogWithNSString:dialogId];
      if (dialog != nil) {
        @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Dialog already exists!");
      }
      else {
        dialog = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) createDialogWithAndroidGovNistJavaxSipStackSIPTransaction:sipTransaction];
      }
      [sipClientTx setDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog withNSString:nil];
    }
    else {
      @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Cannot call this method after response is received!");
    }
  }
  [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(dialog)) addEventListenerWithAndroidGovNistJavaxSipStackSIPDialogEventListener:self];
  return dialog;
}

- (void)transactionErrorEventWithAndroidGovNistJavaxSipStackSIPTransactionErrorEvent:(AndroidGovNistJavaxSipStackSIPTransactionErrorEvent *)transactionErrorEvent {
  id<AndroidGovNistJavaxSipStackSIPTransaction> transaction = (id<AndroidGovNistJavaxSipStackSIPTransaction>) cast_check([((AndroidGovNistJavaxSipStackSIPTransactionErrorEvent *) nil_chk(transactionErrorEvent)) getSource], AndroidGovNistJavaxSipStackSIPTransaction_class_());
  if ([transactionErrorEvent getErrorID] == AndroidGovNistJavaxSipStackSIPTransactionErrorEvent_TRANSPORT_ERROR) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipProviderImpl_logger)) debugWithNSString:JreStrcat("$@", @"TransportError occured on ", transaction)];
    id errorObject = [transactionErrorEvent getSource];
    AndroidJavaxSipTimeout *timeout = JreLoadStatic(AndroidJavaxSipTimeout, TRANSACTION);
    AndroidJavaxSipTimeoutEvent *ev = nil;
    if ([AndroidGovNistJavaxSipStackSIPServerTransaction_class_() isInstance:errorObject]) {
      ev = create_AndroidJavaxSipTimeoutEvent_initWithId_withAndroidJavaxSipServerTransaction_withAndroidJavaxSipTimeout_(self, (id<AndroidJavaxSipServerTransaction>) cast_check(errorObject, AndroidJavaxSipServerTransaction_class_()), timeout);
    }
    else {
      id<AndroidGovNistJavaxSipStackSIPClientTransaction> clientTx = (id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(errorObject, AndroidGovNistJavaxSipStackSIPClientTransaction_class_());
      id<AndroidJavaxSipAddressHop> hop = [((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) nil_chk(clientTx)) getNextHop];
      if ([AndroidGovNistJavaxSipAddressRouterExt_class_() isInstance:[((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getRouter]]) {
        [((id<AndroidGovNistJavaxSipAddressRouterExt>) nil_chk(((id<AndroidGovNistJavaxSipAddressRouterExt>) cast_check([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getRouter], AndroidGovNistJavaxSipAddressRouterExt_class_())))) transactionTimeoutWithAndroidJavaxSipAddressHop:hop];
      }
      ev = create_AndroidJavaxSipTimeoutEvent_initWithId_withAndroidJavaxSipClientTransaction_withAndroidJavaxSipTimeout_(self, (id<AndroidJavaxSipClientTransaction>) cast_check(errorObject, AndroidJavaxSipClientTransaction_class_()), timeout);
    }
    [self handleEventWithJavaUtilEventObject:ev withAndroidGovNistJavaxSipStackSIPTransaction:(id<AndroidGovNistJavaxSipStackSIPTransaction>) cast_check(errorObject, AndroidGovNistJavaxSipStackSIPTransaction_class_())];
  }
  else if ([transactionErrorEvent getErrorID] == AndroidGovNistJavaxSipStackSIPTransactionErrorEvent_TIMEOUT_ERROR) {
    id errorObject = [transactionErrorEvent getSource];
    AndroidJavaxSipTimeout *timeout = JreLoadStatic(AndroidJavaxSipTimeout, TRANSACTION);
    AndroidJavaxSipTimeoutEvent *ev = nil;
    if ([AndroidGovNistJavaxSipStackSIPServerTransaction_class_() isInstance:errorObject]) {
      ev = create_AndroidJavaxSipTimeoutEvent_initWithId_withAndroidJavaxSipServerTransaction_withAndroidJavaxSipTimeout_(self, (id<AndroidJavaxSipServerTransaction>) cast_check(errorObject, AndroidJavaxSipServerTransaction_class_()), timeout);
    }
    else {
      id<AndroidGovNistJavaxSipStackSIPClientTransaction> clientTx = (id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(errorObject, AndroidGovNistJavaxSipStackSIPClientTransaction_class_());
      id<AndroidJavaxSipAddressHop> hop = [((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) nil_chk(clientTx)) getNextHop];
      if ([AndroidGovNistJavaxSipAddressRouterExt_class_() isInstance:[((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getRouter]]) {
        [((id<AndroidGovNistJavaxSipAddressRouterExt>) nil_chk(((id<AndroidGovNistJavaxSipAddressRouterExt>) cast_check([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getRouter], AndroidGovNistJavaxSipAddressRouterExt_class_())))) transactionTimeoutWithAndroidJavaxSipAddressHop:hop];
      }
      ev = create_AndroidJavaxSipTimeoutEvent_initWithId_withAndroidJavaxSipClientTransaction_withAndroidJavaxSipTimeout_(self, (id<AndroidJavaxSipClientTransaction>) cast_check(errorObject, AndroidJavaxSipClientTransaction_class_()), timeout);
    }
    [self handleEventWithJavaUtilEventObject:ev withAndroidGovNistJavaxSipStackSIPTransaction:(id<AndroidGovNistJavaxSipStackSIPTransaction>) cast_check(errorObject, AndroidGovNistJavaxSipStackSIPTransaction_class_())];
  }
  else if ([transactionErrorEvent getErrorID] == AndroidGovNistJavaxSipStackSIPTransactionErrorEvent_TIMEOUT_RETRANSMIT) {
    id errorObject = [transactionErrorEvent getSource];
    id<AndroidJavaxSipTransaction> tx = (id<AndroidJavaxSipTransaction>) cast_check(errorObject, AndroidJavaxSipTransaction_class_());
    if ([((id<AndroidJavaxSipTransaction>) nil_chk(tx)) getDialog] != nil) AndroidGovNistCoreInternalErrorHandler_handleExceptionWithNSString_withOrgSlf4jLogger_(@"Unexpected event !", AndroidGovNistJavaxSipSipProviderImpl_logger);
    AndroidJavaxSipTimeout *timeout = JreLoadStatic(AndroidJavaxSipTimeout, RETRANSMIT);
    AndroidJavaxSipTimeoutEvent *ev = nil;
    if ([AndroidGovNistJavaxSipStackSIPServerTransaction_class_() isInstance:errorObject]) {
      ev = create_AndroidJavaxSipTimeoutEvent_initWithId_withAndroidJavaxSipServerTransaction_withAndroidJavaxSipTimeout_(self, (id<AndroidJavaxSipServerTransaction>) cast_check(errorObject, AndroidJavaxSipServerTransaction_class_()), timeout);
    }
    else {
      ev = create_AndroidJavaxSipTimeoutEvent_initWithId_withAndroidJavaxSipClientTransaction_withAndroidJavaxSipTimeout_(self, (id<AndroidJavaxSipClientTransaction>) cast_check(errorObject, AndroidJavaxSipClientTransaction_class_()), timeout);
    }
    [self handleEventWithJavaUtilEventObject:ev withAndroidGovNistJavaxSipStackSIPTransaction:(id<AndroidGovNistJavaxSipStackSIPTransaction>) cast_check(errorObject, AndroidGovNistJavaxSipStackSIPTransaction_class_())];
  }
}

- (void)dialogErrorEventWithAndroidGovNistJavaxSipStackSIPDialogErrorEvent:(AndroidGovNistJavaxSipStackSIPDialogErrorEvent *)dialogErrorEvent {
  AndroidGovNistJavaxSipStackSIPDialog *sipDialog = (AndroidGovNistJavaxSipStackSIPDialog *) cast_chk([((AndroidGovNistJavaxSipStackSIPDialogErrorEvent *) nil_chk(dialogErrorEvent)) getSource], [AndroidGovNistJavaxSipStackSIPDialog class]);
  AndroidGovNistJavaxSipDialogTimeoutEvent_Reason *reason = JreLoadEnum(AndroidGovNistJavaxSipDialogTimeoutEvent_Reason, AckNotReceived);
  if ([dialogErrorEvent getErrorID] == AndroidGovNistJavaxSipStackSIPDialogErrorEvent_DIALOG_ACK_NOT_SENT_TIMEOUT) {
    reason = JreLoadEnum(AndroidGovNistJavaxSipDialogTimeoutEvent_Reason, AckNotSent);
  }
  else if ([dialogErrorEvent getErrorID] == AndroidGovNistJavaxSipStackSIPDialogErrorEvent_DIALOG_REINVITE_TIMEOUT) {
    reason = JreLoadEnum(AndroidGovNistJavaxSipDialogTimeoutEvent_Reason, ReInviteTimeout);
  }
  else if ([dialogErrorEvent getErrorID] == AndroidGovNistJavaxSipStackSIPDialogErrorEvent_EARLY_STATE_TIMEOUT) {
    reason = JreLoadEnum(AndroidGovNistJavaxSipDialogTimeoutEvent_Reason, EarlyStateTimeout);
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipProviderImpl_logger)) debugWithNSString:JreStrcat("$@", @"Dialog TimeoutError occured on ", sipDialog)];
  AndroidGovNistJavaxSipDialogTimeoutEvent *ev = create_AndroidGovNistJavaxSipDialogTimeoutEvent_initWithId_withAndroidJavaxSipDialog_withAndroidGovNistJavaxSipDialogTimeoutEvent_Reason_(self, sipDialog, reason);
  [ev setClientTransactionWithAndroidJavaxSipClientTransaction:[dialogErrorEvent getClientTransaction]];
  [self handleEventWithJavaUtilEventObject:ev withAndroidGovNistJavaxSipStackSIPTransaction:nil];
}

- (IOSObjectArray *)getListeningPoints {
  @synchronized(self) {
    IOSObjectArray *retval = [IOSObjectArray arrayWithLength:[((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->listeningPoints_)) size] type:AndroidGovNistJavaxSipListeningPointImpl_class_()];
    [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->listeningPoints_)) values])) toArrayWithNSObjectArray:retval];
    return retval;
  }
}

- (void)addListeningPointWithAndroidJavaxSipListeningPoint:(id<AndroidJavaxSipListeningPoint>)listeningPoint {
  @synchronized(self) {
    AndroidGovNistJavaxSipListeningPointImpl *lp = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk(listeningPoint, [AndroidGovNistJavaxSipListeningPointImpl class]);
    if (((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(lp))->sipProvider_ != nil && lp->sipProvider_ != self) @throw create_AndroidJavaxSipObjectInUseException_initWithNSString_(@"Listening point assigned to another provider");
    NSString *transport = [((NSString *) nil_chk([lp getTransport])) uppercaseString];
    if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->listeningPoints_)) containsKeyWithId:transport] && [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->listeningPoints_)) getWithId:transport] != listeningPoint) @throw create_AndroidJavaxSipObjectInUseException_initWithNSString_(@"Listening point already assigned for transport!");
    JreStrongAssign(&lp->sipProvider_, self);
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->listeningPoints_)) putWithId:transport withId:lp];
  }
}

- (void)removeListeningPointWithAndroidJavaxSipListeningPoint:(id<AndroidJavaxSipListeningPoint>)listeningPoint {
  @synchronized(self) {
    AndroidGovNistJavaxSipListeningPointImpl *lp = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk(listeningPoint, [AndroidGovNistJavaxSipListeningPointImpl class]);
    if ([((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(lp))->messageProcessor_)) inUse]) @throw create_AndroidJavaxSipObjectInUseException_initWithNSString_(@"Object is in use");
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->listeningPoints_)) removeWithId:[((NSString *) nil_chk([lp getTransport])) uppercaseString]];
  }
}

- (void)removeListeningPoints {
  @synchronized(self) {
    for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->listeningPoints_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      AndroidGovNistJavaxSipListeningPointImpl *lp = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk([it next], [AndroidGovNistJavaxSipListeningPointImpl class]);
      [((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(lp))->messageProcessor_)) stop];
      [it remove];
    }
  }
}

- (void)setAutomaticDialogSupportEnabledWithBoolean:(jboolean)automaticDialogSupportEnabled {
  self->automaticDialogSupportEnabled_ = automaticDialogSupportEnabled;
  if (self->automaticDialogSupportEnabled_) {
    self->dialogErrorsAutomaticallyHandled_ = true;
  }
}

- (jboolean)isAutomaticDialogSupportEnabled {
  return automaticDialogSupportEnabled_;
}

- (void)setDialogErrorsAutomaticallyHandled {
  self->dialogErrorsAutomaticallyHandled_ = true;
}

- (jboolean)isDialogErrorsAutomaticallyHandled {
  return self->dialogErrorsAutomaticallyHandled_;
}

- (id<AndroidJavaxSipSipListener>)getSipListener {
  return sipListener_;
}

- (void)dealloc {
  RELEASE_(sipListener_);
  RELEASE_(sipStack_);
  RELEASE_(listeningPoints_);
  RELEASE_(eventScanner_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipListeningPoint;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 5, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 9, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipListeningPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderCallIdHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPClientTransaction;", 0x4, 10, 11, 12, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipClientTransaction;", 0x1, 13, 14, 12, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipServerTransaction;", 0x1, 15, 14, 16, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipSipStack;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 14, 19, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, 19, -1, -1, -1 },
    { NULL, "V", 0x21, 22, 23, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipDialog;", 0x1, 24, 25, 19, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "[LAndroidJavaxSipListeningPoint;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 30, 23, 31, -1, -1, -1 },
    { NULL, "V", 0x21, 32, 23, 31, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 34, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipSipListener;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(stop);
  methods[2].selector = @selector(getListeningPointWithNSString:);
  methods[3].selector = @selector(handleEventWithJavaUtilEventObject:withAndroidGovNistJavaxSipStackSIPTransaction:);
  methods[4].selector = @selector(initWithAndroidGovNistJavaxSipSipStackImpl:);
  methods[5].selector = @selector(java_clone);
  methods[6].selector = @selector(addSipListenerWithAndroidJavaxSipSipListener:);
  methods[7].selector = @selector(getListeningPoint);
  methods[8].selector = @selector(getNewCallId);
  methods[9].selector = @selector(createClientTransactionWithAndroidJavaxSipMessageRequest:withAndroidJavaxSipAddressHop:);
  methods[10].selector = @selector(getNewClientTransactionWithAndroidJavaxSipMessageRequest:);
  methods[11].selector = @selector(getNewServerTransactionWithAndroidJavaxSipMessageRequest:);
  methods[12].selector = @selector(getSipStack);
  methods[13].selector = @selector(removeSipListenerWithAndroidJavaxSipSipListener:);
  methods[14].selector = @selector(sendRequestWithAndroidJavaxSipMessageRequest:);
  methods[15].selector = @selector(sendResponseWithAndroidJavaxSipMessageResponse:);
  methods[16].selector = @selector(setListeningPointWithAndroidJavaxSipListeningPoint:);
  methods[17].selector = @selector(getNewDialogWithAndroidJavaxSipTransaction:);
  methods[18].selector = @selector(transactionErrorEventWithAndroidGovNistJavaxSipStackSIPTransactionErrorEvent:);
  methods[19].selector = @selector(dialogErrorEventWithAndroidGovNistJavaxSipStackSIPDialogErrorEvent:);
  methods[20].selector = @selector(getListeningPoints);
  methods[21].selector = @selector(addListeningPointWithAndroidJavaxSipListeningPoint:);
  methods[22].selector = @selector(removeListeningPointWithAndroidJavaxSipListeningPoint:);
  methods[23].selector = @selector(removeListeningPoints);
  methods[24].selector = @selector(setAutomaticDialogSupportEnabledWithBoolean:);
  methods[25].selector = @selector(isAutomaticDialogSupportEnabled);
  methods[26].selector = @selector(setDialogErrorsAutomaticallyHandled);
  methods[27].selector = @selector(isDialogErrorsAutomaticallyHandled);
  methods[28].selector = @selector(getSipListener);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "sipListener_", "LAndroidJavaxSipSipListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sipStack_", "LAndroidGovNistJavaxSipSipStackImpl;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "listeningPoints_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 36, -1 },
    { "eventScanner_", "LAndroidGovNistJavaxSipEventScanner;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "automaticDialogSupportEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dialogErrorsAutomaticallyHandled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getListeningPoint", "LNSString;", "handleEvent", "LJavaUtilEventObject;LAndroidGovNistJavaxSipStackSIPTransaction;", "LAndroidGovNistJavaxSipSipStackImpl;", "clone", "LJavaLangCloneNotSupportedException;", "addSipListener", "LAndroidJavaxSipSipListener;", "LJavaUtilTooManyListenersException;", "createClientTransaction", "LAndroidJavaxSipMessageRequest;LAndroidJavaxSipAddressHop;", "LAndroidJavaxSipTransactionUnavailableException;", "getNewClientTransaction", "LAndroidJavaxSipMessageRequest;", "getNewServerTransaction", "LAndroidJavaxSipTransactionAlreadyExistsException;LAndroidJavaxSipTransactionUnavailableException;", "removeSipListener", "sendRequest", "LAndroidJavaxSipSipException;", "sendResponse", "LAndroidJavaxSipMessageResponse;", "setListeningPoint", "LAndroidJavaxSipListeningPoint;", "getNewDialog", "LAndroidJavaxSipTransaction;", "transactionErrorEvent", "LAndroidGovNistJavaxSipStackSIPTransactionErrorEvent;", "dialogErrorEvent", "LAndroidGovNistJavaxSipStackSIPDialogErrorEvent;", "addListeningPoint", "LAndroidJavaxSipObjectInUseException;", "removeListeningPoint", "setAutomaticDialogSupportEnabled", "Z", &AndroidGovNistJavaxSipSipProviderImpl_logger, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Landroid/javax/sip/ListeningPoint;>;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipSipProviderImpl = { "SipProviderImpl", "android.gov.nist.javax.sip", ptrTable, methods, fields, 7, 0x1, 29, 7, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipSipProviderImpl;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipSipProviderImpl class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipSipProviderImpl_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipSipProviderImpl_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipSipProviderImpl)
  }
}

@end

void AndroidGovNistJavaxSipSipProviderImpl_init(AndroidGovNistJavaxSipSipProviderImpl *self) {
  NSObject_init(self);
  self->dialogErrorsAutomaticallyHandled_ = true;
}

AndroidGovNistJavaxSipSipProviderImpl *new_AndroidGovNistJavaxSipSipProviderImpl_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipSipProviderImpl, init)
}

AndroidGovNistJavaxSipSipProviderImpl *create_AndroidGovNistJavaxSipSipProviderImpl_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipSipProviderImpl, init)
}

void AndroidGovNistJavaxSipSipProviderImpl_initWithAndroidGovNistJavaxSipSipStackImpl_(AndroidGovNistJavaxSipSipProviderImpl *self, AndroidGovNistJavaxSipSipStackImpl *sipStack) {
  NSObject_init(self);
  self->dialogErrorsAutomaticallyHandled_ = true;
  JreStrongAssign(&self->eventScanner_, [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack)) getEventScanner]);
  JreStrongAssign(&self->sipStack_, sipStack);
  [((AndroidGovNistJavaxSipEventScanner *) nil_chk(self->eventScanner_)) incrementRefcount];
  JreStrongAssignAndConsume(&self->listeningPoints_, new_JavaUtilConcurrentConcurrentHashMap_init());
  self->automaticDialogSupportEnabled_ = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(self->sipStack_)) isAutomaticDialogSupportEnabled];
  self->dialogErrorsAutomaticallyHandled_ = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(self->sipStack_)) isAutomaticDialogErrorHandlingEnabled];
}

AndroidGovNistJavaxSipSipProviderImpl *new_AndroidGovNistJavaxSipSipProviderImpl_initWithAndroidGovNistJavaxSipSipStackImpl_(AndroidGovNistJavaxSipSipStackImpl *sipStack) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipSipProviderImpl, initWithAndroidGovNistJavaxSipSipStackImpl_, sipStack)
}

AndroidGovNistJavaxSipSipProviderImpl *create_AndroidGovNistJavaxSipSipProviderImpl_initWithAndroidGovNistJavaxSipSipStackImpl_(AndroidGovNistJavaxSipSipStackImpl *sipStack) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipSipProviderImpl, initWithAndroidGovNistJavaxSipSipStackImpl_, sipStack)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipSipProviderImpl)
