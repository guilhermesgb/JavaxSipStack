//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/ResponseEventExt.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/ClientTransactionExt.h"
#include "android/gov/nist/javax/sip/ResponseEventExt.h"
#include "android/javax/sip/Dialog.h"
#include "android/javax/sip/ResponseEvent.h"
#include "android/javax/sip/message/Response.h"

@interface AndroidGovNistJavaxSipResponseEventExt () {
 @public
  id<AndroidGovNistJavaxSipClientTransactionExt> m_originalTransaction_;
  jboolean isForked_;
  jboolean isRetransmission_;
  NSString *remoteIpAddress_;
  jint remotePort_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipResponseEventExt, m_originalTransaction_, id<AndroidGovNistJavaxSipClientTransactionExt>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipResponseEventExt, remoteIpAddress_, NSString *)

@implementation AndroidGovNistJavaxSipResponseEventExt

- (instancetype)initWithId:(id)source
withAndroidGovNistJavaxSipClientTransactionExt:(id<AndroidGovNistJavaxSipClientTransactionExt>)clientTransaction
 withAndroidJavaxSipDialog:(id<AndroidJavaxSipDialog>)dialog
withAndroidJavaxSipMessageResponse:(id<AndroidJavaxSipMessageResponse>)response {
  AndroidGovNistJavaxSipResponseEventExt_initWithId_withAndroidGovNistJavaxSipClientTransactionExt_withAndroidJavaxSipDialog_withAndroidJavaxSipMessageResponse_(self, source, clientTransaction, dialog, response);
  return self;
}

- (jboolean)isForkedResponse {
  return isForked_;
}

- (void)setForkedResponseWithBoolean:(jboolean)forked {
  self->isForked_ = forked;
}

- (void)setOriginalTransactionWithAndroidGovNistJavaxSipClientTransactionExt:(id<AndroidGovNistJavaxSipClientTransactionExt>)originalTransaction {
  JreStrongAssign(&m_originalTransaction_, originalTransaction);
}

- (id<AndroidGovNistJavaxSipClientTransactionExt>)getOriginalTransaction {
  return self->m_originalTransaction_;
}

- (jboolean)isRetransmission {
  return isRetransmission_;
}

- (void)setRetransmissionWithBoolean:(jboolean)isRetransmission {
  self->isRetransmission_ = isRetransmission;
}

- (void)setRemotePortWithInt:(jint)remotePort {
  self->remotePort_ = remotePort;
}

- (jint)getRemotePort {
  return remotePort_;
}

- (NSString *)getRemoteIpAddress {
  return remoteIpAddress_;
}

- (void)setRemoteIpAddressWithNSString:(NSString *)remoteIpAddress {
  JreStrongAssign(&self->remoteIpAddress_, remoteIpAddress);
}

- (void)dealloc {
  RELEASE_(m_originalTransaction_);
  RELEASE_(remoteIpAddress_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipClientTransactionExt;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withAndroidGovNistJavaxSipClientTransactionExt:withAndroidJavaxSipDialog:withAndroidJavaxSipMessageResponse:);
  methods[1].selector = @selector(isForkedResponse);
  methods[2].selector = @selector(setForkedResponseWithBoolean:);
  methods[3].selector = @selector(setOriginalTransactionWithAndroidGovNistJavaxSipClientTransactionExt:);
  methods[4].selector = @selector(getOriginalTransaction);
  methods[5].selector = @selector(isRetransmission);
  methods[6].selector = @selector(setRetransmissionWithBoolean:);
  methods[7].selector = @selector(setRemotePortWithInt:);
  methods[8].selector = @selector(getRemotePort);
  methods[9].selector = @selector(getRemoteIpAddress);
  methods[10].selector = @selector(setRemoteIpAddressWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "m_originalTransaction_", "LAndroidGovNistJavaxSipClientTransactionExt;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isForked_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isRetransmission_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "remoteIpAddress_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "remotePort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LAndroidGovNistJavaxSipClientTransactionExt;LAndroidJavaxSipDialog;LAndroidJavaxSipMessageResponse;", "setForkedResponse", "Z", "setOriginalTransaction", "LAndroidGovNistJavaxSipClientTransactionExt;", "setRetransmission", "setRemotePort", "I", "setRemoteIpAddress", "LNSString;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipResponseEventExt = { "ResponseEventExt", "android.gov.nist.javax.sip", ptrTable, methods, fields, 7, 0x1, 11, 5, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipResponseEventExt;
}

@end

void AndroidGovNistJavaxSipResponseEventExt_initWithId_withAndroidGovNistJavaxSipClientTransactionExt_withAndroidJavaxSipDialog_withAndroidJavaxSipMessageResponse_(AndroidGovNistJavaxSipResponseEventExt *self, id source, id<AndroidGovNistJavaxSipClientTransactionExt> clientTransaction, id<AndroidJavaxSipDialog> dialog, id<AndroidJavaxSipMessageResponse> response) {
  AndroidJavaxSipResponseEvent_initWithId_withAndroidJavaxSipClientTransaction_withAndroidJavaxSipDialog_withAndroidJavaxSipMessageResponse_(self, source, clientTransaction, dialog, response);
  JreStrongAssign(&self->m_originalTransaction_, clientTransaction);
}

AndroidGovNistJavaxSipResponseEventExt *new_AndroidGovNistJavaxSipResponseEventExt_initWithId_withAndroidGovNistJavaxSipClientTransactionExt_withAndroidJavaxSipDialog_withAndroidJavaxSipMessageResponse_(id source, id<AndroidGovNistJavaxSipClientTransactionExt> clientTransaction, id<AndroidJavaxSipDialog> dialog, id<AndroidJavaxSipMessageResponse> response) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipResponseEventExt, initWithId_withAndroidGovNistJavaxSipClientTransactionExt_withAndroidJavaxSipDialog_withAndroidJavaxSipMessageResponse_, source, clientTransaction, dialog, response)
}

AndroidGovNistJavaxSipResponseEventExt *create_AndroidGovNistJavaxSipResponseEventExt_initWithId_withAndroidGovNistJavaxSipClientTransactionExt_withAndroidJavaxSipDialog_withAndroidJavaxSipMessageResponse_(id source, id<AndroidGovNistJavaxSipClientTransactionExt> clientTransaction, id<AndroidJavaxSipDialog> dialog, id<AndroidJavaxSipMessageResponse> response) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipResponseEventExt, initWithId_withAndroidGovNistJavaxSipClientTransactionExt_withAndroidJavaxSipDialog_withAndroidJavaxSipMessageResponse_, source, clientTransaction, dialog, response)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipResponseEventExt)
