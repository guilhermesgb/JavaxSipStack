//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/address/UriDecoder.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/address/UriDecoder.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/UnsupportedCharsetException.h"

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipAddressUriDecoder)

JavaNioCharsetCharset *AndroidGovNistJavaxSipAddressUriDecoder_utf8CharSet;

@implementation AndroidGovNistJavaxSipAddressUriDecoder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipAddressUriDecoder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)decodeWithNSString:(NSString *)uri {
  return AndroidGovNistJavaxSipAddressUriDecoder_decodeWithNSString_(uri);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(decodeWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "utf8CharSet", "LJavaNioCharsetCharset;", .constantValue.asLong = 0, 0x8, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "decode", "LNSString;", &AndroidGovNistJavaxSipAddressUriDecoder_utf8CharSet };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipAddressUriDecoder = { "UriDecoder", "android.gov.nist.javax.sip.address", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipAddressUriDecoder;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipAddressUriDecoder class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipAddressUriDecoder_utf8CharSet, nil);
    {
      @try {
        JreStrongAssign(&AndroidGovNistJavaxSipAddressUriDecoder_utf8CharSet, JavaNioCharsetCharset_forNameWithNSString_(@"UTF8"));
      }
      @catch (JavaNioCharsetUnsupportedCharsetException *e) {
        @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(@"Problem in decodePath: UTF-8 charset not supported.", e);
      }
    }
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipAddressUriDecoder)
  }
}

@end

void AndroidGovNistJavaxSipAddressUriDecoder_init(AndroidGovNistJavaxSipAddressUriDecoder *self) {
  NSObject_init(self);
}

AndroidGovNistJavaxSipAddressUriDecoder *new_AndroidGovNistJavaxSipAddressUriDecoder_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipAddressUriDecoder, init)
}

AndroidGovNistJavaxSipAddressUriDecoder *create_AndroidGovNistJavaxSipAddressUriDecoder_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipAddressUriDecoder, init)
}

NSString *AndroidGovNistJavaxSipAddressUriDecoder_decodeWithNSString_(NSString *uri) {
  AndroidGovNistJavaxSipAddressUriDecoder_initialize();
  NSString *uriToWorkOn = uri;
  jint indexOfNextPercent = [((NSString *) nil_chk(uriToWorkOn)) java_indexOfString:@"%"];
  JavaLangStringBuilder *decodedUri = create_JavaLangStringBuilder_init();
  while (indexOfNextPercent != -1) {
    [decodedUri appendWithNSString:[uriToWorkOn java_substring:0 endIndex:indexOfNextPercent]];
    if (indexOfNextPercent + 2 < ((jint) [uriToWorkOn length])) {
      NSString *hexadecimalString = [uriToWorkOn java_substring:indexOfNextPercent + 1 endIndex:indexOfNextPercent + 3];
      @try {
        jbyte hexadecimalNumber = (jbyte) JavaLangInteger_parseIntWithNSString_withInt_(hexadecimalString, 16);
        NSString *correspondingCharacter = [((JavaNioCharBuffer *) nil_chk([((JavaNioCharsetCharset *) nil_chk(AndroidGovNistJavaxSipAddressUriDecoder_utf8CharSet)) decodeWithJavaNioByteBuffer:JavaNioByteBuffer_wrapWithByteArray_([IOSByteArray arrayWithBytes:(jbyte[]){ hexadecimalNumber } count:1])])) description];
        [decodedUri appendWithNSString:correspondingCharacter];
      }
      @catch (JavaLangNumberFormatException *e) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Illegal hex characters in pattern %", hexadecimalString));
      }
    }
    uriToWorkOn = [uriToWorkOn java_substring:indexOfNextPercent + 3];
    indexOfNextPercent = [((NSString *) nil_chk(uriToWorkOn)) java_indexOfString:@"%"];
  }
  [decodedUri appendWithNSString:uriToWorkOn];
  return [decodedUri description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipAddressUriDecoder)
