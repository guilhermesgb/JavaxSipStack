//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/address/SipUri.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/Debug.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/core/Host.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/core/NameValue.h"
#include "android/gov/nist/core/NameValueList.h"
#include "android/gov/nist/javax/sip/address/Authority.h"
#include "android/gov/nist/javax/sip/address/GenericURI.h"
#include "android/gov/nist/javax/sip/address/NetObject.h"
#include "android/gov/nist/javax/sip/address/SipUri.h"
#include "android/gov/nist/javax/sip/address/TelephoneNumber.h"
#include "android/gov/nist/javax/sip/address/UriDecoder.h"
#include "android/gov/nist/javax/sip/address/UserInfo.h"
#include "android/javax/sip/PeerUnavailableException.h"
#include "android/javax/sip/SipFactory.h"
#include "android/javax/sip/address/SipURI.h"
#include "android/javax/sip/header/Header.h"
#include "android/javax/sip/header/HeaderFactory.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/text/ParseException.h"
#include "java/util/Iterator.h"

inline jlong AndroidGovNistJavaxSipAddressSipUri_get_serialVersionUID();
#define AndroidGovNistJavaxSipAddressSipUri_serialVersionUID 7749781076218987044LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipAddressSipUri, serialVersionUID, jlong)

@implementation AndroidGovNistJavaxSipAddressSipUri

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipAddressSipUri_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setSchemeWithNSString:(NSString *)scheme {
  if ([((NSString *) nil_chk(scheme)) java_compareToIgnoreCase:AndroidGovNistJavaxSipAddressGenericURI_SIP] != 0 && [scheme java_compareToIgnoreCase:AndroidGovNistJavaxSipAddressGenericURI_SIPS] != 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"bad scheme ", scheme));
  JreStrongAssign(&self->scheme_, [scheme lowercaseString]);
}

- (NSString *)getScheme {
  return scheme_;
}

- (void)clearUriParms {
  JreStrongAssignAndConsume(&uriParms_, new_AndroidGovNistCoreNameValueList_init());
}

- (void)clearPassword {
  if (self->authority_ != nil) {
    AndroidGovNistJavaxSipAddressUserInfo *userInfo = [authority_ getUserInfo];
    if (userInfo != nil) [userInfo clearPassword];
  }
}

- (AndroidGovNistJavaxSipAddressAuthority *)getAuthority {
  return self->authority_;
}

- (void)clearQheaders {
  JreStrongAssignAndConsume(&qheaders_, new_AndroidGovNistCoreNameValueList_init());
}

- (jboolean)isEqual:(id)that {
  if (that == self) return true;
  if ([AndroidJavaxSipAddressSipURI_class_() isInstance:that]) {
    id<AndroidJavaxSipAddressSipURI> a = self;
    id<AndroidJavaxSipAddressSipURI> b = (id<AndroidJavaxSipAddressSipURI>) cast_check(that, AndroidJavaxSipAddressSipURI_class_());
    if ([a isSecure] ^ [((id<AndroidJavaxSipAddressSipURI>) nil_chk(b)) isSecure]) return false;
    if ([a getUser] == nil ^ [b getUser] == nil) return false;
    if ([a getUserPassword] == nil ^ [b getUserPassword] == nil) return false;
    if ([a getUser] != nil && ![((NSString *) nil_chk(AndroidGovNistJavaxSipAddressUriDecoder_decodeWithNSString_([a getUser]))) isEqual:AndroidGovNistJavaxSipAddressUriDecoder_decodeWithNSString_([b getUser])]) return false;
    if ([a getUserPassword] != nil && ![((NSString *) nil_chk(AndroidGovNistJavaxSipAddressUriDecoder_decodeWithNSString_([a getUserPassword]))) isEqual:AndroidGovNistJavaxSipAddressUriDecoder_decodeWithNSString_([b getUserPassword])]) return false;
    if ([a getHost] == nil ^ [b getHost] == nil) return false;
    if ([a getHost] != nil && ![((NSString *) nil_chk([a getHost])) java_equalsIgnoreCase:[b getHost]]) return false;
    if ([a getPort] != [b getPort]) return false;
    for (id<JavaUtilIterator> i = [a getParameterNames]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
      NSString *pname = (NSString *) cast_chk([i next], [NSString class]);
      NSString *p1 = [a getParameterWithNSString:pname];
      NSString *p2 = [b getParameterWithNSString:pname];
      if (p1 != nil && p2 != nil && ![((NSString *) nil_chk(AndroidGovNistJavaxSipAddressUriDecoder_decodeWithNSString_(p1))) java_equalsIgnoreCase:AndroidGovNistJavaxSipAddressUriDecoder_decodeWithNSString_(p2)]) return false;
    }
    if ([a getTransportParam] == nil ^ [b getTransportParam] == nil) return false;
    if ([a getUserParam] == nil ^ [b getUserParam] == nil) return false;
    if ([a getTTLParam] == -1 ^ [b getTTLParam] == -1) return false;
    if ([a getMethodParam] == nil ^ [b getMethodParam] == nil) return false;
    if ([a getMAddrParam] == nil ^ [b getMAddrParam] == nil) return false;
    if ([((id<JavaUtilIterator>) nil_chk([a getHeaderNames])) hasNext] && ![((id<JavaUtilIterator>) nil_chk([b getHeaderNames])) hasNext]) return false;
    if (![((id<JavaUtilIterator>) nil_chk([a getHeaderNames])) hasNext] && [((id<JavaUtilIterator>) nil_chk([b getHeaderNames])) hasNext]) return false;
    if ([((id<JavaUtilIterator>) nil_chk([a getHeaderNames])) hasNext] && [((id<JavaUtilIterator>) nil_chk([b getHeaderNames])) hasNext]) {
      id<AndroidJavaxSipHeaderHeaderFactory> headerFactory = nil;
      @try {
        headerFactory = [((AndroidJavaxSipSipFactory *) nil_chk(AndroidJavaxSipSipFactory_getInstance())) createHeaderFactory];
      }
      @catch (AndroidJavaxSipPeerUnavailableException *e) {
        AndroidGovNistCoreDebug_logErrorWithNSString_withJavaLangException_(@"Cannot get the header factory to parse the header of the sip uris to compare", e);
        return false;
      }
      for (id<JavaUtilIterator> i = [a getHeaderNames]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
        NSString *hname = (NSString *) cast_chk([i next], [NSString class]);
        NSString *h1 = [a getHeaderWithNSString:hname];
        NSString *h2 = [b getHeaderWithNSString:hname];
        if (h1 == nil && h2 != nil) return false;
        if (h2 == nil && h1 != nil) return false;
        if (h1 == nil && h2 == nil) continue;
        @try {
          id<AndroidJavaxSipHeaderHeader> header1 = [((id<AndroidJavaxSipHeaderHeaderFactory>) nil_chk(headerFactory)) createHeaderWithNSString:hname withNSString:AndroidGovNistJavaxSipAddressUriDecoder_decodeWithNSString_(h1)];
          id<AndroidJavaxSipHeaderHeader> header2 = [headerFactory createHeaderWithNSString:hname withNSString:AndroidGovNistJavaxSipAddressUriDecoder_decodeWithNSString_(h2)];
          if (![((id<AndroidJavaxSipHeaderHeader>) nil_chk(header1)) isEqual:header2]) return false;
        }
        @catch (JavaTextParseException *e) {
          AndroidGovNistCoreDebug_logErrorWithNSString_withJavaLangException_(JreStrcat("$@C@", @"Cannot parse one of the header of the sip uris to compare ", a, ' ', b), e);
          return false;
        }
      }
    }
    return true;
  }
  return false;
}

- (NSString *)encode {
  return [((JavaLangStringBuilder *) nil_chk([self encodeWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])) description];
}

- (JavaLangStringBuilder *)encodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:scheme_])) appendWithNSString:AndroidGovNistCoreGenericObject_COLON];
  if (authority_ != nil) [authority_ encodeWithJavaLangStringBuilder:buffer];
  if (![((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) isEmpty]) {
    [buffer appendWithNSString:AndroidGovNistCoreGenericObject_SEMICOLON];
    [((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) encodeWithJavaLangStringBuilder:buffer];
  }
  if (![((AndroidGovNistCoreNameValueList *) nil_chk(qheaders_)) isEmpty]) {
    [buffer appendWithNSString:AndroidGovNistCoreGenericObject_QUESTION];
    [((AndroidGovNistCoreNameValueList *) nil_chk(qheaders_)) encodeWithJavaLangStringBuilder:buffer];
  }
  return buffer;
}

- (NSString *)description {
  return [self encode];
}

- (NSString *)getUserAtHost {
  NSString *user = @"";
  if ([((AndroidGovNistJavaxSipAddressAuthority *) nil_chk(authority_)) getUserInfo] != nil) user = [((AndroidGovNistJavaxSipAddressUserInfo *) nil_chk([((AndroidGovNistJavaxSipAddressAuthority *) nil_chk(authority_)) getUserInfo])) getUser];
  NSString *host = [((AndroidGovNistCoreHost *) nil_chk([((AndroidGovNistJavaxSipAddressAuthority *) nil_chk(authority_)) getHost])) encode];
  JavaLangStringBuilder *s = nil;
  if (user == nil || [user isEqual:@""]) {
    s = create_JavaLangStringBuilder_init();
  }
  else {
    s = [create_JavaLangStringBuilder_initWithNSString_(user) appendWithNSString:AndroidGovNistCoreGenericObject_AT];
  }
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:host])) description];
}

- (NSString *)getUserAtHostPort {
  NSString *user = @"";
  if ([((AndroidGovNistJavaxSipAddressAuthority *) nil_chk(authority_)) getUserInfo] != nil) user = [((AndroidGovNistJavaxSipAddressUserInfo *) nil_chk([((AndroidGovNistJavaxSipAddressAuthority *) nil_chk(authority_)) getUserInfo])) getUser];
  NSString *host = [((AndroidGovNistCoreHost *) nil_chk([((AndroidGovNistJavaxSipAddressAuthority *) nil_chk(authority_)) getHost])) encode];
  jint port = [((AndroidGovNistJavaxSipAddressAuthority *) nil_chk(authority_)) getPort];
  JavaLangStringBuilder *s = nil;
  if (user == nil || [user isEqual:@""]) {
    s = create_JavaLangStringBuilder_init();
  }
  else {
    s = [create_JavaLangStringBuilder_initWithNSString_(user) appendWithNSString:AndroidGovNistCoreGenericObject_AT];
  }
  if (port != -1) {
    return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:host])) appendWithNSString:AndroidGovNistCoreGenericObject_COLON])) appendWithInt:port])) description];
  }
  else return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:host])) description];
}

- (id)getParmWithNSString:(NSString *)parmname {
  id obj = [((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) getValueWithNSString:parmname];
  return obj;
}

- (NSString *)getMethod {
  return (NSString *) cast_chk([self getParmWithNSString:AndroidGovNistJavaxSipAddressNetObject_METHOD], [NSString class]);
}

- (AndroidGovNistCoreNameValueList *)getParameters {
  return uriParms_;
}

- (void)removeParameters {
  JreStrongAssignAndConsume(&self->uriParms_, new_AndroidGovNistCoreNameValueList_init());
}

- (AndroidGovNistCoreNameValueList *)getQheaders {
  return qheaders_;
}

- (NSString *)getUserType {
  return (NSString *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) getValueWithNSString:AndroidGovNistJavaxSipAddressNetObject_USER], [NSString class]);
}

- (NSString *)getUserPassword {
  if (authority_ == nil) return nil;
  return [authority_ getPassword];
}

- (void)setUserPasswordWithNSString:(NSString *)password {
  if (self->authority_ == nil) JreStrongAssignAndConsume(&self->authority_, new_AndroidGovNistJavaxSipAddressAuthority_init());
  [authority_ setPasswordWithNSString:password];
}

- (AndroidGovNistJavaxSipAddressTelephoneNumber *)getTelephoneSubscriber {
  if (telephoneSubscriber_ == nil) {
    JreStrongAssignAndConsume(&telephoneSubscriber_, new_AndroidGovNistJavaxSipAddressTelephoneNumber_init());
  }
  return telephoneSubscriber_;
}

- (AndroidGovNistCoreHostPort *)getHostPort {
  if (authority_ == nil || [authority_ getHost] == nil) return nil;
  else {
    return [authority_ getHostPort];
  }
}

- (jint)getPort {
  AndroidGovNistCoreHostPort *hp = [self getHostPort];
  if (hp == nil) return -1;
  return [hp getPort];
}

- (NSString *)getHost {
  if (authority_ == nil) return nil;
  else if ([authority_ getHost] == nil) return nil;
  else return [((AndroidGovNistCoreHost *) nil_chk([((AndroidGovNistJavaxSipAddressAuthority *) nil_chk(authority_)) getHost])) encode];
}

- (jboolean)isUserTelephoneSubscriber {
  NSString *usrtype = (NSString *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) getValueWithNSString:AndroidGovNistJavaxSipAddressNetObject_USER], [NSString class]);
  if (usrtype == nil) return false;
  return [usrtype java_equalsIgnoreCase:AndroidGovNistJavaxSipAddressNetObject_PHONE];
}

- (void)removeTTL {
  if (uriParms_ != nil) [uriParms_ delete__WithNSString:AndroidGovNistJavaxSipAddressNetObject_TTL];
}

- (void)removeMAddr {
  if (uriParms_ != nil) [uriParms_ delete__WithNSString:AndroidGovNistJavaxSipAddressNetObject_MADDR];
}

- (void)removeTransport {
  if (uriParms_ != nil) [uriParms_ delete__WithNSString:AndroidGovNistJavaxSipAddressNetObject_TRANSPORT];
}

- (void)removeHeaderWithNSString:(NSString *)name {
  if (qheaders_ != nil) [qheaders_ delete__WithNSString:name];
}

- (void)removeHeaders {
  JreStrongAssignAndConsume(&qheaders_, new_AndroidGovNistCoreNameValueList_init());
}

- (void)removeUserType {
  if (uriParms_ != nil) [uriParms_ delete__WithNSString:AndroidGovNistJavaxSipAddressNetObject_USER];
}

- (void)removePort {
  [((AndroidGovNistJavaxSipAddressAuthority *) nil_chk(authority_)) removePort];
}

- (void)removeMethod {
  if (uriParms_ != nil) [uriParms_ delete__WithNSString:AndroidGovNistJavaxSipAddressNetObject_METHOD];
}

- (void)setUserWithNSString:(NSString *)uname {
  if (self->authority_ == nil) {
    JreStrongAssignAndConsume(&self->authority_, new_AndroidGovNistJavaxSipAddressAuthority_init());
  }
  [self->authority_ setUserWithNSString:uname];
}

- (void)removeUser {
  [((AndroidGovNistJavaxSipAddressAuthority *) nil_chk(self->authority_)) removeUserInfo];
}

- (void)setDefaultParmWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) getValueWithNSString:name] == nil) {
    AndroidGovNistCoreNameValue *nv = create_AndroidGovNistCoreNameValue_initWithNSString_withId_(name, value);
    [((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) setWithAndroidGovNistCoreNameValue:nv];
  }
}

- (void)setAuthorityWithAndroidGovNistJavaxSipAddressAuthority:(AndroidGovNistJavaxSipAddressAuthority *)authority {
  JreStrongAssign(&self->authority_, authority);
}

- (void)setHostWithAndroidGovNistCoreHost:(AndroidGovNistCoreHost *)h {
  if (self->authority_ == nil) JreStrongAssignAndConsume(&self->authority_, new_AndroidGovNistJavaxSipAddressAuthority_init());
  [self->authority_ setHostWithAndroidGovNistCoreHost:h];
}

- (void)setUriParmsWithAndroidGovNistCoreNameValueList:(AndroidGovNistCoreNameValueList *)parms {
  JreStrongAssign(&uriParms_, parms);
}

- (void)setUriParmWithNSString:(NSString *)name
                        withId:(id)value {
  AndroidGovNistCoreNameValue *nv = create_AndroidGovNistCoreNameValue_initWithNSString_withId_(name, value);
  [((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) setWithAndroidGovNistCoreNameValue:nv];
}

- (void)setQheadersWithAndroidGovNistCoreNameValueList:(AndroidGovNistCoreNameValueList *)parms {
  JreStrongAssign(&qheaders_, parms);
}

- (void)setMAddrWithNSString:(NSString *)mAddr {
  AndroidGovNistCoreNameValue *nameValue = [((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) getNameValueWithNSString:AndroidGovNistJavaxSipAddressNetObject_MADDR];
  AndroidGovNistCoreHost *host = create_AndroidGovNistCoreHost_init();
  [host setAddressWithNSString:mAddr];
  if (nameValue != nil) [nameValue setValueAsObjectWithId:host];
  else {
    nameValue = create_AndroidGovNistCoreNameValue_initWithNSString_withId_(AndroidGovNistJavaxSipAddressNetObject_MADDR, host);
    [((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) setWithAndroidGovNistCoreNameValue:nameValue];
  }
}

- (void)setUserParamWithNSString:(NSString *)usertype {
  [((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) setWithNSString:AndroidGovNistJavaxSipAddressNetObject_USER withId:usertype];
}

- (void)setMethodWithNSString:(NSString *)method {
  [((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) setWithNSString:AndroidGovNistJavaxSipAddressNetObject_METHOD withId:method];
}

- (void)setIsdnSubAddressWithNSString:(NSString *)isdnSubAddress {
  if (telephoneSubscriber_ == nil) JreStrongAssignAndConsume(&telephoneSubscriber_, new_AndroidGovNistJavaxSipAddressTelephoneNumber_init());
  [telephoneSubscriber_ setIsdnSubaddressWithNSString:isdnSubAddress];
}

- (void)setTelephoneSubscriberWithAndroidGovNistJavaxSipAddressTelephoneNumber:(AndroidGovNistJavaxSipAddressTelephoneNumber *)tel {
  JreStrongAssign(&telephoneSubscriber_, tel);
}

- (void)setPortWithInt:(jint)p {
  if (authority_ == nil) JreStrongAssignAndConsume(&authority_, new_AndroidGovNistJavaxSipAddressAuthority_init());
  [authority_ setPortWithInt:p];
}

- (jboolean)hasParameterWithNSString:(NSString *)name {
  return [((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) getValueWithNSString:name] != nil;
}

- (void)setQHeaderWithAndroidGovNistCoreNameValue:(AndroidGovNistCoreNameValue *)nameValue {
  [((AndroidGovNistCoreNameValueList *) nil_chk(self->qheaders_)) setWithAndroidGovNistCoreNameValue:nameValue];
}

- (void)setUriParameterWithAndroidGovNistCoreNameValue:(AndroidGovNistCoreNameValue *)nameValue {
  [((AndroidGovNistCoreNameValueList *) nil_chk(self->uriParms_)) setWithAndroidGovNistCoreNameValue:nameValue];
}

- (jboolean)hasTransport {
  return [self hasParameterWithNSString:AndroidGovNistJavaxSipAddressNetObject_TRANSPORT];
}

- (void)removeParameterWithNSString:(NSString *)name {
  [((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) delete__WithNSString:name];
}

- (void)setHostPortWithAndroidGovNistCoreHostPort:(AndroidGovNistCoreHostPort *)hostPort {
  if (self->authority_ == nil) {
    JreStrongAssignAndConsume(&self->authority_, new_AndroidGovNistJavaxSipAddressAuthority_init());
  }
  [authority_ setHostPortWithAndroidGovNistCoreHostPort:hostPort];
}

- (id)java_clone {
  AndroidGovNistJavaxSipAddressSipUri *retval = (AndroidGovNistJavaxSipAddressSipUri *) cast_chk([super java_clone], [AndroidGovNistJavaxSipAddressSipUri class]);
  if (self->authority_ != nil) JreStrongAssign(&((AndroidGovNistJavaxSipAddressSipUri *) nil_chk(retval))->authority_, (AndroidGovNistJavaxSipAddressAuthority *) cast_chk([self->authority_ java_clone], [AndroidGovNistJavaxSipAddressAuthority class]));
  if (self->uriParms_ != nil) JreStrongAssign(&((AndroidGovNistJavaxSipAddressSipUri *) nil_chk(retval))->uriParms_, (AndroidGovNistCoreNameValueList *) cast_chk([self->uriParms_ java_clone], [AndroidGovNistCoreNameValueList class]));
  if (self->qheaders_ != nil) JreStrongAssign(&((AndroidGovNistJavaxSipAddressSipUri *) nil_chk(retval))->qheaders_, (AndroidGovNistCoreNameValueList *) cast_chk([self->qheaders_ java_clone], [AndroidGovNistCoreNameValueList class]));
  if (self->telephoneSubscriber_ != nil) JreStrongAssign(&((AndroidGovNistJavaxSipAddressSipUri *) nil_chk(retval))->telephoneSubscriber_, (AndroidGovNistJavaxSipAddressTelephoneNumber *) cast_chk([self->telephoneSubscriber_ java_clone], [AndroidGovNistJavaxSipAddressTelephoneNumber class]));
  return retval;
}

- (NSString *)getHeaderWithNSString:(NSString *)name {
  return [((AndroidGovNistCoreNameValueList *) nil_chk(self->qheaders_)) getValueWithNSString:name] != nil ? [nil_chk([((AndroidGovNistCoreNameValueList *) nil_chk(self->qheaders_)) getValueWithNSString:name]) description] : nil;
}

- (id<JavaUtilIterator>)getHeaderNames {
  return [((AndroidGovNistCoreNameValueList *) nil_chk(self->qheaders_)) getNames];
}

- (NSString *)getLrParam {
  jboolean haslr = [self hasParameterWithNSString:AndroidGovNistJavaxSipAddressNetObject_LR];
  return haslr ? @"true" : nil;
}

- (NSString *)getMAddrParam {
  AndroidGovNistCoreNameValue *maddr = [((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) getNameValueWithNSString:AndroidGovNistJavaxSipAddressNetObject_MADDR];
  if (maddr == nil) return nil;
  NSString *host = (NSString *) cast_chk([maddr getValueAsObject], [NSString class]);
  return host;
}

- (NSString *)getMethodParam {
  return [self getParameterWithNSString:AndroidGovNistJavaxSipAddressNetObject_METHOD];
}

- (NSString *)getParameterWithNSString:(NSString *)name {
  id val = [((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) getValueWithNSString:name];
  if (val == nil) return nil;
  if ([val isKindOfClass:[AndroidGovNistCoreGenericObject class]]) return [((AndroidGovNistCoreGenericObject *) cast_chk(val, [AndroidGovNistCoreGenericObject class])) encode];
  else return [val description];
}

- (id<JavaUtilIterator>)getParameterNames {
  return [((AndroidGovNistCoreNameValueList *) nil_chk(self->uriParms_)) getNames];
}

- (jint)getTTLParam {
  JavaLangInteger *ttl = (JavaLangInteger *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) getValueWithNSString:@"ttl"], [JavaLangInteger class]);
  if (ttl != nil) return [ttl intValue];
  else return -1;
}

- (NSString *)getTransportParam {
  if (uriParms_ != nil) {
    return (NSString *) cast_chk([uriParms_ getValueWithNSString:AndroidGovNistJavaxSipAddressNetObject_TRANSPORT], [NSString class]);
  }
  else return nil;
}

- (NSString *)getUser {
  return [((AndroidGovNistJavaxSipAddressAuthority *) nil_chk(authority_)) getUser];
}

- (jboolean)isSecure {
  return [((NSString *) nil_chk([self getScheme])) java_equalsIgnoreCase:AndroidGovNistJavaxSipAddressGenericURI_SIPS];
}

- (jboolean)isSipURI {
  return true;
}

- (void)setHeaderWithNSString:(NSString *)name
                 withNSString:(NSString *)value {
  AndroidGovNistCoreNameValue *nv = create_AndroidGovNistCoreNameValue_initWithNSString_withId_(name, value);
  [((AndroidGovNistCoreNameValueList *) nil_chk(qheaders_)) setWithAndroidGovNistCoreNameValue:nv];
}

- (void)setHostWithNSString:(NSString *)host {
  AndroidGovNistCoreHost *h = create_AndroidGovNistCoreHost_initWithNSString_(host);
  [self setHostWithAndroidGovNistCoreHost:h];
}

- (void)setLrParam {
  [((AndroidGovNistCoreNameValueList *) nil_chk(self->uriParms_)) setWithNSString:@"lr" withId:nil];
}

- (void)setMAddrParamWithNSString:(NSString *)maddr {
  if (maddr == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"bad maddr");
  [self setParameterWithNSString:@"maddr" withNSString:maddr];
}

- (void)setMethodParamWithNSString:(NSString *)method {
  [self setParameterWithNSString:@"method" withNSString:method];
}

- (void)setParameterWithNSString:(NSString *)name
                    withNSString:(NSString *)value {
  if ([((NSString *) nil_chk(name)) java_equalsIgnoreCase:@"ttl"]) {
    @try {
      JavaLangInteger_parseIntWithNSString_(value);
    }
    @catch (JavaLangNumberFormatException *ex) {
      @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", @"bad parameter ", value), 0);
    }
  }
  [((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) setWithNSString:name withId:value];
}

- (void)setSecureWithBoolean:(jboolean)secure {
  if (secure) JreStrongAssign(&self->scheme_, AndroidGovNistJavaxSipAddressGenericURI_SIPS);
  else JreStrongAssign(&self->scheme_, AndroidGovNistJavaxSipAddressGenericURI_SIP);
}

- (void)setTTLParamWithInt:(jint)ttl {
  if (ttl <= 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Bad ttl value");
  if (uriParms_ != nil) {
    AndroidGovNistCoreNameValue *nv = create_AndroidGovNistCoreNameValue_initWithNSString_withId_(@"ttl", JavaLangInteger_valueOfWithInt_(ttl));
    [((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) setWithAndroidGovNistCoreNameValue:nv];
  }
}

- (void)setTransportParamWithNSString:(NSString *)transport {
  if (transport == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg");
  AndroidGovNistCoreNameValue *nv = create_AndroidGovNistCoreNameValue_initWithNSString_withId_(AndroidGovNistJavaxSipAddressNetObject_TRANSPORT, [transport lowercaseString]);
  [((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) setWithAndroidGovNistCoreNameValue:nv];
}

- (NSString *)getUserParam {
  return [self getParameterWithNSString:@"user"];
}

- (jboolean)hasLrParam {
  return [((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) getNameValueWithNSString:AndroidGovNistJavaxSipAddressNetObject_LR] != nil;
}

- (jboolean)hasGrParam {
  return [((AndroidGovNistCoreNameValueList *) nil_chk(uriParms_)) getNameValueWithNSString:AndroidGovNistJavaxSipAddressNetObject_GRUU] != nil;
}

- (void)setGrParamWithNSString:(NSString *)value {
  [((AndroidGovNistCoreNameValueList *) nil_chk(self->uriParms_)) setWithNSString:AndroidGovNistJavaxSipAddressNetObject_GRUU withId:value];
}

- (NSString *)getGrParam {
  return (NSString *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk(self->uriParms_)) getValueWithNSString:AndroidGovNistJavaxSipAddressNetObject_GRUU], [NSString class]);
}

- (void)dealloc {
  RELEASE_(authority_);
  RELEASE_(uriParms_);
  RELEASE_(qheaders_);
  RELEASE_(telephoneSubscriber_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipAddressAuthority;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValueList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValueList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipAddressTelephoneNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreHostPort;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 31, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 36, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 37, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 38, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 39, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 38, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 1, 42, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 1, 42, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 1, 42, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 41, 42, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 1, 42, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setSchemeWithNSString:);
  methods[2].selector = @selector(getScheme);
  methods[3].selector = @selector(clearUriParms);
  methods[4].selector = @selector(clearPassword);
  methods[5].selector = @selector(getAuthority);
  methods[6].selector = @selector(clearQheaders);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(encode);
  methods[9].selector = @selector(encodeWithJavaLangStringBuilder:);
  methods[10].selector = @selector(description);
  methods[11].selector = @selector(getUserAtHost);
  methods[12].selector = @selector(getUserAtHostPort);
  methods[13].selector = @selector(getParmWithNSString:);
  methods[14].selector = @selector(getMethod);
  methods[15].selector = @selector(getParameters);
  methods[16].selector = @selector(removeParameters);
  methods[17].selector = @selector(getQheaders);
  methods[18].selector = @selector(getUserType);
  methods[19].selector = @selector(getUserPassword);
  methods[20].selector = @selector(setUserPasswordWithNSString:);
  methods[21].selector = @selector(getTelephoneSubscriber);
  methods[22].selector = @selector(getHostPort);
  methods[23].selector = @selector(getPort);
  methods[24].selector = @selector(getHost);
  methods[25].selector = @selector(isUserTelephoneSubscriber);
  methods[26].selector = @selector(removeTTL);
  methods[27].selector = @selector(removeMAddr);
  methods[28].selector = @selector(removeTransport);
  methods[29].selector = @selector(removeHeaderWithNSString:);
  methods[30].selector = @selector(removeHeaders);
  methods[31].selector = @selector(removeUserType);
  methods[32].selector = @selector(removePort);
  methods[33].selector = @selector(removeMethod);
  methods[34].selector = @selector(setUserWithNSString:);
  methods[35].selector = @selector(removeUser);
  methods[36].selector = @selector(setDefaultParmWithNSString:withId:);
  methods[37].selector = @selector(setAuthorityWithAndroidGovNistJavaxSipAddressAuthority:);
  methods[38].selector = @selector(setHostWithAndroidGovNistCoreHost:);
  methods[39].selector = @selector(setUriParmsWithAndroidGovNistCoreNameValueList:);
  methods[40].selector = @selector(setUriParmWithNSString:withId:);
  methods[41].selector = @selector(setQheadersWithAndroidGovNistCoreNameValueList:);
  methods[42].selector = @selector(setMAddrWithNSString:);
  methods[43].selector = @selector(setUserParamWithNSString:);
  methods[44].selector = @selector(setMethodWithNSString:);
  methods[45].selector = @selector(setIsdnSubAddressWithNSString:);
  methods[46].selector = @selector(setTelephoneSubscriberWithAndroidGovNistJavaxSipAddressTelephoneNumber:);
  methods[47].selector = @selector(setPortWithInt:);
  methods[48].selector = @selector(hasParameterWithNSString:);
  methods[49].selector = @selector(setQHeaderWithAndroidGovNistCoreNameValue:);
  methods[50].selector = @selector(setUriParameterWithAndroidGovNistCoreNameValue:);
  methods[51].selector = @selector(hasTransport);
  methods[52].selector = @selector(removeParameterWithNSString:);
  methods[53].selector = @selector(setHostPortWithAndroidGovNistCoreHostPort:);
  methods[54].selector = @selector(java_clone);
  methods[55].selector = @selector(getHeaderWithNSString:);
  methods[56].selector = @selector(getHeaderNames);
  methods[57].selector = @selector(getLrParam);
  methods[58].selector = @selector(getMAddrParam);
  methods[59].selector = @selector(getMethodParam);
  methods[60].selector = @selector(getParameterWithNSString:);
  methods[61].selector = @selector(getParameterNames);
  methods[62].selector = @selector(getTTLParam);
  methods[63].selector = @selector(getTransportParam);
  methods[64].selector = @selector(getUser);
  methods[65].selector = @selector(isSecure);
  methods[66].selector = @selector(isSipURI);
  methods[67].selector = @selector(setHeaderWithNSString:withNSString:);
  methods[68].selector = @selector(setHostWithNSString:);
  methods[69].selector = @selector(setLrParam);
  methods[70].selector = @selector(setMAddrParamWithNSString:);
  methods[71].selector = @selector(setMethodParamWithNSString:);
  methods[72].selector = @selector(setParameterWithNSString:withNSString:);
  methods[73].selector = @selector(setSecureWithBoolean:);
  methods[74].selector = @selector(setTTLParamWithInt:);
  methods[75].selector = @selector(setTransportParamWithNSString:);
  methods[76].selector = @selector(getUserParam);
  methods[77].selector = @selector(hasLrParam);
  methods[78].selector = @selector(hasGrParam);
  methods[79].selector = @selector(setGrParamWithNSString:);
  methods[80].selector = @selector(getGrParam);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipAddressSipUri_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "authority_", "LAndroidGovNistJavaxSipAddressAuthority;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "uriParms_", "LAndroidGovNistCoreNameValueList;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "qheaders_", "LAndroidGovNistCoreNameValueList;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "telephoneSubscriber_", "LAndroidGovNistJavaxSipAddressTelephoneNumber;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setScheme", "LNSString;", "equals", "LNSObject;", "encode", "LJavaLangStringBuilder;", "toString", "getParm", "setUserPassword", "removeHeader", "setUser", "setDefaultParm", "LNSString;LNSObject;", "setAuthority", "LAndroidGovNistJavaxSipAddressAuthority;", "setHost", "LAndroidGovNistCoreHost;", "setUriParms", "LAndroidGovNistCoreNameValueList;", "setUriParm", "setQheaders", "setMAddr", "setUserParam", "setMethod", "setIsdnSubAddress", "setTelephoneSubscriber", "LAndroidGovNistJavaxSipAddressTelephoneNumber;", "setPort", "I", "hasParameter", "setQHeader", "LAndroidGovNistCoreNameValue;", "setUriParameter", "removeParameter", "setHostPort", "LAndroidGovNistCoreHostPort;", "clone", "getHeader", "()Ljava/util/Iterator<Ljava/lang/String;>;", "getParameter", "setHeader", "LNSString;LNSString;", "LJavaTextParseException;", "setMAddrParam", "setMethodParam", "setParameter", "setSecure", "Z", "setTTLParam", "setTransportParam", "setGrParam" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipAddressSipUri = { "SipUri", "android.gov.nist.javax.sip.address", ptrTable, methods, fields, 7, 0x1, 81, 5, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipAddressSipUri;
}

@end

void AndroidGovNistJavaxSipAddressSipUri_init(AndroidGovNistJavaxSipAddressSipUri *self) {
  AndroidGovNistJavaxSipAddressGenericURI_init(self);
  JreStrongAssign(&self->scheme_, AndroidGovNistJavaxSipAddressGenericURI_SIP);
  JreStrongAssignAndConsume(&self->uriParms_, new_AndroidGovNistCoreNameValueList_init());
  JreStrongAssignAndConsume(&self->qheaders_, new_AndroidGovNistCoreNameValueList_init());
  [self->qheaders_ setSeparatorWithNSString:@"&"];
}

AndroidGovNistJavaxSipAddressSipUri *new_AndroidGovNistJavaxSipAddressSipUri_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipAddressSipUri, init)
}

AndroidGovNistJavaxSipAddressSipUri *create_AndroidGovNistJavaxSipAddressSipUri_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipAddressSipUri, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipAddressSipUri)
