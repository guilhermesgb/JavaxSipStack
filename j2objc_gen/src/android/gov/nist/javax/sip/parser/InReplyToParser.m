//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/InReplyToParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/InReplyTo.h"
#include "android/gov/nist/javax/sip/header/InReplyToList.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderNames.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/InReplyToParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"

@implementation AndroidGovNistJavaxSipParserInReplyToParser

- (instancetype)initWithNSString:(NSString *)inReplyTo {
  AndroidGovNistJavaxSipParserInReplyToParser_initWithNSString_(self, inReplyTo);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserInReplyToParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"InReplyToParser.parse"];
  AndroidGovNistJavaxSipHeaderInReplyToList *list = create_AndroidGovNistJavaxSipHeaderInReplyToList_init();
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_IN_REPLY_TO];
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] != 0x000a) {
      AndroidGovNistJavaxSipHeaderInReplyTo *inReplyTo = create_AndroidGovNistJavaxSipHeaderInReplyTo_init();
      [inReplyTo setHeaderNameWithNSString:AndroidGovNistJavaxSipHeaderSIPHeaderNames_IN_REPLY_TO];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
      AndroidGovNistCoreToken *token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
      if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == '@') {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'@'];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_SAFE];
        AndroidGovNistCoreToken *secToken = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
        [inReplyTo setCallIdWithNSString:JreStrcat("$C$", [((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue], '@', [((AndroidGovNistCoreToken *) nil_chk(secToken)) getTokenValue])];
      }
      else {
        [inReplyTo setCallIdWithNSString:[((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]];
      }
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      [list addWithId:inReplyTo];
      while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ',') {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:','];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        inReplyTo = create_AndroidGovNistJavaxSipHeaderInReplyTo_init();
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
        token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
        if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == '@') {
          [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'@'];
          [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_SAFE];
          AndroidGovNistCoreToken *secToken = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
          [inReplyTo setCallIdWithNSString:JreStrcat("$C$", [((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue], '@', [((AndroidGovNistCoreToken *) nil_chk(secToken)) getTokenValue])];
        }
        else {
          [inReplyTo setCallIdWithNSString:[((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]];
        }
        [list addWithId:inReplyTo];
      }
    }
    return list;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"InReplyToParser.parse"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserInReplyToParser = { "InReplyToParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserInReplyToParser;
}

@end

void AndroidGovNistJavaxSipParserInReplyToParser_initWithNSString_(AndroidGovNistJavaxSipParserInReplyToParser *self, NSString *inReplyTo) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, inReplyTo);
}

AndroidGovNistJavaxSipParserInReplyToParser *new_AndroidGovNistJavaxSipParserInReplyToParser_initWithNSString_(NSString *inReplyTo) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserInReplyToParser, initWithNSString_, inReplyTo)
}

AndroidGovNistJavaxSipParserInReplyToParser *create_AndroidGovNistJavaxSipParserInReplyToParser_initWithNSString_(NSString *inReplyTo) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserInReplyToParser, initWithNSString_, inReplyTo)
}

void AndroidGovNistJavaxSipParserInReplyToParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserInReplyToParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserInReplyToParser *new_AndroidGovNistJavaxSipParserInReplyToParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserInReplyToParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserInReplyToParser *create_AndroidGovNistJavaxSipParserInReplyToParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserInReplyToParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserInReplyToParser)
