//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/WarningParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderNames.h"
#include "android/gov/nist/javax/sip/header/Warning.h"
#include "android/gov/nist/javax/sip/header/WarningList.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/gov/nist/javax/sip/parser/WarningParser.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserWarningParser

- (instancetype)initWithNSString:(NSString *)warning {
  AndroidGovNistJavaxSipParserWarningParser_initWithNSString_(self, warning);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserWarningParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  AndroidGovNistJavaxSipHeaderWarningList *warningList = create_AndroidGovNistJavaxSipHeaderWarningList_init();
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"WarningParser.parse"];
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_WARNING];
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] != 0x000a) {
      AndroidGovNistJavaxSipHeaderWarning *warning = create_AndroidGovNistJavaxSipHeaderWarning_init();
      [warning setHeaderNameWithNSString:AndroidGovNistJavaxSipHeaderSIPHeaderNames_WARNING];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
      AndroidGovNistCoreToken *token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
      @try {
        jint code = JavaLangInteger_parseIntWithNSString_([((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]);
        [warning setCodeWithInt:code];
      }
      @catch (JavaLangNumberFormatException *ex) {
        @throw [self createParseExceptionWithNSString:[((JavaLangNumberFormatException *) nil_chk(ex)) getMessage]];
      }
      @catch (AndroidJavaxSipInvalidArgumentException *ex) {
        @throw [self createParseExceptionWithNSString:[((AndroidJavaxSipInvalidArgumentException *) nil_chk(ex)) getMessage]];
      }
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
      token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
      if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ':') {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:':'];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
        AndroidGovNistCoreToken *token2 = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
        [warning setAgentWithNSString:JreStrcat("$C$", [((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue], ':', [((AndroidGovNistCoreToken *) nil_chk(token2)) getTokenValue])];
      }
      else {
        [warning setAgentWithNSString:[((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]];
      }
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      NSString *text = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) quotedString];
      [warning setTextWithNSString:text];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      [warningList addWithId:warning];
      while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ',') {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:','];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        warning = create_AndroidGovNistJavaxSipHeaderWarning_init();
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
        AndroidGovNistCoreToken *tok = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
        @try {
          jint code = JavaLangInteger_parseIntWithNSString_([((AndroidGovNistCoreToken *) nil_chk(tok)) getTokenValue]);
          [warning setCodeWithInt:code];
        }
        @catch (JavaLangNumberFormatException *ex) {
          @throw [self createParseExceptionWithNSString:[((JavaLangNumberFormatException *) nil_chk(ex)) getMessage]];
        }
        @catch (AndroidJavaxSipInvalidArgumentException *ex) {
          @throw [self createParseExceptionWithNSString:[((AndroidJavaxSipInvalidArgumentException *) nil_chk(ex)) getMessage]];
        }
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
        tok = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
        if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ':') {
          [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:':'];
          [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
          AndroidGovNistCoreToken *token2 = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
          [warning setAgentWithNSString:JreStrcat("$C$", [((AndroidGovNistCoreToken *) nil_chk(tok)) getTokenValue], ':', [((AndroidGovNistCoreToken *) nil_chk(token2)) getTokenValue])];
        }
        else {
          [warning setAgentWithNSString:[((AndroidGovNistCoreToken *) nil_chk(tok)) getTokenValue]];
        }
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        text = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) quotedString];
        [warning setTextWithNSString:text];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        [warningList addWithId:warning];
      }
    }
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"WarningParser.parse"];
  }
  return warningList;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserWarningParser = { "WarningParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserWarningParser;
}

@end

void AndroidGovNistJavaxSipParserWarningParser_initWithNSString_(AndroidGovNistJavaxSipParserWarningParser *self, NSString *warning) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, warning);
}

AndroidGovNistJavaxSipParserWarningParser *new_AndroidGovNistJavaxSipParserWarningParser_initWithNSString_(NSString *warning) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserWarningParser, initWithNSString_, warning)
}

AndroidGovNistJavaxSipParserWarningParser *create_AndroidGovNistJavaxSipParserWarningParser_initWithNSString_(NSString *warning) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserWarningParser, initWithNSString_, warning)
}

void AndroidGovNistJavaxSipParserWarningParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserWarningParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserWarningParser *new_AndroidGovNistJavaxSipParserWarningParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserWarningParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserWarningParser *create_AndroidGovNistJavaxSipParserWarningParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserWarningParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserWarningParser)
