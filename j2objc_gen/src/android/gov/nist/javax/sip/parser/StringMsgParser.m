//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/StringMsgParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/Host.h"
#include "android/gov/nist/core/HostNameParser.h"
#include "android/gov/nist/javax/sip/SIPConstants.h"
#include "android/gov/nist/javax/sip/address/AddressImpl.h"
#include "android/gov/nist/javax/sip/address/GenericURI.h"
#include "android/gov/nist/javax/sip/address/SipUri.h"
#include "android/gov/nist/javax/sip/address/TelephoneNumber.h"
#include "android/gov/nist/javax/sip/header/ExtensionHeaderImpl.h"
#include "android/gov/nist/javax/sip/header/NameMap.h"
#include "android/gov/nist/javax/sip/header/RequestLine.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/StatusLine.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/message/SIPRequest.h"
#include "android/gov/nist/javax/sip/message/SIPResponse.h"
#include "android/gov/nist/javax/sip/parser/AddressParser.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/ParseExceptionListener.h"
#include "android/gov/nist/javax/sip/parser/ParserFactory.h"
#include "android/gov/nist/javax/sip/parser/RequestLineParser.h"
#include "android/gov/nist/javax/sip/parser/StatusLineParser.h"
#include "android/gov/nist/javax/sip/parser/StringMsgParser.h"
#include "android/gov/nist/javax/sip/parser/URLParser.h"
#include "android/javax/sip/header/ContentLengthHeader.h"
#include "java/io/PrintStream.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Runnable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/text/ParseException.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipParserStringMsgParser_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipParserStringMsgParser_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipParserStringMsgParser_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipParserStringMsgParser, logger, id<OrgSlf4jLogger>)

@interface AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread : NSObject < JavaLangRunnable > {
 @public
  IOSObjectArray *messages_;
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)messagesToParse;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread, messages_, IOSObjectArray *)

__attribute__((unused)) static void AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread_initWithNSStringArray_(AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread *self, IOSObjectArray *messagesToParse);

__attribute__((unused)) static AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread *new_AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread_initWithNSStringArray_(IOSObjectArray *messagesToParse) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread *create_AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread_initWithNSStringArray_(IOSObjectArray *messagesToParse);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipParserStringMsgParser)

jboolean AndroidGovNistJavaxSipParserStringMsgParser_computeContentLengthFromMessage = false;

@implementation AndroidGovNistJavaxSipParserStringMsgParser

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipParserStringMsgParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (AndroidGovNistJavaxSipMessageSIPMessage *)parseSIPMessageWithByteArray:(IOSByteArray *)msgBuffer
                                                              withBoolean:(jboolean)readBody
                                                              withBoolean:(jboolean)strict
                   withAndroidGovNistJavaxSipParserParseExceptionListener:(id<AndroidGovNistJavaxSipParserParseExceptionListener>)parseExceptionListener {
  if (msgBuffer == nil || msgBuffer->size_ == 0) return nil;
  jint i = 0;
  @try {
    while (IOSByteArray_Get(msgBuffer, i) < (jint) 0x20) i++;
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserStringMsgParser_logger)) debugWithNSString:@"handled only control char so returning null"];
    return nil;
  }
  NSString *currentLine = nil;
  NSString *currentHeader = nil;
  jboolean isFirstLine = true;
  AndroidGovNistJavaxSipMessageSIPMessage *message = nil;
  do {
    jint lineStart = i;
    @try {
      while (IOSByteArray_Get(msgBuffer, i) != 0x000d && IOSByteArray_Get(msgBuffer, i) != 0x000a) i++;
    }
    @catch (JavaLangArrayIndexOutOfBoundsException *e) {
      break;
    }
    jint lineLength = i - lineStart;
    @try {
      currentLine = [NSString java_stringWithBytes:msgBuffer offset:lineStart length:lineLength charsetName:@"UTF-8"];
    }
    @catch (JavaIoUnsupportedEncodingException *e) {
      @throw create_JavaTextParseException_initWithNSString_withInt_(@"Bad message encoding!", 0);
    }
    currentLine = AndroidGovNistJavaxSipParserStringMsgParser_trimEndOfLineWithNSString_(currentLine);
    if (((jint) [((NSString *) nil_chk(currentLine)) length]) == 0) {
      if (currentHeader != nil && message != nil) {
        [self processHeaderWithNSString:currentHeader withAndroidGovNistJavaxSipMessageSIPMessage:message withAndroidGovNistJavaxSipParserParseExceptionListener:parseExceptionListener withByteArray:msgBuffer];
      }
    }
    else {
      if (isFirstLine) {
        message = [self processFirstLineWithNSString:currentLine withAndroidGovNistJavaxSipParserParseExceptionListener:parseExceptionListener withByteArray:msgBuffer];
      }
      else {
        jchar firstChar = [currentLine charAtWithInt:0];
        if (firstChar == 0x0009 || firstChar == ' ') {
          if (currentHeader == nil) @throw create_JavaTextParseException_initWithNSString_withInt_(@"Bad header continuation.", 0);
          JreStrAppend(&currentHeader, "$", [currentLine java_substring:1]);
        }
        else {
          if (currentHeader != nil && message != nil) {
            [self processHeaderWithNSString:currentHeader withAndroidGovNistJavaxSipMessageSIPMessage:message withAndroidGovNistJavaxSipParserParseExceptionListener:parseExceptionListener withByteArray:msgBuffer];
          }
          currentHeader = currentLine;
        }
      }
    }
    if (IOSByteArray_Get(msgBuffer, i) == 0x000d && msgBuffer->size_ > i + 1 && IOSByteArray_Get(msgBuffer, i + 1) == 0x000a) i++;
    i++;
    isFirstLine = false;
  }
  while (((jint) [currentLine length]) > 0);
  if (message == nil) @throw create_JavaTextParseException_initWithNSString_withInt_(@"Bad message", 0);
  [message setSizeWithInt:i];
  if (readBody && [message getContentLength] != nil) {
    if ([((id<AndroidJavaxSipHeaderContentLengthHeader>) nil_chk([message getContentLength])) getContentLength] != 0) {
      jint bodyLength = msgBuffer->size_ - i;
      IOSByteArray *body = [IOSByteArray arrayWithLength:bodyLength];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(msgBuffer, i, body, 0, bodyLength);
      [message setMessageContentWithByteArray:body withBoolean:!strict withBoolean:AndroidGovNistJavaxSipParserStringMsgParser_computeContentLengthFromMessage withInt:[((id<AndroidJavaxSipHeaderContentLengthHeader>) nil_chk([message getContentLength])) getContentLength]];
    }
    else if (!AndroidGovNistJavaxSipParserStringMsgParser_computeContentLengthFromMessage && ([((id<AndroidJavaxSipHeaderContentLengthHeader>) nil_chk([message getContentLength])) getContentLength] == 0) & strict) {
      NSString *last4Chars = [NSString java_stringWithBytes:msgBuffer offset:msgBuffer->size_ - 4 length:4];
      if (![@"\x0d\n\x0d\n" isEqual:last4Chars]) {
        @throw create_JavaTextParseException_initWithNSString_withInt_(@"Extraneous characters at the end of the message ", i);
      }
    }
  }
  return message;
}

+ (NSString *)trimEndOfLineWithNSString:(NSString *)line {
  return AndroidGovNistJavaxSipParserStringMsgParser_trimEndOfLineWithNSString_(line);
}

- (AndroidGovNistJavaxSipMessageSIPMessage *)processFirstLineWithNSString:(NSString *)firstLine
                   withAndroidGovNistJavaxSipParserParseExceptionListener:(id<AndroidGovNistJavaxSipParserParseExceptionListener>)parseExceptionListener
                                                            withByteArray:(IOSByteArray *)msgBuffer {
  AndroidGovNistJavaxSipMessageSIPMessage *message;
  if (![((NSString *) nil_chk(firstLine)) hasPrefix:AndroidGovNistJavaxSipSIPConstants_SIP_VERSION_STRING]) {
    message = create_AndroidGovNistJavaxSipMessageSIPRequest_init();
    @try {
      AndroidGovNistJavaxSipHeaderRequestLine *requestLine = [create_AndroidGovNistJavaxSipParserRequestLineParser_initWithNSString_(JreStrcat("$C", firstLine, 0x000a)) parse];
      [((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(message, [AndroidGovNistJavaxSipMessageSIPRequest class])) setRequestLineWithAndroidGovNistJavaxSipHeaderRequestLine:requestLine];
    }
    @catch (JavaTextParseException *ex) {
      if (parseExceptionListener != nil) @try {
        [parseExceptionListener handleExceptionWithJavaTextParseException:ex withAndroidGovNistJavaxSipMessageSIPMessage:message withIOSClass:AndroidGovNistJavaxSipHeaderRequestLine_class_() withNSString:firstLine withNSString:[NSString java_stringWithBytes:msgBuffer charsetName:@"UTF-8"]];
      }
      @catch (JavaIoUnsupportedEncodingException *e) {
        [((JavaIoUnsupportedEncodingException *) nil_chk(e)) printStackTrace];
      }
      else @throw ex;
    }
  }
  else {
    message = create_AndroidGovNistJavaxSipMessageSIPResponse_init();
    @try {
      AndroidGovNistJavaxSipHeaderStatusLine *sl = [create_AndroidGovNistJavaxSipParserStatusLineParser_initWithNSString_(JreStrcat("$C", firstLine, 0x000a)) parse];
      [((AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(message, [AndroidGovNistJavaxSipMessageSIPResponse class])) setStatusLineWithAndroidGovNistJavaxSipHeaderStatusLine:sl];
    }
    @catch (JavaTextParseException *ex) {
      if (parseExceptionListener != nil) {
        @try {
          [parseExceptionListener handleExceptionWithJavaTextParseException:ex withAndroidGovNistJavaxSipMessageSIPMessage:message withIOSClass:AndroidGovNistJavaxSipHeaderStatusLine_class_() withNSString:firstLine withNSString:[NSString java_stringWithBytes:msgBuffer charsetName:@"UTF-8"]];
        }
        @catch (JavaIoUnsupportedEncodingException *e) {
          [((JavaIoUnsupportedEncodingException *) nil_chk(e)) printStackTrace];
        }
      }
      else @throw ex;
    }
  }
  return message;
}

- (void)processHeaderWithNSString:(NSString *)header
withAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)message
withAndroidGovNistJavaxSipParserParseExceptionListener:(id<AndroidGovNistJavaxSipParserParseExceptionListener>)parseExceptionListener
                    withByteArray:(IOSByteArray *)rawMessage {
  if (header == nil || ((jint) [header length]) == 0) return;
  AndroidGovNistJavaxSipParserHeaderParser *headerParser = nil;
  @try {
    headerParser = AndroidGovNistJavaxSipParserParserFactory_createParserWithNSString_(JreStrcat("$C", header, 0x000a));
  }
  @catch (JavaTextParseException *ex) {
    if (parseExceptionListener != nil) {
      [parseExceptionListener handleExceptionWithJavaTextParseException:ex withAndroidGovNistJavaxSipMessageSIPMessage:message withIOSClass:nil withNSString:header withNSString:nil];
      return;
    }
    else {
      @throw ex;
    }
  }
  @try {
    AndroidGovNistJavaxSipHeaderSIPHeader *sipHeader = [((AndroidGovNistJavaxSipParserHeaderParser *) nil_chk(headerParser)) parse];
    [((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(message)) attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:sipHeader withBoolean:false];
  }
  @catch (JavaTextParseException *ex) {
    if (parseExceptionListener != nil) {
      NSString *headerName = AndroidGovNistJavaxSipParserLexer_getHeaderNameWithNSString_(header);
      IOSClass *headerClass = AndroidGovNistJavaxSipHeaderNameMap_getClassFromNameWithNSString_(headerName);
      if (headerClass == nil) {
        headerClass = AndroidGovNistJavaxSipHeaderExtensionHeaderImpl_class_();
      }
      @try {
        [parseExceptionListener handleExceptionWithJavaTextParseException:ex withAndroidGovNistJavaxSipMessageSIPMessage:message withIOSClass:headerClass withNSString:header withNSString:[NSString java_stringWithBytes:rawMessage charsetName:@"UTF-8"]];
      }
      @catch (JavaIoUnsupportedEncodingException *e) {
        [((JavaIoUnsupportedEncodingException *) nil_chk(e)) printStackTrace];
      }
    }
  }
}

- (AndroidGovNistJavaxSipAddressAddressImpl *)parseAddressWithNSString:(NSString *)address {
  AndroidGovNistJavaxSipParserAddressParser *addressParser = create_AndroidGovNistJavaxSipParserAddressParser_initWithNSString_(address);
  return [addressParser addressWithBoolean:true];
}

- (AndroidGovNistCoreHost *)parseHostWithNSString:(NSString *)host {
  AndroidGovNistJavaxSipParserLexer *lexer = create_AndroidGovNistJavaxSipParserLexer_initWithNSString_withNSString_(@"charLexer", host);
  return [create_AndroidGovNistCoreHostNameParser_initWithAndroidGovNistCoreLexerCore_(lexer) host];
}

- (AndroidGovNistJavaxSipAddressTelephoneNumber *)parseTelephoneNumberWithNSString:(NSString *)telephone_number {
  return [create_AndroidGovNistJavaxSipParserURLParser_initWithNSString_(telephone_number) parseTelephoneNumberWithBoolean:true];
}

- (AndroidGovNistJavaxSipAddressSipUri *)parseSIPUrlWithNSString:(NSString *)url {
  @try {
    return [create_AndroidGovNistJavaxSipParserURLParser_initWithNSString_(url) sipURLWithBoolean:true];
  }
  @catch (JavaLangClassCastException *ex) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", url, @" Not a SIP URL "), 0);
  }
}

- (AndroidGovNistJavaxSipAddressGenericURI *)parseUrlWithNSString:(NSString *)url {
  return [create_AndroidGovNistJavaxSipParserURLParser_initWithNSString_(url) parse];
}

+ (AndroidGovNistJavaxSipHeaderSIPHeader *)parseSIPHeaderWithNSString:(NSString *)header {
  return AndroidGovNistJavaxSipParserStringMsgParser_parseSIPHeaderWithNSString_(header);
}

- (AndroidGovNistJavaxSipHeaderRequestLine *)parseSIPRequestLineWithNSString:(NSString *)requestLine {
  JreStrAppend(&requestLine, "$", @"\n");
  return [create_AndroidGovNistJavaxSipParserRequestLineParser_initWithNSString_(requestLine) parse];
}

- (AndroidGovNistJavaxSipHeaderStatusLine *)parseSIPStatusLineWithNSString:(NSString *)statusLine {
  JreStrAppend(&statusLine, "$", @"\n");
  return [create_AndroidGovNistJavaxSipParserStatusLineParser_initWithNSString_(statusLine) parse];
}

+ (void)setComputeContentLengthFromMessageWithBoolean:(jboolean)computeContentLengthFromMessage {
  AndroidGovNistJavaxSipParserStringMsgParser_setComputeContentLengthFromMessageWithBoolean_(computeContentLengthFromMessage);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  AndroidGovNistJavaxSipParserStringMsgParser_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipMessageSIPMessage;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0xc, 3, 4, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipMessageSIPMessage;", 0x4, 5, 6, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, 2, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipAddressAddressImpl;", 0x1, 9, 4, 2, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreHost;", 0x1, 10, 4, 2, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipAddressTelephoneNumber;", 0x1, 11, 4, 2, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipAddressSipUri;", 0x1, 12, 4, 2, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipAddressGenericURI;", 0x1, 13, 4, 2, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x9, 14, 4, 2, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderRequestLine;", 0x1, 15, 4, 2, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderStatusLine;", 0x1, 16, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 20, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseSIPMessageWithByteArray:withBoolean:withBoolean:withAndroidGovNistJavaxSipParserParseExceptionListener:);
  methods[2].selector = @selector(trimEndOfLineWithNSString:);
  methods[3].selector = @selector(processFirstLineWithNSString:withAndroidGovNistJavaxSipParserParseExceptionListener:withByteArray:);
  methods[4].selector = @selector(processHeaderWithNSString:withAndroidGovNistJavaxSipMessageSIPMessage:withAndroidGovNistJavaxSipParserParseExceptionListener:withByteArray:);
  methods[5].selector = @selector(parseAddressWithNSString:);
  methods[6].selector = @selector(parseHostWithNSString:);
  methods[7].selector = @selector(parseTelephoneNumberWithNSString:);
  methods[8].selector = @selector(parseSIPUrlWithNSString:);
  methods[9].selector = @selector(parseUrlWithNSString:);
  methods[10].selector = @selector(parseSIPHeaderWithNSString:);
  methods[11].selector = @selector(parseSIPRequestLineWithNSString:);
  methods[12].selector = @selector(parseSIPStatusLineWithNSString:);
  methods[13].selector = @selector(setComputeContentLengthFromMessageWithBoolean:);
  methods[14].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "computeContentLengthFromMessage", "Z", .constantValue.asLong = 0, 0xc, -1, 21, -1, -1 },
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 22, -1, -1 },
  };
  static const void *ptrTable[] = { "parseSIPMessage", "[BZZLAndroidGovNistJavaxSipParserParseExceptionListener;", "LJavaTextParseException;", "trimEndOfLine", "LNSString;", "processFirstLine", "LNSString;LAndroidGovNistJavaxSipParserParseExceptionListener;[B", "processHeader", "LNSString;LAndroidGovNistJavaxSipMessageSIPMessage;LAndroidGovNistJavaxSipParserParseExceptionListener;[B", "parseAddress", "parseHost", "parseTelephoneNumber", "parseSIPUrl", "parseUrl", "parseSIPHeader", "parseSIPRequestLine", "parseSIPStatusLine", "setComputeContentLengthFromMessage", "Z", "main", "[LNSString;", &AndroidGovNistJavaxSipParserStringMsgParser_computeContentLengthFromMessage, &AndroidGovNistJavaxSipParserStringMsgParser_logger };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserStringMsgParser = { "StringMsgParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, fields, 7, 0x1, 15, 2, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserStringMsgParser;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipParserStringMsgParser class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipParserStringMsgParser_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipParserStringMsgParser_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipParserStringMsgParser)
  }
}

@end

void AndroidGovNistJavaxSipParserStringMsgParser_init(AndroidGovNistJavaxSipParserStringMsgParser *self) {
  NSObject_init(self);
}

AndroidGovNistJavaxSipParserStringMsgParser *new_AndroidGovNistJavaxSipParserStringMsgParser_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserStringMsgParser, init)
}

AndroidGovNistJavaxSipParserStringMsgParser *create_AndroidGovNistJavaxSipParserStringMsgParser_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserStringMsgParser, init)
}

NSString *AndroidGovNistJavaxSipParserStringMsgParser_trimEndOfLineWithNSString_(NSString *line) {
  AndroidGovNistJavaxSipParserStringMsgParser_initialize();
  if (line == nil) return line;
  jint i = ((jint) [line length]) - 1;
  while (i >= 0 && [line charAtWithInt:i] <= (jint) 0x20) i--;
  if (i == ((jint) [line length]) - 1) return line;
  if (i == -1) return @"";
  return [line java_substring:0 endIndex:i + 1];
}

AndroidGovNistJavaxSipHeaderSIPHeader *AndroidGovNistJavaxSipParserStringMsgParser_parseSIPHeaderWithNSString_(NSString *header) {
  AndroidGovNistJavaxSipParserStringMsgParser_initialize();
  jint start = 0;
  jint end = ((jint) [((NSString *) nil_chk(header)) length]) - 1;
  @try {
    while ([header charAtWithInt:start] <= (jint) 0x20) start++;
    while ([header charAtWithInt:end] <= (jint) 0x20) end--;
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(@"Empty header.", 0);
  }
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_initWithInt_(end + 1);
  jint i = start;
  jint lineStart = start;
  jboolean endOfLine = false;
  while (i <= end) {
    jchar c = [header charAtWithInt:i];
    if (c == 0x000d || c == 0x000a) {
      if (!endOfLine) {
        [buffer appendWithNSString:[header java_substring:lineStart endIndex:i]];
        endOfLine = true;
      }
    }
    else {
      if (endOfLine) {
        endOfLine = false;
        if (c == ' ' || c == 0x0009) {
          [buffer appendWithChar:' '];
          lineStart = i + 1;
        }
        else {
          lineStart = i;
        }
      }
    }
    i++;
  }
  [buffer appendWithNSString:[header java_substring:lineStart endIndex:i]];
  [buffer appendWithChar:0x000a];
  AndroidGovNistJavaxSipParserHeaderParser *hp = AndroidGovNistJavaxSipParserParserFactory_createParserWithNSString_([buffer description]);
  if (hp == nil) @throw create_JavaTextParseException_initWithNSString_withInt_(@"could not create parser", 0);
  return [hp parse];
}

void AndroidGovNistJavaxSipParserStringMsgParser_setComputeContentLengthFromMessageWithBoolean_(jboolean computeContentLengthFromMessage) {
  AndroidGovNistJavaxSipParserStringMsgParser_initialize();
  AndroidGovNistJavaxSipParserStringMsgParser_computeContentLengthFromMessage = computeContentLengthFromMessage;
}

void AndroidGovNistJavaxSipParserStringMsgParser_mainWithNSStringArray_(IOSObjectArray *args) {
  AndroidGovNistJavaxSipParserStringMsgParser_initialize();
  IOSObjectArray *messages = [IOSObjectArray arrayWithObjects:(id[]){ @"SIP/2.0 200 OK\x0d\nTo: \"The Little Blister\" <sip:LittleGuy@there.com>;tag=469bc066\x0d\nFrom: \"The Master Blaster\" <sip:BigGuy@here.com>;tag=11\x0d\nVia: SIP/2.0/UDP 139.10.134.246:5060;branch=z9hG4bK8b0a86f6_1030c7d18e0_17;received=139.10.134.246\x0d\nCall-ID: 1030c7d18ae_a97b0b_b@8b0a86f6\x0d\nCSeq: 1 SUBSCRIBE\x0d\nContact: <sip:172.16.11.162:5070>\x0d\nContent-Length: 0\x0d\n\x0d\n", @"SIP/2.0 180 Ringing\x0d\nVia: SIP/2.0/UDP 172.18.1.29:5060;branch=z9hG4bK43fc10fb4446d55fc5c8f969607991f4\x0d\nTo: \"0440\" <sip:0440@212.209.220.131>;tag=2600\x0d\nFrom: \"Andreas\" <sip:andreas@e-horizon.se>;tag=8524\x0d\nCall-ID: f51a1851c5f570606140f14c8eb64fd3@172.18.1.29\x0d\nCSeq: 1 INVITE\x0d\nMax-Forwards: 70\x0d\nRecord-Route: <sip:212.209.220.131:5060>\x0d\nContent-Length: 0\x0d\n\x0d\n", @"REGISTER sip:nist.gov SIP/2.0\x0d\nVia: SIP/2.0/UDP 129.6.55.182:14826\x0d\nMax-Forwards: 70\x0d\nFrom: <sip:mranga@nist.gov>;tag=6fcd5c7ace8b4a45acf0f0cd539b168b;epid=0d4c418ddf\x0d\nTo: <sip:mranga@nist.gov>\x0d\nCall-ID: c5679907eb954a8da9f9dceb282d7230@129.6.55.182\x0d\nCSeq: 1 REGISTER\x0d\nContact: <sip:129.6.55.182:14826>;methods=\"INVITE, MESSAGE, INFO, SUBSCRIBE, OPTIONS, BYE, CANCEL, NOTIFY, ACK, REFER\"\x0d\nUser-Agent: RTC/(Microsoft RTC)\x0d\nEvent:  registration\x0d\nAllow-Events: presence\x0d\nContent-Length: 0\x0d\n\x0d\nINVITE sip:littleguy@there.com:5060 SIP/2.0\x0d\nVia: SIP/2.0/UDP 65.243.118.100:5050\x0d\nFrom: M. Ranganathan  <sip:M.Ranganathan@sipbakeoff.com>;tag=1234\x0d\nTo: \"littleguy@there.com\" <sip:littleguy@there.com:5060> \x0d\nCall-ID: Q2AboBsaGn9!?x6@sipbakeoff.com \x0d\nCSeq: 1 INVITE \x0d\nContent-Length: 247\x0d\n\x0d\nv=0\x0d\no=4855 13760799956958020 13760799956958020 IN IP4  129.6.55.78\x0d\ns=mysession session\x0d\np=+46 8 52018010\x0d\nc=IN IP4  129.6.55.78\x0d\nt=0 0\x0d\nm=audio 6022 RTP/AVP 0 4 18\x0d\na=rtpmap:0 PCMU/8000\x0d\na=rtpmap:4 G723/8000\x0d\na=rtpmap:18 G729A/8000\x0d\na=ptime:20\x0d\n" } count:3 type:NSString_class_()];
  for (jint i = 0; i < 20; i++) {
    [create_JavaLangThread_initWithJavaLangRunnable_(create_AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread_initWithNSStringArray_(messages)) start];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserStringMsgParser)

@implementation AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread

- (instancetype)initWithNSStringArray:(IOSObjectArray *)messagesToParse {
  AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread_initWithNSStringArray_(self, messagesToParse);
  return self;
}

- (void)run {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(messages_))->size_; i++) {
    AndroidGovNistJavaxSipParserStringMsgParser *smp = create_AndroidGovNistJavaxSipParserStringMsgParser_init();
    @try {
      AndroidGovNistJavaxSipMessageSIPMessage *sipMessage = [smp parseSIPMessageWithByteArray:[((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(messages_), i))) java_getBytes] withBoolean:true withBoolean:false withAndroidGovNistJavaxSipParserParseExceptionListener:nil];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$$", @" i = ", i, @" branchId = ", [((AndroidGovNistJavaxSipHeaderVia *) nil_chk([((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) getTopmostVia])) getBranch])];
    }
    @catch (JavaTextParseException *ex) {
    }
  }
}

- (void)dealloc {
  RELEASE_(messages_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSStringArray:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "messages_", "[LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;", "LAndroidGovNistJavaxSipParserStringMsgParser;", "mainWithNSStringArray:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread = { "ParserThread", "android.gov.nist.javax.sip.parser", ptrTable, methods, fields, 7, 0x0, 2, 1, 1, -1, 2, -1, -1 };
  return &_AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread;
}

@end

void AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread_initWithNSStringArray_(AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread *self, IOSObjectArray *messagesToParse) {
  NSObject_init(self);
  JreStrongAssign(&self->messages_, messagesToParse);
}

AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread *new_AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread_initWithNSStringArray_(IOSObjectArray *messagesToParse) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread, initWithNSStringArray_, messagesToParse)
}

AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread *create_AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread_initWithNSStringArray_(IOSObjectArray *messagesToParse) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread, initWithNSStringArray_, messagesToParse)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserStringMsgParser_1ParserThread)
