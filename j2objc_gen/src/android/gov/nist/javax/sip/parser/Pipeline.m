//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/Pipeline.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/javax/sip/parser/Pipeline.h"
#include "android/gov/nist/javax/sip/stack/SIPStackTimerTask.h"
#include "android/gov/nist/javax/sip/stack/timers/SipTimer.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/InterruptedException.h"
#include "java/util/LinkedList.h"
#include "java/util/NoSuchElementException.h"

@interface AndroidGovNistJavaxSipParserPipeline () {
 @public
  JavaUtilLinkedList *buffList_;
  AndroidGovNistJavaxSipParserPipeline_Buffer *currentBuffer_;
  jboolean isClosed_;
  id<AndroidGovNistJavaxSipStackTimersSipTimer> timer_;
  JavaIoInputStream *pipe_;
  jint readTimeout_;
  AndroidGovNistJavaxSipStackSIPStackTimerTask *myTimerTask_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserPipeline, buffList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserPipeline, currentBuffer_, AndroidGovNistJavaxSipParserPipeline_Buffer *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserPipeline, timer_, id<AndroidGovNistJavaxSipStackTimersSipTimer>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserPipeline, pipe_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserPipeline, myTimerTask_, AndroidGovNistJavaxSipStackSIPStackTimerTask *)

@interface AndroidGovNistJavaxSipParserPipeline_MyTimer () {
 @public
  jboolean isCancelled_;
}

@end

@implementation AndroidGovNistJavaxSipParserPipeline

- (void)startTimer {
  if (self->readTimeout_ == -1) return;
  JreStrongAssignAndConsume(&self->myTimerTask_, new_AndroidGovNistJavaxSipParserPipeline_MyTimer_initWithAndroidGovNistJavaxSipParserPipeline_withAndroidGovNistJavaxSipParserPipeline_(self, self));
  [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk(self->timer_)) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:self->myTimerTask_ withLong:self->readTimeout_];
}

- (void)stopTimer {
  if (self->readTimeout_ == -1) return;
  if (self->myTimerTask_ != nil) [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk(self->timer_)) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:myTimerTask_];
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)pipe
                                  withInt:(jint)readTimeout
withAndroidGovNistJavaxSipStackTimersSipTimer:(id<AndroidGovNistJavaxSipStackTimersSipTimer>)timer {
  AndroidGovNistJavaxSipParserPipeline_initWithJavaIoInputStream_withInt_withAndroidGovNistJavaxSipStackTimersSipTimer_(self, pipe, readTimeout, timer);
  return self;
}

- (void)writeWithByteArray:(IOSByteArray *)bytes
                   withInt:(jint)start
                   withInt:(jint)length {
  if (self->isClosed_) @throw create_JavaIoIOException_initWithNSString_(@"Closed!!");
  AndroidGovNistJavaxSipParserPipeline_Buffer *buff = create_AndroidGovNistJavaxSipParserPipeline_Buffer_initWithAndroidGovNistJavaxSipParserPipeline_withByteArray_withInt_(self, bytes, length);
  buff->ptr_ = start;
  @synchronized(self->buffList_) {
    [((JavaUtilLinkedList *) nil_chk(buffList_)) addWithId:buff];
    [((JavaUtilLinkedList *) nil_chk(buffList_)) java_notifyAll];
  }
}

- (void)writeWithByteArray:(IOSByteArray *)bytes {
  if (self->isClosed_) @throw create_JavaIoIOException_initWithNSString_(@"Closed!!");
  AndroidGovNistJavaxSipParserPipeline_Buffer *buff = create_AndroidGovNistJavaxSipParserPipeline_Buffer_initWithAndroidGovNistJavaxSipParserPipeline_withByteArray_withInt_(self, bytes, ((IOSByteArray *) nil_chk(bytes))->size_);
  @synchronized(self->buffList_) {
    [((JavaUtilLinkedList *) nil_chk(buffList_)) addWithId:buff];
    [((JavaUtilLinkedList *) nil_chk(buffList_)) java_notifyAll];
  }
}

- (void)close {
  self->isClosed_ = true;
  @synchronized(self->buffList_) {
    [((JavaUtilLinkedList *) nil_chk(self->buffList_)) java_notifyAll];
  }
  [((JavaIoInputStream *) nil_chk(self->pipe_)) close];
}

- (jint)read {
  @synchronized(self->buffList_) {
    if (currentBuffer_ != nil && currentBuffer_->ptr_ < currentBuffer_->length_) {
      jint retval = [currentBuffer_ getNextByte];
      if (((AndroidGovNistJavaxSipParserPipeline_Buffer *) nil_chk(currentBuffer_))->ptr_ == currentBuffer_->length_) JreStrongAssign(&self->currentBuffer_, nil);
      return retval;
    }
    if (self->isClosed_ && [((JavaUtilLinkedList *) nil_chk(self->buffList_)) isEmpty]) return -1;
    @try {
      while ([((JavaUtilLinkedList *) nil_chk(self->buffList_)) isEmpty]) {
        [((JavaUtilLinkedList *) nil_chk(self->buffList_)) java_wait];
        if ([((JavaUtilLinkedList *) nil_chk(self->buffList_)) isEmpty] && self->isClosed_) return -1;
      }
      JreStrongAssign(&currentBuffer_, (AndroidGovNistJavaxSipParserPipeline_Buffer *) cast_chk([((JavaUtilLinkedList *) nil_chk(self->buffList_)) removeFirst], [AndroidGovNistJavaxSipParserPipeline_Buffer class]));
      jint retval = [((AndroidGovNistJavaxSipParserPipeline_Buffer *) nil_chk(currentBuffer_)) getNextByte];
      if (((AndroidGovNistJavaxSipParserPipeline_Buffer *) nil_chk(currentBuffer_))->ptr_ == currentBuffer_->length_) JreStrongAssign(&self->currentBuffer_, nil);
      return retval;
    }
    @catch (JavaLangInterruptedException *ex) {
      @throw create_JavaIoIOException_initWithNSString_([((JavaLangInterruptedException *) nil_chk(ex)) getMessage]);
    }
    @catch (JavaUtilNoSuchElementException *ex) {
      [((JavaUtilNoSuchElementException *) nil_chk(ex)) printStackTrace];
      @throw create_JavaIoIOException_initWithNSString_([ex getMessage]);
    }
  }
}

- (jboolean)isClosed {
  return isClosed_;
}

- (void)dealloc {
  RELEASE_(buffList_);
  RELEASE_(currentBuffer_);
  RELEASE_(timer_);
  RELEASE_(pipe_);
  RELEASE_(myTimerTask_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(startTimer);
  methods[1].selector = @selector(stopTimer);
  methods[2].selector = @selector(initWithJavaIoInputStream:withInt:withAndroidGovNistJavaxSipStackTimersSipTimer:);
  methods[3].selector = @selector(writeWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(writeWithByteArray:);
  methods[5].selector = @selector(close);
  methods[6].selector = @selector(read);
  methods[7].selector = @selector(isClosed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "buffList_", "LJavaUtilLinkedList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentBuffer_", "LAndroidGovNistJavaxSipParserPipeline_Buffer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isClosed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timer_", "LAndroidGovNistJavaxSipStackTimersSipTimer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pipe_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "readTimeout_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "myTimerTask_", "LAndroidGovNistJavaxSipStackSIPStackTimerTask;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;ILAndroidGovNistJavaxSipStackTimersSipTimer;", "write", "[BII", "LJavaIoIOException;", "[B", "LAndroidGovNistJavaxSipParserPipeline_MyTimer;LAndroidGovNistJavaxSipParserPipeline_Buffer;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserPipeline = { "Pipeline", "android.gov.nist.javax.sip.parser", ptrTable, methods, fields, 7, 0x1, 8, 7, -1, 5, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserPipeline;
}

@end

void AndroidGovNistJavaxSipParserPipeline_initWithJavaIoInputStream_withInt_withAndroidGovNistJavaxSipStackTimersSipTimer_(AndroidGovNistJavaxSipParserPipeline *self, JavaIoInputStream *pipe, jint readTimeout, id<AndroidGovNistJavaxSipStackTimersSipTimer> timer) {
  JavaIoInputStream_init(self);
  JreStrongAssign(&self->timer_, timer);
  JreStrongAssign(&self->pipe_, pipe);
  JreStrongAssignAndConsume(&self->buffList_, new_JavaUtilLinkedList_init());
  self->readTimeout_ = readTimeout;
}

AndroidGovNistJavaxSipParserPipeline *new_AndroidGovNistJavaxSipParserPipeline_initWithJavaIoInputStream_withInt_withAndroidGovNistJavaxSipStackTimersSipTimer_(JavaIoInputStream *pipe, jint readTimeout, id<AndroidGovNistJavaxSipStackTimersSipTimer> timer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserPipeline, initWithJavaIoInputStream_withInt_withAndroidGovNistJavaxSipStackTimersSipTimer_, pipe, readTimeout, timer)
}

AndroidGovNistJavaxSipParserPipeline *create_AndroidGovNistJavaxSipParserPipeline_initWithJavaIoInputStream_withInt_withAndroidGovNistJavaxSipStackTimersSipTimer_(JavaIoInputStream *pipe, jint readTimeout, id<AndroidGovNistJavaxSipStackTimersSipTimer> timer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserPipeline, initWithJavaIoInputStream_withInt_withAndroidGovNistJavaxSipStackTimersSipTimer_, pipe, readTimeout, timer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserPipeline)

@implementation AndroidGovNistJavaxSipParserPipeline_MyTimer

- (instancetype)initWithAndroidGovNistJavaxSipParserPipeline:(AndroidGovNistJavaxSipParserPipeline *)outer$
                    withAndroidGovNistJavaxSipParserPipeline:(AndroidGovNistJavaxSipParserPipeline *)pipeline {
  AndroidGovNistJavaxSipParserPipeline_MyTimer_initWithAndroidGovNistJavaxSipParserPipeline_withAndroidGovNistJavaxSipParserPipeline_(self, outer$, pipeline);
  return self;
}

- (void)runTask {
  if (self->isCancelled_) {
    JreStrongAssign(&self->pipeline_, nil);
    return;
  }
  @try {
    [((AndroidGovNistJavaxSipParserPipeline *) nil_chk(pipeline_)) close];
  }
  @catch (JavaIoIOException *ex) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
  }
}

- (void)cleanUpBeforeCancel {
  self->isCancelled_ = true;
  JreStrongAssign(&self->pipeline_, nil);
  [super cleanUpBeforeCancel];
}

- (void)dealloc {
  RELEASE_(pipeline_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipParserPipeline:withAndroidGovNistJavaxSipParserPipeline:);
  methods[1].selector = @selector(runTask);
  methods[2].selector = @selector(cleanUpBeforeCancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pipeline_", "LAndroidGovNistJavaxSipParserPipeline;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isCancelled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipParserPipeline;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserPipeline_MyTimer = { "MyTimer", "android.gov.nist.javax.sip.parser", ptrTable, methods, fields, 7, 0x0, 3, 2, 0, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserPipeline_MyTimer;
}

@end

void AndroidGovNistJavaxSipParserPipeline_MyTimer_initWithAndroidGovNistJavaxSipParserPipeline_withAndroidGovNistJavaxSipParserPipeline_(AndroidGovNistJavaxSipParserPipeline_MyTimer *self, AndroidGovNistJavaxSipParserPipeline *outer$, AndroidGovNistJavaxSipParserPipeline *pipeline) {
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
  JreStrongAssign(&self->pipeline_, pipeline);
}

AndroidGovNistJavaxSipParserPipeline_MyTimer *new_AndroidGovNistJavaxSipParserPipeline_MyTimer_initWithAndroidGovNistJavaxSipParserPipeline_withAndroidGovNistJavaxSipParserPipeline_(AndroidGovNistJavaxSipParserPipeline *outer$, AndroidGovNistJavaxSipParserPipeline *pipeline) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserPipeline_MyTimer, initWithAndroidGovNistJavaxSipParserPipeline_withAndroidGovNistJavaxSipParserPipeline_, outer$, pipeline)
}

AndroidGovNistJavaxSipParserPipeline_MyTimer *create_AndroidGovNistJavaxSipParserPipeline_MyTimer_initWithAndroidGovNistJavaxSipParserPipeline_withAndroidGovNistJavaxSipParserPipeline_(AndroidGovNistJavaxSipParserPipeline *outer$, AndroidGovNistJavaxSipParserPipeline *pipeline) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserPipeline_MyTimer, initWithAndroidGovNistJavaxSipParserPipeline_withAndroidGovNistJavaxSipParserPipeline_, outer$, pipeline)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserPipeline_MyTimer)

@implementation AndroidGovNistJavaxSipParserPipeline_Buffer

- (instancetype)initWithAndroidGovNistJavaxSipParserPipeline:(AndroidGovNistJavaxSipParserPipeline *)outer$
                                               withByteArray:(IOSByteArray *)bytes
                                                     withInt:(jint)length {
  AndroidGovNistJavaxSipParserPipeline_Buffer_initWithAndroidGovNistJavaxSipParserPipeline_withByteArray_withInt_(self, outer$, bytes, length);
  return self;
}

- (jint)getNextByte {
  return (jint) IOSByteArray_Get(nil_chk(bytes_), ptr_++) & (jint) 0xFF;
}

- (void)dealloc {
  RELEASE_(bytes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipParserPipeline:withByteArray:withInt:);
  methods[1].selector = @selector(getNextByte);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bytes_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ptr_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[BI", "LAndroidGovNistJavaxSipParserPipeline;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserPipeline_Buffer = { "Buffer", "android.gov.nist.javax.sip.parser", ptrTable, methods, fields, 7, 0x0, 2, 3, 1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserPipeline_Buffer;
}

@end

void AndroidGovNistJavaxSipParserPipeline_Buffer_initWithAndroidGovNistJavaxSipParserPipeline_withByteArray_withInt_(AndroidGovNistJavaxSipParserPipeline_Buffer *self, AndroidGovNistJavaxSipParserPipeline *outer$, IOSByteArray *bytes, jint length) {
  NSObject_init(self);
  self->ptr_ = 0;
  self->length_ = length;
  JreStrongAssign(&self->bytes_, bytes);
}

AndroidGovNistJavaxSipParserPipeline_Buffer *new_AndroidGovNistJavaxSipParserPipeline_Buffer_initWithAndroidGovNistJavaxSipParserPipeline_withByteArray_withInt_(AndroidGovNistJavaxSipParserPipeline *outer$, IOSByteArray *bytes, jint length) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserPipeline_Buffer, initWithAndroidGovNistJavaxSipParserPipeline_withByteArray_withInt_, outer$, bytes, length)
}

AndroidGovNistJavaxSipParserPipeline_Buffer *create_AndroidGovNistJavaxSipParserPipeline_Buffer_initWithAndroidGovNistJavaxSipParserPipeline_withByteArray_withInt_(AndroidGovNistJavaxSipParserPipeline *outer$, IOSByteArray *bytes, jint length) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserPipeline_Buffer, initWithAndroidGovNistJavaxSipParserPipeline_withByteArray_withInt_, outer$, bytes, length)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserPipeline_Buffer)
