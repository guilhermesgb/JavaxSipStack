//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/Pipeline.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidGovNistJavaxSipParserPipeline")
#ifdef RESTRICT_AndroidGovNistJavaxSipParserPipeline
#define INCLUDE_ALL_AndroidGovNistJavaxSipParserPipeline 0
#else
#define INCLUDE_ALL_AndroidGovNistJavaxSipParserPipeline 1
#endif
#undef RESTRICT_AndroidGovNistJavaxSipParserPipeline

#if !defined (AndroidGovNistJavaxSipParserPipeline_) && (INCLUDE_ALL_AndroidGovNistJavaxSipParserPipeline || defined(INCLUDE_AndroidGovNistJavaxSipParserPipeline))
#define AndroidGovNistJavaxSipParserPipeline_

#define RESTRICT_JavaIoInputStream 1
#define INCLUDE_JavaIoInputStream 1
#include "java/io/InputStream.h"

@class IOSByteArray;
@protocol AndroidGovNistJavaxSipStackTimersSipTimer;

@interface AndroidGovNistJavaxSipParserPipeline : JavaIoInputStream

#pragma mark Public

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)pipe
                                  withInt:(jint)readTimeout
withAndroidGovNistJavaxSipStackTimersSipTimer:(id<AndroidGovNistJavaxSipStackTimersSipTimer>)timer;

- (void)close;

- (jboolean)isClosed;

- (jint)read;

- (void)startTimer;

- (void)stopTimer;

- (void)writeWithByteArray:(IOSByteArray *)bytes;

- (void)writeWithByteArray:(IOSByteArray *)bytes
                   withInt:(jint)start
                   withInt:(jint)length;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipParserPipeline)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipParserPipeline_initWithJavaIoInputStream_withInt_withAndroidGovNistJavaxSipStackTimersSipTimer_(AndroidGovNistJavaxSipParserPipeline *self, JavaIoInputStream *pipe, jint readTimeout, id<AndroidGovNistJavaxSipStackTimersSipTimer> timer);

FOUNDATION_EXPORT AndroidGovNistJavaxSipParserPipeline *new_AndroidGovNistJavaxSipParserPipeline_initWithJavaIoInputStream_withInt_withAndroidGovNistJavaxSipStackTimersSipTimer_(JavaIoInputStream *pipe, jint readTimeout, id<AndroidGovNistJavaxSipStackTimersSipTimer> timer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipParserPipeline *create_AndroidGovNistJavaxSipParserPipeline_initWithJavaIoInputStream_withInt_withAndroidGovNistJavaxSipStackTimersSipTimer_(JavaIoInputStream *pipe, jint readTimeout, id<AndroidGovNistJavaxSipStackTimersSipTimer> timer);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipParserPipeline)

#endif

#if !defined (AndroidGovNistJavaxSipParserPipeline_MyTimer_) && (INCLUDE_ALL_AndroidGovNistJavaxSipParserPipeline || defined(INCLUDE_AndroidGovNistJavaxSipParserPipeline_MyTimer))
#define AndroidGovNistJavaxSipParserPipeline_MyTimer_

#define RESTRICT_AndroidGovNistJavaxSipStackSIPStackTimerTask 1
#define INCLUDE_AndroidGovNistJavaxSipStackSIPStackTimerTask 1
#include "android/gov/nist/javax/sip/stack/SIPStackTimerTask.h"

@class AndroidGovNistJavaxSipParserPipeline;

@interface AndroidGovNistJavaxSipParserPipeline_MyTimer : AndroidGovNistJavaxSipStackSIPStackTimerTask {
 @public
  AndroidGovNistJavaxSipParserPipeline *pipeline_;
}

#pragma mark Public

- (void)cleanUpBeforeCancel;

- (void)runTask;

#pragma mark Protected

- (instancetype)initWithAndroidGovNistJavaxSipParserPipeline:(AndroidGovNistJavaxSipParserPipeline *)outer$
                    withAndroidGovNistJavaxSipParserPipeline:(AndroidGovNistJavaxSipParserPipeline *)pipeline;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipParserPipeline_MyTimer)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserPipeline_MyTimer, pipeline_, AndroidGovNistJavaxSipParserPipeline *)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipParserPipeline_MyTimer_initWithAndroidGovNistJavaxSipParserPipeline_withAndroidGovNistJavaxSipParserPipeline_(AndroidGovNistJavaxSipParserPipeline_MyTimer *self, AndroidGovNistJavaxSipParserPipeline *outer$, AndroidGovNistJavaxSipParserPipeline *pipeline);

FOUNDATION_EXPORT AndroidGovNistJavaxSipParserPipeline_MyTimer *new_AndroidGovNistJavaxSipParserPipeline_MyTimer_initWithAndroidGovNistJavaxSipParserPipeline_withAndroidGovNistJavaxSipParserPipeline_(AndroidGovNistJavaxSipParserPipeline *outer$, AndroidGovNistJavaxSipParserPipeline *pipeline) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipParserPipeline_MyTimer *create_AndroidGovNistJavaxSipParserPipeline_MyTimer_initWithAndroidGovNistJavaxSipParserPipeline_withAndroidGovNistJavaxSipParserPipeline_(AndroidGovNistJavaxSipParserPipeline *outer$, AndroidGovNistJavaxSipParserPipeline *pipeline);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipParserPipeline_MyTimer)

#endif

#if !defined (AndroidGovNistJavaxSipParserPipeline_Buffer_) && (INCLUDE_ALL_AndroidGovNistJavaxSipParserPipeline || defined(INCLUDE_AndroidGovNistJavaxSipParserPipeline_Buffer))
#define AndroidGovNistJavaxSipParserPipeline_Buffer_

@class AndroidGovNistJavaxSipParserPipeline;
@class IOSByteArray;

@interface AndroidGovNistJavaxSipParserPipeline_Buffer : NSObject {
 @public
  IOSByteArray *bytes_;
  jint length_;
  jint ptr_;
}

#pragma mark Public

- (instancetype)initWithAndroidGovNistJavaxSipParserPipeline:(AndroidGovNistJavaxSipParserPipeline *)outer$
                                               withByteArray:(IOSByteArray *)bytes
                                                     withInt:(jint)length;

- (jint)getNextByte;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipParserPipeline_Buffer)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserPipeline_Buffer, bytes_, IOSByteArray *)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipParserPipeline_Buffer_initWithAndroidGovNistJavaxSipParserPipeline_withByteArray_withInt_(AndroidGovNistJavaxSipParserPipeline_Buffer *self, AndroidGovNistJavaxSipParserPipeline *outer$, IOSByteArray *bytes, jint length);

FOUNDATION_EXPORT AndroidGovNistJavaxSipParserPipeline_Buffer *new_AndroidGovNistJavaxSipParserPipeline_Buffer_initWithAndroidGovNistJavaxSipParserPipeline_withByteArray_withInt_(AndroidGovNistJavaxSipParserPipeline *outer$, IOSByteArray *bytes, jint length) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipParserPipeline_Buffer *create_AndroidGovNistJavaxSipParserPipeline_Buffer_initWithAndroidGovNistJavaxSipParserPipeline_withByteArray_withInt_(AndroidGovNistJavaxSipParserPipeline *outer$, IOSByteArray *bytes, jint length);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipParserPipeline_Buffer)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidGovNistJavaxSipParserPipeline")
