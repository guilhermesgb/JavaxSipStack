//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/ims/PMediaAuthorizationParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PMediaAuthorization.h"
#include "android/gov/nist/javax/sip/header/ims/PMediaAuthorizationList.h"
#include "android/gov/nist/javax/sip/header/ims/SIPHeaderNamesIms.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/gov/nist/javax/sip/parser/ims/PMediaAuthorizationParser.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser

- (instancetype)initWithNSString:(NSString *)mediaAuthorization {
  AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser_initWithNSString_(self, mediaAuthorization);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  AndroidGovNistJavaxSipHeaderImsPMediaAuthorizationList *mediaAuthorizationList = create_AndroidGovNistJavaxSipHeaderImsPMediaAuthorizationList_init();
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"MediaAuthorizationParser.parse"];
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_P_MEDIA_AUTHORIZATION];
    AndroidGovNistJavaxSipHeaderImsPMediaAuthorization *mediaAuthorization = create_AndroidGovNistJavaxSipHeaderImsPMediaAuthorization_init();
    [mediaAuthorization setHeaderNameWithNSString:AndroidGovNistJavaxSipHeaderImsSIPHeaderNamesIms_P_MEDIA_AUTHORIZATION];
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] != 0x000a) {
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
      AndroidGovNistCoreToken *token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
      @try {
        [mediaAuthorization setMediaAuthorizationTokenWithNSString:[((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]];
      }
      @catch (AndroidJavaxSipInvalidArgumentException *e) {
        @throw [self createParseExceptionWithNSString:[((AndroidJavaxSipInvalidArgumentException *) nil_chk(e)) getMessage]];
      }
      [mediaAuthorizationList addWithId:mediaAuthorization];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ',') {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:','];
        mediaAuthorization = create_AndroidGovNistJavaxSipHeaderImsPMediaAuthorization_init();
      }
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    }
    return mediaAuthorizationList;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"MediaAuthorizationParser.parse"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser = { "PMediaAuthorizationParser", "android.gov.nist.javax.sip.parser.ims", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser;
}

@end

void AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser_initWithNSString_(AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser *self, NSString *mediaAuthorization) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, mediaAuthorization);
}

AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser *new_AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser_initWithNSString_(NSString *mediaAuthorization) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser, initWithNSString_, mediaAuthorization)
}

AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser *create_AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser_initWithNSString_(NSString *mediaAuthorization) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser, initWithNSString_, mediaAuthorization)
}

void AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser *new_AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser *create_AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserImsPMediaAuthorizationParser)
