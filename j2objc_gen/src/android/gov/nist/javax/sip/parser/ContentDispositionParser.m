//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/ContentDispositionParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/ContentDisposition.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderNames.h"
#include "android/gov/nist/javax/sip/parser/ContentDispositionParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/ParametersParser.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserContentDispositionParser

- (instancetype)initWithNSString:(NSString *)contentDisposition {
  AndroidGovNistJavaxSipParserContentDispositionParser_initWithNSString_(self, contentDisposition);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserContentDispositionParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"ContentDispositionParser.parse"];
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_CONTENT_DISPOSITION];
    AndroidGovNistJavaxSipHeaderContentDisposition *cd = create_AndroidGovNistJavaxSipHeaderContentDisposition_init();
    [cd setHeaderNameWithNSString:AndroidGovNistJavaxSipHeaderSIPHeaderNames_CONTENT_DISPOSITION];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
    AndroidGovNistCoreToken *token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
    [cd setDispositionTypeWithNSString:[((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    [super parseWithAndroidGovNistJavaxSipHeaderParametersHeader:cd];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:0x000a];
    return cd;
  }
  @catch (JavaTextParseException *ex) {
    @throw [self createParseExceptionWithNSString:[((JavaTextParseException *) nil_chk(ex)) getMessage]];
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"ContentDispositionParser.parse"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserContentDispositionParser = { "ContentDispositionParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserContentDispositionParser;
}

@end

void AndroidGovNistJavaxSipParserContentDispositionParser_initWithNSString_(AndroidGovNistJavaxSipParserContentDispositionParser *self, NSString *contentDisposition) {
  AndroidGovNistJavaxSipParserParametersParser_initWithNSString_(self, contentDisposition);
}

AndroidGovNistJavaxSipParserContentDispositionParser *new_AndroidGovNistJavaxSipParserContentDispositionParser_initWithNSString_(NSString *contentDisposition) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserContentDispositionParser, initWithNSString_, contentDisposition)
}

AndroidGovNistJavaxSipParserContentDispositionParser *create_AndroidGovNistJavaxSipParserContentDispositionParser_initWithNSString_(NSString *contentDisposition) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserContentDispositionParser, initWithNSString_, contentDisposition)
}

void AndroidGovNistJavaxSipParserContentDispositionParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserContentDispositionParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserParametersParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserContentDispositionParser *new_AndroidGovNistJavaxSipParserContentDispositionParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserContentDispositionParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserContentDispositionParser *create_AndroidGovNistJavaxSipParserContentDispositionParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserContentDispositionParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserContentDispositionParser)
