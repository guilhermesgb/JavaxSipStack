//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/MinExpiresParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/MinExpires.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderNames.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/MinExpiresParser.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "java/lang/Integer.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserMinExpiresParser

- (instancetype)initWithNSString:(NSString *)minExpires {
  AndroidGovNistJavaxSipParserMinExpiresParser_initWithNSString_(self, minExpires);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserMinExpiresParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"MinExpiresParser.parse"];
  AndroidGovNistJavaxSipHeaderMinExpires *minExpires = create_AndroidGovNistJavaxSipHeaderMinExpires_init();
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_MIN_EXPIRES];
    [minExpires setHeaderNameWithNSString:AndroidGovNistJavaxSipHeaderSIPHeaderNames_MIN_EXPIRES];
    NSString *number = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) number];
    @try {
      [minExpires setExpiresWithInt:JavaLangInteger_parseIntWithNSString_(number)];
    }
    @catch (AndroidJavaxSipInvalidArgumentException *ex) {
      @throw [self createParseExceptionWithNSString:[((AndroidJavaxSipInvalidArgumentException *) nil_chk(ex)) getMessage]];
    }
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:0x000a];
    return minExpires;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"MinExpiresParser.parse"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserMinExpiresParser = { "MinExpiresParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserMinExpiresParser;
}

@end

void AndroidGovNistJavaxSipParserMinExpiresParser_initWithNSString_(AndroidGovNistJavaxSipParserMinExpiresParser *self, NSString *minExpires) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, minExpires);
}

AndroidGovNistJavaxSipParserMinExpiresParser *new_AndroidGovNistJavaxSipParserMinExpiresParser_initWithNSString_(NSString *minExpires) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserMinExpiresParser, initWithNSString_, minExpires)
}

AndroidGovNistJavaxSipParserMinExpiresParser *create_AndroidGovNistJavaxSipParserMinExpiresParser_initWithNSString_(NSString *minExpires) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserMinExpiresParser, initWithNSString_, minExpires)
}

void AndroidGovNistJavaxSipParserMinExpiresParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserMinExpiresParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserMinExpiresParser *new_AndroidGovNistJavaxSipParserMinExpiresParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserMinExpiresParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserMinExpiresParser *create_AndroidGovNistJavaxSipParserMinExpiresParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserMinExpiresParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserMinExpiresParser)
