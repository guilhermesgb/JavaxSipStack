//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/ServerParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/Server.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/ServerParser.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserServerParser

- (instancetype)initWithNSString:(NSString *)server {
  AndroidGovNistJavaxSipParserServerParser_initWithNSString_(self, server);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserServerParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"ServerParser.parse"];
  AndroidGovNistJavaxSipHeaderServer *server = create_AndroidGovNistJavaxSipHeaderServer_init();
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_SERVER];
    if ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0] == 0x000a) @throw [self createParseExceptionWithNSString:@"empty header"];
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0] != 0x000a && [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0] != 0x0000) {
      if ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0] == '(') {
        NSString *comment = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) comment];
        [server addProductTokenWithNSString:JreStrcat("C$C", '(', comment, ')')];
      }
      else {
        NSString *tok;
        jint marker = 0;
        @try {
          marker = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) markInputPosition];
          tok = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) getStringWithChar:'/'];
          if ([((NSString *) nil_chk(tok)) charAtWithInt:((jint) [tok length]) - 1] == 0x000a) tok = [tok java_trim];
          [server addProductTokenWithNSString:tok];
        }
        @catch (JavaTextParseException *ex) {
          [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) rewindInputPositionWithInt:marker];
          tok = [((NSString *) nil_chk([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) getRest])) java_trim];
          [server addProductTokenWithNSString:tok];
          break;
        }
      }
    }
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"ServerParser.parse"];
  }
  return server;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserServerParser = { "ServerParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserServerParser;
}

@end

void AndroidGovNistJavaxSipParserServerParser_initWithNSString_(AndroidGovNistJavaxSipParserServerParser *self, NSString *server) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, server);
}

AndroidGovNistJavaxSipParserServerParser *new_AndroidGovNistJavaxSipParserServerParser_initWithNSString_(NSString *server) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserServerParser, initWithNSString_, server)
}

AndroidGovNistJavaxSipParserServerParser *create_AndroidGovNistJavaxSipParserServerParser_initWithNSString_(NSString *server) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserServerParser, initWithNSString_, server)
}

void AndroidGovNistJavaxSipParserServerParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserServerParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserServerParser *new_AndroidGovNistJavaxSipParserServerParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserServerParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserServerParser *create_AndroidGovNistJavaxSipParserServerParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserServerParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserServerParser)
