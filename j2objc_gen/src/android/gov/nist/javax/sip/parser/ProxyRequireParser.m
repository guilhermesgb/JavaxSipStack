//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/ProxyRequireParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/ProxyRequire.h"
#include "android/gov/nist/javax/sip/header/ProxyRequireList.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderNames.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/ProxyRequireParser.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"

@implementation AndroidGovNistJavaxSipParserProxyRequireParser

- (instancetype)initWithNSString:(NSString *)require {
  AndroidGovNistJavaxSipParserProxyRequireParser_initWithNSString_(self, require);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserProxyRequireParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  AndroidGovNistJavaxSipHeaderProxyRequireList *list = create_AndroidGovNistJavaxSipHeaderProxyRequireList_init();
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"ProxyRequireParser.parse"];
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_PROXY_REQUIRE];
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] != 0x000a) {
      AndroidGovNistJavaxSipHeaderProxyRequire *r = create_AndroidGovNistJavaxSipHeaderProxyRequire_init();
      [r setHeaderNameWithNSString:AndroidGovNistJavaxSipHeaderSIPHeaderNames_PROXY_REQUIRE];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
      AndroidGovNistCoreToken *token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
      [r setOptionTagWithNSString:[((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      [list addWithId:r];
      while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ',') {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:','];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        r = create_AndroidGovNistJavaxSipHeaderProxyRequire_init();
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
        token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
        [r setOptionTagWithNSString:[((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        [list addWithId:r];
      }
    }
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"ProxyRequireParser.parse"];
  }
  return list;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserProxyRequireParser = { "ProxyRequireParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserProxyRequireParser;
}

@end

void AndroidGovNistJavaxSipParserProxyRequireParser_initWithNSString_(AndroidGovNistJavaxSipParserProxyRequireParser *self, NSString *require) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, require);
}

AndroidGovNistJavaxSipParserProxyRequireParser *new_AndroidGovNistJavaxSipParserProxyRequireParser_initWithNSString_(NSString *require) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserProxyRequireParser, initWithNSString_, require)
}

AndroidGovNistJavaxSipParserProxyRequireParser *create_AndroidGovNistJavaxSipParserProxyRequireParser_initWithNSString_(NSString *require) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserProxyRequireParser, initWithNSString_, require)
}

void AndroidGovNistJavaxSipParserProxyRequireParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserProxyRequireParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserProxyRequireParser *new_AndroidGovNistJavaxSipParserProxyRequireParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserProxyRequireParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserProxyRequireParser *create_AndroidGovNistJavaxSipParserProxyRequireParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserProxyRequireParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserProxyRequireParser)
