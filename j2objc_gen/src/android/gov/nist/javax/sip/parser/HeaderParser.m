//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/HeaderParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/ExtensionHeaderImpl.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/Parser.h"
#include "android/gov/nist/javax/sip/parser/TokenNames.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/text/ParseException.h"
#include "java/util/Calendar.h"
#include "java/util/TimeZone.h"

@implementation AndroidGovNistJavaxSipParserHeaderParser

- (jint)wkday {
  [self dbg_enterWithNSString:@"wkday"];
  @try {
    NSString *tok = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) ttoken];
    NSString *id_ = [((NSString *) nil_chk(tok)) lowercaseString];
    if ([((NSString *) nil_chk(AndroidGovNistJavaxSipParserTokenNames_MON)) java_equalsIgnoreCase:id_]) return JavaUtilCalendar_MONDAY;
    else if ([((NSString *) nil_chk(AndroidGovNistJavaxSipParserTokenNames_TUE)) java_equalsIgnoreCase:id_]) return JavaUtilCalendar_TUESDAY;
    else if ([((NSString *) nil_chk(AndroidGovNistJavaxSipParserTokenNames_WED)) java_equalsIgnoreCase:id_]) return JavaUtilCalendar_WEDNESDAY;
    else if ([((NSString *) nil_chk(AndroidGovNistJavaxSipParserTokenNames_THU)) java_equalsIgnoreCase:id_]) return JavaUtilCalendar_THURSDAY;
    else if ([((NSString *) nil_chk(AndroidGovNistJavaxSipParserTokenNames_FRI)) java_equalsIgnoreCase:id_]) return JavaUtilCalendar_FRIDAY;
    else if ([((NSString *) nil_chk(AndroidGovNistJavaxSipParserTokenNames_SAT)) java_equalsIgnoreCase:id_]) return JavaUtilCalendar_SATURDAY;
    else if ([((NSString *) nil_chk(AndroidGovNistJavaxSipParserTokenNames_SUN)) java_equalsIgnoreCase:id_]) return JavaUtilCalendar_SUNDAY;
    else @throw [self createParseExceptionWithNSString:@"bad wkday"];
  }
  @finally {
    [self dbg_leaveWithNSString:@"wkday"];
  }
}

- (JavaUtilCalendar *)date {
  @try {
    JavaUtilCalendar *retval = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"GMT"));
    NSString *s1 = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) number];
    jint day = JavaLangInteger_parseIntWithNSString_(s1);
    if (day <= 0 || day > 31) @throw [self createParseExceptionWithNSString:@"Bad day "];
    [((JavaUtilCalendar *) nil_chk(retval)) setWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:day];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:' '];
    NSString *month = [((NSString *) nil_chk([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) ttoken])) lowercaseString];
    if ([((NSString *) nil_chk(month)) isEqual:@"jan"]) {
      [retval setWithInt:JavaUtilCalendar_MONTH withInt:JavaUtilCalendar_JANUARY];
    }
    else if ([month isEqual:@"feb"]) {
      [retval setWithInt:JavaUtilCalendar_MONTH withInt:JavaUtilCalendar_FEBRUARY];
    }
    else if ([month isEqual:@"mar"]) {
      [retval setWithInt:JavaUtilCalendar_MONTH withInt:JavaUtilCalendar_MARCH];
    }
    else if ([month isEqual:@"apr"]) {
      [retval setWithInt:JavaUtilCalendar_MONTH withInt:JavaUtilCalendar_APRIL];
    }
    else if ([month isEqual:@"may"]) {
      [retval setWithInt:JavaUtilCalendar_MONTH withInt:JavaUtilCalendar_MAY];
    }
    else if ([month isEqual:@"jun"]) {
      [retval setWithInt:JavaUtilCalendar_MONTH withInt:JavaUtilCalendar_JUNE];
    }
    else if ([month isEqual:@"jul"]) {
      [retval setWithInt:JavaUtilCalendar_MONTH withInt:JavaUtilCalendar_JULY];
    }
    else if ([month isEqual:@"aug"]) {
      [retval setWithInt:JavaUtilCalendar_MONTH withInt:JavaUtilCalendar_AUGUST];
    }
    else if ([month isEqual:@"sep"]) {
      [retval setWithInt:JavaUtilCalendar_MONTH withInt:JavaUtilCalendar_SEPTEMBER];
    }
    else if ([month isEqual:@"oct"]) {
      [retval setWithInt:JavaUtilCalendar_MONTH withInt:JavaUtilCalendar_OCTOBER];
    }
    else if ([month isEqual:@"nov"]) {
      [retval setWithInt:JavaUtilCalendar_MONTH withInt:JavaUtilCalendar_NOVEMBER];
    }
    else if ([month isEqual:@"dec"]) {
      [retval setWithInt:JavaUtilCalendar_MONTH withInt:JavaUtilCalendar_DECEMBER];
    }
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:' '];
    NSString *s2 = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) number];
    jint yr = JavaLangInteger_parseIntWithNSString_(s2);
    [retval setWithInt:JavaUtilCalendar_YEAR withInt:yr];
    return retval;
  }
  @catch (JavaLangException *ex) {
    @throw [self createParseExceptionWithNSString:@"bad date field"];
  }
}

- (void)timeWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  @try {
    NSString *s = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) number];
    jint hour = JavaLangInteger_parseIntWithNSString_(s);
    [((JavaUtilCalendar *) nil_chk(calendar)) setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:hour];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:':'];
    s = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) number];
    jint min = JavaLangInteger_parseIntWithNSString_(s);
    [calendar setWithInt:JavaUtilCalendar_MINUTE withInt:min];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:':'];
    s = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) number];
    jint sec = JavaLangInteger_parseIntWithNSString_(s);
    [calendar setWithInt:JavaUtilCalendar_SECOND withInt:sec];
  }
  @catch (JavaLangException *ex) {
    @throw [self createParseExceptionWithNSString:@"error processing time "];
  }
}

- (instancetype)initWithNSString:(NSString *)header {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, header);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  NSString *name = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextTokenWithChar:':'];
  [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
  NSString *body = [((NSString *) nil_chk([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getLine])) java_trim];
  AndroidGovNistJavaxSipHeaderExtensionHeaderImpl *retval = create_AndroidGovNistJavaxSipHeaderExtensionHeaderImpl_initWithNSString_(name);
  [retval setValueWithNSString:body];
  return retval;
}

- (void)headerNameWithInt:(jint)tok {
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:tok];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:':'];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "LJavaUtilCalendar;", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, 0, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 4, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(wkday);
  methods[1].selector = @selector(date);
  methods[2].selector = @selector(timeWithJavaUtilCalendar:);
  methods[3].selector = @selector(initWithNSString:);
  methods[4].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[5].selector = @selector(parse);
  methods[6].selector = @selector(headerNameWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaTextParseException;", "time", "LJavaUtilCalendar;", "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "headerName", "I" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserHeaderParser = { "HeaderParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserHeaderParser;
}

@end

void AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(AndroidGovNistJavaxSipParserHeaderParser *self, NSString *header) {
  AndroidGovNistJavaxSipParserParser_init(self);
  JreStrongAssignAndConsume(&self->lexer_, new_AndroidGovNistJavaxSipParserLexer_initWithNSString_withNSString_(@"command_keywordLexer", header));
}

AndroidGovNistJavaxSipParserHeaderParser *new_AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(NSString *header) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserHeaderParser, initWithNSString_, header)
}

AndroidGovNistJavaxSipParserHeaderParser *create_AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(NSString *header) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserHeaderParser, initWithNSString_, header)
}

void AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserHeaderParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserParser_init(self);
  JreStrongAssign(&self->lexer_, lexer);
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) selectLexerWithNSString:@"command_keywordLexer"];
}

AndroidGovNistJavaxSipParserHeaderParser *new_AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserHeaderParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserHeaderParser *create_AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserHeaderParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserHeaderParser)
