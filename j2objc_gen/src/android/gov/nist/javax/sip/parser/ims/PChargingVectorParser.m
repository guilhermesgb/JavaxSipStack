//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/ims/PChargingVectorParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/NameValue.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PChargingVector.h"
#include "android/gov/nist/javax/sip/header/ims/ParameterNamesIms.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/ParametersParser.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/gov/nist/javax/sip/parser/ims/PChargingVectorParser.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserImsPChargingVectorParser

- (instancetype)initWithNSString:(NSString *)chargingVector {
  AndroidGovNistJavaxSipParserImsPChargingVectorParser_initWithNSString_(self, chargingVector);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserImsPChargingVectorParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"parse"];
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_P_VECTOR_CHARGING];
    AndroidGovNistJavaxSipHeaderImsPChargingVector *chargingVector = create_AndroidGovNistJavaxSipHeaderImsPChargingVector_init();
    @try {
      while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] != 0x000a) {
        [self parseParameterWithAndroidGovNistJavaxSipHeaderImsPChargingVector:chargingVector];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
        if (la == 0x000a || la == 0x0000) break;
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:';'];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      }
    }
    @catch (JavaTextParseException *ex) {
      @throw ex;
    }
    [super parseWithAndroidGovNistJavaxSipHeaderParametersHeader:chargingVector];
    if ([chargingVector getParameterWithNSString:AndroidGovNistJavaxSipHeaderImsParameterNamesIms_ICID_VALUE] == nil) @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", @"Missing a required Parameter : ", AndroidGovNistJavaxSipHeaderImsParameterNamesIms_ICID_VALUE), 0);
    return chargingVector;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"parse"];
  }
}

- (void)parseParameterWithAndroidGovNistJavaxSipHeaderImsPChargingVector:(AndroidGovNistJavaxSipHeaderImsPChargingVector *)chargingVector {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"parseParameter"];
  @try {
    AndroidGovNistCoreNameValue *nv = [self nameValueWithChar:'='];
    [((AndroidGovNistJavaxSipHeaderImsPChargingVector *) nil_chk(chargingVector)) setParameterWithAndroidGovNistCoreNameValue:nv];
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"parseParameter"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  methods[3].selector = @selector(parseParameterWithAndroidGovNistJavaxSipHeaderImsPChargingVector:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;", "parseParameter", "LAndroidGovNistJavaxSipHeaderImsPChargingVector;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserImsPChargingVectorParser = { "PChargingVectorParser", "android.gov.nist.javax.sip.parser.ims", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserImsPChargingVectorParser;
}

@end

void AndroidGovNistJavaxSipParserImsPChargingVectorParser_initWithNSString_(AndroidGovNistJavaxSipParserImsPChargingVectorParser *self, NSString *chargingVector) {
  AndroidGovNistJavaxSipParserParametersParser_initWithNSString_(self, chargingVector);
}

AndroidGovNistJavaxSipParserImsPChargingVectorParser *new_AndroidGovNistJavaxSipParserImsPChargingVectorParser_initWithNSString_(NSString *chargingVector) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserImsPChargingVectorParser, initWithNSString_, chargingVector)
}

AndroidGovNistJavaxSipParserImsPChargingVectorParser *create_AndroidGovNistJavaxSipParserImsPChargingVectorParser_initWithNSString_(NSString *chargingVector) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserImsPChargingVectorParser, initWithNSString_, chargingVector)
}

void AndroidGovNistJavaxSipParserImsPChargingVectorParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserImsPChargingVectorParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserParametersParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserImsPChargingVectorParser *new_AndroidGovNistJavaxSipParserImsPChargingVectorParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserImsPChargingVectorParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserImsPChargingVectorParser *create_AndroidGovNistJavaxSipParserImsPChargingVectorParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserImsPChargingVectorParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserImsPChargingVectorParser)
