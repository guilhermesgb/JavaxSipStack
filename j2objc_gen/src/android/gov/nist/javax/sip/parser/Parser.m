//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/Parser.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/Debug.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/Parser.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserParser

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipParserParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaTextParseException *)createParseExceptionWithNSString:(NSString *)exceptionString {
  return create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$C$", [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getBuffer], ':', exceptionString), [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getPtr]);
}

- (AndroidGovNistJavaxSipParserLexer *)getLexer {
  return (AndroidGovNistJavaxSipParserLexer *) cast_chk(self->lexer_, [AndroidGovNistJavaxSipParserLexer class]);
}

- (NSString *)sipVersion {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"sipVersion"];
  @try {
    AndroidGovNistCoreToken *tok = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_SIP];
    if (![((NSString *) nil_chk([((AndroidGovNistCoreToken *) nil_chk(tok)) getTokenValue])) java_equalsIgnoreCase:@"SIP"]) [self createParseExceptionWithNSString:@"Expecting SIP"];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:'/'];
    tok = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
    if (![((NSString *) nil_chk([((AndroidGovNistCoreToken *) nil_chk(tok)) getTokenValue])) isEqual:@"2.0"]) [self createParseExceptionWithNSString:@"Expecting SIP/2.0"];
    return @"SIP/2.0";
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"sipVersion"];
  }
}

- (NSString *)method {
  @try {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"method"];
    IOSObjectArray *tokens = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) peekNextTokenWithInt:1];
    AndroidGovNistCoreToken *token = IOSObjectArray_Get(nil_chk(tokens), 0);
    if ([((AndroidGovNistCoreToken *) nil_chk(token)) getTokenType] == AndroidGovNistJavaxSipParserTokenTypes_INVITE || [token getTokenType] == AndroidGovNistJavaxSipParserTokenTypes_ACK || [token getTokenType] == AndroidGovNistJavaxSipParserTokenTypes_OPTIONS || [token getTokenType] == AndroidGovNistJavaxSipParserTokenTypes_BYE || [token getTokenType] == AndroidGovNistJavaxSipParserTokenTypes_REGISTER || [token getTokenType] == AndroidGovNistJavaxSipParserTokenTypes_CANCEL || [token getTokenType] == AndroidGovNistJavaxSipParserTokenTypes_SUBSCRIBE || [token getTokenType] == AndroidGovNistJavaxSipParserTokenTypes_NOTIFY || [token getTokenType] == AndroidGovNistJavaxSipParserTokenTypes_PUBLISH || [token getTokenType] == AndroidGovNistJavaxSipParserTokenTypes_MESSAGE || [token getTokenType] == AndroidGovNistJavaxSipParserTokenTypes_ID) {
      [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consume];
      return [token getTokenValue];
    }
    else {
      @throw [self createParseExceptionWithNSString:@"Invalid Method"];
    }
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreDebug, debug)) [self dbg_leaveWithNSString:@"method"];
  }
}

+ (void)checkTokenWithNSString:(NSString *)token {
  AndroidGovNistJavaxSipParserParser_checkTokenWithNSString_(token);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaTextParseException;", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipParserLexer;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x19, 3, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createParseExceptionWithNSString:);
  methods[2].selector = @selector(getLexer);
  methods[3].selector = @selector(sipVersion);
  methods[4].selector = @selector(method);
  methods[5].selector = @selector(checkTokenWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createParseException", "LNSString;", "LJavaTextParseException;", "checkToken" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserParser = { "Parser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x401, 6, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserParser;
}

@end

void AndroidGovNistJavaxSipParserParser_init(AndroidGovNistJavaxSipParserParser *self) {
  AndroidGovNistCoreParserCore_init(self);
}

void AndroidGovNistJavaxSipParserParser_checkTokenWithNSString_(NSString *token) {
  AndroidGovNistJavaxSipParserParser_initialize();
  if (token == nil || ((jint) [token length]) == 0) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(@"null or empty token", -1);
  }
  else {
    for (jint i = 0; i < ((jint) [token length]); ++i) {
      if (!AndroidGovNistCoreLexerCore_isTokenCharWithChar_([token charAtWithInt:i])) {
        @throw create_JavaTextParseException_initWithNSString_withInt_(@"Invalid character(s) in string (not allowed in 'token')", i);
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserParser)
