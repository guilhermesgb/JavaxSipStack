//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/PostParseExecutorServices.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/parser/PostParseExecutorServices.h"
#include "android/gov/nist/javax/sip/stack/BlockingQueueDispatchAuditor.h"
#include "java/lang/Exception.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/util/List.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"
#include "java/util/concurrent/TimeUnit.h"

inline id<JavaUtilConcurrentExecutorService> AndroidGovNistJavaxSipParserPostParseExecutorServices_get_postParseExecutor();
inline id<JavaUtilConcurrentExecutorService> AndroidGovNistJavaxSipParserPostParseExecutorServices_set_postParseExecutor(id<JavaUtilConcurrentExecutorService> value);
static id<JavaUtilConcurrentExecutorService> AndroidGovNistJavaxSipParserPostParseExecutorServices_postParseExecutor;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipParserPostParseExecutorServices, postParseExecutor, id<JavaUtilConcurrentExecutorService>)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipParserPostParseExecutorServices)

id<JavaUtilConcurrentBlockingQueue> AndroidGovNistJavaxSipParserPostParseExecutorServices_staticQueue;
AndroidGovNistJavaxSipStackBlockingQueueDispatchAuditor *AndroidGovNistJavaxSipParserPostParseExecutorServices_staticQueueAuditor;

@implementation AndroidGovNistJavaxSipParserPostParseExecutorServices

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipParserPostParseExecutorServices_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)setPostParseExcutorSizeWithAndroidGovNistJavaxSipSipStackImpl:(AndroidGovNistJavaxSipSipStackImpl *)sipStack
                                                              withInt:(jint)threads
                                                              withInt:(jint)queueTimeout {
  AndroidGovNistJavaxSipParserPostParseExecutorServices_setPostParseExcutorSizeWithAndroidGovNistJavaxSipSipStackImpl_withInt_withInt_(sipStack, threads, queueTimeout);
}

+ (id<JavaUtilConcurrentExecutorService>)getPostParseExecutor {
  return AndroidGovNistJavaxSipParserPostParseExecutorServices_getPostParseExecutor();
}

+ (void)shutdownThreadpool {
  AndroidGovNistJavaxSipParserPostParseExecutorServices_shutdownThreadpool();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutorService;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setPostParseExcutorSizeWithAndroidGovNistJavaxSipSipStackImpl:withInt:withInt:);
  methods[2].selector = @selector(getPostParseExecutor);
  methods[3].selector = @selector(shutdownThreadpool);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "postParseExecutor", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0xa, -1, 2, -1, -1 },
    { "staticQueue", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x9, -1, 3, 4, -1 },
    { "staticQueueAuditor", "LAndroidGovNistJavaxSipStackBlockingQueueDispatchAuditor;", .constantValue.asLong = 0, 0x9, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "setPostParseExcutorSize", "LAndroidGovNistJavaxSipSipStackImpl;II", &AndroidGovNistJavaxSipParserPostParseExecutorServices_postParseExecutor, &AndroidGovNistJavaxSipParserPostParseExecutorServices_staticQueue, "Ljava/util/concurrent/BlockingQueue<Ljava/lang/Runnable;>;", &AndroidGovNistJavaxSipParserPostParseExecutorServices_staticQueueAuditor, "LAndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserPostParseExecutorServices = { "PostParseExecutorServices", "android.gov.nist.javax.sip.parser", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, 6, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserPostParseExecutorServices;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipParserPostParseExecutorServices class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipParserPostParseExecutorServices_postParseExecutor, nil);
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipParserPostParseExecutorServices)
  }
}

@end

void AndroidGovNistJavaxSipParserPostParseExecutorServices_init(AndroidGovNistJavaxSipParserPostParseExecutorServices *self) {
  NSObject_init(self);
}

AndroidGovNistJavaxSipParserPostParseExecutorServices *new_AndroidGovNistJavaxSipParserPostParseExecutorServices_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserPostParseExecutorServices, init)
}

AndroidGovNistJavaxSipParserPostParseExecutorServices *create_AndroidGovNistJavaxSipParserPostParseExecutorServices_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserPostParseExecutorServices, init)
}

void AndroidGovNistJavaxSipParserPostParseExecutorServices_setPostParseExcutorSizeWithAndroidGovNistJavaxSipSipStackImpl_withInt_withInt_(AndroidGovNistJavaxSipSipStackImpl *sipStack, jint threads, jint queueTimeout) {
  AndroidGovNistJavaxSipParserPostParseExecutorServices_initialize();
  if (AndroidGovNistJavaxSipParserPostParseExecutorServices_postParseExecutor != nil) {
    [AndroidGovNistJavaxSipParserPostParseExecutorServices_postParseExecutor shutdownNow];
  }
  if (AndroidGovNistJavaxSipParserPostParseExecutorServices_staticQueueAuditor != nil) {
    @try {
      [AndroidGovNistJavaxSipParserPostParseExecutorServices_staticQueueAuditor stop];
    }
    @catch (JavaLangException *e) {
    }
  }
  if (threads <= 0) {
    JreStrongAssign(&AndroidGovNistJavaxSipParserPostParseExecutorServices_postParseExecutor, nil);
  }
  else {
    JreStrongAssignAndConsume(&AndroidGovNistJavaxSipParserPostParseExecutorServices_staticQueue, new_JavaUtilConcurrentLinkedBlockingQueue_init());
    JreStrongAssignAndConsume(&AndroidGovNistJavaxSipParserPostParseExecutorServices_postParseExecutor, new_JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnit_withJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentThreadFactory_(threads, threads, 0, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), AndroidGovNistJavaxSipParserPostParseExecutorServices_staticQueue, create_AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory_init()));
    if ([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack)) getStackCongestionControlTimeout] > 0) {
      JreStrongAssignAndConsume(&AndroidGovNistJavaxSipParserPostParseExecutorServices_staticQueueAuditor, new_AndroidGovNistJavaxSipStackBlockingQueueDispatchAuditor_initWithJavaUtilQueue_(AndroidGovNistJavaxSipParserPostParseExecutorServices_staticQueue));
      [AndroidGovNistJavaxSipParserPostParseExecutorServices_staticQueueAuditor setTimeoutWithInt:queueTimeout];
      [((AndroidGovNistJavaxSipStackBlockingQueueDispatchAuditor *) nil_chk(AndroidGovNistJavaxSipParserPostParseExecutorServices_staticQueueAuditor)) startWithInt:2000];
    }
  }
}

id<JavaUtilConcurrentExecutorService> AndroidGovNistJavaxSipParserPostParseExecutorServices_getPostParseExecutor() {
  AndroidGovNistJavaxSipParserPostParseExecutorServices_initialize();
  return AndroidGovNistJavaxSipParserPostParseExecutorServices_postParseExecutor;
}

void AndroidGovNistJavaxSipParserPostParseExecutorServices_shutdownThreadpool() {
  AndroidGovNistJavaxSipParserPostParseExecutorServices_initialize();
  if (AndroidGovNistJavaxSipParserPostParseExecutorServices_postParseExecutor != nil) {
    [AndroidGovNistJavaxSipParserPostParseExecutorServices_postParseExecutor shutdown];
    JreStrongAssign(&AndroidGovNistJavaxSipParserPostParseExecutorServices_postParseExecutor, nil);
  }
  if (AndroidGovNistJavaxSipParserPostParseExecutorServices_staticQueueAuditor != nil) {
    @try {
      [AndroidGovNistJavaxSipParserPostParseExecutorServices_staticQueueAuditor stop];
    }
    @catch (JavaLangException *e) {
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserPostParseExecutorServices)

jlong AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory_threadNumber = 0;

@implementation AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)arg0 {
  JavaLangThread *thread = create_JavaLangThread_initWithJavaLangRunnable_(arg0);
  [thread setNameWithNSString:JreStrcat("$J", @"SIP-TCP-Core-PipelineThreadpool-", AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory_threadNumber++ % 999999999)];
  return thread;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(newThreadWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "threadNumber", "J", .constantValue.asLong = 0, 0x8, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "newThread", "LJavaLangRunnable;", &AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory_threadNumber, "LAndroidGovNistJavaxSipParserPostParseExecutorServices;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory = { "NamedThreadFactory", "android.gov.nist.javax.sip.parser", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory;
}

@end

void AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory_init(AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory *self) {
  NSObject_init(self);
}

AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory *new_AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory, init)
}

AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory *create_AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory)
