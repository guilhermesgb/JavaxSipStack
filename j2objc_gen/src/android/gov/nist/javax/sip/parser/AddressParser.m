//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/AddressParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/address/AddressImpl.h"
#include "android/gov/nist/javax/sip/address/GenericURI.h"
#include "android/gov/nist/javax/sip/parser/AddressParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/Parser.h"
#include "android/gov/nist/javax/sip/parser/URLParser.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserAddressParser

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserAddressParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (instancetype)initWithNSString:(NSString *)address {
  AndroidGovNistJavaxSipParserAddressParser_initWithNSString_(self, address);
  return self;
}

- (AndroidGovNistJavaxSipAddressAddressImpl *)nameAddr {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"nameAddr"];
  @try {
    if ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0] == '<') {
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) consumeWithInt:1];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) selectLexerWithNSString:@"sip_urlLexer"];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      AndroidGovNistJavaxSipParserURLParser *uriParser = create_AndroidGovNistJavaxSipParserURLParser_initWithAndroidGovNistJavaxSipParserLexer_((AndroidGovNistJavaxSipParserLexer *) cast_chk(lexer_, [AndroidGovNistJavaxSipParserLexer class]));
      AndroidGovNistJavaxSipAddressGenericURI *uri = [uriParser uriReferenceWithBoolean:true];
      AndroidGovNistJavaxSipAddressAddressImpl *retval = create_AndroidGovNistJavaxSipAddressAddressImpl_init();
      [retval setAddressTypeWithInt:AndroidGovNistJavaxSipAddressAddressImpl_NAME_ADDR];
      [retval setURIWithAndroidJavaxSipAddressURI:uri];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'>'];
      return retval;
    }
    else {
      AndroidGovNistJavaxSipAddressAddressImpl *addr = create_AndroidGovNistJavaxSipAddressAddressImpl_init();
      [addr setAddressTypeWithInt:AndroidGovNistJavaxSipAddressAddressImpl_NAME_ADDR];
      NSString *name = nil;
      if ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0] == '"') {
        name = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) quotedString];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      }
      else name = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) getNextTokenWithChar:'<'];
      [addr setDisplayNameWithNSString:[((NSString *) nil_chk(name)) java_trim]];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'<'];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      AndroidGovNistJavaxSipParserURLParser *uriParser = create_AndroidGovNistJavaxSipParserURLParser_initWithAndroidGovNistJavaxSipParserLexer_((AndroidGovNistJavaxSipParserLexer *) cast_chk(lexer_, [AndroidGovNistJavaxSipParserLexer class]));
      AndroidGovNistJavaxSipAddressGenericURI *uri = [uriParser uriReferenceWithBoolean:true];
      AndroidGovNistJavaxSipAddressAddressImpl *retval = create_AndroidGovNistJavaxSipAddressAddressImpl_init();
      [addr setAddressTypeWithInt:AndroidGovNistJavaxSipAddressAddressImpl_NAME_ADDR];
      [addr setURIWithAndroidJavaxSipAddressURI:uri];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'>'];
      return addr;
    }
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"nameAddr"];
  }
}

- (AndroidGovNistJavaxSipAddressAddressImpl *)addressWithBoolean:(jboolean)inclParams {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"address"];
  AndroidGovNistJavaxSipAddressAddressImpl *retval = nil;
  @try {
    jint k = 0;
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) hasMoreChars]) {
      jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:k];
      if (la == '<' || la == '"' || la == ':' || la == '/') break;
      else if (la == 0x0000) @throw [self createParseExceptionWithNSString:@"unexpected EOL"];
      else k++;
    }
    jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:k];
    if (la == '<' || la == '"') {
      retval = [self nameAddr];
    }
    else if (la == ':' || la == '/') {
      retval = create_AndroidGovNistJavaxSipAddressAddressImpl_init();
      AndroidGovNistJavaxSipParserURLParser *uriParser = create_AndroidGovNistJavaxSipParserURLParser_initWithAndroidGovNistJavaxSipParserLexer_((AndroidGovNistJavaxSipParserLexer *) cast_chk(lexer_, [AndroidGovNistJavaxSipParserLexer class]));
      AndroidGovNistJavaxSipAddressGenericURI *uri = [uriParser uriReferenceWithBoolean:inclParams];
      [retval setAddressTypeWithInt:AndroidGovNistJavaxSipAddressAddressImpl_ADDRESS_SPEC];
      [retval setURIWithAndroidJavaxSipAddressURI:uri];
    }
    else {
      @throw [self createParseExceptionWithNSString:@"Bad address spec"];
    }
    return retval;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"address"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipAddressAddressImpl;", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipAddressAddressImpl;", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(nameAddr);
  methods[3].selector = @selector(addressWithBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipParserLexer;", "LNSString;", "LJavaTextParseException;", "address", "Z" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserAddressParser = { "AddressParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserAddressParser;
}

@end

void AndroidGovNistJavaxSipParserAddressParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserAddressParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserParser_init(self);
  JreStrongAssign(&self->lexer_, lexer);
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) selectLexerWithNSString:@"charLexer"];
}

AndroidGovNistJavaxSipParserAddressParser *new_AndroidGovNistJavaxSipParserAddressParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserAddressParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserAddressParser *create_AndroidGovNistJavaxSipParserAddressParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserAddressParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

void AndroidGovNistJavaxSipParserAddressParser_initWithNSString_(AndroidGovNistJavaxSipParserAddressParser *self, NSString *address) {
  AndroidGovNistJavaxSipParserParser_init(self);
  JreStrongAssignAndConsume(&self->lexer_, new_AndroidGovNistJavaxSipParserLexer_initWithNSString_withNSString_(@"charLexer", address));
}

AndroidGovNistJavaxSipParserAddressParser *new_AndroidGovNistJavaxSipParserAddressParser_initWithNSString_(NSString *address) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserAddressParser, initWithNSString_, address)
}

AndroidGovNistJavaxSipParserAddressParser *create_AndroidGovNistJavaxSipParserAddressParser_initWithNSString_(NSString *address) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserAddressParser, initWithNSString_, address)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserAddressParser)
