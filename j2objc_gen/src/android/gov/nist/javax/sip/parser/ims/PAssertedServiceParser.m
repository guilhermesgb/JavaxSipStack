//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/ims/PAssertedServiceParser.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PAssertedService.h"
#include "android/gov/nist/javax/sip/header/ims/ParameterNamesIms.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/gov/nist/javax/sip/parser/ims/PAssertedServiceParser.h"
#include "android/javax/sip/InvalidArgumentException.h"

@implementation AndroidGovNistJavaxSipParserImsPAssertedServiceParser

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserImsPAssertedServiceParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (instancetype)initWithNSString:(NSString *)pas {
  AndroidGovNistJavaxSipParserImsPAssertedServiceParser_initWithNSString_(self, pas);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"PAssertedServiceParser.parse"];
  @try {
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_P_ASSERTED_SERVICE];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:':'];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    AndroidGovNistJavaxSipHeaderImsPAssertedService *pps = create_AndroidGovNistJavaxSipHeaderImsPAssertedService_init();
    NSString *urn = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) getBuffer];
    if ([((NSString *) nil_chk(urn)) java_contains:AndroidGovNistJavaxSipHeaderImsParameterNamesIms_SERVICE_ID]) {
      if ([urn java_contains:AndroidGovNistJavaxSipHeaderImsParameterNamesIms_SERVICE_ID_LABEL]) {
        NSString *serviceID = IOSObjectArray_Get(nil_chk([urn java_split:JreStrcat("$C", AndroidGovNistJavaxSipHeaderImsParameterNamesIms_SERVICE_ID_LABEL, '.')]), 1);
        if ([((NSString *) nil_chk([((NSString *) nil_chk(serviceID)) java_trim])) isEqual:@""]) @try {
          @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(@"URN should atleast have one sub-service");
        }
        @catch (AndroidJavaxSipInvalidArgumentException *e) {
          [((AndroidJavaxSipInvalidArgumentException *) nil_chk(e)) printStackTrace];
        }
        else [pps setSubserviceIdentifiersWithNSString:IOSObjectArray_Get(nil_chk([urn java_split:AndroidGovNistJavaxSipHeaderImsParameterNamesIms_SERVICE_ID_LABEL]), 1)];
      }
      else if ([urn java_contains:AndroidGovNistJavaxSipHeaderImsParameterNamesIms_APPLICATION_ID_LABEL]) {
        NSString *appID = IOSObjectArray_Get(nil_chk([urn java_split:JreStrcat("$C", AndroidGovNistJavaxSipHeaderImsParameterNamesIms_APPLICATION_ID_LABEL, '.')]), 1);
        if ([((NSString *) nil_chk([((NSString *) nil_chk(appID)) java_trim])) isEqual:@""]) @try {
          @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(@"URN should atleast have one sub-application");
        }
        @catch (AndroidJavaxSipInvalidArgumentException *e) {
          [((AndroidJavaxSipInvalidArgumentException *) nil_chk(e)) printStackTrace];
        }
        else [pps setApplicationIdentifiersWithNSString:IOSObjectArray_Get(nil_chk([urn java_split:AndroidGovNistJavaxSipHeaderImsParameterNamesIms_APPLICATION_ID_LABEL]), 1)];
      }
      else {
        @try {
          @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(@"URN is not well formed");
        }
        @catch (AndroidJavaxSipInvalidArgumentException *e) {
          [((AndroidJavaxSipInvalidArgumentException *) nil_chk(e)) printStackTrace];
        }
      }
    }
    [super parse];
    return pps;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"PAssertedServiceParser.parse"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipParserLexer;", "LNSString;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserImsPAssertedServiceParser = { "PAssertedServiceParser", "android.gov.nist.javax.sip.parser.ims", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserImsPAssertedServiceParser;
}

@end

void AndroidGovNistJavaxSipParserImsPAssertedServiceParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserImsPAssertedServiceParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserImsPAssertedServiceParser *new_AndroidGovNistJavaxSipParserImsPAssertedServiceParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserImsPAssertedServiceParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserImsPAssertedServiceParser *create_AndroidGovNistJavaxSipParserImsPAssertedServiceParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserImsPAssertedServiceParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

void AndroidGovNistJavaxSipParserImsPAssertedServiceParser_initWithNSString_(AndroidGovNistJavaxSipParserImsPAssertedServiceParser *self, NSString *pas) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, pas);
}

AndroidGovNistJavaxSipParserImsPAssertedServiceParser *new_AndroidGovNistJavaxSipParserImsPAssertedServiceParser_initWithNSString_(NSString *pas) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserImsPAssertedServiceParser, initWithNSString_, pas)
}

AndroidGovNistJavaxSipParserImsPAssertedServiceParser *create_AndroidGovNistJavaxSipParserImsPAssertedServiceParser_initWithNSString_(NSString *pas) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserImsPAssertedServiceParser, initWithNSString_, pas)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserImsPAssertedServiceParser)
