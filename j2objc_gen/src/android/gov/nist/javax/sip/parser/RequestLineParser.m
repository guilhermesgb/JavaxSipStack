//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/RequestLineParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/address/GenericURI.h"
#include "android/gov/nist/javax/sip/header/RequestLine.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/Parser.h"
#include "android/gov/nist/javax/sip/parser/RequestLineParser.h"
#include "android/gov/nist/javax/sip/parser/URLParser.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"

@implementation AndroidGovNistJavaxSipParserRequestLineParser

- (instancetype)initWithNSString:(NSString *)requestLine {
  AndroidGovNistJavaxSipParserRequestLineParser_initWithNSString_(self, requestLine);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserRequestLineParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderRequestLine *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"parse"];
  @try {
    AndroidGovNistJavaxSipHeaderRequestLine *retval = create_AndroidGovNistJavaxSipHeaderRequestLine_init();
    NSString *m = [self method];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) SPorHT];
    [retval setMethodWithNSString:m];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) selectLexerWithNSString:@"sip_urlLexer"];
    AndroidGovNistJavaxSipParserURLParser *urlParser = create_AndroidGovNistJavaxSipParserURLParser_initWithAndroidGovNistJavaxSipParserLexer_([self getLexer]);
    AndroidGovNistJavaxSipAddressGenericURI *url = [urlParser uriReferenceWithBoolean:true];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) SPorHT];
    [retval setUriWithAndroidJavaxSipAddressURI:url];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) selectLexerWithNSString:@"request_lineLexer"];
    NSString *v = [self sipVersion];
    [retval setSipVersionWithNSString:v];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) SPorHT];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:0x000a];
    return retval;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"parse"];
  }
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  AndroidGovNistJavaxSipParserRequestLineParser_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderRequestLine;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  methods[3].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;", "main", "[LNSString;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserRequestLineParser = { "RequestLineParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserRequestLineParser;
}

@end

void AndroidGovNistJavaxSipParserRequestLineParser_initWithNSString_(AndroidGovNistJavaxSipParserRequestLineParser *self, NSString *requestLine) {
  AndroidGovNistJavaxSipParserParser_init(self);
  JreStrongAssignAndConsume(&self->lexer_, new_AndroidGovNistJavaxSipParserLexer_initWithNSString_withNSString_(@"method_keywordLexer", requestLine));
}

AndroidGovNistJavaxSipParserRequestLineParser *new_AndroidGovNistJavaxSipParserRequestLineParser_initWithNSString_(NSString *requestLine) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserRequestLineParser, initWithNSString_, requestLine)
}

AndroidGovNistJavaxSipParserRequestLineParser *create_AndroidGovNistJavaxSipParserRequestLineParser_initWithNSString_(NSString *requestLine) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserRequestLineParser, initWithNSString_, requestLine)
}

void AndroidGovNistJavaxSipParserRequestLineParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserRequestLineParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserParser_init(self);
  JreStrongAssign(&self->lexer_, lexer);
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) selectLexerWithNSString:@"method_keywordLexer"];
}

AndroidGovNistJavaxSipParserRequestLineParser *new_AndroidGovNistJavaxSipParserRequestLineParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserRequestLineParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserRequestLineParser *create_AndroidGovNistJavaxSipParserRequestLineParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserRequestLineParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

void AndroidGovNistJavaxSipParserRequestLineParser_mainWithNSStringArray_(IOSObjectArray *args) {
  AndroidGovNistJavaxSipParserRequestLineParser_initialize();
  IOSObjectArray *requestLines = [IOSObjectArray arrayWithObjects:(id[]){ @"REGISTER sip:192.168.0.68 SIP/2.0\n", @"REGISTER sip:company.com SIP/2.0\n", @"INVITE sip:3660@166.35.231.140 SIP/2.0\n", @"INVITE sip:user@company.com SIP/2.0\n", @"REGISTER sip:[2001::1]:5060;transport=tcp SIP/2.0\n", @"REGISTER sip:[2002:800:700:600:30:4:6:1]:5060;transport=udp SIP/2.0\n", @"REGISTER sip:[3ffe:800:700::30:4:6:1]:5060;transport=tls SIP/2.0\n", @"REGISTER sip:[2001:720:1710:0:201:29ff:fe21:f403]:5060;transport=udp SIP/2.0\n", @"OPTIONS sip:135.180.130.133 SIP/2.0\n" } count:9 type:NSString_class_()];
  for (jint i = 0; i < requestLines->size_; i++) {
    AndroidGovNistJavaxSipParserRequestLineParser *rlp = create_AndroidGovNistJavaxSipParserRequestLineParser_initWithNSString_(IOSObjectArray_Get(requestLines, i));
    AndroidGovNistJavaxSipHeaderRequestLine *rl = [rlp parse];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"encoded = ", [((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk(rl)) encode])];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserRequestLineParser)
