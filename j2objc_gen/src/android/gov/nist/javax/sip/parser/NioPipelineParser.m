//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/NioPipelineParser.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/header/CallID.h"
#include "android/gov/nist/javax/sip/header/ContentLength.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/parser/MessageParser.h"
#include "android/gov/nist/javax/sip/parser/MessageParserFactory.h"
#include "android/gov/nist/javax/sip/parser/NioPipelineParser.h"
#include "android/gov/nist/javax/sip/parser/PostParseExecutorServices.h"
#include "android/gov/nist/javax/sip/parser/SIPMessageListener.h"
#include "android/gov/nist/javax/sip/stack/ConnectionOrientedMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/SIPEventInterceptor.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/text/ParseException.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Semaphore.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface AndroidGovNistJavaxSipParserNioPipelineParser () {
 @public
  jint maxMessageSize_;
  jint sizeCounter_;
  AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack_;
  id<AndroidGovNistJavaxSipParserMessageParser> smp_;
  JavaUtilConcurrentConcurrentHashMap *messagesOrderingMap_;
}

- (void)readStreamWithJavaIoInputStream:(JavaIoInputStream *)inputStream;

- (jboolean)readMessageSipHeaderLinesWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                                               withBoolean:(jboolean)isPreviousLineCRLF;

- (void)readMessageBodyWithJavaIoInputStream:(JavaIoInputStream *)inputStream;

- (jint)readChunkWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                         withByteArray:(IOSByteArray *)where
                               withInt:(jint)offset
                               withInt:(jint)length;

- (jint)readSingleByteWithJavaIoInputStream:(JavaIoInputStream *)inputStream;

- (void)checkLimits;

- (NSString *)readLineWithJavaIoInputStream:(JavaIoInputStream *)inputStream;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserNioPipelineParser, sipStack_, AndroidGovNistJavaxSipStackSIPTransactionStack *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserNioPipelineParser, smp_, id<AndroidGovNistJavaxSipParserMessageParser>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserNioPipelineParser, messagesOrderingMap_, JavaUtilConcurrentConcurrentHashMap *)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipParserNioPipelineParser_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipParserNioPipelineParser_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipParserNioPipelineParser_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipParserNioPipelineParser, logger, id<OrgSlf4jLogger>)

inline NSString *AndroidGovNistJavaxSipParserNioPipelineParser_get_CRLF();
static NSString *AndroidGovNistJavaxSipParserNioPipelineParser_CRLF = @"\x0d\n";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipParserNioPipelineParser, CRLF, NSString *)

__attribute__((unused)) static void AndroidGovNistJavaxSipParserNioPipelineParser_readStreamWithJavaIoInputStream_(AndroidGovNistJavaxSipParserNioPipelineParser *self, JavaIoInputStream *inputStream);

__attribute__((unused)) static jboolean AndroidGovNistJavaxSipParserNioPipelineParser_readMessageSipHeaderLinesWithJavaIoInputStream_withBoolean_(AndroidGovNistJavaxSipParserNioPipelineParser *self, JavaIoInputStream *inputStream, jboolean isPreviousLineCRLF);

__attribute__((unused)) static void AndroidGovNistJavaxSipParserNioPipelineParser_readMessageBodyWithJavaIoInputStream_(AndroidGovNistJavaxSipParserNioPipelineParser *self, JavaIoInputStream *inputStream);

__attribute__((unused)) static jint AndroidGovNistJavaxSipParserNioPipelineParser_readChunkWithJavaIoInputStream_withByteArray_withInt_withInt_(AndroidGovNistJavaxSipParserNioPipelineParser *self, JavaIoInputStream *inputStream, IOSByteArray *where, jint offset, jint length);

__attribute__((unused)) static jint AndroidGovNistJavaxSipParserNioPipelineParser_readSingleByteWithJavaIoInputStream_(AndroidGovNistJavaxSipParserNioPipelineParser *self, JavaIoInputStream *inputStream);

__attribute__((unused)) static void AndroidGovNistJavaxSipParserNioPipelineParser_checkLimits(AndroidGovNistJavaxSipParserNioPipelineParser *self);

__attribute__((unused)) static NSString *AndroidGovNistJavaxSipParserNioPipelineParser_readLineWithJavaIoInputStream_(AndroidGovNistJavaxSipParserNioPipelineParser *self, JavaIoInputStream *inputStream);

@interface AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure () {
 @public
  JavaUtilConcurrentSemaphore *semaphore_;
  id<JavaUtilQueue> messagesForCallID_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure, semaphore_, JavaUtilConcurrentSemaphore *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure, messagesForCallID_, id<JavaUtilQueue>)

@interface AndroidGovNistJavaxSipParserNioPipelineParser_Dispatch () {
 @public
  AndroidGovNistJavaxSipParserNioPipelineParser *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipParserNioPipelineParser)

@implementation AndroidGovNistJavaxSipParserNioPipelineParser

- (void)close {
}

- (void)readStreamWithJavaIoInputStream:(JavaIoInputStream *)inputStream {
  AndroidGovNistJavaxSipParserNioPipelineParser_readStreamWithJavaIoInputStream_(self, inputStream);
}

- (jboolean)readMessageSipHeaderLinesWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                                               withBoolean:(jboolean)isPreviousLineCRLF {
  return AndroidGovNistJavaxSipParserNioPipelineParser_readMessageSipHeaderLinesWithJavaIoInputStream_withBoolean_(self, inputStream, isPreviousLineCRLF);
}

- (void)readMessageBodyWithJavaIoInputStream:(JavaIoInputStream *)inputStream {
  AndroidGovNistJavaxSipParserNioPipelineParser_readMessageBodyWithJavaIoInputStream_(self, inputStream);
}

- (void)processSIPMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)message {
  @try {
    [((id<AndroidGovNistJavaxSipParserSIPMessageListener>) nil_chk(sipMessageListener_)) processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:message];
  }
  @catch (JavaLangException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserNioPipelineParser_logger)) errorWithNSString:@"Can't process message" withNSException:e];
  }
}

- (void)addBytesWithByteArray:(IOSByteArray *)bytes {
  @synchronized(self) {
    currentStreamEnded_ = false;
    JavaIoByteArrayInputStream *inputStream = create_JavaIoByteArrayInputStream_initWithByteArray_(bytes);
    AndroidGovNistJavaxSipParserNioPipelineParser_readStreamWithJavaIoInputStream_(self, inputStream);
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipParserNioPipelineParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
                    withAndroidGovNistJavaxSipParserSIPMessageListener:(id<AndroidGovNistJavaxSipParserSIPMessageListener>)sipMessageListener
                                                           withBoolean:(jboolean)debug
                                                               withInt:(jint)maxMessageSize {
  AndroidGovNistJavaxSipParserNioPipelineParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withBoolean_withInt_(self, sipStack, sipMessageListener, debug, maxMessageSize);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
                    withAndroidGovNistJavaxSipParserSIPMessageListener:(id<AndroidGovNistJavaxSipParserSIPMessageListener>)mhandler
                                                               withInt:(jint)maxMsgSize {
  AndroidGovNistJavaxSipParserNioPipelineParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withInt_(self, sipStack, mhandler, maxMsgSize);
  return self;
}

- (void)setMessageListenerWithAndroidGovNistJavaxSipParserSIPMessageListener:(id<AndroidGovNistJavaxSipParserSIPMessageListener>)mlistener {
  JreStrongAssign(&sipMessageListener_, mlistener);
}

- (jint)readChunkWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                         withByteArray:(IOSByteArray *)where
                               withInt:(jint)offset
                               withInt:(jint)length {
  return AndroidGovNistJavaxSipParserNioPipelineParser_readChunkWithJavaIoInputStream_withByteArray_withInt_withInt_(self, inputStream, where, offset, length);
}

- (jint)readSingleByteWithJavaIoInputStream:(JavaIoInputStream *)inputStream {
  return AndroidGovNistJavaxSipParserNioPipelineParser_readSingleByteWithJavaIoInputStream_(self, inputStream);
}

- (void)checkLimits {
  AndroidGovNistJavaxSipParserNioPipelineParser_checkLimits(self);
}

- (NSString *)readLineWithJavaIoInputStream:(JavaIoInputStream *)inputStream {
  return AndroidGovNistJavaxSipParserNioPipelineParser_readLineWithJavaIoInputStream_(self, inputStream);
}

- (void)dealloc {
  RELEASE_(sipMessageListener_);
  RELEASE_(sipStack_);
  RELEASE_(smp_);
  RELEASE_(partialLine_);
  RELEASE_(callId_);
  RELEASE_(messagesOrderingMap_);
  RELEASE_(message_);
  RELEASE_(messageBody_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 8, 9, 10, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 15, 16, 2, -1, -1, -1 },
    { NULL, "I", 0x2, 17, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 18, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(close);
  methods[1].selector = @selector(readStreamWithJavaIoInputStream:);
  methods[2].selector = @selector(readMessageSipHeaderLinesWithJavaIoInputStream:withBoolean:);
  methods[3].selector = @selector(readMessageBodyWithJavaIoInputStream:);
  methods[4].selector = @selector(processSIPMessageWithAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[5].selector = @selector(addBytesWithByteArray:);
  methods[6].selector = @selector(init);
  methods[7].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistJavaxSipParserSIPMessageListener:withBoolean:withInt:);
  methods[8].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistJavaxSipParserSIPMessageListener:withInt:);
  methods[9].selector = @selector(setMessageListenerWithAndroidGovNistJavaxSipParserSIPMessageListener:);
  methods[10].selector = @selector(readChunkWithJavaIoInputStream:withByteArray:withInt:withInt:);
  methods[11].selector = @selector(readSingleByteWithJavaIoInputStream:);
  methods[12].selector = @selector(checkLimits);
  methods[13].selector = @selector(readLineWithJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 19, -1, -1 },
    { "CRLF", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "sipMessageListener_", "LAndroidGovNistJavaxSipParserSIPMessageListener;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "maxMessageSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sizeCounter_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sipStack_", "LAndroidGovNistJavaxSipStackSIPTransactionStack;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "smp_", "LAndroidGovNistJavaxSipParserMessageParser;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isRunning_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "currentStreamEnded_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "readingMessageBodyContents_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "readingHeaderLines_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "partialLineRead_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "partialLine_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "callId_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "messagesOrderingMap_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
    { "message_", "LJavaLangStringBuffer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "messageBody_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "contentLength_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "contentReadSoFar_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "readStream", "LJavaIoInputStream;", "LJavaIoIOException;", "readMessageSipHeaderLines", "LJavaIoInputStream;Z", "readMessageBody", "processSIPMessage", "LAndroidGovNistJavaxSipMessageSIPMessage;", "addBytes", "[B", "LJavaLangException;", "LAndroidGovNistJavaxSipStackSIPTransactionStack;LAndroidGovNistJavaxSipParserSIPMessageListener;ZI", "LAndroidGovNistJavaxSipStackSIPTransactionStack;LAndroidGovNistJavaxSipParserSIPMessageListener;I", "setMessageListener", "LAndroidGovNistJavaxSipParserSIPMessageListener;", "readChunk", "LJavaIoInputStream;[BII", "readSingleByte", "readLine", &AndroidGovNistJavaxSipParserNioPipelineParser_logger, &AndroidGovNistJavaxSipParserNioPipelineParser_CRLF, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Landroid/gov/nist/javax/sip/parser/NioPipelineParser$CallIDOrderingStructure;>;", "LAndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure;LAndroidGovNistJavaxSipParserNioPipelineParser_UnparsedMessage;LAndroidGovNistJavaxSipParserNioPipelineParser_Dispatch;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserNioPipelineParser = { "NioPipelineParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, fields, 7, 0x1, 14, 19, -1, 22, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserNioPipelineParser;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipParserNioPipelineParser class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipParserNioPipelineParser_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipParserNioPipelineParser_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipParserNioPipelineParser)
  }
}

@end

void AndroidGovNistJavaxSipParserNioPipelineParser_readStreamWithJavaIoInputStream_(AndroidGovNistJavaxSipParserNioPipelineParser *self, JavaIoInputStream *inputStream) {
  jboolean isPreviousLineCRLF = false;
  while (true) {
    if (self->currentStreamEnded_) break;
    else {
      if (self->readingHeaderLines_) {
        isPreviousLineCRLF = AndroidGovNistJavaxSipParserNioPipelineParser_readMessageSipHeaderLinesWithJavaIoInputStream_withBoolean_(self, inputStream, isPreviousLineCRLF);
      }
      if (self->readingMessageBodyContents_) {
        AndroidGovNistJavaxSipParserNioPipelineParser_readMessageBodyWithJavaIoInputStream_(self, inputStream);
      }
    }
  }
}

jboolean AndroidGovNistJavaxSipParserNioPipelineParser_readMessageSipHeaderLinesWithJavaIoInputStream_withBoolean_(AndroidGovNistJavaxSipParserNioPipelineParser *self, JavaIoInputStream *inputStream, jboolean isPreviousLineCRLF) {
  jboolean crlfReceived = false;
  NSString *line = AndroidGovNistJavaxSipParserNioPipelineParser_readLineWithJavaIoInputStream_(self, inputStream);
  if (self->partialLineRead_) {
    JreStrongAssign(&self->partialLine_, JreStrcat("$$", self->partialLine_, line));
  }
  else {
    line = JreStrcat("$$", self->partialLine_, line);
    JreStrongAssign(&self->partialLine_, @"");
    if (![line isEqual:AndroidGovNistJavaxSipParserNioPipelineParser_CRLF]) {
      [((JavaLangStringBuffer *) nil_chk(self->message_)) appendWithNSString:line];
      NSString *lineIgnoreCase = [line lowercaseString];
      if ([((NSString *) nil_chk(lineIgnoreCase)) hasPrefix:JreLoadStatic(AndroidGovNistJavaxSipHeaderContentLength, NAME_LOWER)]) {
        self->contentLength_ = JavaLangInteger_parseIntWithNSString_([((NSString *) nil_chk([line java_substring:((jint) [((NSString *) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipHeaderContentLength, NAME_LOWER))) length]) + 1])) java_trim]);
      }
      else if ([lineIgnoreCase hasPrefix:JreLoadStatic(AndroidGovNistJavaxSipHeaderCallID, NAME_LOWER)]) {
        JreStrongAssign(&self->callId_, [((NSString *) nil_chk([line java_substring:((jint) [((NSString *) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipHeaderCallID, NAME_LOWER))) length]) + 1])) java_trim]);
      }
    }
    else {
      if (isPreviousLineCRLF) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserNioPipelineParser_logger)) debugWithNSString:@"KeepAlive Double CRLF received, sending single CRLF as defined per RFC 5626 Section 4.4.1"];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserNioPipelineParser_logger)) debugWithNSString:@"~~~ setting isPreviousLineCRLF=false"];
        crlfReceived = false;
        @try {
          [((id<AndroidGovNistJavaxSipParserSIPMessageListener>) nil_chk(self->sipMessageListener_)) sendSingleCLRF];
        }
        @catch (JavaLangException *e) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserNioPipelineParser_logger)) errorWithNSString:@"A problem occured while trying to send a single CLRF in response to a double CLRF" withNSException:e];
        }
      }
      else {
        crlfReceived = true;
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserNioPipelineParser_logger)) debugWithNSString:@"Received CRLF"];
        if (self->sipMessageListener_ != nil && [self->sipMessageListener_ isKindOfClass:[AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel class]]) {
          [((AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *) cast_chk(self->sipMessageListener_, [AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel class])) cancelPingKeepAliveTimeoutTaskIfStarted];
        }
      }
      if ([((JavaLangStringBuffer *) nil_chk(self->message_)) length] > 0) {
        self->readingMessageBodyContents_ = true;
        self->readingHeaderLines_ = false;
        self->partialLineRead_ = false;
        [((JavaLangStringBuffer *) nil_chk(self->message_)) appendWithNSString:AndroidGovNistJavaxSipParserNioPipelineParser_CRLF];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserNioPipelineParser_logger)) debugWithNSString:JreStrcat("$I", @"Content Length parsed is ", self->contentLength_)];
        self->contentReadSoFar_ = 0;
        JreStrongAssignAndConsume(&self->messageBody_, [IOSByteArray newArrayWithLength:self->contentLength_]);
      }
    }
  }
  return crlfReceived;
}

void AndroidGovNistJavaxSipParserNioPipelineParser_readMessageBodyWithJavaIoInputStream_(AndroidGovNistJavaxSipParserNioPipelineParser *self, JavaIoInputStream *inputStream) {
  jint bytesRead = 0;
  if (self->contentLength_ > 0) {
    bytesRead = AndroidGovNistJavaxSipParserNioPipelineParser_readChunkWithJavaIoInputStream_withByteArray_withInt_withInt_(self, inputStream, self->messageBody_, self->contentReadSoFar_, self->contentLength_ - self->contentReadSoFar_);
    if (bytesRead == -1) {
      self->currentStreamEnded_ = true;
      bytesRead = 0;
    }
  }
  self->contentReadSoFar_ += bytesRead;
  if (self->contentReadSoFar_ == self->contentLength_) {
    self->sizeCounter_ = self->maxMessageSize_;
    self->readingHeaderLines_ = true;
    self->readingMessageBodyContents_ = false;
    NSString *msgLines = [((JavaLangStringBuffer *) nil_chk(self->message_)) description];
    JreStrongAssignAndConsume(&self->message_, new_JavaLangStringBuffer_init());
    IOSByteArray *msgBodyBytes = self->messageBody_;
    jint finalContentLength = self->contentLength_;
    if (AndroidGovNistJavaxSipParserPostParseExecutorServices_getPostParseExecutor() != nil) {
      NSString *callId = self->callId_;
      if (callId == nil || ((jint) [((NSString *) nil_chk([callId java_trim])) length]) < 1) {
        @throw create_JavaIoIOException_initWithNSString_(@"received message with no Call-ID");
      }
      AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure *orderingStructure = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->messagesOrderingMap_)) getWithId:callId];
      if (orderingStructure == nil) {
        AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure *newCallIDOrderingStructure = create_AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure_initWithAndroidGovNistJavaxSipParserNioPipelineParser_(self);
        orderingStructure = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->messagesOrderingMap_)) putIfAbsentWithId:callId withId:newCallIDOrderingStructure];
        if (orderingStructure == nil) {
          orderingStructure = newCallIDOrderingStructure;
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserNioPipelineParser_logger)) debugWithNSString:JreStrcat("$@", @"new CallIDOrderingStructure added for message ", self->message_)];
        }
      }
      AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure *callIDOrderingStructure = orderingStructure;
      [((id<JavaUtilQueue>) nil_chk([callIDOrderingStructure getMessagesForCallID])) offerWithId:create_AndroidGovNistJavaxSipParserNioPipelineParser_UnparsedMessage_initWithNSString_withByteArray_(msgLines, msgBodyBytes)];
      [((id<JavaUtilConcurrentExecutorService>) nil_chk(AndroidGovNistJavaxSipParserPostParseExecutorServices_getPostParseExecutor())) executeWithJavaLangRunnable:create_AndroidGovNistJavaxSipParserNioPipelineParser_Dispatch_initWithAndroidGovNistJavaxSipParserNioPipelineParser_withAndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure_withNSString_(self, callIDOrderingStructure, callId)];
    }
    else {
      AndroidGovNistJavaxSipMessageSIPMessage *sipMessage = nil;
      @synchronized(self->smp_) {
        @try {
          sipMessage = [((id<AndroidGovNistJavaxSipParserMessageParser>) nil_chk(self->smp_)) parseSIPMessageWithByteArray:[((NSString *) nil_chk(msgLines)) java_getBytes] withBoolean:false withBoolean:false withAndroidGovNistJavaxSipParserParseExceptionListener:nil];
          [((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) setMessageContentWithByteArray:msgBodyBytes];
        }
        @catch (JavaTextParseException *e) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserNioPipelineParser_logger)) errorWithNSString:@"Parsing problem" withNSException:e];
        }
      }
      self->contentLength_ = 0;
      [self processSIPMessageWithAndroidGovNistJavaxSipMessageSIPMessage:sipMessage];
    }
  }
}

void AndroidGovNistJavaxSipParserNioPipelineParser_init(AndroidGovNistJavaxSipParserNioPipelineParser *self) {
  NSObject_init(self);
  JreStrongAssign(&self->smp_, nil);
  self->isRunning_ = false;
  self->currentStreamEnded_ = false;
  self->readingMessageBodyContents_ = false;
  self->readingHeaderLines_ = true;
  self->partialLineRead_ = false;
  JreStrongAssign(&self->partialLine_, @"");
  JreStrongAssignAndConsume(&self->messagesOrderingMap_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->message_, new_JavaLangStringBuffer_init());
  JreStrongAssign(&self->messageBody_, nil);
  self->contentLength_ = 0;
  self->contentReadSoFar_ = 0;
}

AndroidGovNistJavaxSipParserNioPipelineParser *new_AndroidGovNistJavaxSipParserNioPipelineParser_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserNioPipelineParser, init)
}

AndroidGovNistJavaxSipParserNioPipelineParser *create_AndroidGovNistJavaxSipParserNioPipelineParser_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserNioPipelineParser, init)
}

void AndroidGovNistJavaxSipParserNioPipelineParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withBoolean_withInt_(AndroidGovNistJavaxSipParserNioPipelineParser *self, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, id<AndroidGovNistJavaxSipParserSIPMessageListener> sipMessageListener, jboolean debug, jint maxMessageSize) {
  AndroidGovNistJavaxSipParserNioPipelineParser_init(self);
  JreStrongAssign(&self->sipStack_, sipStack);
  JreStrongAssign(&self->smp_, [((id<AndroidGovNistJavaxSipParserMessageParserFactory>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack)) getMessageParserFactory])) createMessageParserWithAndroidGovNistJavaxSipStackSIPTransactionStack:sipStack]);
  JreStrongAssign(&self->sipMessageListener_, sipMessageListener);
  self->maxMessageSize_ = maxMessageSize;
  self->sizeCounter_ = self->maxMessageSize_;
}

AndroidGovNistJavaxSipParserNioPipelineParser *new_AndroidGovNistJavaxSipParserNioPipelineParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withBoolean_withInt_(AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, id<AndroidGovNistJavaxSipParserSIPMessageListener> sipMessageListener, jboolean debug, jint maxMessageSize) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserNioPipelineParser, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withBoolean_withInt_, sipStack, sipMessageListener, debug, maxMessageSize)
}

AndroidGovNistJavaxSipParserNioPipelineParser *create_AndroidGovNistJavaxSipParserNioPipelineParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withBoolean_withInt_(AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, id<AndroidGovNistJavaxSipParserSIPMessageListener> sipMessageListener, jboolean debug, jint maxMessageSize) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserNioPipelineParser, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withBoolean_withInt_, sipStack, sipMessageListener, debug, maxMessageSize)
}

void AndroidGovNistJavaxSipParserNioPipelineParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withInt_(AndroidGovNistJavaxSipParserNioPipelineParser *self, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, id<AndroidGovNistJavaxSipParserSIPMessageListener> mhandler, jint maxMsgSize) {
  AndroidGovNistJavaxSipParserNioPipelineParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withBoolean_withInt_(self, sipStack, mhandler, false, maxMsgSize);
}

AndroidGovNistJavaxSipParserNioPipelineParser *new_AndroidGovNistJavaxSipParserNioPipelineParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withInt_(AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, id<AndroidGovNistJavaxSipParserSIPMessageListener> mhandler, jint maxMsgSize) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserNioPipelineParser, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withInt_, sipStack, mhandler, maxMsgSize)
}

AndroidGovNistJavaxSipParserNioPipelineParser *create_AndroidGovNistJavaxSipParserNioPipelineParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withInt_(AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, id<AndroidGovNistJavaxSipParserSIPMessageListener> mhandler, jint maxMsgSize) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserNioPipelineParser, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withInt_, sipStack, mhandler, maxMsgSize)
}

jint AndroidGovNistJavaxSipParserNioPipelineParser_readChunkWithJavaIoInputStream_withByteArray_withInt_withInt_(AndroidGovNistJavaxSipParserNioPipelineParser *self, JavaIoInputStream *inputStream, IOSByteArray *where, jint offset, jint length) {
  jint read = [((JavaIoInputStream *) nil_chk(inputStream)) readWithByteArray:where withInt:offset withInt:length];
  self->sizeCounter_ -= read;
  AndroidGovNistJavaxSipParserNioPipelineParser_checkLimits(self);
  return read;
}

jint AndroidGovNistJavaxSipParserNioPipelineParser_readSingleByteWithJavaIoInputStream_(AndroidGovNistJavaxSipParserNioPipelineParser *self, JavaIoInputStream *inputStream) {
  self->sizeCounter_--;
  AndroidGovNistJavaxSipParserNioPipelineParser_checkLimits(self);
  return [((JavaIoInputStream *) nil_chk(inputStream)) read];
}

void AndroidGovNistJavaxSipParserNioPipelineParser_checkLimits(AndroidGovNistJavaxSipParserNioPipelineParser *self) {
  if (self->maxMessageSize_ > 0 && self->sizeCounter_ < 0) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I", @"Max Message Size Exceeded ", self->maxMessageSize_));
}

NSString *AndroidGovNistJavaxSipParserNioPipelineParser_readLineWithJavaIoInputStream_(AndroidGovNistJavaxSipParserNioPipelineParser *self, JavaIoInputStream *inputStream) {
  self->partialLineRead_ = false;
  jint counter = 0;
  jint increment = 1024;
  jint bufferSize = increment;
  IOSByteArray *lineBuffer = [IOSByteArray arrayWithLength:bufferSize];
  IOSByteArray *crlfBuffer = [IOSByteArray arrayWithLength:2];
  jint crlfCounter = 0;
  while (true) {
    jchar ch;
    jint i = AndroidGovNistJavaxSipParserNioPipelineParser_readSingleByteWithJavaIoInputStream_(self, inputStream);
    if (i == -1) {
      self->partialLineRead_ = true;
      self->currentStreamEnded_ = true;
      break;
    }
    else ch = (jchar) (i & (jint) 0xFF);
    if (ch != 0x000d) *IOSByteArray_GetRef(lineBuffer, counter++) = (jbyte) (i & (jint) 0xFF);
    else if (counter == 0) *IOSByteArray_GetRef(crlfBuffer, crlfCounter++) = (jbyte) 0x000d;
    if (ch == 0x000a) {
      if (counter == 1 && crlfCounter > 0) {
        *IOSByteArray_GetRef(crlfBuffer, crlfCounter++) = (jbyte) 0x000a;
      }
      break;
    }
    if (counter == bufferSize) {
      IOSByteArray *tempBuffer = [IOSByteArray arrayWithLength:bufferSize + increment];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lineBuffer, 0, tempBuffer, 0, bufferSize);
      bufferSize = bufferSize + increment;
      lineBuffer = tempBuffer;
    }
  }
  if (counter == 1 && crlfCounter > 0) {
    return [NSString java_stringWithBytes:crlfBuffer offset:0 length:crlfCounter charsetName:@"UTF-8"];
  }
  else {
    NSString *lineRead = [NSString java_stringWithBytes:lineBuffer offset:0 length:counter charsetName:@"UTF-8"];
    if (crlfCounter == 1) {
      lineRead = JreStrcat("$C", lineRead, 0x000d);
    }
    return lineRead;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserNioPipelineParser)

@implementation AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure

- (instancetype)initWithAndroidGovNistJavaxSipParserNioPipelineParser:(AndroidGovNistJavaxSipParserNioPipelineParser *)outer$ {
  AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure_initWithAndroidGovNistJavaxSipParserNioPipelineParser_(self, outer$);
  return self;
}

- (JavaUtilConcurrentSemaphore *)getSemaphore {
  return semaphore_;
}

- (id<JavaUtilQueue>)getMessagesForCallID {
  return messagesForCallID_;
}

- (void)dealloc {
  RELEASE_(semaphore_);
  RELEASE_(messagesForCallID_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentSemaphore;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilQueue;", 0x1, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipParserNioPipelineParser:);
  methods[1].selector = @selector(getSemaphore);
  methods[2].selector = @selector(getMessagesForCallID);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "semaphore_", "LJavaUtilConcurrentSemaphore;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "messagesForCallID_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Queue<Landroid/gov/nist/javax/sip/parser/NioPipelineParser$UnparsedMessage;>;", "Ljava/util/Queue<Landroid/gov/nist/javax/sip/parser/NioPipelineParser$UnparsedMessage;>;", "LAndroidGovNistJavaxSipParserNioPipelineParser;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure = { "CallIDOrderingStructure", "android.gov.nist.javax.sip.parser", ptrTable, methods, fields, 7, 0x0, 3, 2, 2, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure;
}

@end

void AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure_initWithAndroidGovNistJavaxSipParserNioPipelineParser_(AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure *self, AndroidGovNistJavaxSipParserNioPipelineParser *outer$) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->semaphore_, new_JavaUtilConcurrentSemaphore_initWithInt_withBoolean_(1, true));
  JreStrongAssignAndConsume(&self->messagesForCallID_, new_JavaUtilConcurrentConcurrentLinkedQueue_init());
}

AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure *new_AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure_initWithAndroidGovNistJavaxSipParserNioPipelineParser_(AndroidGovNistJavaxSipParserNioPipelineParser *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure, initWithAndroidGovNistJavaxSipParserNioPipelineParser_, outer$)
}

AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure *create_AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure_initWithAndroidGovNistJavaxSipParserNioPipelineParser_(AndroidGovNistJavaxSipParserNioPipelineParser *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure, initWithAndroidGovNistJavaxSipParserNioPipelineParser_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure)

@implementation AndroidGovNistJavaxSipParserNioPipelineParser_UnparsedMessage

- (instancetype)initWithNSString:(NSString *)messageLines
                   withByteArray:(IOSByteArray *)body {
  AndroidGovNistJavaxSipParserNioPipelineParser_UnparsedMessage_initWithNSString_withByteArray_(self, messageLines, body);
  return self;
}

- (NSString *)description {
  return JreStrcat("$C$", [super description], 0x000a, lines_);
}

- (void)dealloc {
  RELEASE_(lines_);
  RELEASE_(body_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withByteArray:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lines_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "body_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[B", "toString", "LAndroidGovNistJavaxSipParserNioPipelineParser;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserNioPipelineParser_UnparsedMessage = { "UnparsedMessage", "android.gov.nist.javax.sip.parser", ptrTable, methods, fields, 7, 0x9, 2, 2, 2, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserNioPipelineParser_UnparsedMessage;
}

@end

void AndroidGovNistJavaxSipParserNioPipelineParser_UnparsedMessage_initWithNSString_withByteArray_(AndroidGovNistJavaxSipParserNioPipelineParser_UnparsedMessage *self, NSString *messageLines, IOSByteArray *body) {
  NSObject_init(self);
  JreStrongAssign(&self->lines_, messageLines);
  JreStrongAssign(&self->body_, body);
}

AndroidGovNistJavaxSipParserNioPipelineParser_UnparsedMessage *new_AndroidGovNistJavaxSipParserNioPipelineParser_UnparsedMessage_initWithNSString_withByteArray_(NSString *messageLines, IOSByteArray *body) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserNioPipelineParser_UnparsedMessage, initWithNSString_withByteArray_, messageLines, body)
}

AndroidGovNistJavaxSipParserNioPipelineParser_UnparsedMessage *create_AndroidGovNistJavaxSipParserNioPipelineParser_UnparsedMessage_initWithNSString_withByteArray_(NSString *messageLines, IOSByteArray *body) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserNioPipelineParser_UnparsedMessage, initWithNSString_withByteArray_, messageLines, body)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserNioPipelineParser_UnparsedMessage)

@implementation AndroidGovNistJavaxSipParserNioPipelineParser_Dispatch

- (instancetype)initWithAndroidGovNistJavaxSipParserNioPipelineParser:(AndroidGovNistJavaxSipParserNioPipelineParser *)outer$
withAndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure:(AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure *)callIDOrderingStructure
                                                         withNSString:(NSString *)callId {
  AndroidGovNistJavaxSipParserNioPipelineParser_Dispatch_initWithAndroidGovNistJavaxSipParserNioPipelineParser_withAndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure_withNSString_(self, outer$, callIDOrderingStructure, callId);
  return self;
}

- (void)run {
  JavaUtilConcurrentSemaphore *semaphore = [((AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure *) nil_chk(callIDOrderingStructure_)) getSemaphore];
  id<JavaUtilQueue> messagesForCallID = [((AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure *) nil_chk(callIDOrderingStructure_)) getMessagesForCallID];
  @try {
    jboolean acquired = [((JavaUtilConcurrentSemaphore *) nil_chk(semaphore)) tryAcquireWithLong:30 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    if (!acquired) {
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipParserNioPipelineParser, logger))) warnWithNSString:JreStrcat("$$$", @"Semaphore acquisition for callId ", callId_, @" wasn't successful so don't process message, returning")];
      return;
    }
    else {
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipParserNioPipelineParser, logger))) debugWithNSString:JreStrcat("$$$", @"semaphore acquired for message ", callId_, @" acquired")];
    }
  }
  @catch (JavaLangInterruptedException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipParserNioPipelineParser, logger))) errorWithNSString:JreStrcat("$$$", @"Semaphore acquisition for callId ", callId_, @" interrupted, couldn't process message, returning") withNSException:e];
    return;
  }
  AndroidGovNistJavaxSipParserNioPipelineParser_UnparsedMessage *unparsedMessage = nil;
  AndroidGovNistJavaxSipMessageSIPMessage *parsedSIPMessage = nil;
  jboolean messagePolled = false;
  @try {
    @synchronized(this$0_->smp_) {
      unparsedMessage = [((id<JavaUtilQueue>) nil_chk(messagesForCallID)) peek];
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipParserNioPipelineParser, logger))) debugWithNSString:JreStrcat("$@", @"\nUnparsed message before parser is:\n", unparsedMessage)];
      parsedSIPMessage = [((id<AndroidGovNistJavaxSipParserMessageParser>) nil_chk(this$0_->smp_)) parseSIPMessageWithByteArray:[((NSString *) nil_chk(((AndroidGovNistJavaxSipParserNioPipelineParser_UnparsedMessage *) nil_chk(unparsedMessage))->lines_)) java_getBytes] withBoolean:false withBoolean:false withAndroidGovNistJavaxSipParserParseExceptionListener:nil];
      if (parsedSIPMessage == nil) {
        [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipParserNioPipelineParser, logger))) debugWithNSString:@"parsed message is null, probably because of end of stream, empty packets or socket closed and we got CRLF to terminate cleanly, not processing message"];
      }
      else if (((IOSByteArray *) nil_chk(unparsedMessage->body_))->size_ > 0) {
        [parsedSIPMessage setMessageContentWithByteArray:unparsedMessage->body_];
      }
    }
    if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_))->sipEventInterceptor_ != nil && parsedSIPMessage != nil) {
      [this$0_->sipStack_->sipEventInterceptor_ beforeMessageWithAndroidJavaxSipMessageMessage:parsedSIPMessage];
    }
    [messagesForCallID poll];
    messagePolled = true;
    if (parsedSIPMessage != nil) {
      [((id<AndroidGovNistJavaxSipParserSIPMessageListener>) nil_chk(this$0_->sipMessageListener_)) processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:parsedSIPMessage];
    }
  }
  @catch (JavaTextParseException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipParserNioPipelineParser, logger))) warnWithNSString:JreStrcat("$@", @"Problem parsing message ", unparsedMessage)];
  }
  @catch (JavaLangException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipParserNioPipelineParser, logger))) errorWithNSString:JreStrcat("$@", @"Error occured processing message ", this$0_->message_) withNSException:e];
  }
  @finally {
    if (!messagePolled) {
      [messagesForCallID poll];
    }
    if ([messagesForCallID size] <= 0) {
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->messagesOrderingMap_)) removeWithId:callId_];
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipParserNioPipelineParser, logger))) debugWithNSString:JreStrcat("$$", @"CallIDOrderingStructure removed for callId ", callId_)];
    }
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipParserNioPipelineParser, logger))) debugWithNSString:JreStrcat("$@", @"releasing semaphore for message ", parsedSIPMessage)];
    [semaphore release__];
    if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->messagesOrderingMap_)) isEmpty]) {
      @synchronized(this$0_->messagesOrderingMap_) {
        [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->messagesOrderingMap_)) java_notify];
      }
    }
    if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_))->sipEventInterceptor_ != nil && parsedSIPMessage != nil) {
      [this$0_->sipStack_->sipEventInterceptor_ afterMessageWithAndroidJavaxSipMessageMessage:parsedSIPMessage];
    }
  }
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipParserNioPipelineParser, logger))) debugWithNSString:JreStrcat("$@", @"dispatch task done on ", parsedSIPMessage)];
}

- (jlong)getReceptionTime {
  return time_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(callIDOrderingStructure_);
  RELEASE_(callId_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipParserNioPipelineParser:withAndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure:withNSString:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(getReceptionTime);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipParserNioPipelineParser;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "callIDOrderingStructure_", "LAndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "callId_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "time_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure;LNSString;", "LAndroidGovNistJavaxSipParserNioPipelineParser;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserNioPipelineParser_Dispatch = { "Dispatch", "android.gov.nist.javax.sip.parser", ptrTable, methods, fields, 7, 0x1, 3, 4, 1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserNioPipelineParser_Dispatch;
}

@end

void AndroidGovNistJavaxSipParserNioPipelineParser_Dispatch_initWithAndroidGovNistJavaxSipParserNioPipelineParser_withAndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure_withNSString_(AndroidGovNistJavaxSipParserNioPipelineParser_Dispatch *self, AndroidGovNistJavaxSipParserNioPipelineParser *outer$, AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure *callIDOrderingStructure, NSString *callId) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->callIDOrderingStructure_, callIDOrderingStructure);
  JreStrongAssign(&self->callId_, callId);
  self->time_ = JavaLangSystem_currentTimeMillis();
}

AndroidGovNistJavaxSipParserNioPipelineParser_Dispatch *new_AndroidGovNistJavaxSipParserNioPipelineParser_Dispatch_initWithAndroidGovNistJavaxSipParserNioPipelineParser_withAndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure_withNSString_(AndroidGovNistJavaxSipParserNioPipelineParser *outer$, AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure *callIDOrderingStructure, NSString *callId) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserNioPipelineParser_Dispatch, initWithAndroidGovNistJavaxSipParserNioPipelineParser_withAndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure_withNSString_, outer$, callIDOrderingStructure, callId)
}

AndroidGovNistJavaxSipParserNioPipelineParser_Dispatch *create_AndroidGovNistJavaxSipParserNioPipelineParser_Dispatch_initWithAndroidGovNistJavaxSipParserNioPipelineParser_withAndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure_withNSString_(AndroidGovNistJavaxSipParserNioPipelineParser *outer$, AndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure *callIDOrderingStructure, NSString *callId) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserNioPipelineParser_Dispatch, initWithAndroidGovNistJavaxSipParserNioPipelineParser_withAndroidGovNistJavaxSipParserNioPipelineParser_CallIDOrderingStructure_withNSString_, outer$, callIDOrderingStructure, callId)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserNioPipelineParser_Dispatch)
