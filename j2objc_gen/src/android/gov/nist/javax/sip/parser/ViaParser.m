//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/ViaParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/HostNameParser.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/NameValue.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/Protocol.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/header/ViaList.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/gov/nist/javax/sip/parser/ViaParser.h"
#include "java/lang/StringBuilder.h"
#include "java/text/ParseException.h"

@interface AndroidGovNistJavaxSipParserViaParser ()

- (void)parseViaWithAndroidGovNistJavaxSipHeaderVia:(AndroidGovNistJavaxSipHeaderVia *)v;

@end

__attribute__((unused)) static void AndroidGovNistJavaxSipParserViaParser_parseViaWithAndroidGovNistJavaxSipHeaderVia_(AndroidGovNistJavaxSipParserViaParser *self, AndroidGovNistJavaxSipHeaderVia *v);

@implementation AndroidGovNistJavaxSipParserViaParser

- (instancetype)initWithNSString:(NSString *)via {
  AndroidGovNistJavaxSipParserViaParser_initWithNSString_(self, via);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserViaParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (void)parseViaWithAndroidGovNistJavaxSipHeaderVia:(AndroidGovNistJavaxSipHeaderVia *)v {
  AndroidGovNistJavaxSipParserViaParser_parseViaWithAndroidGovNistJavaxSipHeaderVia_(self, v);
}

- (AndroidGovNistCoreNameValue *)nameValue {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"nameValue"];
  @try {
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:AndroidGovNistCoreLexerCore_ID];
    AndroidGovNistCoreToken *name = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) SPorHT];
    @try {
      jboolean quoted = false;
      jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
      if (la == '=') {
        [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
        [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) SPorHT];
        NSString *str = nil;
        if ([((NSString *) nil_chk([((AndroidGovNistCoreToken *) nil_chk(name)) getTokenValue])) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderVia_RECEIVED] == 0) {
          str = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) byteStringNoSemicolon];
        }
        else {
          if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == '"') {
            str = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) quotedString];
            quoted = true;
          }
          else {
            [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:AndroidGovNistCoreLexerCore_ID];
            AndroidGovNistCoreToken *value = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
            str = [((AndroidGovNistCoreToken *) nil_chk(value)) getTokenValue];
          }
        }
        AndroidGovNistCoreNameValue *nv = create_AndroidGovNistCoreNameValue_initWithNSString_withId_([((NSString *) nil_chk([name getTokenValue])) lowercaseString], str);
        if (quoted) [nv setQuotedValue];
        return nv;
      }
      else {
        return create_AndroidGovNistCoreNameValue_initWithNSString_withId_([((NSString *) nil_chk([((AndroidGovNistCoreToken *) nil_chk(name)) getTokenValue])) lowercaseString], nil);
      }
    }
    @catch (JavaTextParseException *ex) {
      return create_AndroidGovNistCoreNameValue_initWithNSString_withId_([((AndroidGovNistCoreToken *) nil_chk(name)) getTokenValue], nil);
    }
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"nameValue"];
  }
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"parse"];
  @try {
    AndroidGovNistJavaxSipHeaderViaList *viaList = create_AndroidGovNistJavaxSipHeaderViaList_init();
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_VIA];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:':'];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    while (true) {
      AndroidGovNistJavaxSipHeaderVia *v = create_AndroidGovNistJavaxSipHeaderVia_init();
      AndroidGovNistJavaxSipParserViaParser_parseViaWithAndroidGovNistJavaxSipHeaderVia_(self, v);
      [viaList addWithId:v];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      if ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0] == ',') {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) consumeWithInt:1];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      }
      if ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0] == 0x000a) break;
    }
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:0x000a];
    return viaList;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"parse"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValue;", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parseViaWithAndroidGovNistJavaxSipHeaderVia:);
  methods[3].selector = @selector(nameValue);
  methods[4].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "parseVia", "LAndroidGovNistJavaxSipHeaderVia;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserViaParser = { "ViaParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserViaParser;
}

@end

void AndroidGovNistJavaxSipParserViaParser_initWithNSString_(AndroidGovNistJavaxSipParserViaParser *self, NSString *via) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, via);
}

AndroidGovNistJavaxSipParserViaParser *new_AndroidGovNistJavaxSipParserViaParser_initWithNSString_(NSString *via) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserViaParser, initWithNSString_, via)
}

AndroidGovNistJavaxSipParserViaParser *create_AndroidGovNistJavaxSipParserViaParser_initWithNSString_(NSString *via) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserViaParser, initWithNSString_, via)
}

void AndroidGovNistJavaxSipParserViaParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserViaParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserViaParser *new_AndroidGovNistJavaxSipParserViaParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserViaParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserViaParser *create_AndroidGovNistJavaxSipParserViaParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserViaParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

void AndroidGovNistJavaxSipParserViaParser_parseViaWithAndroidGovNistJavaxSipHeaderVia_(AndroidGovNistJavaxSipParserViaParser *self, AndroidGovNistJavaxSipHeaderVia *v) {
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
  AndroidGovNistCoreToken *protocolName = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) getNextToken];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'/'];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
  AndroidGovNistCoreToken *protocolVersion = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) getNextToken];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'/'];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
  AndroidGovNistCoreToken *transport = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) getNextToken];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
  AndroidGovNistJavaxSipHeaderProtocol *protocol = create_AndroidGovNistJavaxSipHeaderProtocol_init();
  [protocol setProtocolNameWithNSString:[((AndroidGovNistCoreToken *) nil_chk(protocolName)) getTokenValue]];
  [protocol setProtocolVersionWithNSString:[((AndroidGovNistCoreToken *) nil_chk(protocolVersion)) getTokenValue]];
  [protocol setTransportWithNSString:[((AndroidGovNistCoreToken *) nil_chk(transport)) getTokenValue]];
  [((AndroidGovNistJavaxSipHeaderVia *) nil_chk(v)) setSentProtocolWithAndroidGovNistJavaxSipHeaderProtocol:protocol];
  AndroidGovNistCoreHostNameParser *hnp = create_AndroidGovNistCoreHostNameParser_initWithAndroidGovNistCoreLexerCore_([self getLexer]);
  AndroidGovNistCoreHostPort *hostPort = [hnp hostPortWithBoolean:true];
  [v setSentByWithAndroidGovNistCoreHostPort:hostPort];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
  while ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0] == ';') {
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) consumeWithInt:1];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    AndroidGovNistCoreNameValue *nameValue = [self nameValue];
    NSString *name = [((AndroidGovNistCoreNameValue *) nil_chk(nameValue)) getName];
    if ([((NSString *) nil_chk(name)) isEqual:AndroidGovNistJavaxSipHeaderVia_BRANCH]) {
      NSString *branchId = (NSString *) cast_chk([nameValue getValueAsObject], [NSString class]);
      if (branchId == nil) @throw create_JavaTextParseException_initWithNSString_withInt_(@"null branch Id", [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) getPtr]);
    }
    [v setParameterWithAndroidGovNistCoreNameValue:nameValue];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
  }
  if ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0] == '(') {
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) selectLexerWithNSString:@"charLexer"];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) consumeWithInt:1];
    JavaLangStringBuilder *comment = create_JavaLangStringBuilder_init();
    while (true) {
      jchar ch = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0];
      if (ch == ')') {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) consumeWithInt:1];
        break;
      }
      else if (ch == '\\') {
        AndroidGovNistCoreToken *tok = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) getNextToken];
        [comment appendWithNSString:[((AndroidGovNistCoreToken *) nil_chk(tok)) getTokenValue]];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) consumeWithInt:1];
        tok = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) getNextToken];
        [comment appendWithNSString:[((AndroidGovNistCoreToken *) nil_chk(tok)) getTokenValue]];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) consumeWithInt:1];
      }
      else if (ch == 0x000a) {
        break;
      }
      else {
        [comment appendWithChar:ch];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) consumeWithInt:1];
      }
    }
    [v setCommentWithNSString:[comment description]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserViaParser)
