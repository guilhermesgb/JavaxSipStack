//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/AcceptEncodingParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/AcceptEncoding.h"
#include "android/gov/nist/javax/sip/header/AcceptEncodingList.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/parser/AcceptEncodingParser.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "java/lang/Float.h"
#include "java/lang/NumberFormatException.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserAcceptEncodingParser

- (instancetype)initWithNSString:(NSString *)acceptEncoding {
  AndroidGovNistJavaxSipParserAcceptEncodingParser_initWithNSString_(self, acceptEncoding);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserAcceptEncodingParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  AndroidGovNistJavaxSipHeaderAcceptEncodingList *acceptEncodingList = create_AndroidGovNistJavaxSipHeaderAcceptEncodingList_init();
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"AcceptEncodingParser.parse"];
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_ACCEPT_ENCODING];
    if (![((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) startsId]) {
      AndroidGovNistJavaxSipHeaderAcceptEncoding *acceptEncoding = create_AndroidGovNistJavaxSipHeaderAcceptEncoding_init();
      [acceptEncodingList addWithId:acceptEncoding];
    }
    else {
      do {
        AndroidGovNistJavaxSipHeaderAcceptEncoding *acceptEncoding = create_AndroidGovNistJavaxSipHeaderAcceptEncoding_init();
        if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) startsId]) {
          AndroidGovNistCoreToken *value = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
          [acceptEncoding setEncodingWithNSString:[((AndroidGovNistCoreToken *) nil_chk(value)) getTokenValue]];
          while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ';') {
            [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:';'];
            [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
            AndroidGovNistCoreToken *pname = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
            [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
            if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAhead] == '=') {
              [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'='];
              [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
              value = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
              if ([((NSString *) nil_chk([((AndroidGovNistCoreToken *) nil_chk(pname)) getTokenValue])) java_equalsIgnoreCase:@"q"]) {
                @try {
                  jfloat qv = JavaLangFloat_parseFloatWithNSString_([((AndroidGovNistCoreToken *) nil_chk(value)) getTokenValue]);
                  [acceptEncoding setQValueWithFloat:qv];
                }
                @catch (JavaLangNumberFormatException *ex) {
                  @throw [self createParseExceptionWithNSString:[((JavaLangNumberFormatException *) nil_chk(ex)) getMessage]];
                }
                @catch (AndroidJavaxSipInvalidArgumentException *ex) {
                  @throw [self createParseExceptionWithNSString:[((AndroidJavaxSipInvalidArgumentException *) nil_chk(ex)) getMessage]];
                }
              }
              else {
                [acceptEncoding setParameterWithNSString:[pname getTokenValue] withNSString:[((AndroidGovNistCoreToken *) nil_chk(value)) getTokenValue]];
              }
              [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
            }
            else [acceptEncoding setParameterWithNSString:[((AndroidGovNistCoreToken *) nil_chk(pname)) getTokenValue] withNSString:@""];
          }
        }
        [acceptEncodingList addWithId:acceptEncoding];
        if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ',') {
          [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:','];
          [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        }
        else break;
      }
      while (true);
    }
    return acceptEncodingList;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"AcceptEncodingParser.parse"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserAcceptEncodingParser = { "AcceptEncodingParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserAcceptEncodingParser;
}

@end

void AndroidGovNistJavaxSipParserAcceptEncodingParser_initWithNSString_(AndroidGovNistJavaxSipParserAcceptEncodingParser *self, NSString *acceptEncoding) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, acceptEncoding);
}

AndroidGovNistJavaxSipParserAcceptEncodingParser *new_AndroidGovNistJavaxSipParserAcceptEncodingParser_initWithNSString_(NSString *acceptEncoding) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserAcceptEncodingParser, initWithNSString_, acceptEncoding)
}

AndroidGovNistJavaxSipParserAcceptEncodingParser *create_AndroidGovNistJavaxSipParserAcceptEncodingParser_initWithNSString_(NSString *acceptEncoding) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserAcceptEncodingParser, initWithNSString_, acceptEncoding)
}

void AndroidGovNistJavaxSipParserAcceptEncodingParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserAcceptEncodingParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserAcceptEncodingParser *new_AndroidGovNistJavaxSipParserAcceptEncodingParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserAcceptEncodingParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserAcceptEncodingParser *create_AndroidGovNistJavaxSipParserAcceptEncodingParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserAcceptEncodingParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserAcceptEncodingParser)
