//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/ContactParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/Contact.h"
#include "android/gov/nist/javax/sip/header/ContactList.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/parser/AddressParametersParser.h"
#include "android/gov/nist/javax/sip/parser/ContactParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserContactParser

- (instancetype)initWithNSString:(NSString *)contact {
  AndroidGovNistJavaxSipParserContactParser_initWithNSString_(self, contact);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserContactParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_CONTACT];
  AndroidGovNistJavaxSipHeaderContactList *retval = create_AndroidGovNistJavaxSipHeaderContactList_init();
  while (true) {
    AndroidGovNistJavaxSipHeaderContact *contact = create_AndroidGovNistJavaxSipHeaderContact_init();
    if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == '*') {
      jchar next = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:1];
      if (next == ' ' || next == 0x0009 || next == 0x000d || next == 0x000a) {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'*'];
        [contact setWildCardFlagWithBoolean:true];
      }
      else {
        [super parseWithAndroidGovNistJavaxSipHeaderAddressParametersHeader:contact];
      }
    }
    else {
      [super parseWithAndroidGovNistJavaxSipHeaderAddressParametersHeader:contact];
    }
    [retval addWithId:contact];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
    if (la == ',') {
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:','];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    }
    else if (la == 0x000a || la == 0x0000) break;
    else @throw [self createParseExceptionWithNSString:@"unexpected char"];
  }
  return retval;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserContactParser = { "ContactParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserContactParser;
}

@end

void AndroidGovNistJavaxSipParserContactParser_initWithNSString_(AndroidGovNistJavaxSipParserContactParser *self, NSString *contact) {
  AndroidGovNistJavaxSipParserAddressParametersParser_initWithNSString_(self, contact);
}

AndroidGovNistJavaxSipParserContactParser *new_AndroidGovNistJavaxSipParserContactParser_initWithNSString_(NSString *contact) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserContactParser, initWithNSString_, contact)
}

AndroidGovNistJavaxSipParserContactParser *create_AndroidGovNistJavaxSipParserContactParser_initWithNSString_(NSString *contact) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserContactParser, initWithNSString_, contact)
}

void AndroidGovNistJavaxSipParserContactParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserContactParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserAddressParametersParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  JreStrongAssign(&self->lexer_, lexer);
}

AndroidGovNistJavaxSipParserContactParser *new_AndroidGovNistJavaxSipParserContactParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserContactParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserContactParser *create_AndroidGovNistJavaxSipParserContactParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserContactParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserContactParser)
