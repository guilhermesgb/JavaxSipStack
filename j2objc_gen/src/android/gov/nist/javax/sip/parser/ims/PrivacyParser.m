//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/ims/PrivacyParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/ims/Privacy.h"
#include "android/gov/nist/javax/sip/header/ims/PrivacyList.h"
#include "android/gov/nist/javax/sip/header/ims/SIPHeaderNamesIms.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/gov/nist/javax/sip/parser/ims/PrivacyParser.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"

@implementation AndroidGovNistJavaxSipParserImsPrivacyParser

- (instancetype)initWithNSString:(NSString *)privacyType {
  AndroidGovNistJavaxSipParserImsPrivacyParser_initWithNSString_(self, privacyType);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserImsPrivacyParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"PrivacyParser.parse"];
  AndroidGovNistJavaxSipHeaderImsPrivacyList *privacyList = create_AndroidGovNistJavaxSipHeaderImsPrivacyList_init();
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_PRIVACY];
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] != 0x000a) {
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      AndroidGovNistJavaxSipHeaderImsPrivacy *privacy = create_AndroidGovNistJavaxSipHeaderImsPrivacy_init();
      [privacy setHeaderNameWithNSString:AndroidGovNistJavaxSipHeaderImsSIPHeaderNamesIms_PRIVACY];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
      AndroidGovNistCoreToken *token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
      [privacy setPrivacyWithNSString:[((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      [privacyList addWithId:privacy];
      while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ';') {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:';'];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        privacy = create_AndroidGovNistJavaxSipHeaderImsPrivacy_init();
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
        token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
        [privacy setPrivacyWithNSString:[((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        [privacyList addWithId:privacy];
      }
    }
    return privacyList;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"PrivacyParser.parse"];
  }
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  AndroidGovNistJavaxSipParserImsPrivacyParser_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  methods[3].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;", "main", "[LNSString;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserImsPrivacyParser = { "PrivacyParser", "android.gov.nist.javax.sip.parser.ims", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserImsPrivacyParser;
}

@end

void AndroidGovNistJavaxSipParserImsPrivacyParser_initWithNSString_(AndroidGovNistJavaxSipParserImsPrivacyParser *self, NSString *privacyType) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, privacyType);
}

AndroidGovNistJavaxSipParserImsPrivacyParser *new_AndroidGovNistJavaxSipParserImsPrivacyParser_initWithNSString_(NSString *privacyType) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserImsPrivacyParser, initWithNSString_, privacyType)
}

AndroidGovNistJavaxSipParserImsPrivacyParser *create_AndroidGovNistJavaxSipParserImsPrivacyParser_initWithNSString_(NSString *privacyType) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserImsPrivacyParser, initWithNSString_, privacyType)
}

void AndroidGovNistJavaxSipParserImsPrivacyParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserImsPrivacyParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserImsPrivacyParser *new_AndroidGovNistJavaxSipParserImsPrivacyParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserImsPrivacyParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserImsPrivacyParser *create_AndroidGovNistJavaxSipParserImsPrivacyParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserImsPrivacyParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

void AndroidGovNistJavaxSipParserImsPrivacyParser_mainWithNSStringArray_(IOSObjectArray *args) {
  AndroidGovNistJavaxSipParserImsPrivacyParser_initialize();
  IOSObjectArray *rou = [IOSObjectArray arrayWithObjects:(id[]){ @"Privacy: none\n", @"Privacy: none;id;user\n" } count:2 type:NSString_class_()];
  for (jint i = 0; i < rou->size_; i++) {
    AndroidGovNistJavaxSipParserImsPrivacyParser *rp = create_AndroidGovNistJavaxSipParserImsPrivacyParser_initWithNSString_(IOSObjectArray_Get(rou, i));
    AndroidGovNistJavaxSipHeaderImsPrivacyList *list = (AndroidGovNistJavaxSipHeaderImsPrivacyList *) cast_chk([rp parse], [AndroidGovNistJavaxSipHeaderImsPrivacyList class]);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"encoded = ", [((AndroidGovNistJavaxSipHeaderImsPrivacyList *) nil_chk(list)) encode])];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserImsPrivacyParser)
