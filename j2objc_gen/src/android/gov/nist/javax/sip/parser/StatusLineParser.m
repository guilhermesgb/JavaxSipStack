//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/StatusLineParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/javax/sip/header/StatusLine.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/Parser.h"
#include "android/gov/nist/javax/sip/parser/StatusLineParser.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserStatusLineParser

- (instancetype)initWithNSString:(NSString *)statusLine {
  AndroidGovNistJavaxSipParserStatusLineParser_initWithNSString_(self, statusLine);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserStatusLineParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (jint)statusCode {
  NSString *scode = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) number];
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"statusCode"];
  @try {
    jint retval = JavaLangInteger_parseIntWithNSString_(scode);
    return retval;
  }
  @catch (JavaLangNumberFormatException *ex) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$C$", [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getBuffer], ':', [((JavaLangNumberFormatException *) nil_chk(ex)) getMessage]), [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getPtr]);
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"statusCode"];
  }
}

- (NSString *)reasonPhrase {
  return [((NSString *) nil_chk([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) getRest])) java_trim];
}

- (AndroidGovNistJavaxSipHeaderStatusLine *)parse {
  @try {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"parse"];
    AndroidGovNistJavaxSipHeaderStatusLine *retval = create_AndroidGovNistJavaxSipHeaderStatusLine_init();
    NSString *version_ = [self sipVersion];
    [retval setSipVersionWithNSString:version_];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) SPorHT];
    jint scode = [self statusCode];
    [retval setStatusCodeWithInt:scode];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) SPorHT];
    NSString *rp = [self reasonPhrase];
    [retval setReasonPhraseWithNSString:rp];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) SPorHT];
    return retval;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"parse"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderStatusLine;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(statusCode);
  methods[3].selector = @selector(reasonPhrase);
  methods[4].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserStatusLineParser = { "StatusLineParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserStatusLineParser;
}

@end

void AndroidGovNistJavaxSipParserStatusLineParser_initWithNSString_(AndroidGovNistJavaxSipParserStatusLineParser *self, NSString *statusLine) {
  AndroidGovNistJavaxSipParserParser_init(self);
  JreStrongAssignAndConsume(&self->lexer_, new_AndroidGovNistJavaxSipParserLexer_initWithNSString_withNSString_(@"status_lineLexer", statusLine));
}

AndroidGovNistJavaxSipParserStatusLineParser *new_AndroidGovNistJavaxSipParserStatusLineParser_initWithNSString_(NSString *statusLine) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserStatusLineParser, initWithNSString_, statusLine)
}

AndroidGovNistJavaxSipParserStatusLineParser *create_AndroidGovNistJavaxSipParserStatusLineParser_initWithNSString_(NSString *statusLine) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserStatusLineParser, initWithNSString_, statusLine)
}

void AndroidGovNistJavaxSipParserStatusLineParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserStatusLineParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserParser_init(self);
  JreStrongAssign(&self->lexer_, lexer);
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) selectLexerWithNSString:@"status_lineLexer"];
}

AndroidGovNistJavaxSipParserStatusLineParser *new_AndroidGovNistJavaxSipParserStatusLineParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserStatusLineParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserStatusLineParser *create_AndroidGovNistJavaxSipParserStatusLineParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserStatusLineParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserStatusLineParser)
