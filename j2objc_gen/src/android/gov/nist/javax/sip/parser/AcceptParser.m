//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/AcceptParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/Accept.h"
#include "android/gov/nist/javax/sip/header/AcceptList.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderNames.h"
#include "android/gov/nist/javax/sip/parser/AcceptParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/ParametersParser.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"

@implementation AndroidGovNistJavaxSipParserAcceptParser

- (instancetype)initWithNSString:(NSString *)accept {
  AndroidGovNistJavaxSipParserAcceptParser_initWithNSString_(self, accept);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserAcceptParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"AcceptParser.parse"];
  AndroidGovNistJavaxSipHeaderAcceptList *list = create_AndroidGovNistJavaxSipHeaderAcceptList_init();
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_ACCEPT];
    AndroidGovNistJavaxSipHeaderAccept *accept = create_AndroidGovNistJavaxSipHeaderAccept_init();
    [accept setHeaderNameWithNSString:AndroidGovNistJavaxSipHeaderSIPHeaderNames_ACCEPT];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) startsId]) {
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
      AndroidGovNistCoreToken *token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
      [accept setContentTypeWithNSString:[((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'/'];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
      token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
      [accept setContentSubTypeWithNSString:[((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      [super parseWithAndroidGovNistJavaxSipHeaderParametersHeader:accept];
    }
    [list addWithId:accept];
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ',') {
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:','];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      accept = create_AndroidGovNistJavaxSipHeaderAccept_init();
      if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) startsId]) {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
        AndroidGovNistCoreToken *token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
        [accept setContentTypeWithNSString:[((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'/'];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
        token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
        [accept setContentSubTypeWithNSString:[((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        [super parseWithAndroidGovNistJavaxSipHeaderParametersHeader:accept];
      }
      [list addWithId:accept];
    }
    return list;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"AcceptParser.parse"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserAcceptParser = { "AcceptParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserAcceptParser;
}

@end

void AndroidGovNistJavaxSipParserAcceptParser_initWithNSString_(AndroidGovNistJavaxSipParserAcceptParser *self, NSString *accept) {
  AndroidGovNistJavaxSipParserParametersParser_initWithNSString_(self, accept);
}

AndroidGovNistJavaxSipParserAcceptParser *new_AndroidGovNistJavaxSipParserAcceptParser_initWithNSString_(NSString *accept) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserAcceptParser, initWithNSString_, accept)
}

AndroidGovNistJavaxSipParserAcceptParser *create_AndroidGovNistJavaxSipParserAcceptParser_initWithNSString_(NSString *accept) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserAcceptParser, initWithNSString_, accept)
}

void AndroidGovNistJavaxSipParserAcceptParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserAcceptParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserParametersParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserAcceptParser *new_AndroidGovNistJavaxSipParserAcceptParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserAcceptParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserAcceptParser *create_AndroidGovNistJavaxSipParserAcceptParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserAcceptParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserAcceptParser)
