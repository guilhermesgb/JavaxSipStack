//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/Lexer.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/javax/sip/header/extensions/JoinHeader.h"
#include "android/gov/nist/javax/sip/header/extensions/MinSEHeader.h"
#include "android/gov/nist/javax/sip/header/extensions/ReferencesHeader.h"
#include "android/gov/nist/javax/sip/header/extensions/ReferredByHeader.h"
#include "android/gov/nist/javax/sip/header/extensions/ReplacesHeader.h"
#include "android/gov/nist/javax/sip/header/extensions/SessionExpiresHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PAccessNetworkInfoHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PAssertedIdentityHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PAssertedServiceHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PAssociatedURIHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PCalledPartyIDHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PChargingFunctionAddressesHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PChargingVectorHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PMediaAuthorizationHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PPreferredIdentityHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PPreferredServiceHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PProfileKeyHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PServedUserHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PUserDatabaseHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PVisitedNetworkIDHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PathHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PrivacyHeader.h"
#include "android/gov/nist/javax/sip/header/ims/SecurityClientHeader.h"
#include "android/gov/nist/javax/sip/header/ims/SecurityServerHeader.h"
#include "android/gov/nist/javax/sip/header/ims/SecurityVerifyHeader.h"
#include "android/gov/nist/javax/sip/header/ims/ServiceRouteHeader.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TokenNames.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/javax/sip/header/AcceptEncodingHeader.h"
#include "android/javax/sip/header/AcceptHeader.h"
#include "android/javax/sip/header/AcceptLanguageHeader.h"
#include "android/javax/sip/header/AlertInfoHeader.h"
#include "android/javax/sip/header/AllowEventsHeader.h"
#include "android/javax/sip/header/AllowHeader.h"
#include "android/javax/sip/header/AuthenticationInfoHeader.h"
#include "android/javax/sip/header/AuthorizationHeader.h"
#include "android/javax/sip/header/CSeqHeader.h"
#include "android/javax/sip/header/CallIdHeader.h"
#include "android/javax/sip/header/CallInfoHeader.h"
#include "android/javax/sip/header/ContactHeader.h"
#include "android/javax/sip/header/ContentDispositionHeader.h"
#include "android/javax/sip/header/ContentEncodingHeader.h"
#include "android/javax/sip/header/ContentLanguageHeader.h"
#include "android/javax/sip/header/ContentLengthHeader.h"
#include "android/javax/sip/header/ContentTypeHeader.h"
#include "android/javax/sip/header/DateHeader.h"
#include "android/javax/sip/header/ErrorInfoHeader.h"
#include "android/javax/sip/header/EventHeader.h"
#include "android/javax/sip/header/ExpiresHeader.h"
#include "android/javax/sip/header/FromHeader.h"
#include "android/javax/sip/header/InReplyToHeader.h"
#include "android/javax/sip/header/MaxForwardsHeader.h"
#include "android/javax/sip/header/MimeVersionHeader.h"
#include "android/javax/sip/header/MinExpiresHeader.h"
#include "android/javax/sip/header/OrganizationHeader.h"
#include "android/javax/sip/header/PriorityHeader.h"
#include "android/javax/sip/header/ProxyAuthenticateHeader.h"
#include "android/javax/sip/header/ProxyAuthorizationHeader.h"
#include "android/javax/sip/header/ProxyRequireHeader.h"
#include "android/javax/sip/header/RAckHeader.h"
#include "android/javax/sip/header/RSeqHeader.h"
#include "android/javax/sip/header/ReasonHeader.h"
#include "android/javax/sip/header/RecordRouteHeader.h"
#include "android/javax/sip/header/ReferToHeader.h"
#include "android/javax/sip/header/ReplyToHeader.h"
#include "android/javax/sip/header/RequireHeader.h"
#include "android/javax/sip/header/RetryAfterHeader.h"
#include "android/javax/sip/header/RouteHeader.h"
#include "android/javax/sip/header/SIPETagHeader.h"
#include "android/javax/sip/header/SIPIfMatchHeader.h"
#include "android/javax/sip/header/ServerHeader.h"
#include "android/javax/sip/header/SubjectHeader.h"
#include "android/javax/sip/header/SubscriptionStateHeader.h"
#include "android/javax/sip/header/SupportedHeader.h"
#include "android/javax/sip/header/TimeStampHeader.h"
#include "android/javax/sip/header/ToHeader.h"
#include "android/javax/sip/header/UnsupportedHeader.h"
#include "android/javax/sip/header/UserAgentHeader.h"
#include "android/javax/sip/header/ViaHeader.h"
#include "android/javax/sip/header/WWWAuthenticateHeader.h"
#include "android/javax/sip/header/WarningHeader.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

@implementation AndroidGovNistJavaxSipParserLexer

+ (NSString *)getHeaderNameWithNSString:(NSString *)line {
  return AndroidGovNistJavaxSipParserLexer_getHeaderNameWithNSString_(line);
}

- (instancetype)initWithNSString:(NSString *)lexerName
                    withNSString:(NSString *)buffer {
  AndroidGovNistJavaxSipParserLexer_initWithNSString_withNSString_(self, lexerName, buffer);
  return self;
}

+ (NSString *)getHeaderValueWithNSString:(NSString *)line {
  return AndroidGovNistJavaxSipParserLexer_getHeaderValueWithNSString_(line);
}

- (void)selectLexerWithNSString:(NSString *)lexerName {
  JavaUtilConcurrentConcurrentHashMap *lexer = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(JreLoadStatic(AndroidGovNistCoreLexerCore, lexerTables))) getWithId:lexerName];
  JreStrongAssign(&self->currentLexerName_, lexerName);
  if (lexer == nil) {
    JavaUtilConcurrentConcurrentHashMap *newLexer = create_JavaUtilConcurrentConcurrentHashMap_init();
    JreStrongAssign(&currentLexer_, newLexer);
    if ([((NSString *) nil_chk(lexerName)) isEqual:@"method_keywordLexer"]) {
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_REGISTER withInt:AndroidGovNistJavaxSipParserTokenTypes_REGISTER];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_ACK withInt:AndroidGovNistJavaxSipParserTokenTypes_ACK];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_OPTIONS withInt:AndroidGovNistJavaxSipParserTokenTypes_OPTIONS];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_BYE withInt:AndroidGovNistJavaxSipParserTokenTypes_BYE];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_INVITE withInt:AndroidGovNistJavaxSipParserTokenTypes_INVITE];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_SIP withInt:AndroidGovNistJavaxSipParserTokenTypes_SIP];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_SIPS withInt:AndroidGovNistJavaxSipParserTokenTypes_SIPS];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_SUBSCRIBE withInt:AndroidGovNistJavaxSipParserTokenTypes_SUBSCRIBE];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_NOTIFY withInt:AndroidGovNistJavaxSipParserTokenTypes_NOTIFY];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_MESSAGE withInt:AndroidGovNistJavaxSipParserTokenTypes_MESSAGE];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_PUBLISH withInt:AndroidGovNistJavaxSipParserTokenTypes_PUBLISH];
    }
    else if ([lexerName isEqual:@"command_keywordLexer"]) {
      [self addKeywordWithNSString:AndroidJavaxSipHeaderErrorInfoHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_ERROR_INFO];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderAllowEventsHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_ALLOW_EVENTS];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderAuthenticationInfoHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_AUTHENTICATION_INFO];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderEventHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_EVENT];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderMinExpiresHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_MIN_EXPIRES];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderRSeqHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_RSEQ];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderRAckHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_RACK];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderReasonHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_REASON];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderReplyToHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_REPLY_TO];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderSubscriptionStateHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_SUBSCRIPTION_STATE];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderTimeStampHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_TIMESTAMP];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderInReplyToHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_IN_REPLY_TO];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderMimeVersionHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_MIME_VERSION];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderAlertInfoHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_ALERT_INFO];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderFromHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_FROM];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderToHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_TO];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderReferToHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_REFER_TO];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderViaHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_VIA];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderUserAgentHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_USER_AGENT];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderServerHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_SERVER];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderAcceptEncodingHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_ACCEPT_ENCODING];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderAcceptHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_ACCEPT];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderAllowHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_ALLOW];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderRouteHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_ROUTE];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderAuthorizationHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_AUTHORIZATION];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderProxyAuthorizationHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_PROXY_AUTHORIZATION];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderRetryAfterHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_RETRY_AFTER];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderProxyRequireHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_PROXY_REQUIRE];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderContentLanguageHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_CONTENT_LANGUAGE];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderUnsupportedHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_UNSUPPORTED];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderSupportedHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_SUPPORTED];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderWarningHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_WARNING];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderMaxForwardsHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_MAX_FORWARDS];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderDateHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_DATE];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderPriorityHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_PRIORITY];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderProxyAuthenticateHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_PROXY_AUTHENTICATE];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderContentEncodingHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_CONTENT_ENCODING];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderContentLengthHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_CONTENT_LENGTH];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderSubjectHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_SUBJECT];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderContentTypeHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_CONTENT_TYPE];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderContactHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_CONTACT];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderCallIdHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_CALL_ID];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderRequireHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_REQUIRE];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderExpiresHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_EXPIRES];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderRecordRouteHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_RECORD_ROUTE];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderOrganizationHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_ORGANIZATION];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderCSeqHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_CSEQ];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderAcceptLanguageHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_ACCEPT_LANGUAGE];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderWWWAuthenticateHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_WWW_AUTHENTICATE];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderCallInfoHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_CALL_INFO];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderContentDispositionHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_CONTENT_DISPOSITION];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_K withInt:AndroidGovNistJavaxSipParserTokenTypes_SUPPORTED];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_C withInt:AndroidGovNistJavaxSipParserTokenTypes_CONTENT_TYPE];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_E withInt:AndroidGovNistJavaxSipParserTokenTypes_CONTENT_ENCODING];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_F withInt:AndroidGovNistJavaxSipParserTokenTypes_FROM];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_I withInt:AndroidGovNistJavaxSipParserTokenTypes_CALL_ID];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_M withInt:AndroidGovNistJavaxSipParserTokenTypes_CONTACT];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_L withInt:AndroidGovNistJavaxSipParserTokenTypes_CONTENT_LENGTH];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_S withInt:AndroidGovNistJavaxSipParserTokenTypes_SUBJECT];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_T withInt:AndroidGovNistJavaxSipParserTokenTypes_TO];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_U withInt:AndroidGovNistJavaxSipParserTokenTypes_ALLOW_EVENTS];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_V withInt:AndroidGovNistJavaxSipParserTokenTypes_VIA];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_R withInt:AndroidGovNistJavaxSipParserTokenTypes_REFER_TO];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_O withInt:AndroidGovNistJavaxSipParserTokenTypes_EVENT];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_X withInt:AndroidGovNistJavaxSipParserTokenTypes_SESSIONEXPIRES_TO];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderSIPETagHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_SIP_ETAG];
      [self addKeywordWithNSString:AndroidJavaxSipHeaderSIPIfMatchHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_SIP_IF_MATCH];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderExtensionsSessionExpiresHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_SESSIONEXPIRES_TO];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderExtensionsMinSEHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_MINSE_TO];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderExtensionsReferredByHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_REFERREDBY_TO];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderExtensionsReplacesHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_REPLACES_TO];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderExtensionsJoinHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_JOIN_TO];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsPathHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_PATH];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsServiceRouteHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_SERVICE_ROUTE];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsPAssertedIdentityHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_P_ASSERTED_IDENTITY];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsPPreferredIdentityHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_P_PREFERRED_IDENTITY];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsPrivacyHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_PRIVACY];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsPCalledPartyIDHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_P_CALLED_PARTY_ID];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsPAssociatedURIHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_P_ASSOCIATED_URI];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsPVisitedNetworkIDHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_P_VISITED_NETWORK_ID];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddressesHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_P_CHARGING_FUNCTION_ADDRESSES];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsPChargingVectorHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_P_VECTOR_CHARGING];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsPAccessNetworkInfoHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_P_ACCESS_NETWORK_INFO];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsPMediaAuthorizationHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_P_MEDIA_AUTHORIZATION];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsSecurityServerHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_SECURITY_SERVER];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsSecurityVerifyHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_SECURITY_VERIFY];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsSecurityClientHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_SECURITY_CLIENT];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsPUserDatabaseHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_P_USER_DATABASE];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsPProfileKeyHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_P_PROFILE_KEY];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsPServedUserHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_P_SERVED_USER];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsPPreferredServiceHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_P_PREFERRED_SERVICE];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderImsPAssertedServiceHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_P_ASSERTED_SERVICE];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipHeaderExtensionsReferencesHeader_NAME withInt:AndroidGovNistJavaxSipParserTokenTypes_REFERENCES];
    }
    else if ([lexerName isEqual:@"status_lineLexer"]) {
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_SIP withInt:AndroidGovNistJavaxSipParserTokenTypes_SIP];
    }
    else if ([lexerName isEqual:@"request_lineLexer"]) {
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_SIP withInt:AndroidGovNistJavaxSipParserTokenTypes_SIP];
    }
    else if ([lexerName isEqual:@"sip_urlLexer"]) {
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_TEL withInt:AndroidGovNistJavaxSipParserTokenTypes_TEL];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_SIP withInt:AndroidGovNistJavaxSipParserTokenTypes_SIP];
      [self addKeywordWithNSString:AndroidGovNistJavaxSipParserTokenNames_SIPS withInt:AndroidGovNistJavaxSipParserTokenTypes_SIPS];
    }
    lexer = [JreLoadStatic(AndroidGovNistCoreLexerCore, lexerTables) putIfAbsentWithId:lexerName withId:newLexer];
    if (lexer == nil) {
      lexer = newLexer;
    }
    JreStrongAssign(&currentLexer_, lexer);
  }
  else {
    JreStrongAssign(&currentLexer_, lexer);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getHeaderNameWithNSString:);
  methods[1].selector = @selector(initWithNSString:withNSString:);
  methods[2].selector = @selector(getHeaderValueWithNSString:);
  methods[3].selector = @selector(selectLexerWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getHeaderName", "LNSString;", "LNSString;LNSString;", "getHeaderValue", "selectLexer" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserLexer = { "Lexer", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserLexer;
}

@end

NSString *AndroidGovNistJavaxSipParserLexer_getHeaderNameWithNSString_(NSString *line) {
  AndroidGovNistJavaxSipParserLexer_initialize();
  if (line == nil) return nil;
  NSString *headerName = nil;
  @try {
    jint begin = [line java_indexOfString:@":"];
    headerName = nil;
    if (begin >= 1) headerName = [((NSString *) nil_chk([line java_substring:0 endIndex:begin])) java_trim];
  }
  @catch (JavaLangIndexOutOfBoundsException *e) {
    return nil;
  }
  return headerName;
}

void AndroidGovNistJavaxSipParserLexer_initWithNSString_withNSString_(AndroidGovNistJavaxSipParserLexer *self, NSString *lexerName, NSString *buffer) {
  AndroidGovNistCoreLexerCore_initWithNSString_withNSString_(self, lexerName, buffer);
  [self selectLexerWithNSString:lexerName];
}

AndroidGovNistJavaxSipParserLexer *new_AndroidGovNistJavaxSipParserLexer_initWithNSString_withNSString_(NSString *lexerName, NSString *buffer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserLexer, initWithNSString_withNSString_, lexerName, buffer)
}

AndroidGovNistJavaxSipParserLexer *create_AndroidGovNistJavaxSipParserLexer_initWithNSString_withNSString_(NSString *lexerName, NSString *buffer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserLexer, initWithNSString_withNSString_, lexerName, buffer)
}

NSString *AndroidGovNistJavaxSipParserLexer_getHeaderValueWithNSString_(NSString *line) {
  AndroidGovNistJavaxSipParserLexer_initialize();
  if (line == nil) return nil;
  NSString *headerValue = nil;
  @try {
    jint begin = [line java_indexOfString:@":"];
    headerValue = [line java_substring:begin + 1];
  }
  @catch (JavaLangIndexOutOfBoundsException *e) {
    return nil;
  }
  return headerValue;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserLexer)
