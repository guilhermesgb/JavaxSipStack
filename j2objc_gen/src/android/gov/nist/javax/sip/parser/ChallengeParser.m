//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/ChallengeParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/NameValue.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/AuthenticationHeader.h"
#include "android/gov/nist/javax/sip/parser/ChallengeParser.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserChallengeParser

- (instancetype)initWithNSString:(NSString *)challenge {
  AndroidGovNistJavaxSipParserChallengeParser_initWithNSString_(self, challenge);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserChallengeParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (void)parseParameterWithAndroidGovNistJavaxSipHeaderAuthenticationHeader:(AndroidGovNistJavaxSipHeaderAuthenticationHeader *)header {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"parseParameter"];
  @try {
    AndroidGovNistCoreNameValue *nv = [self nameValueWithChar:'='];
    [((AndroidGovNistJavaxSipHeaderAuthenticationHeader *) nil_chk(header)) setParameterWithAndroidGovNistCoreNameValue:nv];
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"parseParameter"];
  }
}

- (void)parseWithAndroidGovNistJavaxSipHeaderAuthenticationHeader:(AndroidGovNistJavaxSipHeaderAuthenticationHeader *)header {
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
  [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
  AndroidGovNistCoreToken *type = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
  [((AndroidGovNistJavaxSipHeaderAuthenticationHeader *) nil_chk(header)) setSchemeWithNSString:[((AndroidGovNistCoreToken *) nil_chk(type)) getTokenValue]];
  @try {
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] != 0x000a) {
      [self parseParameterWithAndroidGovNistJavaxSipHeaderAuthenticationHeader:header];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
      if (la == 0x000a || la == 0x0000) break;
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:','];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    }
  }
  @catch (JavaTextParseException *ex) {
    @throw ex;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parseParameterWithAndroidGovNistJavaxSipHeaderAuthenticationHeader:);
  methods[3].selector = @selector(parseWithAndroidGovNistJavaxSipHeaderAuthenticationHeader:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "parseParameter", "LAndroidGovNistJavaxSipHeaderAuthenticationHeader;", "LJavaTextParseException;", "parse" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserChallengeParser = { "ChallengeParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x401, 4, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserChallengeParser;
}

@end

void AndroidGovNistJavaxSipParserChallengeParser_initWithNSString_(AndroidGovNistJavaxSipParserChallengeParser *self, NSString *challenge) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, challenge);
}

void AndroidGovNistJavaxSipParserChallengeParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserChallengeParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserChallengeParser)
