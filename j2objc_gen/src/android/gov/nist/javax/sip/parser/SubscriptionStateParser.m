//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/SubscriptionStateParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/NameValue.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderNames.h"
#include "android/gov/nist/javax/sip/header/SubscriptionState.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/SubscriptionStateParser.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserSubscriptionStateParser

- (instancetype)initWithNSString:(NSString *)subscriptionState {
  AndroidGovNistJavaxSipParserSubscriptionStateParser_initWithNSString_(self, subscriptionState);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserSubscriptionStateParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"SubscriptionStateParser.parse"];
  AndroidGovNistJavaxSipHeaderSubscriptionState *subscriptionState = create_AndroidGovNistJavaxSipHeaderSubscriptionState_init();
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_SUBSCRIPTION_STATE];
    [subscriptionState setHeaderNameWithNSString:AndroidGovNistJavaxSipHeaderSIPHeaderNames_SUBSCRIPTION_STATE];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
    AndroidGovNistCoreToken *token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
    [subscriptionState setStateWithNSString:[((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]];
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ';') {
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:';'];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      AndroidGovNistCoreNameValue *nv = [self nameValueWithChar:'='];
      if ([((NSString *) nil_chk([((AndroidGovNistCoreNameValue *) nil_chk(nv)) getName])) java_equalsIgnoreCase:@"reason"]) {
        [subscriptionState setReasonCodeWithNSString:[nv getValue]];
      }
      else if ([((NSString *) nil_chk([nv getName])) java_equalsIgnoreCase:@"expires"]) {
        @try {
          jint expires = JavaLangInteger_parseIntWithNSString_([nv getValue]);
          [subscriptionState setExpiresWithInt:expires];
        }
        @catch (JavaLangNumberFormatException *ex) {
          @throw [self createParseExceptionWithNSString:[((JavaLangNumberFormatException *) nil_chk(ex)) getMessage]];
        }
        @catch (AndroidJavaxSipInvalidArgumentException *ex) {
          @throw [self createParseExceptionWithNSString:[((AndroidJavaxSipInvalidArgumentException *) nil_chk(ex)) getMessage]];
        }
      }
      else if ([((NSString *) nil_chk([nv getName])) java_equalsIgnoreCase:@"retry-after"]) {
        @try {
          jint retryAfter = JavaLangInteger_parseIntWithNSString_([nv getValue]);
          [subscriptionState setRetryAfterWithInt:retryAfter];
        }
        @catch (JavaLangNumberFormatException *ex) {
          @throw [self createParseExceptionWithNSString:[((JavaLangNumberFormatException *) nil_chk(ex)) getMessage]];
        }
        @catch (AndroidJavaxSipInvalidArgumentException *ex) {
          @throw [self createParseExceptionWithNSString:[((AndroidJavaxSipInvalidArgumentException *) nil_chk(ex)) getMessage]];
        }
      }
      else {
        [subscriptionState setParameterWithAndroidGovNistCoreNameValue:nv];
      }
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    }
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"SubscriptionStateParser.parse"];
  }
  return subscriptionState;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserSubscriptionStateParser = { "SubscriptionStateParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserSubscriptionStateParser;
}

@end

void AndroidGovNistJavaxSipParserSubscriptionStateParser_initWithNSString_(AndroidGovNistJavaxSipParserSubscriptionStateParser *self, NSString *subscriptionState) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, subscriptionState);
}

AndroidGovNistJavaxSipParserSubscriptionStateParser *new_AndroidGovNistJavaxSipParserSubscriptionStateParser_initWithNSString_(NSString *subscriptionState) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserSubscriptionStateParser, initWithNSString_, subscriptionState)
}

AndroidGovNistJavaxSipParserSubscriptionStateParser *create_AndroidGovNistJavaxSipParserSubscriptionStateParser_initWithNSString_(NSString *subscriptionState) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserSubscriptionStateParser, initWithNSString_, subscriptionState)
}

void AndroidGovNistJavaxSipParserSubscriptionStateParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserSubscriptionStateParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserSubscriptionStateParser *new_AndroidGovNistJavaxSipParserSubscriptionStateParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserSubscriptionStateParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserSubscriptionStateParser *create_AndroidGovNistJavaxSipParserSubscriptionStateParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserSubscriptionStateParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserSubscriptionStateParser)
