//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/DateParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/SIPDateHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/parser/DateParser.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "java/text/ParseException.h"
#include "java/util/Calendar.h"

@implementation AndroidGovNistJavaxSipParserDateParser

- (instancetype)initWithNSString:(NSString *)date {
  AndroidGovNistJavaxSipParserDateParser_initWithNSString_(self, date);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserDateParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"DateParser.parse"];
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_DATE];
    [self wkday];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:','];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:' '];
    JavaUtilCalendar *cal = [self date];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:' '];
    [self timeWithJavaUtilCalendar:cal];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:' '];
    NSString *tzone = [((NSString *) nil_chk([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) ttoken])) lowercaseString];
    if (![@"gmt" isEqual:tzone]) @throw [self createParseExceptionWithNSString:JreStrcat("$$", @"Bad Time Zone ", tzone)];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:0x000a];
    AndroidGovNistJavaxSipHeaderSIPDateHeader *retval = create_AndroidGovNistJavaxSipHeaderSIPDateHeader_init();
    [retval setDateWithJavaUtilCalendar:cal];
    return retval;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"DateParser.parse"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserDateParser = { "DateParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserDateParser;
}

@end

void AndroidGovNistJavaxSipParserDateParser_initWithNSString_(AndroidGovNistJavaxSipParserDateParser *self, NSString *date) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, date);
}

AndroidGovNistJavaxSipParserDateParser *new_AndroidGovNistJavaxSipParserDateParser_initWithNSString_(NSString *date) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserDateParser, initWithNSString_, date)
}

AndroidGovNistJavaxSipParserDateParser *create_AndroidGovNistJavaxSipParserDateParser_initWithNSString_(NSString *date) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserDateParser, initWithNSString_, date)
}

void AndroidGovNistJavaxSipParserDateParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserDateParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserDateParser *new_AndroidGovNistJavaxSipParserDateParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserDateParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserDateParser *create_AndroidGovNistJavaxSipParserDateParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserDateParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserDateParser)
