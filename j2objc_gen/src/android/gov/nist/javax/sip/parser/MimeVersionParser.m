//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/MimeVersionParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/MimeVersion.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderNames.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/MimeVersionParser.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "java/lang/Integer.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserMimeVersionParser

- (instancetype)initWithNSString:(NSString *)mimeVersion {
  AndroidGovNistJavaxSipParserMimeVersionParser_initWithNSString_(self, mimeVersion);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserMimeVersionParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"MimeVersionParser.parse"];
  AndroidGovNistJavaxSipHeaderMimeVersion *mimeVersion = create_AndroidGovNistJavaxSipHeaderMimeVersion_init();
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_MIME_VERSION];
    [mimeVersion setHeaderNameWithNSString:AndroidGovNistJavaxSipHeaderSIPHeaderNames_MIME_VERSION];
    @try {
      NSString *majorVersion = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) number];
      [mimeVersion setMajorVersionWithInt:JavaLangInteger_parseIntWithNSString_(majorVersion)];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'.'];
      NSString *minorVersion = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) number];
      [mimeVersion setMinorVersionWithInt:JavaLangInteger_parseIntWithNSString_(minorVersion)];
    }
    @catch (AndroidJavaxSipInvalidArgumentException *ex) {
      @throw [self createParseExceptionWithNSString:[((AndroidJavaxSipInvalidArgumentException *) nil_chk(ex)) getMessage]];
    }
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:0x000a];
    return mimeVersion;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"MimeVersionParser.parse"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserMimeVersionParser = { "MimeVersionParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserMimeVersionParser;
}

@end

void AndroidGovNistJavaxSipParserMimeVersionParser_initWithNSString_(AndroidGovNistJavaxSipParserMimeVersionParser *self, NSString *mimeVersion) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, mimeVersion);
}

AndroidGovNistJavaxSipParserMimeVersionParser *new_AndroidGovNistJavaxSipParserMimeVersionParser_initWithNSString_(NSString *mimeVersion) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserMimeVersionParser, initWithNSString_, mimeVersion)
}

AndroidGovNistJavaxSipParserMimeVersionParser *create_AndroidGovNistJavaxSipParserMimeVersionParser_initWithNSString_(NSString *mimeVersion) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserMimeVersionParser, initWithNSString_, mimeVersion)
}

void AndroidGovNistJavaxSipParserMimeVersionParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserMimeVersionParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserMimeVersionParser *new_AndroidGovNistJavaxSipParserMimeVersionParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserMimeVersionParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserMimeVersionParser *create_AndroidGovNistJavaxSipParserMimeVersionParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserMimeVersionParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserMimeVersionParser)
