//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/ReasonParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/Reason.h"
#include "android/gov/nist/javax/sip/header/ReasonList.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/ParametersParser.h"
#include "android/gov/nist/javax/sip/parser/ReasonParser.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"

@implementation AndroidGovNistJavaxSipParserReasonParser

- (instancetype)initWithNSString:(NSString *)reason {
  AndroidGovNistJavaxSipParserReasonParser_initWithNSString_(self, reason);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserReasonParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  AndroidGovNistJavaxSipHeaderReasonList *reasonList = create_AndroidGovNistJavaxSipHeaderReasonList_init();
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"ReasonParser.parse"];
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_REASON];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] != 0x000a) {
      AndroidGovNistJavaxSipHeaderReason *reason = create_AndroidGovNistJavaxSipHeaderReason_init();
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
      AndroidGovNistCoreToken *token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
      NSString *value = [((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue];
      [reason setProtocolWithNSString:value];
      [super parseWithAndroidGovNistJavaxSipHeaderParametersHeader:reason];
      [reasonList addWithId:reason];
      if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ',') {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:','];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      }
      else [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    }
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"ReasonParser.parse"];
  }
  return reasonList;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserReasonParser = { "ReasonParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserReasonParser;
}

@end

void AndroidGovNistJavaxSipParserReasonParser_initWithNSString_(AndroidGovNistJavaxSipParserReasonParser *self, NSString *reason) {
  AndroidGovNistJavaxSipParserParametersParser_initWithNSString_(self, reason);
}

AndroidGovNistJavaxSipParserReasonParser *new_AndroidGovNistJavaxSipParserReasonParser_initWithNSString_(NSString *reason) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserReasonParser, initWithNSString_, reason)
}

AndroidGovNistJavaxSipParserReasonParser *create_AndroidGovNistJavaxSipParserReasonParser_initWithNSString_(NSString *reason) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserReasonParser, initWithNSString_, reason)
}

void AndroidGovNistJavaxSipParserReasonParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserReasonParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserParametersParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserReasonParser *new_AndroidGovNistJavaxSipParserReasonParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserReasonParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserReasonParser *create_AndroidGovNistJavaxSipParserReasonParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserReasonParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserReasonParser)
