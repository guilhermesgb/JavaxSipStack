//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/UserAgentParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/UserAgent.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/gov/nist/javax/sip/parser/UserAgentParser.h"
#include "java/io/PrintStream.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserUserAgentParser

- (instancetype)initWithNSString:(NSString *)userAgent {
  AndroidGovNistJavaxSipParserUserAgentParser_initWithNSString_(self, userAgent);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserUserAgentParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"UserAgentParser.parse"];
  AndroidGovNistJavaxSipHeaderUserAgent *userAgent = create_AndroidGovNistJavaxSipHeaderUserAgent_init();
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_USER_AGENT];
    if ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0] == 0x000a) @throw [self createParseExceptionWithNSString:@"empty header"];
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0] != 0x000a && [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0] != 0x0000) {
      if ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0] == '(') {
        NSString *comment = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) comment];
        [userAgent addProductTokenWithNSString:JreStrcat("C$C", '(', comment, ')')];
      }
      else {
        [((AndroidGovNistJavaxSipParserLexer *) nil_chk([self getLexer])) SPorHT];
        NSString *product = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) byteStringNoSlash];
        if (product == nil) @throw [self createParseExceptionWithNSString:@"Expected product string"];
        JavaLangStringBuilder *productSb = create_JavaLangStringBuilder_initWithNSString_(product);
        if ([((AndroidGovNistCoreToken *) nil_chk([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) peekNextToken])) getTokenType] == AndroidGovNistJavaxSipParserTokenTypes_SLASH) {
          [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_SLASH];
          [((AndroidGovNistJavaxSipParserLexer *) nil_chk([self getLexer])) SPorHT];
          NSString *productVersion = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) byteStringNoSlash];
          if (productVersion == nil) @throw [self createParseExceptionWithNSString:@"Expected product version"];
          [productSb appendWithNSString:@"/"];
          [productSb appendWithNSString:productVersion];
        }
        [userAgent addProductTokenWithNSString:[productSb description]];
      }
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    }
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"UserAgentParser.parse"];
  }
  return userAgent;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  AndroidGovNistJavaxSipParserUserAgentParser_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  methods[3].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;", "main", "[LNSString;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserUserAgentParser = { "UserAgentParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserUserAgentParser;
}

@end

void AndroidGovNistJavaxSipParserUserAgentParser_initWithNSString_(AndroidGovNistJavaxSipParserUserAgentParser *self, NSString *userAgent) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, userAgent);
}

AndroidGovNistJavaxSipParserUserAgentParser *new_AndroidGovNistJavaxSipParserUserAgentParser_initWithNSString_(NSString *userAgent) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserUserAgentParser, initWithNSString_, userAgent)
}

AndroidGovNistJavaxSipParserUserAgentParser *create_AndroidGovNistJavaxSipParserUserAgentParser_initWithNSString_(NSString *userAgent) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserUserAgentParser, initWithNSString_, userAgent)
}

void AndroidGovNistJavaxSipParserUserAgentParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserUserAgentParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserUserAgentParser *new_AndroidGovNistJavaxSipParserUserAgentParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserUserAgentParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserUserAgentParser *create_AndroidGovNistJavaxSipParserUserAgentParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserUserAgentParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

void AndroidGovNistJavaxSipParserUserAgentParser_mainWithNSStringArray_(IOSObjectArray *args) {
  AndroidGovNistJavaxSipParserUserAgentParser_initialize();
  IOSObjectArray *userAgent = [IOSObjectArray arrayWithObjects:(id[]){ @"User-Agent: Softphone/Beta1.5 \n", @"User-Agent:Nist/Beta1 (beta version) \n", @"User-Agent: Nist UA (beta version)\n", @"User-Agent: Nist1.0/Beta2 Ubi/vers.1.0 (very cool) \n", @"User-Agent: SJphone/1.60.299a/L (SJ Labs)\n", @"User-Agent: sipXecs/3.5.11 sipXecs/sipxbridge (Linux)\n" } count:6 type:NSString_class_()];
  for (jint i = 0; i < userAgent->size_; i++) {
    AndroidGovNistJavaxSipParserUserAgentParser *parser = create_AndroidGovNistJavaxSipParserUserAgentParser_initWithNSString_(IOSObjectArray_Get(userAgent, i));
    AndroidGovNistJavaxSipHeaderUserAgent *ua = (AndroidGovNistJavaxSipHeaderUserAgent *) cast_chk([parser parse], [AndroidGovNistJavaxSipHeaderUserAgent class]);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"encoded = ", [((AndroidGovNistJavaxSipHeaderUserAgent *) nil_chk(ua)) encode])];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserUserAgentParser)
