//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/ErrorInfoParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/address/GenericURI.h"
#include "android/gov/nist/javax/sip/header/ErrorInfo.h"
#include "android/gov/nist/javax/sip/header/ErrorInfoList.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderNames.h"
#include "android/gov/nist/javax/sip/parser/ErrorInfoParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/ParametersParser.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/gov/nist/javax/sip/parser/URLParser.h"

@implementation AndroidGovNistJavaxSipParserErrorInfoParser

- (instancetype)initWithNSString:(NSString *)errorInfo {
  AndroidGovNistJavaxSipParserErrorInfoParser_initWithNSString_(self, errorInfo);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserErrorInfoParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"ErrorInfoParser.parse"];
  AndroidGovNistJavaxSipHeaderErrorInfoList *list = create_AndroidGovNistJavaxSipHeaderErrorInfoList_init();
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_ERROR_INFO];
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] != 0x000a) {
      do {
        AndroidGovNistJavaxSipHeaderErrorInfo *errorInfo = create_AndroidGovNistJavaxSipHeaderErrorInfo_init();
        [errorInfo setHeaderNameWithNSString:AndroidGovNistJavaxSipHeaderSIPHeaderNames_ERROR_INFO];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'<'];
        AndroidGovNistJavaxSipParserURLParser *urlParser = create_AndroidGovNistJavaxSipParserURLParser_initWithAndroidGovNistJavaxSipParserLexer_((AndroidGovNistJavaxSipParserLexer *) cast_chk(self->lexer_, [AndroidGovNistJavaxSipParserLexer class]));
        AndroidGovNistJavaxSipAddressGenericURI *uri = [urlParser uriReferenceWithBoolean:true];
        [errorInfo setErrorInfoWithAndroidJavaxSipAddressURI:uri];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'>'];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        [super parseWithAndroidGovNistJavaxSipHeaderParametersHeader:errorInfo];
        [list addWithId:errorInfo];
        if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ',') {
          [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:','];
        }
        else break;
      }
      while (true);
    }
    return list;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"ErrorInfoParser.parse"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserErrorInfoParser = { "ErrorInfoParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserErrorInfoParser;
}

@end

void AndroidGovNistJavaxSipParserErrorInfoParser_initWithNSString_(AndroidGovNistJavaxSipParserErrorInfoParser *self, NSString *errorInfo) {
  AndroidGovNistJavaxSipParserParametersParser_initWithNSString_(self, errorInfo);
}

AndroidGovNistJavaxSipParserErrorInfoParser *new_AndroidGovNistJavaxSipParserErrorInfoParser_initWithNSString_(NSString *errorInfo) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserErrorInfoParser, initWithNSString_, errorInfo)
}

AndroidGovNistJavaxSipParserErrorInfoParser *create_AndroidGovNistJavaxSipParserErrorInfoParser_initWithNSString_(NSString *errorInfo) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserErrorInfoParser, initWithNSString_, errorInfo)
}

void AndroidGovNistJavaxSipParserErrorInfoParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserErrorInfoParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserParametersParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserErrorInfoParser *new_AndroidGovNistJavaxSipParserErrorInfoParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserErrorInfoParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserErrorInfoParser *create_AndroidGovNistJavaxSipParserErrorInfoParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserErrorInfoParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserErrorInfoParser)
