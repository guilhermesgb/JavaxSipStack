//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/ims/PChargingFunctionAddressesParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/NameValue.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PChargingFunctionAddresses.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/ParametersParser.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/gov/nist/javax/sip/parser/ims/PChargingFunctionAddressesParser.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser

- (instancetype)initWithNSString:(NSString *)charging {
  AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser_initWithNSString_(self, charging);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"parse"];
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_P_CHARGING_FUNCTION_ADDRESSES];
    AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses *chargingFunctionAddresses = create_AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses_init();
    @try {
      while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] != 0x000a) {
        [self parseParameterWithAndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses:chargingFunctionAddresses];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
        if (la == 0x000a || la == 0x0000) break;
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:';'];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      }
    }
    @catch (JavaTextParseException *ex) {
      @throw ex;
    }
    [super parseWithAndroidGovNistJavaxSipHeaderParametersHeader:chargingFunctionAddresses];
    return chargingFunctionAddresses;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"parse"];
  }
}

- (void)parseParameterWithAndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses:(AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses *)chargingFunctionAddresses {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"parseParameter"];
  @try {
    AndroidGovNistCoreNameValue *nv = [self nameValueWithChar:'='];
    [((AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses *) nil_chk(chargingFunctionAddresses)) setMultiParameterWithAndroidGovNistCoreNameValue:nv];
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"parseParameter"];
  }
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 6, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  methods[3].selector = @selector(parseParameterWithAndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses:);
  methods[4].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;", "parseParameter", "LAndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses;", "main", "[LNSString;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser = { "PChargingFunctionAddressesParser", "android.gov.nist.javax.sip.parser.ims", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser;
}

@end

void AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser_initWithNSString_(AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser *self, NSString *charging) {
  AndroidGovNistJavaxSipParserParametersParser_initWithNSString_(self, charging);
}

AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser *new_AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser_initWithNSString_(NSString *charging) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser, initWithNSString_, charging)
}

AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser *create_AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser_initWithNSString_(NSString *charging) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser, initWithNSString_, charging)
}

void AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserParametersParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser *new_AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser *create_AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

void AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser_mainWithNSStringArray_(IOSObjectArray *args) {
  AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser_initialize();
  IOSObjectArray *r = [IOSObjectArray arrayWithObjects:(id[]){ @"P-Charging-Function-Addresses: ccf=\"test str\"; ecf=token\n", @"P-Charging-Function-Addresses: ccf=192.1.1.1; ccf=192.1.1.2; ecf=192.1.1.3; ecf=192.1.1.4\n", @"P-Charging-Function-Addresses: ccf=[5555::b99:c88:d77:e66]; ccf=[5555::a55:b44:c33:d22]; ecf=[5555::1ff:2ee:3dd:4cc]; ecf=[5555::6aa:7bb:8cc:9dd]\n" } count:3 type:NSString_class_()];
  for (jint i = 0; i < r->size_; i++) {
    AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser *parser = create_AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser_initWithNSString_(IOSObjectArray_Get(r, i));
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"original = ", IOSObjectArray_Get(r, i))];
    AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses *chargAddr = (AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses *) cast_chk([parser parse], [AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses class]);
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"encoded = ", [((AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses *) nil_chk(chargAddr)) encode])];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserImsPChargingFunctionAddressesParser)
