//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/ims/PAccessNetworkInfoParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/NameValue.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PAccessNetworkInfo.h"
#include "android/gov/nist/javax/sip/header/ims/SIPHeaderNamesIms.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/gov/nist/javax/sip/parser/ims/PAccessNetworkInfoParser.h"

@implementation AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser

- (instancetype)initWithNSString:(NSString *)accessNetwork {
  AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser_initWithNSString_(self, accessNetwork);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"AccessNetworkInfoParser.parse"];
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_P_ACCESS_NETWORK_INFO];
    AndroidGovNistJavaxSipHeaderImsPAccessNetworkInfo *accessNetworkInfo = create_AndroidGovNistJavaxSipHeaderImsPAccessNetworkInfo_init();
    [accessNetworkInfo setHeaderNameWithNSString:AndroidGovNistJavaxSipHeaderImsSIPHeaderNamesIms_P_ACCESS_NETWORK_INFO];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
    AndroidGovNistCoreToken *token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
    [accessNetworkInfo setAccessTypeWithNSString:[((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ';') {
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:';'];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      AndroidGovNistCoreNameValue *nv = [super nameValueWithChar:'='];
      [accessNetworkInfo setParameterWithAndroidGovNistCoreNameValue:nv];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    }
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:0x000a];
    return accessNetworkInfo;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"AccessNetworkInfoParser.parse"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser = { "PAccessNetworkInfoParser", "android.gov.nist.javax.sip.parser.ims", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser;
}

@end

void AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser_initWithNSString_(AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser *self, NSString *accessNetwork) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, accessNetwork);
}

AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser *new_AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser_initWithNSString_(NSString *accessNetwork) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser, initWithNSString_, accessNetwork)
}

AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser *create_AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser_initWithNSString_(NSString *accessNetwork) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser, initWithNSString_, accessNetwork)
}

void AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser *new_AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser *create_AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserImsPAccessNetworkInfoParser)
