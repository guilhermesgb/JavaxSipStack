//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/PipelinedMsgParser.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/javax/sip/header/ContentLength.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/parser/MessageParser.h"
#include "android/gov/nist/javax/sip/parser/MessageParserFactory.h"
#include "android/gov/nist/javax/sip/parser/Pipeline.h"
#include "android/gov/nist/javax/sip/parser/PipelinedMsgParser.h"
#include "android/gov/nist/javax/sip/parser/PostParseExecutorServices.h"
#include "android/gov/nist/javax/sip/parser/SIPMessageListener.h"
#include "android/gov/nist/javax/sip/stack/ConnectionOrientedMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/SIPEventInterceptor.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/javax/sip/header/CallIdHeader.h"
#include "android/javax/sip/header/ContentLengthHeader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/text/ParseException.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Semaphore.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface AndroidGovNistJavaxSipParserPipelinedMsgParser () {
 @public
  JavaLangThread *mythread_;
  AndroidGovNistJavaxSipParserPipeline *rawInputStream_;
  jint maxMessageSize_;
  jint sizeCounter_;
  AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack_;
  id<AndroidGovNistJavaxSipParserMessageParser> smp_;
  JavaUtilConcurrentConcurrentHashMap *messagesOrderingMap_;
}

+ (jint)getNewUid;

- (NSString *)readLineWithJavaIoInputStream:(JavaIoInputStream *)inputStream;

- (void)cleanMessageOrderingMap;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserPipelinedMsgParser, mythread_, JavaLangThread *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserPipelinedMsgParser, rawInputStream_, AndroidGovNistJavaxSipParserPipeline *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserPipelinedMsgParser, sipStack_, AndroidGovNistJavaxSipStackSIPTransactionStack *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserPipelinedMsgParser, smp_, id<AndroidGovNistJavaxSipParserMessageParser>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserPipelinedMsgParser, messagesOrderingMap_, JavaUtilConcurrentConcurrentHashMap *)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipParserPipelinedMsgParser_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipParserPipelinedMsgParser_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipParserPipelinedMsgParser_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipParserPipelinedMsgParser, logger, id<OrgSlf4jLogger>)

inline NSString *AndroidGovNistJavaxSipParserPipelinedMsgParser_get_CRLF();
static NSString *AndroidGovNistJavaxSipParserPipelinedMsgParser_CRLF = @"\x0d\n";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipParserPipelinedMsgParser, CRLF, NSString *)

inline jint AndroidGovNistJavaxSipParserPipelinedMsgParser_get_uid();
inline jint AndroidGovNistJavaxSipParserPipelinedMsgParser_set_uid(jint value);
inline jint *AndroidGovNistJavaxSipParserPipelinedMsgParser_getRef_uid();
static jint AndroidGovNistJavaxSipParserPipelinedMsgParser_uid = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(AndroidGovNistJavaxSipParserPipelinedMsgParser, uid, jint)

__attribute__((unused)) static jint AndroidGovNistJavaxSipParserPipelinedMsgParser_getNewUid();

__attribute__((unused)) static NSString *AndroidGovNistJavaxSipParserPipelinedMsgParser_readLineWithJavaIoInputStream_(AndroidGovNistJavaxSipParserPipelinedMsgParser *self, JavaIoInputStream *inputStream);

__attribute__((unused)) static void AndroidGovNistJavaxSipParserPipelinedMsgParser_cleanMessageOrderingMap(AndroidGovNistJavaxSipParserPipelinedMsgParser *self);

@interface AndroidGovNistJavaxSipParserPipelinedMsgParser_Dispatch () {
 @public
  AndroidGovNistJavaxSipParserPipelinedMsgParser *this$0_;
}

@end

@interface AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure () {
 @public
  JavaUtilConcurrentSemaphore *semaphore_;
  id<JavaUtilQueue> messagesForCallID_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure, semaphore_, JavaUtilConcurrentSemaphore *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure, messagesForCallID_, id<JavaUtilQueue>)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipParserPipelinedMsgParser)

@implementation AndroidGovNistJavaxSipParserPipelinedMsgParser

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipParserPipelinedMsgParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)getNewUid {
  return AndroidGovNistJavaxSipParserPipelinedMsgParser_getNewUid();
}

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
                    withAndroidGovNistJavaxSipParserSIPMessageListener:(id<AndroidGovNistJavaxSipParserSIPMessageListener>)sipMessageListener
                              withAndroidGovNistJavaxSipParserPipeline:(AndroidGovNistJavaxSipParserPipeline *)inArg
                                                           withBoolean:(jboolean)debug
                                                               withInt:(jint)maxMessageSize {
  AndroidGovNistJavaxSipParserPipelinedMsgParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withAndroidGovNistJavaxSipParserPipeline_withBoolean_withInt_(self, sipStack, sipMessageListener, inArg, debug, maxMessageSize);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
                    withAndroidGovNistJavaxSipParserSIPMessageListener:(id<AndroidGovNistJavaxSipParserSIPMessageListener>)mhandler
                              withAndroidGovNistJavaxSipParserPipeline:(AndroidGovNistJavaxSipParserPipeline *)inArg
                                                               withInt:(jint)maxMsgSize {
  AndroidGovNistJavaxSipParserPipelinedMsgParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withAndroidGovNistJavaxSipParserPipeline_withInt_(self, sipStack, mhandler, inArg, maxMsgSize);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
                              withAndroidGovNistJavaxSipParserPipeline:(AndroidGovNistJavaxSipParserPipeline *)inArg {
  AndroidGovNistJavaxSipParserPipelinedMsgParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserPipeline_(self, sipStack, inArg);
  return self;
}

- (void)processInput {
  [((JavaLangThread *) nil_chk(mythread_)) start];
}

- (id)java_clone {
  AndroidGovNistJavaxSipParserPipelinedMsgParser *p = create_AndroidGovNistJavaxSipParserPipelinedMsgParser_init();
  JreStrongAssign(&p->rawInputStream_, self->rawInputStream_);
  JreStrongAssign(&p->sipMessageListener_, self->sipMessageListener_);
  JavaLangThread *mythread = create_JavaLangThread_initWithJavaLangRunnable_(p);
  [mythread setNameWithNSString:@"PipelineThread"];
  return p;
}

- (void)setMessageListenerWithAndroidGovNistJavaxSipParserSIPMessageListener:(id<AndroidGovNistJavaxSipParserSIPMessageListener>)mlistener {
  JreStrongAssign(&sipMessageListener_, mlistener);
}

- (NSString *)readLineWithJavaIoInputStream:(JavaIoInputStream *)inputStream {
  return AndroidGovNistJavaxSipParserPipelinedMsgParser_readLineWithJavaIoInputStream_(self, inputStream);
}

- (void)run {
  AndroidGovNistJavaxSipParserPipeline *inputStream = self->rawInputStream_;
  id<OrgSlf4jLogger> stackLogger = AndroidGovNistJavaxSipParserPipelinedMsgParser_logger;
  @try {
    isRunning_ = true;
    while (isRunning_) {
      self->sizeCounter_ = self->maxMessageSize_;
      JavaLangStringBuilder *inputBuffer = create_JavaLangStringBuilder_init();
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) debugWithNSString:@"Starting to parse."];
      NSString *line1;
      NSString *line2 = nil;
      jboolean isPreviousLineCRLF = false;
      while (true) {
        @try {
          line1 = AndroidGovNistJavaxSipParserPipelinedMsgParser_readLineWithJavaIoInputStream_(self, inputStream);
          if ([((NSString *) nil_chk(line1)) isEqual:@"\n"]) {
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) debugWithNSString:@"Discarding blank line"];
            continue;
          }
          else if ([((NSString *) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_CRLF)) isEqual:line1]) {
            if (isPreviousLineCRLF) {
              [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) debugWithNSString:@"KeepAlive Double CRLF received, sending single CRLF as defined per RFC 5626 Section 4.4.1"];
              [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) debugWithNSString:@"~~~ setting isPreviousLineCRLF=false"];
              isPreviousLineCRLF = false;
              @try {
                [((id<AndroidGovNistJavaxSipParserSIPMessageListener>) nil_chk(sipMessageListener_)) sendSingleCLRF];
              }
              @catch (JavaLangException *e) {
                [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) errorWithNSString:@"A problem occured while trying to send a single CLRF in response to a double CLRF" withNSException:e];
              }
              continue;
            }
            else {
              isPreviousLineCRLF = true;
              [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) debugWithNSString:@"Received CRLF"];
              if (sipMessageListener_ != nil && [sipMessageListener_ isKindOfClass:[AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel class]]) {
                [((AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *) cast_chk(sipMessageListener_, [AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel class])) cancelPingKeepAliveTimeoutTaskIfStarted];
              }
            }
            continue;
          }
          else break;
        }
        @catch (JavaIoIOException *ex) {
          if (AndroidGovNistJavaxSipParserPostParseExecutorServices_getPostParseExecutor() != nil && isRunning_) {
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) debugWithNSString:JreStrcat("$@$$", @"waiting for messagesOrderingMap ", self, @" threadname ", [((JavaLangThread *) nil_chk(mythread_)) getName])];
            @synchronized(messagesOrderingMap_) {
              @try {
                [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(messagesOrderingMap_)) java_waitWithLong:64000];
              }
              @catch (JavaLangInterruptedException *e) {
              }
            }
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) debugWithNSString:JreStrcat("$@$$", @"got notified for messagesOrderingMap ", self, @" threadname ", [((JavaLangThread *) nil_chk(mythread_)) getName])];
          }
          [((AndroidGovNistJavaxSipParserPipeline *) nil_chk(self->rawInputStream_)) stopTimer];
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) debugWithNSString:JreStrcat("$$", @"thread ending for threadname ", [((JavaLangThread *) nil_chk(mythread_)) getName])];
          return;
        }
      }
      [inputBuffer appendWithNSString:line1];
      [((AndroidGovNistJavaxSipParserPipeline *) nil_chk(self->rawInputStream_)) startTimer];
      jint bytesRead = 0;
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) debugWithNSString:@"Reading Input stream."];
      while (true) {
        @try {
          line2 = AndroidGovNistJavaxSipParserPipelinedMsgParser_readLineWithJavaIoInputStream_(self, inputStream);
          bytesRead += ((jint) [((NSString *) nil_chk(line2)) length]);
          if (maxMessageSize_ > 0 && bytesRead > (maxMessageSize_ / 2)) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Pre-content-length headers size exceeded. The size of the message of the headers prior to Content-Length is too large. This must be an invalid message. Limit is MAX_MESSAGE_SIZE/2=", maxMessageSize_ / 2));
          [inputBuffer appendWithNSString:line2];
          if ([((NSString *) nil_chk([line2 java_trim])) isEqual:@""]) break;
        }
        @catch (JavaIoIOException *ex) {
          if (AndroidGovNistJavaxSipParserPostParseExecutorServices_getPostParseExecutor() != nil && isRunning_) {
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) debugWithNSString:JreStrcat("$@$$", @"waiting for messagesOrderingMap ", self, @" threadname ", [((JavaLangThread *) nil_chk(mythread_)) getName])];
            @synchronized(messagesOrderingMap_) {
              @try {
                [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(messagesOrderingMap_)) java_waitWithLong:64000];
              }
              @catch (JavaLangInterruptedException *e) {
              }
            }
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) debugWithNSString:JreStrcat("$@$$", @"got notified for messagesOrderingMap ", self, @" threadname ", [((JavaLangThread *) nil_chk(mythread_)) getName])];
          }
          [((AndroidGovNistJavaxSipParserPipeline *) nil_chk(self->rawInputStream_)) stopTimer];
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) debugWithNSString:JreStrcat("$$", @"thread ending for threadname ", [((JavaLangThread *) nil_chk(mythread_)) getName])];
          return;
        }
      }
      [((AndroidGovNistJavaxSipParserPipeline *) nil_chk(self->rawInputStream_)) stopTimer];
      [inputBuffer appendWithNSString:line2];
      AndroidGovNistJavaxSipMessageSIPMessage *sipMessage = nil;
      @try {
        [((id<OrgSlf4jLogger>) nil_chk(stackLogger)) debugWithNSString:JreStrcat("$$", @"About to parse : ", [inputBuffer description])];
        sipMessage = [((id<AndroidGovNistJavaxSipParserMessageParser>) nil_chk(smp_)) parseSIPMessageWithByteArray:[((NSString *) nil_chk([inputBuffer description])) java_getBytes] withBoolean:false withBoolean:false withAndroidGovNistJavaxSipParserParseExceptionListener:sipMessageListener_];
        if (sipMessage == nil) {
          [((AndroidGovNistJavaxSipParserPipeline *) nil_chk(self->rawInputStream_)) stopTimer];
          continue;
        }
      }
      @catch (JavaTextParseException *ex) {
        [stackLogger errorWithNSString:@"Detected a parse error" withNSException:ex];
        continue;
      }
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) debugWithNSString:@"Completed parsing message"];
      NSString *clString = [((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) getHeaderAsFormattedStringWithNSString:AndroidJavaxSipHeaderContentLengthHeader_NAME];
      if (((jint) [((NSString *) nil_chk(clString)) length]) > 30) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Bad content lenght header ", clString));
      AndroidGovNistJavaxSipHeaderContentLength *cl = (AndroidGovNistJavaxSipHeaderContentLength *) cast_chk([sipMessage getContentLength], [AndroidGovNistJavaxSipHeaderContentLength class]);
      jint contentLength = 0;
      if (cl != nil) {
        contentLength = [cl getContentLength];
      }
      else {
        contentLength = 0;
      }
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) debugWithNSString:JreStrcat("$I", @"Content length = ", contentLength)];
      if (maxMessageSize_ > 0 && contentLength > maxMessageSize_) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"Max content size Exceeded! :", contentLength, @" allowed max size is ", maxMessageSize_));
      if (contentLength == 0) {
        [sipMessage removeContent];
      }
      else if (maxMessageSize_ == 0 || contentLength < self->sizeCounter_) {
        IOSByteArray *message_body = [IOSByteArray arrayWithLength:contentLength];
        jint nread = 0;
        while (nread < contentLength) {
          [((AndroidGovNistJavaxSipParserPipeline *) nil_chk(self->rawInputStream_)) startTimer];
          @try {
            jint readlength = [((AndroidGovNistJavaxSipParserPipeline *) nil_chk(inputStream)) readWithByteArray:message_body withInt:nread withInt:contentLength - nread];
            if (readlength > 0) {
              nread += readlength;
            }
            else {
              break;
            }
          }
          @catch (JavaIoIOException *ex) {
            [stackLogger errorWithNSString:@"Exception Reading Content" withNSException:ex];
            break;
          }
          @finally {
            [((AndroidGovNistJavaxSipParserPipeline *) nil_chk(self->rawInputStream_)) stopTimer];
          }
        }
        [sipMessage setMessageContentWithByteArray:message_body];
      }
      if (sipMessageListener_ != nil) {
        @try {
          if (AndroidGovNistJavaxSipParserPostParseExecutorServices_getPostParseExecutor() == nil) {
            if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->sipEventInterceptor_ != nil) {
              [sipStack_->sipEventInterceptor_ beforeMessageWithAndroidJavaxSipMessageMessage:sipMessage];
            }
            [((id<AndroidGovNistJavaxSipParserSIPMessageListener>) nil_chk(sipMessageListener_)) processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:sipMessage];
            if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->sipEventInterceptor_ != nil) {
              [sipStack_->sipEventInterceptor_ afterMessageWithAndroidJavaxSipMessageMessage:sipMessage];
            }
          }
          else {
            NSString *callId = [((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([sipMessage getCallId])) getCallId];
            AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure *orderingStructure = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(messagesOrderingMap_)) getWithId:callId];
            if (orderingStructure == nil) {
              AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure *newCallIDOrderingStructure = create_AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure_initWithAndroidGovNistJavaxSipParserPipelinedMsgParser_(self);
              orderingStructure = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(messagesOrderingMap_)) putIfAbsentWithId:callId withId:newCallIDOrderingStructure];
              if (orderingStructure == nil) {
                orderingStructure = newCallIDOrderingStructure;
                [stackLogger debugWithNSString:JreStrcat("$@", @"new CallIDOrderingStructure added for message ", sipMessage)];
              }
            }
            AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure *callIDOrderingStructure = orderingStructure;
            [((id<JavaUtilQueue>) nil_chk([callIDOrderingStructure getMessagesForCallID])) offerWithId:sipMessage];
            [((id<JavaUtilConcurrentExecutorService>) nil_chk(AndroidGovNistJavaxSipParserPostParseExecutorServices_getPostParseExecutor())) executeWithJavaLangRunnable:create_AndroidGovNistJavaxSipParserPipelinedMsgParser_Dispatch_initWithAndroidGovNistJavaxSipParserPipelinedMsgParser_withAndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure_withNSString_(self, callIDOrderingStructure, callId)];
          }
        }
        @catch (JavaLangException *ex) {
          break;
        }
      }
    }
  }
  @finally {
    @try {
      AndroidGovNistJavaxSipParserPipelinedMsgParser_cleanMessageOrderingMap(self);
      if (![((AndroidGovNistJavaxSipParserPipeline *) nil_chk(inputStream)) isClosed]) {
        [inputStream close];
      }
    }
    @catch (JavaIoIOException *e) {
      AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(e);
    }
  }
}

- (void)close {
  isRunning_ = false;
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) debugWithNSString:JreStrcat("$@$$", @"Closing pipelinedmsgparser ", self, @" threadname ", [((JavaLangThread *) nil_chk(mythread_)) getName])];
  @try {
    [((AndroidGovNistJavaxSipParserPipeline *) nil_chk(self->rawInputStream_)) close];
  }
  @catch (JavaIoIOException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) debugWithNSString:JreStrcat("$@$$$Z", @"Couldn't close the rawInputStream ", self, @" threadname ", [((JavaLangThread *) nil_chk(mythread_)) getName], @" already closed ? ", [((AndroidGovNistJavaxSipParserPipeline *) nil_chk(rawInputStream_)) isClosed])];
  }
  if (AndroidGovNistJavaxSipParserPostParseExecutorServices_getPostParseExecutor() != nil) {
    AndroidGovNistJavaxSipParserPipelinedMsgParser_cleanMessageOrderingMap(self);
    @synchronized(mythread_) {
      [((JavaLangThread *) nil_chk(mythread_)) java_notifyAll];
      [((JavaLangThread *) nil_chk(mythread_)) interrupt];
    }
  }
}

- (void)cleanMessageOrderingMap {
  AndroidGovNistJavaxSipParserPipelinedMsgParser_cleanMessageOrderingMap(self);
}

- (void)dealloc {
  RELEASE_(sipMessageListener_);
  RELEASE_(mythread_);
  RELEASE_(rawInputStream_);
  RELEASE_(sipStack_);
  RELEASE_(smp_);
  RELEASE_(messagesOrderingMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2a, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 3, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getNewUid);
  methods[2].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistJavaxSipParserSIPMessageListener:withAndroidGovNistJavaxSipParserPipeline:withBoolean:withInt:);
  methods[3].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistJavaxSipParserSIPMessageListener:withAndroidGovNistJavaxSipParserPipeline:withInt:);
  methods[4].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistJavaxSipParserPipeline:);
  methods[5].selector = @selector(processInput);
  methods[6].selector = @selector(java_clone);
  methods[7].selector = @selector(setMessageListenerWithAndroidGovNistJavaxSipParserSIPMessageListener:);
  methods[8].selector = @selector(readLineWithJavaIoInputStream:);
  methods[9].selector = @selector(run);
  methods[10].selector = @selector(close);
  methods[11].selector = @selector(cleanMessageOrderingMap);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 9, -1, -1 },
    { "CRLF", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "sipMessageListener_", "LAndroidGovNistJavaxSipParserSIPMessageListener;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mythread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rawInputStream_", "LAndroidGovNistJavaxSipParserPipeline;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxMessageSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sizeCounter_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sipStack_", "LAndroidGovNistJavaxSipStackSIPTransactionStack;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "smp_", "LAndroidGovNistJavaxSipParserMessageParser;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "messagesOrderingMap_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
    { "isRunning_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "uid", "I", .constantValue.asLong = 0, 0xa, -1, 12, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPTransactionStack;LAndroidGovNistJavaxSipParserSIPMessageListener;LAndroidGovNistJavaxSipParserPipeline;ZI", "LAndroidGovNistJavaxSipStackSIPTransactionStack;LAndroidGovNistJavaxSipParserSIPMessageListener;LAndroidGovNistJavaxSipParserPipeline;I", "LAndroidGovNistJavaxSipStackSIPTransactionStack;LAndroidGovNistJavaxSipParserPipeline;", "clone", "setMessageListener", "LAndroidGovNistJavaxSipParserSIPMessageListener;", "readLine", "LJavaIoInputStream;", "LJavaIoIOException;", &AndroidGovNistJavaxSipParserPipelinedMsgParser_logger, &AndroidGovNistJavaxSipParserPipelinedMsgParser_CRLF, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Landroid/gov/nist/javax/sip/parser/PipelinedMsgParser$CallIDOrderingStructure;>;", &AndroidGovNistJavaxSipParserPipelinedMsgParser_uid, "LAndroidGovNistJavaxSipParserPipelinedMsgParser_Dispatch;LAndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserPipelinedMsgParser = { "PipelinedMsgParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, fields, 7, 0x11, 12, 12, -1, 13, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserPipelinedMsgParser;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipParserPipelinedMsgParser class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipParserPipelinedMsgParser_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipParserPipelinedMsgParser_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipParserPipelinedMsgParser)
  }
}

@end

void AndroidGovNistJavaxSipParserPipelinedMsgParser_init(AndroidGovNistJavaxSipParserPipelinedMsgParser *self) {
  NSObject_init(self);
  JreStrongAssign(&self->smp_, nil);
  JreStrongAssignAndConsume(&self->messagesOrderingMap_, new_JavaUtilConcurrentConcurrentHashMap_init());
  self->isRunning_ = false;
}

AndroidGovNistJavaxSipParserPipelinedMsgParser *new_AndroidGovNistJavaxSipParserPipelinedMsgParser_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserPipelinedMsgParser, init)
}

AndroidGovNistJavaxSipParserPipelinedMsgParser *create_AndroidGovNistJavaxSipParserPipelinedMsgParser_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserPipelinedMsgParser, init)
}

jint AndroidGovNistJavaxSipParserPipelinedMsgParser_getNewUid() {
  AndroidGovNistJavaxSipParserPipelinedMsgParser_initialize();
  @synchronized(AndroidGovNistJavaxSipParserPipelinedMsgParser_class_()) {
    return AndroidGovNistJavaxSipParserPipelinedMsgParser_uid++;
  }
}

void AndroidGovNistJavaxSipParserPipelinedMsgParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withAndroidGovNistJavaxSipParserPipeline_withBoolean_withInt_(AndroidGovNistJavaxSipParserPipelinedMsgParser *self, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, id<AndroidGovNistJavaxSipParserSIPMessageListener> sipMessageListener, AndroidGovNistJavaxSipParserPipeline *inArg, jboolean debug, jint maxMessageSize) {
  AndroidGovNistJavaxSipParserPipelinedMsgParser_init(self);
  JreStrongAssign(&self->sipStack_, sipStack);
  JreStrongAssign(&self->smp_, [((id<AndroidGovNistJavaxSipParserMessageParserFactory>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack)) getMessageParserFactory])) createMessageParserWithAndroidGovNistJavaxSipStackSIPTransactionStack:sipStack]);
  JreStrongAssign(&self->sipMessageListener_, sipMessageListener);
  JreStrongAssign(&self->rawInputStream_, inArg);
  self->maxMessageSize_ = maxMessageSize;
  JreStrongAssignAndConsume(&self->mythread_, new_JavaLangThread_initWithJavaLangRunnable_(self));
  [self->mythread_ setNameWithNSString:JreStrcat("$I", @"PipelineThread-", AndroidGovNistJavaxSipParserPipelinedMsgParser_getNewUid())];
}

AndroidGovNistJavaxSipParserPipelinedMsgParser *new_AndroidGovNistJavaxSipParserPipelinedMsgParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withAndroidGovNistJavaxSipParserPipeline_withBoolean_withInt_(AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, id<AndroidGovNistJavaxSipParserSIPMessageListener> sipMessageListener, AndroidGovNistJavaxSipParserPipeline *inArg, jboolean debug, jint maxMessageSize) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserPipelinedMsgParser, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withAndroidGovNistJavaxSipParserPipeline_withBoolean_withInt_, sipStack, sipMessageListener, inArg, debug, maxMessageSize)
}

AndroidGovNistJavaxSipParserPipelinedMsgParser *create_AndroidGovNistJavaxSipParserPipelinedMsgParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withAndroidGovNistJavaxSipParserPipeline_withBoolean_withInt_(AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, id<AndroidGovNistJavaxSipParserSIPMessageListener> sipMessageListener, AndroidGovNistJavaxSipParserPipeline *inArg, jboolean debug, jint maxMessageSize) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserPipelinedMsgParser, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withAndroidGovNistJavaxSipParserPipeline_withBoolean_withInt_, sipStack, sipMessageListener, inArg, debug, maxMessageSize)
}

void AndroidGovNistJavaxSipParserPipelinedMsgParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withAndroidGovNistJavaxSipParserPipeline_withInt_(AndroidGovNistJavaxSipParserPipelinedMsgParser *self, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, id<AndroidGovNistJavaxSipParserSIPMessageListener> mhandler, AndroidGovNistJavaxSipParserPipeline *inArg, jint maxMsgSize) {
  AndroidGovNistJavaxSipParserPipelinedMsgParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withAndroidGovNistJavaxSipParserPipeline_withBoolean_withInt_(self, sipStack, mhandler, inArg, false, maxMsgSize);
}

AndroidGovNistJavaxSipParserPipelinedMsgParser *new_AndroidGovNistJavaxSipParserPipelinedMsgParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withAndroidGovNistJavaxSipParserPipeline_withInt_(AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, id<AndroidGovNistJavaxSipParserSIPMessageListener> mhandler, AndroidGovNistJavaxSipParserPipeline *inArg, jint maxMsgSize) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserPipelinedMsgParser, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withAndroidGovNistJavaxSipParserPipeline_withInt_, sipStack, mhandler, inArg, maxMsgSize)
}

AndroidGovNistJavaxSipParserPipelinedMsgParser *create_AndroidGovNistJavaxSipParserPipelinedMsgParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withAndroidGovNistJavaxSipParserPipeline_withInt_(AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, id<AndroidGovNistJavaxSipParserSIPMessageListener> mhandler, AndroidGovNistJavaxSipParserPipeline *inArg, jint maxMsgSize) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserPipelinedMsgParser, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withAndroidGovNistJavaxSipParserPipeline_withInt_, sipStack, mhandler, inArg, maxMsgSize)
}

void AndroidGovNistJavaxSipParserPipelinedMsgParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserPipeline_(AndroidGovNistJavaxSipParserPipelinedMsgParser *self, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipParserPipeline *inArg) {
  AndroidGovNistJavaxSipParserPipelinedMsgParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withAndroidGovNistJavaxSipParserPipeline_withBoolean_withInt_(self, sipStack, nil, inArg, false, 0);
}

AndroidGovNistJavaxSipParserPipelinedMsgParser *new_AndroidGovNistJavaxSipParserPipelinedMsgParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserPipeline_(AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipParserPipeline *inArg) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserPipelinedMsgParser, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserPipeline_, sipStack, inArg)
}

AndroidGovNistJavaxSipParserPipelinedMsgParser *create_AndroidGovNistJavaxSipParserPipelinedMsgParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserPipeline_(AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipParserPipeline *inArg) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserPipelinedMsgParser, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserPipeline_, sipStack, inArg)
}

NSString *AndroidGovNistJavaxSipParserPipelinedMsgParser_readLineWithJavaIoInputStream_(AndroidGovNistJavaxSipParserPipelinedMsgParser *self, JavaIoInputStream *inputStream) {
  jint counter = 0;
  jint increment = 1024;
  jint bufferSize = increment;
  IOSByteArray *lineBuffer = [IOSByteArray arrayWithLength:bufferSize];
  IOSByteArray *crlfBuffer = [IOSByteArray arrayWithLength:2];
  jint crlfCounter = 0;
  while (true) {
    jchar ch;
    jint i = [((JavaIoInputStream *) nil_chk(inputStream)) read];
    if (i == -1) {
      @throw create_JavaIoIOException_initWithNSString_(@"End of stream");
    }
    else ch = (jchar) (i & (jint) 0xFF);
    if (self->maxMessageSize_ > 0) {
      self->sizeCounter_--;
      if (self->sizeCounter_ <= 0) @throw create_JavaIoIOException_initWithNSString_(@"Max size exceeded!");
    }
    if (ch != 0x000d) *IOSByteArray_GetRef(lineBuffer, counter++) = (jbyte) (i & (jint) 0xFF);
    else if (counter == 0) *IOSByteArray_GetRef(crlfBuffer, crlfCounter++) = (jbyte) 0x000d;
    if (ch == 0x000a) {
      if (counter == 1 && crlfCounter > 0) {
        *IOSByteArray_GetRef(crlfBuffer, crlfCounter++) = (jbyte) 0x000a;
      }
      break;
    }
    if (counter == bufferSize) {
      IOSByteArray *tempBuffer = [IOSByteArray arrayWithLength:bufferSize + increment];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lineBuffer, 0, tempBuffer, 0, bufferSize);
      bufferSize = bufferSize + increment;
      lineBuffer = tempBuffer;
    }
  }
  if (counter == 1 && crlfCounter > 0) {
    return [NSString java_stringWithBytes:crlfBuffer offset:0 length:crlfCounter charsetName:@"UTF-8"];
  }
  else {
    return [NSString java_stringWithBytes:lineBuffer offset:0 length:counter charsetName:@"UTF-8"];
  }
}

void AndroidGovNistJavaxSipParserPipelinedMsgParser_cleanMessageOrderingMap(AndroidGovNistJavaxSipParserPipelinedMsgParser *self) {
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->messagesOrderingMap_)) clear];
  @synchronized(self->messagesOrderingMap_) {
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->messagesOrderingMap_)) java_notifyAll];
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipParserPipelinedMsgParser_logger)) debugWithNSString:JreStrcat("$@$$", @"cleaned the messagesOrderingMap ", self, @" threadname ", [((JavaLangThread *) nil_chk(self->mythread_)) getName])];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserPipelinedMsgParser)

@implementation AndroidGovNistJavaxSipParserPipelinedMsgParser_Dispatch

- (instancetype)initWithAndroidGovNistJavaxSipParserPipelinedMsgParser:(AndroidGovNistJavaxSipParserPipelinedMsgParser *)outer$
withAndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure:(AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure *)callIDOrderingStructure
                                                          withNSString:(NSString *)callId {
  AndroidGovNistJavaxSipParserPipelinedMsgParser_Dispatch_initWithAndroidGovNistJavaxSipParserPipelinedMsgParser_withAndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure_withNSString_(self, outer$, callIDOrderingStructure, callId);
  return self;
}

- (void)run {
  JavaUtilConcurrentSemaphore *semaphore = [((AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure *) nil_chk(callIDOrderingStructure_)) getSemaphore];
  id<JavaUtilQueue> messagesForCallID = [((AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure *) nil_chk(callIDOrderingStructure_)) getMessagesForCallID];
  if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_))->sipEventInterceptor_ != nil) {
    [this$0_->sipStack_->sipEventInterceptor_ beforeMessageWithAndroidJavaxSipMessageMessage:[((id<JavaUtilQueue>) nil_chk(messagesForCallID)) peek]];
  }
  @try {
    [((JavaUtilConcurrentSemaphore *) nil_chk(semaphore)) acquire];
  }
  @catch (JavaLangInterruptedException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipParserPipelinedMsgParser, logger))) errorWithNSString:JreStrcat("$$$", @"Semaphore acquisition for callId ", callId_, @" interrupted") withNSException:e];
  }
  AndroidGovNistJavaxSipMessageSIPMessage *message = [((id<JavaUtilQueue>) nil_chk(messagesForCallID)) poll];
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipParserPipelinedMsgParser, logger))) debugWithNSString:JreStrcat("$@", @"semaphore acquired for message ", message)];
  @try {
    [((id<AndroidGovNistJavaxSipParserSIPMessageListener>) nil_chk(this$0_->sipMessageListener_)) processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:message];
  }
  @catch (JavaLangException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipParserPipelinedMsgParser, logger))) errorWithNSString:@"Error occured processing message" withNSException:e];
  }
  @finally {
    if ([messagesForCallID size] <= 0) {
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->messagesOrderingMap_)) removeWithId:callId_];
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipParserPipelinedMsgParser, logger))) debugWithNSString:JreStrcat("$$", @"CallIDOrderingStructure removed for message ", callId_)];
    }
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipParserPipelinedMsgParser, logger))) debugWithNSString:JreStrcat("$@", @"releasing semaphore for message ", message)];
    [semaphore release__];
    if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->messagesOrderingMap_)) isEmpty]) {
      @synchronized(this$0_->messagesOrderingMap_) {
        [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->messagesOrderingMap_)) java_notify];
      }
    }
    if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_))->sipEventInterceptor_ != nil) {
      [this$0_->sipStack_->sipEventInterceptor_ afterMessageWithAndroidJavaxSipMessageMessage:message];
    }
  }
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipParserPipelinedMsgParser, logger))) debugWithNSString:JreStrcat("$@$$", @"dispatch task done on ", message, @" threadname ", [((JavaLangThread *) nil_chk(this$0_->mythread_)) getName])];
}

- (jlong)getReceptionTime {
  return time_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(callIDOrderingStructure_);
  RELEASE_(callId_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipParserPipelinedMsgParser:withAndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure:withNSString:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(getReceptionTime);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipParserPipelinedMsgParser;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "callIDOrderingStructure_", "LAndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "callId_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "time_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure;LNSString;", "LAndroidGovNistJavaxSipParserPipelinedMsgParser;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserPipelinedMsgParser_Dispatch = { "Dispatch", "android.gov.nist.javax.sip.parser", ptrTable, methods, fields, 7, 0x1, 3, 4, 1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserPipelinedMsgParser_Dispatch;
}

@end

void AndroidGovNistJavaxSipParserPipelinedMsgParser_Dispatch_initWithAndroidGovNistJavaxSipParserPipelinedMsgParser_withAndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure_withNSString_(AndroidGovNistJavaxSipParserPipelinedMsgParser_Dispatch *self, AndroidGovNistJavaxSipParserPipelinedMsgParser *outer$, AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure *callIDOrderingStructure, NSString *callId) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->callIDOrderingStructure_, callIDOrderingStructure);
  JreStrongAssign(&self->callId_, callId);
  self->time_ = JavaLangSystem_currentTimeMillis();
}

AndroidGovNistJavaxSipParserPipelinedMsgParser_Dispatch *new_AndroidGovNistJavaxSipParserPipelinedMsgParser_Dispatch_initWithAndroidGovNistJavaxSipParserPipelinedMsgParser_withAndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure_withNSString_(AndroidGovNistJavaxSipParserPipelinedMsgParser *outer$, AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure *callIDOrderingStructure, NSString *callId) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserPipelinedMsgParser_Dispatch, initWithAndroidGovNistJavaxSipParserPipelinedMsgParser_withAndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure_withNSString_, outer$, callIDOrderingStructure, callId)
}

AndroidGovNistJavaxSipParserPipelinedMsgParser_Dispatch *create_AndroidGovNistJavaxSipParserPipelinedMsgParser_Dispatch_initWithAndroidGovNistJavaxSipParserPipelinedMsgParser_withAndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure_withNSString_(AndroidGovNistJavaxSipParserPipelinedMsgParser *outer$, AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure *callIDOrderingStructure, NSString *callId) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserPipelinedMsgParser_Dispatch, initWithAndroidGovNistJavaxSipParserPipelinedMsgParser_withAndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure_withNSString_, outer$, callIDOrderingStructure, callId)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserPipelinedMsgParser_Dispatch)

@implementation AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure

- (instancetype)initWithAndroidGovNistJavaxSipParserPipelinedMsgParser:(AndroidGovNistJavaxSipParserPipelinedMsgParser *)outer$ {
  AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure_initWithAndroidGovNistJavaxSipParserPipelinedMsgParser_(self, outer$);
  return self;
}

- (JavaUtilConcurrentSemaphore *)getSemaphore {
  return semaphore_;
}

- (id<JavaUtilQueue>)getMessagesForCallID {
  return messagesForCallID_;
}

- (void)dealloc {
  RELEASE_(semaphore_);
  RELEASE_(messagesForCallID_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentSemaphore;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilQueue;", 0x1, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipParserPipelinedMsgParser:);
  methods[1].selector = @selector(getSemaphore);
  methods[2].selector = @selector(getMessagesForCallID);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "semaphore_", "LJavaUtilConcurrentSemaphore;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "messagesForCallID_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Queue<Landroid/gov/nist/javax/sip/message/SIPMessage;>;", "Ljava/util/Queue<Landroid/gov/nist/javax/sip/message/SIPMessage;>;", "LAndroidGovNistJavaxSipParserPipelinedMsgParser;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure = { "CallIDOrderingStructure", "android.gov.nist.javax.sip.parser", ptrTable, methods, fields, 7, 0x0, 3, 2, 2, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure;
}

@end

void AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure_initWithAndroidGovNistJavaxSipParserPipelinedMsgParser_(AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure *self, AndroidGovNistJavaxSipParserPipelinedMsgParser *outer$) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->semaphore_, new_JavaUtilConcurrentSemaphore_initWithInt_withBoolean_(1, true));
  JreStrongAssignAndConsume(&self->messagesForCallID_, new_JavaUtilConcurrentConcurrentLinkedQueue_init());
}

AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure *new_AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure_initWithAndroidGovNistJavaxSipParserPipelinedMsgParser_(AndroidGovNistJavaxSipParserPipelinedMsgParser *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure, initWithAndroidGovNistJavaxSipParserPipelinedMsgParser_, outer$)
}

AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure *create_AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure_initWithAndroidGovNistJavaxSipParserPipelinedMsgParser_(AndroidGovNistJavaxSipParserPipelinedMsgParser *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure, initWithAndroidGovNistJavaxSipParserPipelinedMsgParser_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserPipelinedMsgParser_CallIDOrderingStructure)
