//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/ims/PAssertedIdentityParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PAssertedIdentity.h"
#include "android/gov/nist/javax/sip/header/ims/PAssertedIdentityList.h"
#include "android/gov/nist/javax/sip/header/ims/SIPHeaderNamesIms.h"
#include "android/gov/nist/javax/sip/parser/AddressParametersParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/gov/nist/javax/sip/parser/ims/PAssertedIdentityParser.h"

@implementation AndroidGovNistJavaxSipParserImsPAssertedIdentityParser

- (instancetype)initWithNSString:(NSString *)assertedIdentity {
  AndroidGovNistJavaxSipParserImsPAssertedIdentityParser_initWithNSString_(self, assertedIdentity);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserImsPAssertedIdentityParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"AssertedIdentityParser.parse"];
  AndroidGovNistJavaxSipHeaderImsPAssertedIdentityList *assertedIdList = create_AndroidGovNistJavaxSipHeaderImsPAssertedIdentityList_init();
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_P_ASSERTED_IDENTITY];
    AndroidGovNistJavaxSipHeaderImsPAssertedIdentity *pai = create_AndroidGovNistJavaxSipHeaderImsPAssertedIdentity_init();
    [pai setHeaderNameWithNSString:AndroidGovNistJavaxSipHeaderImsSIPHeaderNamesIms_P_ASSERTED_IDENTITY];
    [super parseWithAndroidGovNistJavaxSipHeaderAddressParametersHeader:pai];
    [assertedIdList addWithId:pai];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ',') {
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:','];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      pai = create_AndroidGovNistJavaxSipHeaderImsPAssertedIdentity_init();
      [super parseWithAndroidGovNistJavaxSipHeaderAddressParametersHeader:pai];
      [assertedIdList addWithId:pai];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    }
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:0x000a];
    return assertedIdList;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"AssertedIdentityParser.parse"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserImsPAssertedIdentityParser = { "PAssertedIdentityParser", "android.gov.nist.javax.sip.parser.ims", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserImsPAssertedIdentityParser;
}

@end

void AndroidGovNistJavaxSipParserImsPAssertedIdentityParser_initWithNSString_(AndroidGovNistJavaxSipParserImsPAssertedIdentityParser *self, NSString *assertedIdentity) {
  AndroidGovNistJavaxSipParserAddressParametersParser_initWithNSString_(self, assertedIdentity);
}

AndroidGovNistJavaxSipParserImsPAssertedIdentityParser *new_AndroidGovNistJavaxSipParserImsPAssertedIdentityParser_initWithNSString_(NSString *assertedIdentity) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserImsPAssertedIdentityParser, initWithNSString_, assertedIdentity)
}

AndroidGovNistJavaxSipParserImsPAssertedIdentityParser *create_AndroidGovNistJavaxSipParserImsPAssertedIdentityParser_initWithNSString_(NSString *assertedIdentity) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserImsPAssertedIdentityParser, initWithNSString_, assertedIdentity)
}

void AndroidGovNistJavaxSipParserImsPAssertedIdentityParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserImsPAssertedIdentityParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserAddressParametersParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserImsPAssertedIdentityParser *new_AndroidGovNistJavaxSipParserImsPAssertedIdentityParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserImsPAssertedIdentityParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserImsPAssertedIdentityParser *create_AndroidGovNistJavaxSipParserImsPAssertedIdentityParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserImsPAssertedIdentityParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserImsPAssertedIdentityParser)
