//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/extensions/MinSEParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/extensions/MinSE.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/ParametersParser.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/gov/nist/javax/sip/parser/extensions/MinSEParser.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/System.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserExtensionsMinSEParser

- (instancetype)initWithNSString:(NSString *)text {
  AndroidGovNistJavaxSipParserExtensionsMinSEParser_initWithNSString_(self, text);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserExtensionsMinSEParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  AndroidGovNistJavaxSipHeaderExtensionsMinSE *minse = create_AndroidGovNistJavaxSipHeaderExtensionsMinSE_init();
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"parse"];
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_MINSE_TO];
    NSString *nextId = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextId];
    @try {
      jint delta = JavaLangInteger_parseIntWithNSString_(nextId);
      [minse setExpiresWithInt:delta];
    }
    @catch (JavaLangNumberFormatException *ex) {
      @throw [self createParseExceptionWithNSString:@"bad integer format"];
    }
    @catch (AndroidJavaxSipInvalidArgumentException *ex) {
      @throw [self createParseExceptionWithNSString:[((AndroidJavaxSipInvalidArgumentException *) nil_chk(ex)) getMessage]];
    }
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    [super parseWithAndroidGovNistJavaxSipHeaderParametersHeader:minse];
    return minse;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"parse"];
  }
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  AndroidGovNistJavaxSipParserExtensionsMinSEParser_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  methods[3].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;", "main", "[LNSString;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserExtensionsMinSEParser = { "MinSEParser", "android.gov.nist.javax.sip.parser.extensions", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserExtensionsMinSEParser;
}

@end

void AndroidGovNistJavaxSipParserExtensionsMinSEParser_initWithNSString_(AndroidGovNistJavaxSipParserExtensionsMinSEParser *self, NSString *text) {
  AndroidGovNistJavaxSipParserParametersParser_initWithNSString_(self, text);
}

AndroidGovNistJavaxSipParserExtensionsMinSEParser *new_AndroidGovNistJavaxSipParserExtensionsMinSEParser_initWithNSString_(NSString *text) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserExtensionsMinSEParser, initWithNSString_, text)
}

AndroidGovNistJavaxSipParserExtensionsMinSEParser *create_AndroidGovNistJavaxSipParserExtensionsMinSEParser_initWithNSString_(NSString *text) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserExtensionsMinSEParser, initWithNSString_, text)
}

void AndroidGovNistJavaxSipParserExtensionsMinSEParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserExtensionsMinSEParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserParametersParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserExtensionsMinSEParser *new_AndroidGovNistJavaxSipParserExtensionsMinSEParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserExtensionsMinSEParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserExtensionsMinSEParser *create_AndroidGovNistJavaxSipParserExtensionsMinSEParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserExtensionsMinSEParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

void AndroidGovNistJavaxSipParserExtensionsMinSEParser_mainWithNSStringArray_(IOSObjectArray *args) {
  AndroidGovNistJavaxSipParserExtensionsMinSEParser_initialize();
  IOSObjectArray *to = [IOSObjectArray arrayWithObjects:(id[]){ @"Min-SE: 30\n", @"Min-SE: 45;some-param=somevalue\n" } count:2 type:NSString_class_()];
  for (jint i = 0; i < to->size_; i++) {
    AndroidGovNistJavaxSipParserExtensionsMinSEParser *tp = create_AndroidGovNistJavaxSipParserExtensionsMinSEParser_initWithNSString_(IOSObjectArray_Get(to, i));
    AndroidGovNistJavaxSipHeaderExtensionsMinSE *t = (AndroidGovNistJavaxSipHeaderExtensionsMinSE *) cast_chk([tp parse], [AndroidGovNistJavaxSipHeaderExtensionsMinSE class]);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"encoded = ", [((AndroidGovNistJavaxSipHeaderExtensionsMinSE *) nil_chk(t)) encode])];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"\ntime=", [t getExpires])];
    if ([t getParameterWithNSString:@"some-param"] != nil) [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"some-param=", [t getParameterWithNSString:@"some-param"])];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserExtensionsMinSEParser)
