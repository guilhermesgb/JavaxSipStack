//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/TimeStampParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderNames.h"
#include "android/gov/nist/javax/sip/header/TimeStamp.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TimeStampParser.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserTimeStampParser

- (instancetype)initWithNSString:(NSString *)timeStamp {
  AndroidGovNistJavaxSipParserTimeStampParser_initWithNSString_(self, timeStamp);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserTimeStampParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"TimeStampParser.parse"];
  AndroidGovNistJavaxSipHeaderTimeStamp *timeStamp = create_AndroidGovNistJavaxSipHeaderTimeStamp_init();
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_TIMESTAMP];
    [timeStamp setHeaderNameWithNSString:AndroidGovNistJavaxSipHeaderSIPHeaderNames_TIMESTAMP];
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    NSString *firstNumber = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) number];
    @try {
      if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == '.') {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'.'];
        NSString *secondNumber = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) number];
        NSString *s = JreStrcat("$C$", firstNumber, '.', secondNumber);
        jfloat ts = JavaLangFloat_parseFloatWithNSString_(s);
        [timeStamp setTimeStampWithFloat:ts];
      }
      else {
        jlong ts = JavaLangLong_parseLongWithNSString_(firstNumber);
        [timeStamp setTimeWithLong:ts];
      }
    }
    @catch (JavaLangNumberFormatException *ex) {
      @throw [self createParseExceptionWithNSString:[((JavaLangNumberFormatException *) nil_chk(ex)) getMessage]];
    }
    @catch (AndroidJavaxSipInvalidArgumentException *ex) {
      @throw [self createParseExceptionWithNSString:[((AndroidJavaxSipInvalidArgumentException *) nil_chk(ex)) getMessage]];
    }
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] != 0x000a) {
      firstNumber = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) number];
      @try {
        if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == '.') {
          [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'.'];
          NSString *secondNumber = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) number];
          NSString *s = JreStrcat("$C$", firstNumber, '.', secondNumber);
          jfloat ts = JavaLangFloat_parseFloatWithNSString_(s);
          [timeStamp setDelayWithFloat:ts];
        }
        else {
          jint ts = JavaLangInteger_parseIntWithNSString_(firstNumber);
          [timeStamp setDelayWithFloat:ts];
        }
      }
      @catch (JavaLangNumberFormatException *ex) {
        @throw [self createParseExceptionWithNSString:[((JavaLangNumberFormatException *) nil_chk(ex)) getMessage]];
      }
      @catch (AndroidJavaxSipInvalidArgumentException *ex) {
        @throw [self createParseExceptionWithNSString:[((AndroidJavaxSipInvalidArgumentException *) nil_chk(ex)) getMessage]];
      }
    }
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"TimeStampParser.parse"];
  }
  return timeStamp;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserTimeStampParser = { "TimeStampParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserTimeStampParser;
}

@end

void AndroidGovNistJavaxSipParserTimeStampParser_initWithNSString_(AndroidGovNistJavaxSipParserTimeStampParser *self, NSString *timeStamp) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, timeStamp);
}

AndroidGovNistJavaxSipParserTimeStampParser *new_AndroidGovNistJavaxSipParserTimeStampParser_initWithNSString_(NSString *timeStamp) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserTimeStampParser, initWithNSString_, timeStamp)
}

AndroidGovNistJavaxSipParserTimeStampParser *create_AndroidGovNistJavaxSipParserTimeStampParser_initWithNSString_(NSString *timeStamp) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserTimeStampParser, initWithNSString_, timeStamp)
}

void AndroidGovNistJavaxSipParserTimeStampParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserTimeStampParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserTimeStampParser *new_AndroidGovNistJavaxSipParserTimeStampParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserTimeStampParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserTimeStampParser *create_AndroidGovNistJavaxSipParserTimeStampParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserTimeStampParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserTimeStampParser)
