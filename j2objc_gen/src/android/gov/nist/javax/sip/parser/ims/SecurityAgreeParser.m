//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/ims/SecurityAgreeParser.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/NameValue.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderList.h"
#include "android/gov/nist/javax/sip/header/ims/SecurityAgree.h"
#include "android/gov/nist/javax/sip/header/ims/SecurityClient.h"
#include "android/gov/nist/javax/sip/header/ims/SecurityClientList.h"
#include "android/gov/nist/javax/sip/header/ims/SecurityServer.h"
#include "android/gov/nist/javax/sip/header/ims/SecurityServerList.h"
#include "android/gov/nist/javax/sip/header/ims/SecurityVerify.h"
#include "android/gov/nist/javax/sip/header/ims/SecurityVerifyList.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/gov/nist/javax/sip/parser/ims/SecurityAgreeParser.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserImsSecurityAgreeParser

- (instancetype)initWithNSString:(NSString *)security {
  AndroidGovNistJavaxSipParserImsSecurityAgreeParser_initWithNSString_(self, security);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserImsSecurityAgreeParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (void)parseParameterWithAndroidGovNistJavaxSipHeaderImsSecurityAgree:(AndroidGovNistJavaxSipHeaderImsSecurityAgree *)header {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"parseParameter"];
  @try {
    AndroidGovNistCoreNameValue *nv = [self nameValueWithChar:'='];
    [((AndroidGovNistJavaxSipHeaderImsSecurityAgree *) nil_chk(header)) setParameterWithAndroidGovNistCoreNameValue:nv];
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"parseParameter"];
  }
}

- (AndroidGovNistJavaxSipHeaderSIPHeaderList *)parseWithAndroidGovNistJavaxSipHeaderImsSecurityAgree:(AndroidGovNistJavaxSipHeaderImsSecurityAgree *)header {
  AndroidGovNistJavaxSipHeaderSIPHeaderList *list;
  if ([[((AndroidGovNistJavaxSipHeaderImsSecurityAgree *) nil_chk(header)) java_getClass] isInstance:create_AndroidGovNistJavaxSipHeaderImsSecurityClient_init()]) {
    list = create_AndroidGovNistJavaxSipHeaderImsSecurityClientList_init();
  }
  else if ([[header java_getClass] isInstance:create_AndroidGovNistJavaxSipHeaderImsSecurityServer_init()]) {
    list = create_AndroidGovNistJavaxSipHeaderImsSecurityServerList_init();
  }
  else if ([[header java_getClass] isInstance:create_AndroidGovNistJavaxSipHeaderImsSecurityVerify_init()]) {
    list = create_AndroidGovNistJavaxSipHeaderImsSecurityVerifyList_init();
  }
  else return nil;
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
  [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
  AndroidGovNistCoreToken *type = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
  [header setSecurityMechanismWithNSString:[((AndroidGovNistCoreToken *) nil_chk(type)) getTokenValue]];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
  jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
  if (la == 0x000a) {
    [list addWithId:header];
    return list;
  }
  else if (la == ';') [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:';'];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
  @try {
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] != 0x000a) {
      [self parseParameterWithAndroidGovNistJavaxSipHeaderImsSecurityAgree:header];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      jchar laInLoop = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
      if (laInLoop == 0x000a || laInLoop == 0x0000) break;
      else if (laInLoop == ',') {
        [list addWithId:header];
        if ([[header java_getClass] isInstance:create_AndroidGovNistJavaxSipHeaderImsSecurityClient_init()]) {
          header = create_AndroidGovNistJavaxSipHeaderImsSecurityClient_init();
        }
        else if ([[header java_getClass] isInstance:create_AndroidGovNistJavaxSipHeaderImsSecurityServer_init()]) {
          header = create_AndroidGovNistJavaxSipHeaderImsSecurityServer_init();
        }
        else if ([[header java_getClass] isInstance:create_AndroidGovNistJavaxSipHeaderImsSecurityVerify_init()]) {
          header = create_AndroidGovNistJavaxSipHeaderImsSecurityVerify_init();
        }
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:','];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
        type = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
        [header setSecurityMechanismWithNSString:[((AndroidGovNistCoreToken *) nil_chk(type)) getTokenValue]];
      }
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ';') [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:';'];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
    }
    [list addWithId:header];
    return list;
  }
  @catch (JavaTextParseException *ex) {
    @throw ex;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeaderList;", 0x1, 5, 3, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parseParameterWithAndroidGovNistJavaxSipHeaderImsSecurityAgree:);
  methods[3].selector = @selector(parseWithAndroidGovNistJavaxSipHeaderImsSecurityAgree:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "parseParameter", "LAndroidGovNistJavaxSipHeaderImsSecurityAgree;", "LJavaTextParseException;", "parse" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserImsSecurityAgreeParser = { "SecurityAgreeParser", "android.gov.nist.javax.sip.parser.ims", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserImsSecurityAgreeParser;
}

@end

void AndroidGovNistJavaxSipParserImsSecurityAgreeParser_initWithNSString_(AndroidGovNistJavaxSipParserImsSecurityAgreeParser *self, NSString *security) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, security);
}

AndroidGovNistJavaxSipParserImsSecurityAgreeParser *new_AndroidGovNistJavaxSipParserImsSecurityAgreeParser_initWithNSString_(NSString *security) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserImsSecurityAgreeParser, initWithNSString_, security)
}

AndroidGovNistJavaxSipParserImsSecurityAgreeParser *create_AndroidGovNistJavaxSipParserImsSecurityAgreeParser_initWithNSString_(NSString *security) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserImsSecurityAgreeParser, initWithNSString_, security)
}

void AndroidGovNistJavaxSipParserImsSecurityAgreeParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserImsSecurityAgreeParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserImsSecurityAgreeParser *new_AndroidGovNistJavaxSipParserImsSecurityAgreeParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserImsSecurityAgreeParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserImsSecurityAgreeParser *create_AndroidGovNistJavaxSipParserImsSecurityAgreeParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserImsSecurityAgreeParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserImsSecurityAgreeParser)
