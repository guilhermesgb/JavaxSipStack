//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/ContentEncodingParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/ContentEncoding.h"
#include "android/gov/nist/javax/sip/header/ContentEncodingList.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderNames.h"
#include "android/gov/nist/javax/sip/parser/ContentEncodingParser.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserContentEncodingParser

- (instancetype)initWithNSString:(NSString *)contentEncoding {
  AndroidGovNistJavaxSipParserContentEncodingParser_initWithNSString_(self, contentEncoding);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserContentEncodingParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"ContentEncodingParser.parse"];
  AndroidGovNistJavaxSipHeaderContentEncodingList *list = create_AndroidGovNistJavaxSipHeaderContentEncodingList_init();
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_CONTENT_ENCODING];
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] != 0x000a) {
      AndroidGovNistJavaxSipHeaderContentEncoding *cl = create_AndroidGovNistJavaxSipHeaderContentEncoding_init();
      [cl setHeaderNameWithNSString:AndroidGovNistJavaxSipHeaderSIPHeaderNames_CONTENT_ENCODING];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
      AndroidGovNistCoreToken *token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
      [cl setEncodingWithNSString:[((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]];
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      [list addWithId:cl];
      while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ',') {
        cl = create_AndroidGovNistJavaxSipHeaderContentEncoding_init();
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:','];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        token = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
        [cl setEncodingWithNSString:[((AndroidGovNistCoreToken *) nil_chk(token)) getTokenValue]];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        [list addWithId:cl];
      }
    }
    return list;
  }
  @catch (JavaTextParseException *ex) {
    @throw [self createParseExceptionWithNSString:[((JavaTextParseException *) nil_chk(ex)) getMessage]];
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"ContentEncodingParser.parse"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserContentEncodingParser = { "ContentEncodingParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserContentEncodingParser;
}

@end

void AndroidGovNistJavaxSipParserContentEncodingParser_initWithNSString_(AndroidGovNistJavaxSipParserContentEncodingParser *self, NSString *contentEncoding) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, contentEncoding);
}

AndroidGovNistJavaxSipParserContentEncodingParser *new_AndroidGovNistJavaxSipParserContentEncodingParser_initWithNSString_(NSString *contentEncoding) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserContentEncodingParser, initWithNSString_, contentEncoding)
}

AndroidGovNistJavaxSipParserContentEncodingParser *create_AndroidGovNistJavaxSipParserContentEncodingParser_initWithNSString_(NSString *contentEncoding) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserContentEncodingParser, initWithNSString_, contentEncoding)
}

void AndroidGovNistJavaxSipParserContentEncodingParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserContentEncodingParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserContentEncodingParser *new_AndroidGovNistJavaxSipParserContentEncodingParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserContentEncodingParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserContentEncodingParser *create_AndroidGovNistJavaxSipParserContentEncodingParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserContentEncodingParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserContentEncodingParser)
