//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/URLParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/HostNameParser.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/NameValue.h"
#include "android/gov/nist/core/NameValueList.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/StringTokenizer.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/address/GenericURI.h"
#include "android/gov/nist/javax/sip/address/SipUri.h"
#include "android/gov/nist/javax/sip/address/TelURLImpl.h"
#include "android/gov/nist/javax/sip/address/TelephoneNumber.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/Parser.h"
#include "android/gov/nist/javax/sip/parser/TokenNames.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/gov/nist/javax/sip/parser/URLParser.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/text/ParseException.h"

@interface AndroidGovNistJavaxSipParserURLParser ()

- (AndroidGovNistCoreNameValue *)uriParam;

- (NSString *)base_phone_number;

- (NSString *)local_number;

- (AndroidGovNistJavaxSipAddressTelephoneNumber *)global_phone_numberWithBoolean:(jboolean)inBrackets;

- (AndroidGovNistJavaxSipAddressTelephoneNumber *)local_phone_numberWithBoolean:(jboolean)inBrackets;

- (AndroidGovNistCoreNameValueList *)tel_parameters;

- (AndroidGovNistCoreNameValue *)phone_context;

@end

__attribute__((unused)) static AndroidGovNistCoreNameValue *AndroidGovNistJavaxSipParserURLParser_uriParam(AndroidGovNistJavaxSipParserURLParser *self);

__attribute__((unused)) static NSString *AndroidGovNistJavaxSipParserURLParser_base_phone_number(AndroidGovNistJavaxSipParserURLParser *self);

__attribute__((unused)) static NSString *AndroidGovNistJavaxSipParserURLParser_local_number(AndroidGovNistJavaxSipParserURLParser *self);

__attribute__((unused)) static AndroidGovNistJavaxSipAddressTelephoneNumber *AndroidGovNistJavaxSipParserURLParser_parseTelephoneNumberWithBoolean_(AndroidGovNistJavaxSipParserURLParser *self, jboolean inBrackets);

__attribute__((unused)) static AndroidGovNistJavaxSipAddressTelephoneNumber *AndroidGovNistJavaxSipParserURLParser_global_phone_numberWithBoolean_(AndroidGovNistJavaxSipParserURLParser *self, jboolean inBrackets);

__attribute__((unused)) static AndroidGovNistJavaxSipAddressTelephoneNumber *AndroidGovNistJavaxSipParserURLParser_local_phone_numberWithBoolean_(AndroidGovNistJavaxSipParserURLParser *self, jboolean inBrackets);

__attribute__((unused)) static AndroidGovNistCoreNameValueList *AndroidGovNistJavaxSipParserURLParser_tel_parameters(AndroidGovNistJavaxSipParserURLParser *self);

__attribute__((unused)) static AndroidGovNistCoreNameValue *AndroidGovNistJavaxSipParserURLParser_phone_context(AndroidGovNistJavaxSipParserURLParser *self);

@implementation AndroidGovNistJavaxSipParserURLParser

- (instancetype)initWithNSString:(NSString *)url {
  AndroidGovNistJavaxSipParserURLParser_initWithNSString_(self, url);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserURLParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

+ (jboolean)isMarkWithChar:(jchar)next {
  return AndroidGovNistJavaxSipParserURLParser_isMarkWithChar_(next);
}

+ (jboolean)isUnreservedWithChar:(jchar)next {
  return AndroidGovNistJavaxSipParserURLParser_isUnreservedWithChar_(next);
}

+ (jboolean)isReservedNoSlashWithChar:(jchar)next {
  return AndroidGovNistJavaxSipParserURLParser_isReservedNoSlashWithChar_(next);
}

+ (jboolean)isUserUnreservedWithChar:(jchar)la {
  return AndroidGovNistJavaxSipParserURLParser_isUserUnreservedWithChar_(la);
}

- (NSString *)unreserved {
  jchar next = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
  if (AndroidGovNistJavaxSipParserURLParser_isUnreservedWithChar_(next)) {
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
    return NSString_java_valueOfChar_(next);
  }
  else @throw [self createParseExceptionWithNSString:@"unreserved"];
}

- (NSString *)paramNameOrValue {
  jint startIdx = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getPtr];
  while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) hasMoreChars]) {
    jchar next = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
    jboolean isValidChar = false;
    switch (next) {
      case '[':
      case ']':
      case '/':
      case ':':
      case '&':
      case '+':
      case '$':
      isValidChar = true;
    }
    if (isValidChar || AndroidGovNistJavaxSipParserURLParser_isUnreservedWithChar_(next)) {
      [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
    }
    else if ([self isEscaped]) {
      [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:3];
    }
    else break;
  }
  return [((NSString *) nil_chk([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getBuffer])) java_substring:startIdx endIndex:[((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getPtr]];
}

- (AndroidGovNistCoreNameValue *)uriParam {
  return AndroidGovNistJavaxSipParserURLParser_uriParam(self);
}

+ (jboolean)isReservedWithChar:(jchar)next {
  return AndroidGovNistJavaxSipParserURLParser_isReservedWithChar_(next);
}

- (NSString *)reserved {
  jchar next = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
  if (AndroidGovNistJavaxSipParserURLParser_isReservedWithChar_(next)) {
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
    return [((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_init() appendWithChar:next])) description];
  }
  else @throw [self createParseExceptionWithNSString:@"reserved"];
}

- (jboolean)isEscaped {
  @try {
    return [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == '%' && AndroidGovNistCoreStringTokenizer_isHexDigitWithChar_([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:1]) && AndroidGovNistCoreStringTokenizer_isHexDigitWithChar_([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:2]);
  }
  @catch (JavaLangException *ex) {
    return false;
  }
}

- (NSString *)escaped {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"escaped"];
  @try {
    JavaLangStringBuilder *retval = create_JavaLangStringBuilder_init();
    jchar next = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
    jchar next1 = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:1];
    jchar next2 = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:2];
    if (next == '%' && AndroidGovNistCoreStringTokenizer_isHexDigitWithChar_(next1) && AndroidGovNistCoreStringTokenizer_isHexDigitWithChar_(next2)) {
      [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:3];
      [retval appendWithChar:next];
      [retval appendWithChar:next1];
      [retval appendWithChar:next2];
    }
    else @throw [self createParseExceptionWithNSString:@"escaped"];
    return [retval description];
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"escaped"];
  }
}

- (NSString *)mark {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"mark"];
  @try {
    jchar next = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
    if (AndroidGovNistJavaxSipParserURLParser_isMarkWithChar_(next)) {
      [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
      return [NSString java_stringWithCharacters:[IOSCharArray arrayWithChars:(jchar[]){ next } count:1]];
    }
    else @throw [self createParseExceptionWithNSString:@"mark"];
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"mark"];
  }
}

- (NSString *)uric {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"uric"];
  @try {
    @try {
      jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
      if (AndroidGovNistJavaxSipParserURLParser_isUnreservedWithChar_(la)) {
        [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
        return AndroidGovNistCoreLexerCore_charAsStringWithChar_(la);
      }
      else if (AndroidGovNistJavaxSipParserURLParser_isReservedWithChar_(la)) {
        [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
        return AndroidGovNistCoreLexerCore_charAsStringWithChar_(la);
      }
      else if ([self isEscaped]) {
        NSString *retval = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) charAsStringWithInt:3];
        [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:3];
        return retval;
      }
      else return nil;
    }
    @catch (JavaLangException *ex) {
      return nil;
    }
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"uric"];
  }
}

- (NSString *)uricNoSlash {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"uricNoSlash"];
  @try {
    @try {
      jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
      if ([self isEscaped]) {
        NSString *retval = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) charAsStringWithInt:3];
        [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:3];
        return retval;
      }
      else if (AndroidGovNistJavaxSipParserURLParser_isUnreservedWithChar_(la)) {
        [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
        return AndroidGovNistCoreLexerCore_charAsStringWithChar_(la);
      }
      else if (AndroidGovNistJavaxSipParserURLParser_isReservedNoSlashWithChar_(la)) {
        [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
        return AndroidGovNistCoreLexerCore_charAsStringWithChar_(la);
      }
      else return nil;
    }
    @catch (JavaTextParseException *ex) {
      return nil;
    }
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"uricNoSlash"];
  }
}

- (NSString *)uricString {
  JavaLangStringBuilder *retval = create_JavaLangStringBuilder_init();
  while (true) {
    NSString *next = [self uric];
    if (next == nil) {
      jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
      if (la == '[') {
        AndroidGovNistCoreHostNameParser *hnp = create_AndroidGovNistCoreHostNameParser_initWithAndroidGovNistCoreLexerCore_([self getLexer]);
        AndroidGovNistCoreHostPort *hp = [hnp hostPortWithBoolean:false];
        [retval appendWithNSString:[((AndroidGovNistCoreHostPort *) nil_chk(hp)) description]];
        continue;
      }
      break;
    }
    [retval appendWithNSString:next];
  }
  return [retval description];
}

- (AndroidGovNistJavaxSipAddressGenericURI *)uriReferenceWithBoolean:(jboolean)inBrackets {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"uriReference"];
  AndroidGovNistJavaxSipAddressGenericURI *retval = nil;
  IOSObjectArray *tokens = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) peekNextTokenWithInt:2];
  AndroidGovNistCoreToken *t1 = IOSObjectArray_Get(nil_chk(tokens), 0);
  AndroidGovNistCoreToken *t2 = IOSObjectArray_Get(tokens, 1);
  @try {
    if ([((AndroidGovNistCoreToken *) nil_chk(t1)) getTokenType] == AndroidGovNistJavaxSipParserTokenTypes_SIP || [t1 getTokenType] == AndroidGovNistJavaxSipParserTokenTypes_SIPS) {
      if ([((AndroidGovNistCoreToken *) nil_chk(t2)) getTokenType] == ':') retval = [self sipURLWithBoolean:inBrackets];
      else @throw [self createParseExceptionWithNSString:@"Expecting ':'"];
    }
    else if ([t1 getTokenType] == AndroidGovNistJavaxSipParserTokenTypes_TEL) {
      if ([((AndroidGovNistCoreToken *) nil_chk(t2)) getTokenType] == ':') {
        retval = [self telURLWithBoolean:inBrackets];
      }
      else @throw [self createParseExceptionWithNSString:@"Expecting ':'"];
    }
    else {
      NSString *urlString = [self uricString];
      @try {
        retval = create_AndroidGovNistJavaxSipAddressGenericURI_initWithNSString_(urlString);
      }
      @catch (JavaTextParseException *ex) {
        @throw [self createParseExceptionWithNSString:[((JavaTextParseException *) nil_chk(ex)) getMessage]];
      }
    }
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"uriReference"];
  }
  return retval;
}

- (NSString *)base_phone_number {
  return AndroidGovNistJavaxSipParserURLParser_base_phone_number(self);
}

- (NSString *)local_number {
  return AndroidGovNistJavaxSipParserURLParser_local_number(self);
}

- (AndroidGovNistJavaxSipAddressTelephoneNumber *)parseTelephoneNumberWithBoolean:(jboolean)inBrackets {
  return AndroidGovNistJavaxSipParserURLParser_parseTelephoneNumberWithBoolean_(self, inBrackets);
}

- (AndroidGovNistJavaxSipAddressTelephoneNumber *)global_phone_numberWithBoolean:(jboolean)inBrackets {
  return AndroidGovNistJavaxSipParserURLParser_global_phone_numberWithBoolean_(self, inBrackets);
}

- (AndroidGovNistJavaxSipAddressTelephoneNumber *)local_phone_numberWithBoolean:(jboolean)inBrackets {
  return AndroidGovNistJavaxSipParserURLParser_local_phone_numberWithBoolean_(self, inBrackets);
}

- (AndroidGovNistCoreNameValueList *)tel_parameters {
  return AndroidGovNistJavaxSipParserURLParser_tel_parameters(self);
}

- (AndroidGovNistCoreNameValue *)phone_context {
  return AndroidGovNistJavaxSipParserURLParser_phone_context(self);
}

- (AndroidGovNistJavaxSipAddressTelURLImpl *)telURLWithBoolean:(jboolean)inBrackets {
  [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_TEL];
  [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:':'];
  AndroidGovNistJavaxSipAddressTelephoneNumber *tn = AndroidGovNistJavaxSipParserURLParser_parseTelephoneNumberWithBoolean_(self, inBrackets);
  AndroidGovNistJavaxSipAddressTelURLImpl *telUrl = create_AndroidGovNistJavaxSipAddressTelURLImpl_init();
  [telUrl setTelephoneNumberWithAndroidGovNistJavaxSipAddressTelephoneNumber:tn];
  return telUrl;
}

- (AndroidGovNistJavaxSipAddressSipUri *)sipURLWithBoolean:(jboolean)inBrackets {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"sipURL"];
  AndroidGovNistJavaxSipAddressSipUri *retval = create_AndroidGovNistJavaxSipAddressSipUri_init();
  AndroidGovNistCoreToken *nextToken = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) peekNextToken];
  jint sipOrSips = AndroidGovNistJavaxSipParserTokenTypes_SIP;
  NSString *scheme = AndroidGovNistJavaxSipParserTokenNames_SIP;
  if ([((AndroidGovNistCoreToken *) nil_chk(nextToken)) getTokenType] == AndroidGovNistJavaxSipParserTokenTypes_SIPS) {
    sipOrSips = AndroidGovNistJavaxSipParserTokenTypes_SIPS;
    scheme = AndroidGovNistJavaxSipParserTokenNames_SIPS;
  }
  @try {
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:sipOrSips];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:':'];
    [retval setSchemeWithNSString:scheme];
    jint startOfUser = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) markInputPosition];
    NSString *userOrHost = [self user];
    NSString *passOrPort = nil;
    if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAhead] == ':') {
      [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
      passOrPort = [self password];
    }
    if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAhead] == '@') {
      [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
      [retval setUserWithNSString:userOrHost];
      if (passOrPort != nil) [retval setUserPasswordWithNSString:passOrPort];
    }
    else {
      [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) rewindInputPositionWithInt:startOfUser];
    }
    AndroidGovNistCoreHostNameParser *hnp = create_AndroidGovNistCoreHostNameParser_initWithAndroidGovNistCoreLexerCore_([self getLexer]);
    AndroidGovNistCoreHostPort *hp = [hnp hostPortWithBoolean:false];
    [retval setHostPortWithAndroidGovNistCoreHostPort:hp];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) selectLexerWithNSString:@"charLexer"];
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) hasMoreChars]) {
      if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] != ';' || !inBrackets) break;
      [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
      AndroidGovNistCoreNameValue *parms = AndroidGovNistJavaxSipParserURLParser_uriParam(self);
      if (parms != nil) [retval setUriParameterWithAndroidGovNistCoreNameValue:parms];
    }
    if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) hasMoreChars] && [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == '?') {
      [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
      while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) hasMoreChars]) {
        AndroidGovNistCoreNameValue *parms = [self qheader];
        [retval setQHeaderWithAndroidGovNistCoreNameValue:parms];
        if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) hasMoreChars] && [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] != '&') break;
        else [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
      }
    }
    return retval;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"sipURL"];
  }
}

- (NSString *)peekScheme {
  return [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getStringWithChar:':'];
}

- (AndroidGovNistCoreNameValue *)qheader {
  NSString *name = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextTokenWithChar:'='];
  [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
  NSString *value = [self hvalue];
  return create_AndroidGovNistCoreNameValue_initWithNSString_withId_withBoolean_(name, value, false);
}

- (NSString *)hvalue {
  JavaLangStringBuilder *retval = create_JavaLangStringBuilder_init();
  while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) hasMoreChars]) {
    jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
    jboolean isValidChar = false;
    switch (la) {
      case '+':
      case '?':
      case ':':
      case '[':
      case ']':
      case '/':
      case '$':
      case '_':
      case '-':
      case '"':
      case '!':
      case '~':
      case '*':
      case '.':
      case '(':
      case ')':
      isValidChar = true;
    }
    if (isValidChar || AndroidGovNistCoreStringTokenizer_isAlphaDigitWithChar_(la)) {
      [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
      [retval appendWithChar:la];
    }
    else if (la == '%') {
      [retval appendWithNSString:[self escaped]];
    }
    else break;
  }
  return [retval description];
}

- (NSString *)urlString {
  JavaLangStringBuilder *retval = create_JavaLangStringBuilder_init();
  [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) selectLexerWithNSString:@"charLexer"];
  while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) hasMoreChars]) {
    jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
    if (la == ' ' || la == 0x0009 || la == 0x000a || la == '>' || la == '<') break;
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:0];
    [retval appendWithChar:la];
  }
  return [retval description];
}

- (NSString *)user {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"user"];
  @try {
    jint startIdx = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getPtr];
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) hasMoreChars]) {
      jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
      if (AndroidGovNistJavaxSipParserURLParser_isUnreservedWithChar_(la) || AndroidGovNistJavaxSipParserURLParser_isUserUnreservedWithChar_(la)) {
        [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
      }
      else if ([self isEscaped]) {
        [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:3];
      }
      else break;
    }
    return [((NSString *) nil_chk([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getBuffer])) java_substring:startIdx endIndex:[((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getPtr]];
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"user"];
  }
}

- (NSString *)password {
  jint startIdx = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getPtr];
  while (true) {
    jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
    jboolean isValidChar = false;
    switch (la) {
      case '&':
      case '=':
      case '+':
      case '$':
      case ',':
      isValidChar = true;
    }
    if (isValidChar || AndroidGovNistJavaxSipParserURLParser_isUnreservedWithChar_(la)) {
      [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
    }
    else if ([self isEscaped]) {
      [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:3];
    }
    else break;
  }
  return [((NSString *) nil_chk([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getBuffer])) java_substring:startIdx endIndex:[((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getPtr]];
}

- (AndroidGovNistJavaxSipAddressGenericURI *)parse {
  return [self uriReferenceWithBoolean:true];
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  AndroidGovNistJavaxSipParserURLParser_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 5, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 6, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 7, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValue;", 0x2, -1, -1, 7, -1, -1, -1 },
    { NULL, "Z", 0xc, 8, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 7, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 7, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipAddressGenericURI;", 0x1, 9, 10, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, 7, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipAddressTelephoneNumber;", 0x11, 11, 10, 7, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipAddressTelephoneNumber;", 0x12, 12, 10, 7, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipAddressTelephoneNumber;", 0x2, 13, 10, 7, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValueList;", 0x2, -1, -1, 7, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValue;", 0x2, -1, -1, 7, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipAddressTelURLImpl;", 0x1, 14, 10, 7, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipAddressSipUri;", 0x1, 15, 10, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValue;", 0x4, -1, -1, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 7, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipAddressGenericURI;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "V", 0x9, 16, 17, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(isMarkWithChar:);
  methods[3].selector = @selector(isUnreservedWithChar:);
  methods[4].selector = @selector(isReservedNoSlashWithChar:);
  methods[5].selector = @selector(isUserUnreservedWithChar:);
  methods[6].selector = @selector(unreserved);
  methods[7].selector = @selector(paramNameOrValue);
  methods[8].selector = @selector(uriParam);
  methods[9].selector = @selector(isReservedWithChar:);
  methods[10].selector = @selector(reserved);
  methods[11].selector = @selector(isEscaped);
  methods[12].selector = @selector(escaped);
  methods[13].selector = @selector(mark);
  methods[14].selector = @selector(uric);
  methods[15].selector = @selector(uricNoSlash);
  methods[16].selector = @selector(uricString);
  methods[17].selector = @selector(uriReferenceWithBoolean:);
  methods[18].selector = @selector(base_phone_number);
  methods[19].selector = @selector(local_number);
  methods[20].selector = @selector(parseTelephoneNumberWithBoolean:);
  methods[21].selector = @selector(global_phone_numberWithBoolean:);
  methods[22].selector = @selector(local_phone_numberWithBoolean:);
  methods[23].selector = @selector(tel_parameters);
  methods[24].selector = @selector(phone_context);
  methods[25].selector = @selector(telURLWithBoolean:);
  methods[26].selector = @selector(sipURLWithBoolean:);
  methods[27].selector = @selector(peekScheme);
  methods[28].selector = @selector(qheader);
  methods[29].selector = @selector(hvalue);
  methods[30].selector = @selector(urlString);
  methods[31].selector = @selector(user);
  methods[32].selector = @selector(password);
  methods[33].selector = @selector(parse);
  methods[34].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "isMark", "C", "isUnreserved", "isReservedNoSlash", "isUserUnreserved", "LJavaTextParseException;", "isReserved", "uriReference", "Z", "parseTelephoneNumber", "global_phone_number", "local_phone_number", "telURL", "sipURL", "main", "[LNSString;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserURLParser = { "URLParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 35, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserURLParser;
}

@end

void AndroidGovNistJavaxSipParserURLParser_initWithNSString_(AndroidGovNistJavaxSipParserURLParser *self, NSString *url) {
  AndroidGovNistJavaxSipParserParser_init(self);
  JreStrongAssignAndConsume(&self->lexer_, new_AndroidGovNistJavaxSipParserLexer_initWithNSString_withNSString_(@"sip_urlLexer", url));
}

AndroidGovNistJavaxSipParserURLParser *new_AndroidGovNistJavaxSipParserURLParser_initWithNSString_(NSString *url) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserURLParser, initWithNSString_, url)
}

AndroidGovNistJavaxSipParserURLParser *create_AndroidGovNistJavaxSipParserURLParser_initWithNSString_(NSString *url) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserURLParser, initWithNSString_, url)
}

void AndroidGovNistJavaxSipParserURLParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserURLParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserParser_init(self);
  JreStrongAssign(&self->lexer_, lexer);
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) selectLexerWithNSString:@"sip_urlLexer"];
}

AndroidGovNistJavaxSipParserURLParser *new_AndroidGovNistJavaxSipParserURLParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserURLParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserURLParser *create_AndroidGovNistJavaxSipParserURLParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserURLParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

jboolean AndroidGovNistJavaxSipParserURLParser_isMarkWithChar_(jchar next) {
  AndroidGovNistJavaxSipParserURLParser_initialize();
  switch (next) {
    case '-':
    case '_':
    case '.':
    case '!':
    case '~':
    case '*':
    case '\'':
    case '(':
    case ')':
    return true;
    default:
    return false;
  }
}

jboolean AndroidGovNistJavaxSipParserURLParser_isUnreservedWithChar_(jchar next) {
  AndroidGovNistJavaxSipParserURLParser_initialize();
  return AndroidGovNistCoreStringTokenizer_isAlphaDigitWithChar_(next) || AndroidGovNistJavaxSipParserURLParser_isMarkWithChar_(next);
}

jboolean AndroidGovNistJavaxSipParserURLParser_isReservedNoSlashWithChar_(jchar next) {
  AndroidGovNistJavaxSipParserURLParser_initialize();
  switch (next) {
    case ';':
    case '?':
    case ':':
    case '@':
    case '&':
    case '+':
    case '$':
    case ',':
    return true;
    default:
    return false;
  }
}

jboolean AndroidGovNistJavaxSipParserURLParser_isUserUnreservedWithChar_(jchar la) {
  AndroidGovNistJavaxSipParserURLParser_initialize();
  switch (la) {
    case '&':
    case '?':
    case '+':
    case '$':
    case '#':
    case '/':
    case ',':
    case ';':
    case '=':
    return true;
    default:
    return false;
  }
}

AndroidGovNistCoreNameValue *AndroidGovNistJavaxSipParserURLParser_uriParam(AndroidGovNistJavaxSipParserURLParser *self) {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"uriParam"];
  @try {
    NSString *pvalue = @"";
    NSString *pname = [self paramNameOrValue];
    jchar next = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0];
    jboolean isFlagParam = true;
    if (next == '=') {
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) consumeWithInt:1];
      pvalue = [self paramNameOrValue];
      isFlagParam = false;
    }
    if (((jint) [((NSString *) nil_chk(pname)) length]) == 0 && (pvalue == nil || ((jint) [pvalue length]) == 0)) return nil;
    else return create_AndroidGovNistCoreNameValue_initWithNSString_withId_withBoolean_(pname, pvalue, isFlagParam);
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"uriParam"];
  }
}

jboolean AndroidGovNistJavaxSipParserURLParser_isReservedWithChar_(jchar next) {
  AndroidGovNistJavaxSipParserURLParser_initialize();
  switch (next) {
    case ';':
    case '/':
    case '?':
    case ':':
    case '=':
    case '@':
    case '&':
    case '+':
    case '$':
    case ',':
    return true;
    default:
    return false;
  }
}

NSString *AndroidGovNistJavaxSipParserURLParser_base_phone_number(AndroidGovNistJavaxSipParserURLParser *self) {
  JavaLangStringBuilder *s = create_JavaLangStringBuilder_init();
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"base_phone_number"];
  @try {
    jint lc = 0;
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) hasMoreChars]) {
      jchar w = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0];
      if (AndroidGovNistCoreStringTokenizer_isDigitWithChar_(w) || w == '-' || w == '.' || w == '(' || w == ')') {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) consumeWithInt:1];
        [s appendWithChar:w];
        lc++;
      }
      else if (lc > 0) break;
      else @throw [self createParseExceptionWithNSString:JreStrcat("$C", @"unexpected ", w)];
    }
    return [s description];
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"base_phone_number"];
  }
}

NSString *AndroidGovNistJavaxSipParserURLParser_local_number(AndroidGovNistJavaxSipParserURLParser *self) {
  JavaLangStringBuilder *s = create_JavaLangStringBuilder_init();
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"local_number"];
  @try {
    jint lc = 0;
    while ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) hasMoreChars]) {
      jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0];
      if (la == '*' || la == '#' || la == '-' || la == '.' || la == '(' || la == ')' || AndroidGovNistCoreStringTokenizer_isHexDigitWithChar_(la)) {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) consumeWithInt:1];
        [s appendWithChar:la];
        lc++;
      }
      else if (lc > 0) break;
      else @throw [self createParseExceptionWithNSString:JreStrcat("$C", @"unexepcted ", la)];
    }
    return [s description];
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"local_number"];
  }
}

AndroidGovNistJavaxSipAddressTelephoneNumber *AndroidGovNistJavaxSipParserURLParser_parseTelephoneNumberWithBoolean_(AndroidGovNistJavaxSipParserURLParser *self, jboolean inBrackets) {
  AndroidGovNistJavaxSipAddressTelephoneNumber *tn;
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"telephone_subscriber"];
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) selectLexerWithNSString:@"charLexer"];
  @try {
    jchar c = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0];
    if (c == '+') tn = AndroidGovNistJavaxSipParserURLParser_global_phone_numberWithBoolean_(self, inBrackets);
    else if (AndroidGovNistCoreStringTokenizer_isHexDigitWithChar_(c) || c == '#' || c == '*' || c == '-' || c == '.' || c == '(' || c == ')') {
      tn = AndroidGovNistJavaxSipParserURLParser_local_phone_numberWithBoolean_(self, inBrackets);
    }
    else @throw [self createParseExceptionWithNSString:JreStrcat("$C", @"unexpected char ", c)];
    return tn;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"telephone_subscriber"];
  }
}

AndroidGovNistJavaxSipAddressTelephoneNumber *AndroidGovNistJavaxSipParserURLParser_global_phone_numberWithBoolean_(AndroidGovNistJavaxSipParserURLParser *self, jboolean inBrackets) {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"global_phone_number"];
  @try {
    AndroidGovNistJavaxSipAddressTelephoneNumber *tn = create_AndroidGovNistJavaxSipAddressTelephoneNumber_init();
    [tn setGlobalWithBoolean:true];
    AndroidGovNistCoreNameValueList *nv = nil;
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_PLUS];
    NSString *b = AndroidGovNistJavaxSipParserURLParser_base_phone_number(self);
    [tn setPhoneNumberWithNSString:b];
    if ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) hasMoreChars]) {
      jchar tok = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0];
      if (tok == ';' && inBrackets) {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) consumeWithInt:1];
        nv = AndroidGovNistJavaxSipParserURLParser_tel_parameters(self);
        [tn setParametersWithAndroidGovNistCoreNameValueList:nv];
      }
    }
    return tn;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"global_phone_number"];
  }
}

AndroidGovNistJavaxSipAddressTelephoneNumber *AndroidGovNistJavaxSipParserURLParser_local_phone_numberWithBoolean_(AndroidGovNistJavaxSipParserURLParser *self, jboolean inBrackets) {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"local_phone_number"];
  AndroidGovNistJavaxSipAddressTelephoneNumber *tn = create_AndroidGovNistJavaxSipAddressTelephoneNumber_init();
  [tn setGlobalWithBoolean:false];
  AndroidGovNistCoreNameValueList *nv = nil;
  NSString *b = nil;
  @try {
    b = AndroidGovNistJavaxSipParserURLParser_local_number(self);
    [tn setPhoneNumberWithNSString:b];
    if ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) hasMoreChars]) {
      AndroidGovNistCoreToken *tok = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) peekNextToken];
      switch ([((AndroidGovNistCoreToken *) nil_chk(tok)) getTokenType]) {
        case AndroidGovNistJavaxSipParserTokenTypes_SEMICOLON:
        {
          if (inBrackets) {
            [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) consumeWithInt:1];
            nv = AndroidGovNistJavaxSipParserURLParser_tel_parameters(self);
            [tn setParametersWithAndroidGovNistCoreNameValueList:nv];
          }
          break;
        }
        default:
        {
          break;
        }
      }
    }
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"local_phone_number"];
  }
  return tn;
}

AndroidGovNistCoreNameValueList *AndroidGovNistJavaxSipParserURLParser_tel_parameters(AndroidGovNistJavaxSipParserURLParser *self) {
  AndroidGovNistCoreNameValueList *nvList = create_AndroidGovNistCoreNameValueList_init();
  AndroidGovNistCoreNameValue *nv;
  while (true) {
    NSString *pname = [self paramNameOrValue];
    if ([((NSString *) nil_chk(pname)) java_equalsIgnoreCase:@"phone-context"]) {
      nv = AndroidGovNistJavaxSipParserURLParser_phone_context(self);
    }
    else {
      if ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0] == '=') {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) consumeWithInt:1];
        NSString *value = [self paramNameOrValue];
        nv = create_AndroidGovNistCoreNameValue_initWithNSString_withId_withBoolean_(pname, value, false);
      }
      else {
        nv = create_AndroidGovNistCoreNameValue_initWithNSString_withId_withBoolean_(pname, @"", true);
      }
    }
    [nvList setWithAndroidGovNistCoreNameValue:nv];
    if ([((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0] == ';') {
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) consumeWithInt:1];
    }
    else {
      return nvList;
    }
  }
}

AndroidGovNistCoreNameValue *AndroidGovNistJavaxSipParserURLParser_phone_context(AndroidGovNistJavaxSipParserURLParser *self) {
  [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'='];
  jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) lookAheadWithInt:0];
  id value;
  if (la == '+') {
    [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) consumeWithInt:1];
    value = JreStrcat("C$", '+', AndroidGovNistJavaxSipParserURLParser_base_phone_number(self));
  }
  else if (AndroidGovNistCoreStringTokenizer_isAlphaDigitWithChar_(la)) {
    AndroidGovNistCoreToken *t = [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:AndroidGovNistCoreLexerCore_ID];
    value = [((AndroidGovNistCoreToken *) nil_chk(t)) getTokenValue];
  }
  else {
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$C", @"Invalid phone-context:", la), -1);
  }
  return create_AndroidGovNistCoreNameValue_initWithNSString_withId_withBoolean_(@"phone-context", value, false);
}

void AndroidGovNistJavaxSipParserURLParser_mainWithNSStringArray_(IOSObjectArray *args) {
  AndroidGovNistJavaxSipParserURLParser_initialize();
  IOSObjectArray *test = [IOSObjectArray arrayWithObjects:(id[]){ @"sip:alice@example.com", @"sips:alice@examples.com", @"sip:3Zqkv5dajqaaas0tCjCxT0xH2ZEuEMsFl0xoasip%3A%2B3519116786244%40siplab.domain.com@213.0.115.163:7070" } count:3 type:NSString_class_()];
  for (jint i = 0; i < test->size_; i++) {
    AndroidGovNistJavaxSipParserURLParser *p = create_AndroidGovNistJavaxSipParserURLParser_initWithNSString_(IOSObjectArray_Get(test, i));
    AndroidGovNistJavaxSipAddressGenericURI *uri = [p parse];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"uri type returned ", [[((AndroidGovNistJavaxSipAddressGenericURI *) nil_chk(uri)) java_getClass] getName])];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$ZC$", IOSObjectArray_Get(test, i), @" is SipUri? ", [uri isSipURI], '>', [uri encode])];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserURLParser)
