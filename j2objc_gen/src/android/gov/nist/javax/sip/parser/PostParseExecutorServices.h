//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/PostParseExecutorServices.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidGovNistJavaxSipParserPostParseExecutorServices")
#ifdef RESTRICT_AndroidGovNistJavaxSipParserPostParseExecutorServices
#define INCLUDE_ALL_AndroidGovNistJavaxSipParserPostParseExecutorServices 0
#else
#define INCLUDE_ALL_AndroidGovNistJavaxSipParserPostParseExecutorServices 1
#endif
#undef RESTRICT_AndroidGovNistJavaxSipParserPostParseExecutorServices

#if !defined (AndroidGovNistJavaxSipParserPostParseExecutorServices_) && (INCLUDE_ALL_AndroidGovNistJavaxSipParserPostParseExecutorServices || defined(INCLUDE_AndroidGovNistJavaxSipParserPostParseExecutorServices))
#define AndroidGovNistJavaxSipParserPostParseExecutorServices_

@class AndroidGovNistJavaxSipSipStackImpl;
@class AndroidGovNistJavaxSipStackBlockingQueueDispatchAuditor;
@protocol JavaUtilConcurrentBlockingQueue;
@protocol JavaUtilConcurrentExecutorService;

@interface AndroidGovNistJavaxSipParserPostParseExecutorServices : NSObject

#pragma mark Public

- (instancetype)init;

+ (id<JavaUtilConcurrentExecutorService>)getPostParseExecutor;

+ (void)setPostParseExcutorSizeWithAndroidGovNistJavaxSipSipStackImpl:(AndroidGovNistJavaxSipSipStackImpl *)sipStack
                                                              withInt:(jint)threads
                                                              withInt:(jint)queueTimeout;

+ (void)shutdownThreadpool;

@end

J2OBJC_STATIC_INIT(AndroidGovNistJavaxSipParserPostParseExecutorServices)

inline id<JavaUtilConcurrentBlockingQueue> AndroidGovNistJavaxSipParserPostParseExecutorServices_get_staticQueue();
inline id<JavaUtilConcurrentBlockingQueue> AndroidGovNistJavaxSipParserPostParseExecutorServices_set_staticQueue(id<JavaUtilConcurrentBlockingQueue> value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilConcurrentBlockingQueue> AndroidGovNistJavaxSipParserPostParseExecutorServices_staticQueue;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipParserPostParseExecutorServices, staticQueue, id<JavaUtilConcurrentBlockingQueue>)

inline AndroidGovNistJavaxSipStackBlockingQueueDispatchAuditor *AndroidGovNistJavaxSipParserPostParseExecutorServices_get_staticQueueAuditor();
inline AndroidGovNistJavaxSipStackBlockingQueueDispatchAuditor *AndroidGovNistJavaxSipParserPostParseExecutorServices_set_staticQueueAuditor(AndroidGovNistJavaxSipStackBlockingQueueDispatchAuditor *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidGovNistJavaxSipStackBlockingQueueDispatchAuditor *AndroidGovNistJavaxSipParserPostParseExecutorServices_staticQueueAuditor;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipParserPostParseExecutorServices, staticQueueAuditor, AndroidGovNistJavaxSipStackBlockingQueueDispatchAuditor *)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipParserPostParseExecutorServices_init(AndroidGovNistJavaxSipParserPostParseExecutorServices *self);

FOUNDATION_EXPORT AndroidGovNistJavaxSipParserPostParseExecutorServices *new_AndroidGovNistJavaxSipParserPostParseExecutorServices_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipParserPostParseExecutorServices *create_AndroidGovNistJavaxSipParserPostParseExecutorServices_init();

FOUNDATION_EXPORT void AndroidGovNistJavaxSipParserPostParseExecutorServices_setPostParseExcutorSizeWithAndroidGovNistJavaxSipSipStackImpl_withInt_withInt_(AndroidGovNistJavaxSipSipStackImpl *sipStack, jint threads, jint queueTimeout);

FOUNDATION_EXPORT id<JavaUtilConcurrentExecutorService> AndroidGovNistJavaxSipParserPostParseExecutorServices_getPostParseExecutor();

FOUNDATION_EXPORT void AndroidGovNistJavaxSipParserPostParseExecutorServices_shutdownThreadpool();

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipParserPostParseExecutorServices)

#endif

#if !defined (AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory_) && (INCLUDE_ALL_AndroidGovNistJavaxSipParserPostParseExecutorServices || defined(INCLUDE_AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory))
#define AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory_

#define RESTRICT_JavaUtilConcurrentThreadFactory 1
#define INCLUDE_JavaUtilConcurrentThreadFactory 1
#include "java/util/concurrent/ThreadFactory.h"

@class JavaLangThread;
@protocol JavaLangRunnable;

@interface AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory : NSObject < JavaUtilConcurrentThreadFactory >

#pragma mark Public

- (instancetype)init;

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)arg0 OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory)

inline jlong AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory_get_threadNumber();
inline jlong AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory_set_threadNumber(jlong value);
inline jlong *AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory_getRef_threadNumber();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jlong AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory_threadNumber;
J2OBJC_STATIC_FIELD_PRIMITIVE(AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory, threadNumber, jlong)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory_init(AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory *self);

FOUNDATION_EXPORT AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory *new_AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory *create_AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory_init();

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipParserPostParseExecutorServices_NamedThreadFactory)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidGovNistJavaxSipParserPostParseExecutorServices")
