//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/parser/AcceptLanguageParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/header/AcceptLanguage.h"
#include "android/gov/nist/javax/sip/header/AcceptLanguageList.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/parser/AcceptLanguageParser.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/Lexer.h"
#include "android/gov/nist/javax/sip/parser/TokenTypes.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "java/lang/Float.h"
#include "java/lang/NumberFormatException.h"
#include "java/text/ParseException.h"

@implementation AndroidGovNistJavaxSipParserAcceptLanguageParser

- (instancetype)initWithNSString:(NSString *)acceptLanguage {
  AndroidGovNistJavaxSipParserAcceptLanguageParser_initWithNSString_(self, acceptLanguage);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipParserLexer:(AndroidGovNistJavaxSipParserLexer *)lexer {
  AndroidGovNistJavaxSipParserAcceptLanguageParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
  return self;
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)parse {
  AndroidGovNistJavaxSipHeaderAcceptLanguageList *acceptLanguageList = create_AndroidGovNistJavaxSipHeaderAcceptLanguageList_init();
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"AcceptLanguageParser.parse"];
  @try {
    [self headerNameWithInt:AndroidGovNistJavaxSipParserTokenTypes_ACCEPT_LANGUAGE];
    do {
      AndroidGovNistJavaxSipHeaderAcceptLanguage *acceptLanguage = create_AndroidGovNistJavaxSipHeaderAcceptLanguage_init();
      [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) startsId]) {
        AndroidGovNistCoreToken *value = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
        [acceptLanguage setLanguageRangeWithNSString:[((AndroidGovNistCoreToken *) nil_chk(value)) getTokenValue]];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ';') {
          [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:';'];
          [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
          [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'q'];
          [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
          [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:'='];
          [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
          [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:AndroidGovNistJavaxSipParserTokenTypes_ID];
          value = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
          @try {
            jfloat fl = JavaLangFloat_parseFloatWithNSString_([((AndroidGovNistCoreToken *) nil_chk(value)) getTokenValue]);
            [acceptLanguage setQValueWithFloat:fl];
          }
          @catch (JavaLangNumberFormatException *ex) {
            @throw [self createParseExceptionWithNSString:[((JavaLangNumberFormatException *) nil_chk(ex)) getMessage]];
          }
          @catch (AndroidJavaxSipInvalidArgumentException *ex) {
            @throw [self createParseExceptionWithNSString:[((AndroidJavaxSipInvalidArgumentException *) nil_chk(ex)) getMessage]];
          }
          [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
        }
      }
      [acceptLanguageList addWithId:acceptLanguage];
      if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == ',') {
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) matchWithInt:','];
        [((AndroidGovNistCoreLexerCore *) nil_chk(self->lexer_)) SPorHT];
      }
      else break;
    }
    while (true);
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"AcceptLanguageParser.parse"];
  }
  return acceptLanguageList;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipParserLexer:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipParserLexer;", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipParserAcceptLanguageParser = { "AcceptLanguageParser", "android.gov.nist.javax.sip.parser", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipParserAcceptLanguageParser;
}

@end

void AndroidGovNistJavaxSipParserAcceptLanguageParser_initWithNSString_(AndroidGovNistJavaxSipParserAcceptLanguageParser *self, NSString *acceptLanguage) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithNSString_(self, acceptLanguage);
}

AndroidGovNistJavaxSipParserAcceptLanguageParser *new_AndroidGovNistJavaxSipParserAcceptLanguageParser_initWithNSString_(NSString *acceptLanguage) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserAcceptLanguageParser, initWithNSString_, acceptLanguage)
}

AndroidGovNistJavaxSipParserAcceptLanguageParser *create_AndroidGovNistJavaxSipParserAcceptLanguageParser_initWithNSString_(NSString *acceptLanguage) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserAcceptLanguageParser, initWithNSString_, acceptLanguage)
}

void AndroidGovNistJavaxSipParserAcceptLanguageParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserAcceptLanguageParser *self, AndroidGovNistJavaxSipParserLexer *lexer) {
  AndroidGovNistJavaxSipParserHeaderParser_initWithAndroidGovNistJavaxSipParserLexer_(self, lexer);
}

AndroidGovNistJavaxSipParserAcceptLanguageParser *new_AndroidGovNistJavaxSipParserAcceptLanguageParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipParserAcceptLanguageParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

AndroidGovNistJavaxSipParserAcceptLanguageParser *create_AndroidGovNistJavaxSipParserAcceptLanguageParser_initWithAndroidGovNistJavaxSipParserLexer_(AndroidGovNistJavaxSipParserLexer *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipParserAcceptLanguageParser, initWithAndroidGovNistJavaxSipParserLexer_, lexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipParserAcceptLanguageParser)
