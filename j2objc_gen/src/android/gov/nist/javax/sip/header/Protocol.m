//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/Protocol.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/javax/sip/Utils.h"
#include "android/gov/nist/javax/sip/header/Protocol.h"
#include "android/gov/nist/javax/sip/header/SIPObject.h"
#include "java/lang/StringBuilder.h"
#include "java/text/ParseException.h"

inline jlong AndroidGovNistJavaxSipHeaderProtocol_get_serialVersionUID();
#define AndroidGovNistJavaxSipHeaderProtocol_serialVersionUID 2216758055974073280LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipHeaderProtocol, serialVersionUID, jlong)

@implementation AndroidGovNistJavaxSipHeaderProtocol

- (NSString *)encode {
  return [((JavaLangStringBuilder *) nil_chk([self encodeWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])) description];
}

- (JavaLangStringBuilder *)encodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:AndroidGovNistJavaxSipUtils_toUpperCaseWithNSString_(protocolName_)])) appendWithNSString:AndroidGovNistCoreGenericObject_SLASH])) appendWithNSString:protocolVersion_])) appendWithNSString:AndroidGovNistCoreGenericObject_SLASH])) appendWithNSString:[((NSString *) nil_chk(transport_)) uppercaseString]];
  return buffer;
}

- (NSString *)getProtocolName {
  return protocolName_;
}

- (NSString *)getProtocolVersion {
  return protocolVersion_;
}

- (NSString *)getProtocol {
  return JreStrcat("$C$", protocolName_, '/', protocolVersion_);
}

- (void)setProtocolWithNSString:(NSString *)name_and_version {
  jint slash = [((NSString *) nil_chk(name_and_version)) java_indexOf:'/'];
  if (slash > 0) {
    JreStrongAssign(&self->protocolName_, [name_and_version java_substring:0 endIndex:slash]);
    JreStrongAssign(&self->protocolVersion_, [name_and_version java_substring:slash + 1]);
  }
  else @throw create_JavaTextParseException_initWithNSString_withInt_(@"Missing '/' in protocol", 0);
}

- (NSString *)getTransport {
  return transport_;
}

- (void)setProtocolNameWithNSString:(NSString *)p {
  JreStrongAssign(&protocolName_, p);
}

- (void)setProtocolVersionWithNSString:(NSString *)p {
  JreStrongAssign(&protocolVersion_, p);
}

- (void)setTransportWithNSString:(NSString *)t {
  JreStrongAssign(&transport_, t);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderProtocol_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(protocolName_);
  RELEASE_(protocolVersion_);
  RELEASE_(transport_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(encode);
  methods[1].selector = @selector(encodeWithJavaLangStringBuilder:);
  methods[2].selector = @selector(getProtocolName);
  methods[3].selector = @selector(getProtocolVersion);
  methods[4].selector = @selector(getProtocol);
  methods[5].selector = @selector(setProtocolWithNSString:);
  methods[6].selector = @selector(getTransport);
  methods[7].selector = @selector(setProtocolNameWithNSString:);
  methods[8].selector = @selector(setProtocolVersionWithNSString:);
  methods[9].selector = @selector(setTransportWithNSString:);
  methods[10].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipHeaderProtocol_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "protocolName_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "protocolVersion_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "transport_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "encode", "LJavaLangStringBuilder;", "setProtocol", "LNSString;", "LJavaTextParseException;", "setProtocolName", "setProtocolVersion", "setTransport" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderProtocol = { "Protocol", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x1, 11, 4, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderProtocol;
}

@end

void AndroidGovNistJavaxSipHeaderProtocol_init(AndroidGovNistJavaxSipHeaderProtocol *self) {
  AndroidGovNistJavaxSipHeaderSIPObject_init(self);
  JreStrongAssign(&self->protocolName_, @"SIP");
  JreStrongAssign(&self->protocolVersion_, @"2.0");
  JreStrongAssign(&self->transport_, @"UDP");
}

AndroidGovNistJavaxSipHeaderProtocol *new_AndroidGovNistJavaxSipHeaderProtocol_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderProtocol, init)
}

AndroidGovNistJavaxSipHeaderProtocol *create_AndroidGovNistJavaxSipHeaderProtocol_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderProtocol, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderProtocol)
