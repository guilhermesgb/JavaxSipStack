//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/TimeStamp.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderNames.h"
#include "android/gov/nist/javax/sip/header/TimeStamp.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"

@interface AndroidGovNistJavaxSipHeaderTimeStamp () {
 @public
  jfloat timeStampFloat_;
}

- (NSString *)getTimeStampAsString;

- (NSString *)getDelayAsString;

@end

inline jlong AndroidGovNistJavaxSipHeaderTimeStamp_get_serialVersionUID();
#define AndroidGovNistJavaxSipHeaderTimeStamp_serialVersionUID -3711322366481232720LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipHeaderTimeStamp, serialVersionUID, jlong)

__attribute__((unused)) static NSString *AndroidGovNistJavaxSipHeaderTimeStamp_getTimeStampAsString(AndroidGovNistJavaxSipHeaderTimeStamp *self);

__attribute__((unused)) static NSString *AndroidGovNistJavaxSipHeaderTimeStamp_getDelayAsString(AndroidGovNistJavaxSipHeaderTimeStamp *self);

@implementation AndroidGovNistJavaxSipHeaderTimeStamp

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderTimeStamp_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getTimeStampAsString {
  return AndroidGovNistJavaxSipHeaderTimeStamp_getTimeStampAsString(self);
}

- (NSString *)getDelayAsString {
  return AndroidGovNistJavaxSipHeaderTimeStamp_getDelayAsString(self);
}

- (JavaLangStringBuilder *)encodeBodyWithJavaLangStringBuilder:(JavaLangStringBuilder *)retval {
  NSString *s1 = AndroidGovNistJavaxSipHeaderTimeStamp_getTimeStampAsString(self);
  NSString *s2 = AndroidGovNistJavaxSipHeaderTimeStamp_getDelayAsString(self);
  if ([((NSString *) nil_chk(s1)) isEqual:@""] && [((NSString *) nil_chk(s2)) isEqual:@""]) return [((JavaLangStringBuilder *) nil_chk(retval)) appendWithNSString:@""];
  if (![s1 isEqual:@""]) [((JavaLangStringBuilder *) nil_chk(retval)) appendWithNSString:s1];
  if (![((NSString *) nil_chk(s2)) isEqual:@""]) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(retval)) appendWithNSString:@" "])) appendWithNSString:s2];
  return retval;
}

- (jboolean)hasDelay {
  return delay_ != -1;
}

- (void)removeDelay {
  delay_ = -1;
}

- (void)setTimeStampWithFloat:(jfloat)timeStamp {
  if (timeStamp < 0) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(@"JAIN-SIP Exception, TimeStamp, setTimeStamp(), the timeStamp parameter is <0");
  self->timeStamp_ = -1;
  self->timeStampFloat_ = timeStamp;
}

- (jfloat)getTimeStamp {
  return self->timeStampFloat_ == -1 ? [JavaLangFloat_valueOfWithFloat_(timeStamp_) floatValue] : self->timeStampFloat_;
}

- (jfloat)getDelay {
  return delayFloat_ == -1 ? [JavaLangFloat_valueOfWithFloat_(delay_) floatValue] : delayFloat_;
}

- (void)setDelayWithFloat:(jfloat)delay {
  if (delay < 0 && delay != -1) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(@"JAIN-SIP Exception, TimeStamp, setDelay(), the delay parameter is <0");
  self->delayFloat_ = delay;
  self->delay_ = -1;
}

- (jlong)getTime {
  return self->timeStamp_ == -1 ? JreFpToLong(timeStampFloat_) : timeStamp_;
}

- (jint)getTimeDelay {
  return self->delay_ == -1 ? JreFpToInt(delayFloat_) : delay_;
}

- (void)setTimeWithLong:(jlong)timeStamp {
  if (timeStamp < -1) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(@"Illegal timestamp");
  self->timeStamp_ = timeStamp;
  self->timeStampFloat_ = -1;
}

- (void)setTimeDelayWithInt:(jint)delay {
  if (delay < -1) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(JreStrcat("$I", @"Value out of range ", delay));
  self->delay_ = delay;
  self->delayFloat_ = -1;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, 4, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getTimeStampAsString);
  methods[2].selector = @selector(getDelayAsString);
  methods[3].selector = @selector(encodeBodyWithJavaLangStringBuilder:);
  methods[4].selector = @selector(hasDelay);
  methods[5].selector = @selector(removeDelay);
  methods[6].selector = @selector(setTimeStampWithFloat:);
  methods[7].selector = @selector(getTimeStamp);
  methods[8].selector = @selector(getDelay);
  methods[9].selector = @selector(setDelayWithFloat:);
  methods[10].selector = @selector(getTime);
  methods[11].selector = @selector(getTimeDelay);
  methods[12].selector = @selector(setTimeWithLong:);
  methods[13].selector = @selector(setTimeDelayWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipHeaderTimeStamp_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "timeStamp_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "delay_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "delayFloat_", "F", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "timeStampFloat_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "encodeBody", "LJavaLangStringBuilder;", "setTimeStamp", "F", "LAndroidJavaxSipInvalidArgumentException;", "setDelay", "setTime", "J", "setTimeDelay", "I" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderTimeStamp = { "TimeStamp", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x1, 14, 5, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderTimeStamp;
}

@end

void AndroidGovNistJavaxSipHeaderTimeStamp_init(AndroidGovNistJavaxSipHeaderTimeStamp *self) {
  AndroidGovNistJavaxSipHeaderSIPHeader_initWithNSString_(self, AndroidGovNistJavaxSipHeaderSIPHeaderNames_TIMESTAMP);
  self->timeStamp_ = -1;
  self->delay_ = -1;
  self->delayFloat_ = -1;
  self->timeStampFloat_ = -1;
  self->delay_ = -1;
}

AndroidGovNistJavaxSipHeaderTimeStamp *new_AndroidGovNistJavaxSipHeaderTimeStamp_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderTimeStamp, init)
}

AndroidGovNistJavaxSipHeaderTimeStamp *create_AndroidGovNistJavaxSipHeaderTimeStamp_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderTimeStamp, init)
}

NSString *AndroidGovNistJavaxSipHeaderTimeStamp_getTimeStampAsString(AndroidGovNistJavaxSipHeaderTimeStamp *self) {
  if (self->timeStamp_ == -1 && self->timeStampFloat_ == -1) return @"";
  else if (self->timeStamp_ != -1) return JavaLangLong_toStringWithLong_(self->timeStamp_);
  else return JavaLangFloat_toStringWithFloat_(self->timeStampFloat_);
}

NSString *AndroidGovNistJavaxSipHeaderTimeStamp_getDelayAsString(AndroidGovNistJavaxSipHeaderTimeStamp *self) {
  if (self->delay_ == -1 && self->delayFloat_ == -1) return @"";
  else if (self->delay_ != -1) return JavaLangInteger_toStringWithInt_(self->delay_);
  else return JavaLangFloat_toStringWithFloat_(self->delayFloat_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderTimeStamp)
