//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/StatusLine.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/core/Match.h"
#include "android/gov/nist/javax/sip/SIPConstants.h"
#include "android/gov/nist/javax/sip/header/SIPObject.h"
#include "android/gov/nist/javax/sip/header/StatusLine.h"
#include "java/lang/Integer.h"

inline jlong AndroidGovNistJavaxSipHeaderStatusLine_get_serialVersionUID();
#define AndroidGovNistJavaxSipHeaderStatusLine_serialVersionUID -4738092215519950414LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipHeaderStatusLine, serialVersionUID, jlong)

@implementation AndroidGovNistJavaxSipHeaderStatusLine

- (jboolean)matchWithId:(id)matchObj {
  if (!([matchObj isKindOfClass:[AndroidGovNistJavaxSipHeaderStatusLine class]])) return false;
  AndroidGovNistJavaxSipHeaderStatusLine *sl = (AndroidGovNistJavaxSipHeaderStatusLine *) cast_chk(matchObj, [AndroidGovNistJavaxSipHeaderStatusLine class]);
  if (((AndroidGovNistCoreGenericObject *) nil_chk(sl))->matchExpression_ != nil) return [sl->matchExpression_ matchWithNSString:[self encode]];
  if (sl->sipVersion_ != nil && ![sl->sipVersion_ isEqual:sipVersion_]) return false;
  if (sl->statusCode_ != 0) {
    if (matchStatusClass_) {
      jint hiscode = sl->statusCode_;
      NSString *codeString = JavaLangInteger_toStringWithInt_(sl->statusCode_);
      NSString *mycode = JavaLangInteger_toStringWithInt_(statusCode_);
      if ([((NSString *) nil_chk(codeString)) charAtWithInt:0] != [((NSString *) nil_chk(mycode)) charAtWithInt:0]) return false;
    }
    else {
      if (statusCode_ != sl->statusCode_) return false;
    }
  }
  if (sl->reasonPhrase_ == nil || reasonPhrase_ == sl->reasonPhrase_) return true;
  return [reasonPhrase_ isEqual:sl->reasonPhrase_];
}

- (void)setMatchStatusClassWithBoolean:(jboolean)flag {
  matchStatusClass_ = flag;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderStatusLine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)encode {
  NSString *encoding = JreStrcat("$$I", AndroidGovNistJavaxSipSIPConstants_SIP_VERSION_STRING, AndroidGovNistCoreGenericObject_SP, statusCode_);
  if (reasonPhrase_ != nil) JreStrAppend(&encoding, "$$", AndroidGovNistCoreGenericObject_SP, reasonPhrase_);
  JreStrAppend(&encoding, "$", AndroidGovNistCoreGenericObject_NEWLINE);
  return encoding;
}

- (NSString *)getSipVersion {
  return sipVersion_;
}

- (jint)getStatusCode {
  return statusCode_;
}

- (NSString *)getReasonPhrase {
  return reasonPhrase_;
}

- (void)setSipVersionWithNSString:(NSString *)s {
  JreStrongAssign(&sipVersion_, s);
}

- (void)setStatusCodeWithInt:(jint)statusCode {
  self->statusCode_ = statusCode;
}

- (void)setReasonPhraseWithNSString:(NSString *)reasonPhrase {
  JreStrongAssign(&self->reasonPhrase_, reasonPhrase);
}

- (NSString *)getVersionMajor {
  if (sipVersion_ == nil) return nil;
  NSString *major = nil;
  jboolean slash = false;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(sipVersion_)) length]); i++) {
    if ([((NSString *) nil_chk(sipVersion_)) charAtWithInt:i] == '.') slash = false;
    if (slash) {
      if (major == nil) major = JreStrcat("C", [((NSString *) nil_chk(sipVersion_)) charAtWithInt:i]);
      else JreStrAppend(&major, "C", [((NSString *) nil_chk(sipVersion_)) charAtWithInt:i]);
    }
    if ([((NSString *) nil_chk(sipVersion_)) charAtWithInt:i] == '/') slash = true;
  }
  return major;
}

- (NSString *)getVersionMinor {
  if (sipVersion_ == nil) return nil;
  NSString *minor = nil;
  jboolean dot = false;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(sipVersion_)) length]); i++) {
    if (dot) {
      if (minor == nil) minor = JreStrcat("C", [((NSString *) nil_chk(sipVersion_)) charAtWithInt:i]);
      else JreStrAppend(&minor, "C", [((NSString *) nil_chk(sipVersion_)) charAtWithInt:i]);
    }
    if ([((NSString *) nil_chk(sipVersion_)) charAtWithInt:i] == '.') dot = true;
  }
  return minor;
}

- (void)dealloc {
  RELEASE_(sipVersion_);
  RELEASE_(reasonPhrase_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(matchWithId:);
  methods[1].selector = @selector(setMatchStatusClassWithBoolean:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(encode);
  methods[4].selector = @selector(getSipVersion);
  methods[5].selector = @selector(getStatusCode);
  methods[6].selector = @selector(getReasonPhrase);
  methods[7].selector = @selector(setSipVersionWithNSString:);
  methods[8].selector = @selector(setStatusCodeWithInt:);
  methods[9].selector = @selector(setReasonPhraseWithNSString:);
  methods[10].selector = @selector(getVersionMajor);
  methods[11].selector = @selector(getVersionMinor);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipHeaderStatusLine_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "matchStatusClass_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sipVersion_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "statusCode_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "reasonPhrase_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "match", "LNSObject;", "setMatchStatusClass", "Z", "setSipVersion", "LNSString;", "setStatusCode", "I", "setReasonPhrase" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderStatusLine = { "StatusLine", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x11, 12, 5, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderStatusLine;
}

@end

void AndroidGovNistJavaxSipHeaderStatusLine_init(AndroidGovNistJavaxSipHeaderStatusLine *self) {
  AndroidGovNistJavaxSipHeaderSIPObject_init(self);
  JreStrongAssign(&self->reasonPhrase_, nil);
  JreStrongAssign(&self->sipVersion_, AndroidGovNistJavaxSipSIPConstants_SIP_VERSION_STRING);
}

AndroidGovNistJavaxSipHeaderStatusLine *new_AndroidGovNistJavaxSipHeaderStatusLine_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderStatusLine, init)
}

AndroidGovNistJavaxSipHeaderStatusLine *create_AndroidGovNistJavaxSipHeaderStatusLine_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderStatusLine, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderStatusLine)
