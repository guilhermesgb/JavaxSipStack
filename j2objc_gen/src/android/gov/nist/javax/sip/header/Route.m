//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/Route.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/core/NameValueList.h"
#include "android/gov/nist/javax/sip/address/AddressImpl.h"
#include "android/gov/nist/javax/sip/header/AddressParametersHeader.h"
#include "android/gov/nist/javax/sip/header/Route.h"
#include "android/javax/sip/header/RouteHeader.h"
#include "java/lang/StringBuilder.h"

inline jlong AndroidGovNistJavaxSipHeaderRoute_get_serialVersionUID();
#define AndroidGovNistJavaxSipHeaderRoute_serialVersionUID 5683577362998368846LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipHeaderRoute, serialVersionUID, jlong)

@implementation AndroidGovNistJavaxSipHeaderRoute

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderRoute_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithAndroidGovNistJavaxSipAddressAddressImpl:(AndroidGovNistJavaxSipAddressAddressImpl *)address {
  AndroidGovNistJavaxSipHeaderRoute_initWithAndroidGovNistJavaxSipAddressAddressImpl_(self, address);
  return self;
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk([((NSString *) nil_chk([((AndroidGovNistCoreHostPort *) nil_chk([((AndroidGovNistJavaxSipAddressAddressImpl *) nil_chk(self->address_)) getHostPort])) encode])) lowercaseString])) hash]);
}

- (NSString *)encodeBody {
  return [((JavaLangStringBuilder *) nil_chk([self encodeBodyWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])) description];
}

- (JavaLangStringBuilder *)encodeBodyWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  jboolean addrFlag = [((AndroidGovNistJavaxSipAddressAddressImpl *) nil_chk(address_)) getAddressType] == AndroidGovNistJavaxSipAddressAddressImpl_NAME_ADDR;
  if (!addrFlag) {
    [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithChar:'<'];
    [((AndroidGovNistJavaxSipAddressAddressImpl *) nil_chk(address_)) encodeWithJavaLangStringBuilder:buffer];
    [buffer appendWithChar:'>'];
  }
  else {
    [((AndroidGovNistJavaxSipAddressAddressImpl *) nil_chk(address_)) encodeWithJavaLangStringBuilder:buffer];
  }
  if (![((AndroidGovNistCoreNameValueList *) nil_chk(parameters_)) isEmpty]) {
    [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:AndroidGovNistCoreGenericObject_SEMICOLON];
    [((AndroidGovNistCoreNameValueList *) nil_chk(parameters_)) encodeWithJavaLangStringBuilder:buffer];
  }
  return buffer;
}

- (jboolean)isEqual:(id)other {
  return ([AndroidJavaxSipHeaderRouteHeader_class_() isInstance:other]) && [super isEqual:other];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipAddressAddressImpl:);
  methods[2].selector = @selector(hash);
  methods[3].selector = @selector(encodeBody);
  methods[4].selector = @selector(encodeBodyWithJavaLangStringBuilder:);
  methods[5].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipHeaderRoute_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipAddressAddressImpl;", "hashCode", "encodeBody", "LJavaLangStringBuilder;", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderRoute = { "Route", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderRoute;
}

@end

void AndroidGovNistJavaxSipHeaderRoute_init(AndroidGovNistJavaxSipHeaderRoute *self) {
  AndroidGovNistJavaxSipHeaderAddressParametersHeader_initWithNSString_(self, AndroidJavaxSipHeaderRouteHeader_NAME);
}

AndroidGovNistJavaxSipHeaderRoute *new_AndroidGovNistJavaxSipHeaderRoute_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderRoute, init)
}

AndroidGovNistJavaxSipHeaderRoute *create_AndroidGovNistJavaxSipHeaderRoute_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderRoute, init)
}

void AndroidGovNistJavaxSipHeaderRoute_initWithAndroidGovNistJavaxSipAddressAddressImpl_(AndroidGovNistJavaxSipHeaderRoute *self, AndroidGovNistJavaxSipAddressAddressImpl *address) {
  AndroidGovNistJavaxSipHeaderAddressParametersHeader_initWithNSString_(self, AndroidJavaxSipHeaderRouteHeader_NAME);
  JreStrongAssign(&self->address_, address);
}

AndroidGovNistJavaxSipHeaderRoute *new_AndroidGovNistJavaxSipHeaderRoute_initWithAndroidGovNistJavaxSipAddressAddressImpl_(AndroidGovNistJavaxSipAddressAddressImpl *address) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderRoute, initWithAndroidGovNistJavaxSipAddressAddressImpl_, address)
}

AndroidGovNistJavaxSipHeaderRoute *create_AndroidGovNistJavaxSipHeaderRoute_initWithAndroidGovNistJavaxSipAddressAddressImpl_(AndroidGovNistJavaxSipAddressAddressImpl *address) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderRoute, initWithAndroidGovNistJavaxSipAddressAddressImpl_, address)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderRoute)
