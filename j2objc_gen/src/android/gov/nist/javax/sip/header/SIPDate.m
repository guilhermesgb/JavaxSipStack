//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/SIPDate.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/core/Separators.h"
#include "android/gov/nist/javax/sip/header/SIPDate.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"

@interface AndroidGovNistJavaxSipHeaderSIPDate () {
 @public
  JavaUtilCalendar *javaCal_;
}

- (void)setJavaCal;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipHeaderSIPDate, javaCal_, JavaUtilCalendar *)

inline jlong AndroidGovNistJavaxSipHeaderSIPDate_get_serialVersionUID();
#define AndroidGovNistJavaxSipHeaderSIPDate_serialVersionUID 8544101899928346909LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipHeaderSIPDate, serialVersionUID, jlong)

__attribute__((unused)) static void AndroidGovNistJavaxSipHeaderSIPDate_setJavaCal(AndroidGovNistJavaxSipHeaderSIPDate *self);

NSString *AndroidGovNistJavaxSipHeaderSIPDate_GMT = @"GMT";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_MON = @"Mon";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_TUE = @"Tue";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_WED = @"Wed";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_THU = @"Thu";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_FRI = @"Fri";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_SAT = @"Sat";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_SUN = @"Sun";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_JAN = @"Jan";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_FEB = @"Feb";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_MAR = @"Mar";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_APR = @"Apr";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_MAY = @"May";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_JUN = @"Jun";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_JUL = @"Jul";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_AUG = @"Aug";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_SEP = @"Sep";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_OCT = @"Oct";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_NOV = @"Nov";
NSString *AndroidGovNistJavaxSipHeaderSIPDate_DEC = @"Dec";

@implementation AndroidGovNistJavaxSipHeaderSIPDate

- (jboolean)isEqual:(id)that {
  if ([nil_chk(that) java_getClass] != [self java_getClass]) return false;
  AndroidGovNistJavaxSipHeaderSIPDate *other = (AndroidGovNistJavaxSipHeaderSIPDate *) cast_chk(that, [AndroidGovNistJavaxSipHeaderSIPDate class]);
  return self->wkday_ == other->wkday_ && self->day_ == other->day_ && self->month_ == other->month_ && self->year_ == other->year_ && self->hour_ == other->hour_ && self->minute_ == other->minute_ && self->second_ == other->second_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderSIPDate_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLong:(jlong)timeMillis {
  AndroidGovNistJavaxSipHeaderSIPDate_initWithLong_(self, timeMillis);
  return self;
}

- (JavaLangStringBuilder *)encodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)encoding {
  NSString *dayString;
  if (day_ < 10) {
    dayString = JreStrcat("CI", '0', day_);
  }
  else dayString = JreStrcat("I", day_);
  NSString *hourString;
  if (hour_ < 10) {
    hourString = JreStrcat("CI", '0', hour_);
  }
  else hourString = JreStrcat("I", hour_);
  NSString *minuteString;
  if (minute_ < 10) {
    minuteString = JreStrcat("CI", '0', minute_);
  }
  else minuteString = JreStrcat("I", minute_);
  NSString *secondString;
  if (second_ < 10) {
    secondString = JreStrcat("CI", '0', second_);
  }
  else secondString = JreStrcat("I", second_);
  if (sipWkDay_ != nil) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(encoding)) appendWithNSString:sipWkDay_])) appendWithNSString:AndroidGovNistCoreSeparators_COMMA])) appendWithNSString:AndroidGovNistCoreSeparators_SP];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(encoding)) appendWithNSString:dayString])) appendWithNSString:AndroidGovNistCoreSeparators_SP];
  if (sipMonth_ != nil) [((JavaLangStringBuilder *) nil_chk([encoding appendWithNSString:sipMonth_])) appendWithNSString:AndroidGovNistCoreSeparators_SP];
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([encoding appendWithInt:year_])) appendWithNSString:AndroidGovNistCoreSeparators_SP])) appendWithNSString:hourString])) appendWithNSString:AndroidGovNistCoreSeparators_COLON])) appendWithNSString:minuteString])) appendWithNSString:AndroidGovNistCoreSeparators_COLON])) appendWithNSString:secondString])) appendWithNSString:AndroidGovNistCoreSeparators_SP])) appendWithNSString:AndroidGovNistJavaxSipHeaderSIPDate_GMT];
}

- (JavaUtilCalendar *)getJavaCal {
  if (javaCal_ == nil) AndroidGovNistJavaxSipHeaderSIPDate_setJavaCal(self);
  return javaCal_;
}

- (NSString *)getWkday {
  return sipWkDay_;
}

- (NSString *)getMonth {
  return sipMonth_;
}

- (jint)getHour {
  return hour_;
}

- (jint)getMinute {
  return minute_;
}

- (jint)getSecond {
  return second_;
}

- (void)setJavaCal {
  AndroidGovNistJavaxSipHeaderSIPDate_setJavaCal(self);
}

- (void)setWkdayWithNSString:(NSString *)w {
  JreStrongAssign(&sipWkDay_, w);
  if ([((NSString *) nil_chk(sipWkDay_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_MON] == 0) {
    wkday_ = JavaUtilCalendar_MONDAY;
  }
  else if ([((NSString *) nil_chk(sipWkDay_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_TUE] == 0) {
    wkday_ = JavaUtilCalendar_TUESDAY;
  }
  else if ([((NSString *) nil_chk(sipWkDay_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_WED] == 0) {
    wkday_ = JavaUtilCalendar_WEDNESDAY;
  }
  else if ([((NSString *) nil_chk(sipWkDay_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_THU] == 0) {
    wkday_ = JavaUtilCalendar_THURSDAY;
  }
  else if ([((NSString *) nil_chk(sipWkDay_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_FRI] == 0) {
    wkday_ = JavaUtilCalendar_FRIDAY;
  }
  else if ([((NSString *) nil_chk(sipWkDay_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_SAT] == 0) {
    wkday_ = JavaUtilCalendar_SATURDAY;
  }
  else if ([((NSString *) nil_chk(sipWkDay_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_SUN] == 0) {
    wkday_ = JavaUtilCalendar_SUNDAY;
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Illegal Week day :", w));
  }
}

- (void)setDayWithInt:(jint)d {
  if (d < 1 || d > 31) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Illegal Day of the month ", JavaLangInteger_toStringWithInt_(d)));
  day_ = d;
}

- (void)setMonthWithNSString:(NSString *)m {
  JreStrongAssign(&sipMonth_, m);
  if ([((NSString *) nil_chk(sipMonth_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_JAN] == 0) {
    month_ = JavaUtilCalendar_JANUARY;
  }
  else if ([((NSString *) nil_chk(sipMonth_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_FEB] == 0) {
    month_ = JavaUtilCalendar_FEBRUARY;
  }
  else if ([((NSString *) nil_chk(sipMonth_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_MAR] == 0) {
    month_ = JavaUtilCalendar_MARCH;
  }
  else if ([((NSString *) nil_chk(sipMonth_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_APR] == 0) {
    month_ = JavaUtilCalendar_APRIL;
  }
  else if ([((NSString *) nil_chk(sipMonth_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_MAY] == 0) {
    month_ = JavaUtilCalendar_MAY;
  }
  else if ([((NSString *) nil_chk(sipMonth_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_JUN] == 0) {
    month_ = JavaUtilCalendar_JUNE;
  }
  else if ([((NSString *) nil_chk(sipMonth_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_JUL] == 0) {
    month_ = JavaUtilCalendar_JULY;
  }
  else if ([((NSString *) nil_chk(sipMonth_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_AUG] == 0) {
    month_ = JavaUtilCalendar_AUGUST;
  }
  else if ([((NSString *) nil_chk(sipMonth_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_SEP] == 0) {
    month_ = JavaUtilCalendar_SEPTEMBER;
  }
  else if ([((NSString *) nil_chk(sipMonth_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_OCT] == 0) {
    month_ = JavaUtilCalendar_OCTOBER;
  }
  else if ([((NSString *) nil_chk(sipMonth_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_NOV] == 0) {
    month_ = JavaUtilCalendar_NOVEMBER;
  }
  else if ([((NSString *) nil_chk(sipMonth_)) java_compareToIgnoreCase:AndroidGovNistJavaxSipHeaderSIPDate_DEC] == 0) {
    month_ = JavaUtilCalendar_DECEMBER;
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Illegal Month :", m));
  }
}

- (void)setYearWithInt:(jint)y {
  if (y < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Illegal year : ", y));
  JreStrongAssign(&javaCal_, nil);
  year_ = y;
}

- (jint)getYear {
  return year_;
}

- (void)setHourWithInt:(jint)h {
  if (h < 0 || h > 24) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Illegal hour : ", h));
  JreStrongAssign(&javaCal_, nil);
  hour_ = h;
}

- (void)setMinuteWithInt:(jint)m {
  if (m < 0 || m >= 60) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Illegal minute : ", (JavaLangInteger_toStringWithInt_(m))));
  JreStrongAssign(&javaCal_, nil);
  minute_ = m;
}

- (void)setSecondWithInt:(jint)s {
  if (s < 0 || s >= 60) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Illegal second : ", JavaLangInteger_toStringWithInt_(s)));
  JreStrongAssign(&javaCal_, nil);
  second_ = s;
}

- (jint)getDeltaSeconds {
  jlong ctime = [((JavaUtilDate *) nil_chk([((JavaUtilCalendar *) nil_chk([self getJavaCal])) getTime])) getTime];
  return (jint) (ctime - JavaLangSystem_currentTimeMillis()) / 1000;
}

- (id)java_clone {
  AndroidGovNistJavaxSipHeaderSIPDate *retval;
  @try {
    retval = (AndroidGovNistJavaxSipHeaderSIPDate *) cast_chk([super java_clone], [AndroidGovNistJavaxSipHeaderSIPDate class]);
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Internal error");
  }
  if (javaCal_ != nil) JreStrongAssign(&((AndroidGovNistJavaxSipHeaderSIPDate *) nil_chk(retval))->javaCal_, (JavaUtilCalendar *) cast_chk([javaCal_ java_clone], [JavaUtilCalendar class]));
  return retval;
}

- (void)dealloc {
  RELEASE_(sipWkDay_);
  RELEASE_(sipMonth_);
  RELEASE_(javaCal_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCalendar;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 9, 7, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 9, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 9, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 9, 7, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(isEqual:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithLong:);
  methods[3].selector = @selector(encodeWithJavaLangStringBuilder:);
  methods[4].selector = @selector(getJavaCal);
  methods[5].selector = @selector(getWkday);
  methods[6].selector = @selector(getMonth);
  methods[7].selector = @selector(getHour);
  methods[8].selector = @selector(getMinute);
  methods[9].selector = @selector(getSecond);
  methods[10].selector = @selector(setJavaCal);
  methods[11].selector = @selector(setWkdayWithNSString:);
  methods[12].selector = @selector(setDayWithInt:);
  methods[13].selector = @selector(setMonthWithNSString:);
  methods[14].selector = @selector(setYearWithInt:);
  methods[15].selector = @selector(getYear);
  methods[16].selector = @selector(setHourWithInt:);
  methods[17].selector = @selector(setMinuteWithInt:);
  methods[18].selector = @selector(setSecondWithInt:);
  methods[19].selector = @selector(getDeltaSeconds);
  methods[20].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipHeaderSIPDate_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "GMT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "MON", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "TUE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
    { "WED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "THU", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "FRI", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "SAT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "SUN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "JAN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "FEB", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "MAR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "APR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "MAY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 28, -1, -1 },
    { "JUN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "JUL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "AUG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "SEP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "OCT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "NOV", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
    { "DEC", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 35, -1, -1 },
    { "sipWkDay_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sipMonth_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "wkday_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "day_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "month_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "year_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "hour_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "minute_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "second_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "javaCal_", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "equals", "LNSObject;", "J", "encode", "LJavaLangStringBuilder;", "setWkday", "LNSString;", "LJavaLangIllegalArgumentException;", "setDay", "I", "setMonth", "setYear", "setHour", "setMinute", "setSecond", "clone", &AndroidGovNistJavaxSipHeaderSIPDate_GMT, &AndroidGovNistJavaxSipHeaderSIPDate_MON, &AndroidGovNistJavaxSipHeaderSIPDate_TUE, &AndroidGovNistJavaxSipHeaderSIPDate_WED, &AndroidGovNistJavaxSipHeaderSIPDate_THU, &AndroidGovNistJavaxSipHeaderSIPDate_FRI, &AndroidGovNistJavaxSipHeaderSIPDate_SAT, &AndroidGovNistJavaxSipHeaderSIPDate_SUN, &AndroidGovNistJavaxSipHeaderSIPDate_JAN, &AndroidGovNistJavaxSipHeaderSIPDate_FEB, &AndroidGovNistJavaxSipHeaderSIPDate_MAR, &AndroidGovNistJavaxSipHeaderSIPDate_APR, &AndroidGovNistJavaxSipHeaderSIPDate_MAY, &AndroidGovNistJavaxSipHeaderSIPDate_JUN, &AndroidGovNistJavaxSipHeaderSIPDate_JUL, &AndroidGovNistJavaxSipHeaderSIPDate_AUG, &AndroidGovNistJavaxSipHeaderSIPDate_SEP, &AndroidGovNistJavaxSipHeaderSIPDate_OCT, &AndroidGovNistJavaxSipHeaderSIPDate_NOV, &AndroidGovNistJavaxSipHeaderSIPDate_DEC };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderSIPDate = { "SIPDate", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x1, 21, 31, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderSIPDate;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void AndroidGovNistJavaxSipHeaderSIPDate_init(AndroidGovNistJavaxSipHeaderSIPDate *self) {
  NSObject_init(self);
  self->wkday_ = -1;
  self->day_ = -1;
  self->month_ = -1;
  self->year_ = -1;
  self->hour_ = -1;
  self->minute_ = -1;
  self->second_ = -1;
  JreStrongAssign(&self->javaCal_, nil);
}

AndroidGovNistJavaxSipHeaderSIPDate *new_AndroidGovNistJavaxSipHeaderSIPDate_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderSIPDate, init)
}

AndroidGovNistJavaxSipHeaderSIPDate *create_AndroidGovNistJavaxSipHeaderSIPDate_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderSIPDate, init)
}

void AndroidGovNistJavaxSipHeaderSIPDate_initWithLong_(AndroidGovNistJavaxSipHeaderSIPDate *self, jlong timeMillis) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->javaCal_, new_JavaUtilGregorianCalendar_initWithJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"GMT:0"), JavaUtilLocale_getDefault()));
  JavaUtilDate *date = create_JavaUtilDate_initWithLong_(timeMillis);
  [((JavaUtilCalendar *) nil_chk(self->javaCal_)) setTimeWithJavaUtilDate:date];
  self->wkday_ = [((JavaUtilCalendar *) nil_chk(self->javaCal_)) getWithInt:JavaUtilCalendar_DAY_OF_WEEK];
  switch (self->wkday_) {
    case JavaUtilCalendar_MONDAY:
    JreStrongAssign(&self->sipWkDay_, AndroidGovNistJavaxSipHeaderSIPDate_MON);
    break;
    case JavaUtilCalendar_TUESDAY:
    JreStrongAssign(&self->sipWkDay_, AndroidGovNistJavaxSipHeaderSIPDate_TUE);
    break;
    case JavaUtilCalendar_WEDNESDAY:
    JreStrongAssign(&self->sipWkDay_, AndroidGovNistJavaxSipHeaderSIPDate_WED);
    break;
    case JavaUtilCalendar_THURSDAY:
    JreStrongAssign(&self->sipWkDay_, AndroidGovNistJavaxSipHeaderSIPDate_THU);
    break;
    case JavaUtilCalendar_FRIDAY:
    JreStrongAssign(&self->sipWkDay_, AndroidGovNistJavaxSipHeaderSIPDate_FRI);
    break;
    case JavaUtilCalendar_SATURDAY:
    JreStrongAssign(&self->sipWkDay_, AndroidGovNistJavaxSipHeaderSIPDate_SAT);
    break;
    case JavaUtilCalendar_SUNDAY:
    JreStrongAssign(&self->sipWkDay_, AndroidGovNistJavaxSipHeaderSIPDate_SUN);
    break;
    default:
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithNSString_(JreStrcat("$I", @"No date map for wkday ", self->wkday_));
  }
  self->day_ = [((JavaUtilCalendar *) nil_chk(self->javaCal_)) getWithInt:JavaUtilCalendar_DAY_OF_MONTH];
  self->month_ = [((JavaUtilCalendar *) nil_chk(self->javaCal_)) getWithInt:JavaUtilCalendar_MONTH];
  switch (self->month_) {
    case JavaUtilCalendar_JANUARY:
    JreStrongAssign(&self->sipMonth_, AndroidGovNistJavaxSipHeaderSIPDate_JAN);
    break;
    case JavaUtilCalendar_FEBRUARY:
    JreStrongAssign(&self->sipMonth_, AndroidGovNistJavaxSipHeaderSIPDate_FEB);
    break;
    case JavaUtilCalendar_MARCH:
    JreStrongAssign(&self->sipMonth_, AndroidGovNistJavaxSipHeaderSIPDate_MAR);
    break;
    case JavaUtilCalendar_APRIL:
    JreStrongAssign(&self->sipMonth_, AndroidGovNistJavaxSipHeaderSIPDate_APR);
    break;
    case JavaUtilCalendar_MAY:
    JreStrongAssign(&self->sipMonth_, AndroidGovNistJavaxSipHeaderSIPDate_MAY);
    break;
    case JavaUtilCalendar_JUNE:
    JreStrongAssign(&self->sipMonth_, AndroidGovNistJavaxSipHeaderSIPDate_JUN);
    break;
    case JavaUtilCalendar_JULY:
    JreStrongAssign(&self->sipMonth_, AndroidGovNistJavaxSipHeaderSIPDate_JUL);
    break;
    case JavaUtilCalendar_AUGUST:
    JreStrongAssign(&self->sipMonth_, AndroidGovNistJavaxSipHeaderSIPDate_AUG);
    break;
    case JavaUtilCalendar_SEPTEMBER:
    JreStrongAssign(&self->sipMonth_, AndroidGovNistJavaxSipHeaderSIPDate_SEP);
    break;
    case JavaUtilCalendar_OCTOBER:
    JreStrongAssign(&self->sipMonth_, AndroidGovNistJavaxSipHeaderSIPDate_OCT);
    break;
    case JavaUtilCalendar_NOVEMBER:
    JreStrongAssign(&self->sipMonth_, AndroidGovNistJavaxSipHeaderSIPDate_NOV);
    break;
    case JavaUtilCalendar_DECEMBER:
    JreStrongAssign(&self->sipMonth_, AndroidGovNistJavaxSipHeaderSIPDate_DEC);
    break;
    default:
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithNSString_(JreStrcat("$I", @"No date map for month ", self->month_));
  }
  self->year_ = [((JavaUtilCalendar *) nil_chk(self->javaCal_)) getWithInt:JavaUtilCalendar_YEAR];
  self->hour_ = [((JavaUtilCalendar *) nil_chk(self->javaCal_)) getWithInt:JavaUtilCalendar_HOUR_OF_DAY];
  self->minute_ = [((JavaUtilCalendar *) nil_chk(self->javaCal_)) getWithInt:JavaUtilCalendar_MINUTE];
  self->second_ = [((JavaUtilCalendar *) nil_chk(self->javaCal_)) getWithInt:JavaUtilCalendar_SECOND];
}

AndroidGovNistJavaxSipHeaderSIPDate *new_AndroidGovNistJavaxSipHeaderSIPDate_initWithLong_(jlong timeMillis) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderSIPDate, initWithLong_, timeMillis)
}

AndroidGovNistJavaxSipHeaderSIPDate *create_AndroidGovNistJavaxSipHeaderSIPDate_initWithLong_(jlong timeMillis) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderSIPDate, initWithLong_, timeMillis)
}

void AndroidGovNistJavaxSipHeaderSIPDate_setJavaCal(AndroidGovNistJavaxSipHeaderSIPDate *self) {
  JreStrongAssignAndConsume(&self->javaCal_, new_JavaUtilGregorianCalendar_initWithJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"GMT:0"), JavaUtilLocale_getDefault()));
  if (self->year_ != -1) [self->javaCal_ setWithInt:JavaUtilCalendar_YEAR withInt:self->year_];
  if (self->day_ != -1) [((JavaUtilCalendar *) nil_chk(self->javaCal_)) setWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:self->day_];
  if (self->month_ != -1) [((JavaUtilCalendar *) nil_chk(self->javaCal_)) setWithInt:JavaUtilCalendar_MONTH withInt:self->month_];
  if (self->wkday_ != -1) [((JavaUtilCalendar *) nil_chk(self->javaCal_)) setWithInt:JavaUtilCalendar_DAY_OF_WEEK withInt:self->wkday_];
  if (self->hour_ != -1) [((JavaUtilCalendar *) nil_chk(self->javaCal_)) setWithInt:JavaUtilCalendar_HOUR withInt:self->hour_];
  if (self->minute_ != -1) [((JavaUtilCalendar *) nil_chk(self->javaCal_)) setWithInt:JavaUtilCalendar_MINUTE withInt:self->minute_];
  if (self->second_ != -1) [((JavaUtilCalendar *) nil_chk(self->javaCal_)) setWithInt:JavaUtilCalendar_SECOND withInt:self->second_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderSIPDate)
