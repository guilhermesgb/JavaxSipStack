//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/ims/Privacy.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/ims/Privacy.h"
#include "android/gov/nist/javax/sip/header/ims/PrivacyHeader.h"
#include "android/gov/nist/javax/sip/header/ims/SIPHeaderNamesIms.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/text/ParseException.h"

@interface AndroidGovNistJavaxSipHeaderImsPrivacy () {
 @public
  NSString *privacy_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipHeaderImsPrivacy, privacy_, NSString *)

@implementation AndroidGovNistJavaxSipHeaderImsPrivacy

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderImsPrivacy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)privacy {
  AndroidGovNistJavaxSipHeaderImsPrivacy_initWithNSString_(self, privacy);
  return self;
}

- (JavaLangStringBuilder *)encodeBodyWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  return [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:self->privacy_];
}

- (NSString *)getPrivacy {
  return privacy_;
}

- (void)setPrivacyWithNSString:(NSString *)privacy {
  if (privacy == nil || [@"" isEqual:privacy]) @throw create_JavaLangNullPointerException_initWithNSString_(@"JAIN-SIP Exception,  Privacy, setPrivacy(), privacy value is null or empty");
  JreStrongAssign(&self->privacy_, privacy);
}

- (void)setValueWithNSString:(NSString *)value {
  @throw create_JavaTextParseException_initWithNSString_withInt_(value, 0);
}

- (jboolean)isEqual:(id)other {
  if ([AndroidGovNistJavaxSipHeaderImsPrivacyHeader_class_() isInstance:other]) {
    id<AndroidGovNistJavaxSipHeaderImsPrivacyHeader> o = (id<AndroidGovNistJavaxSipHeaderImsPrivacyHeader>) cast_check(other, AndroidGovNistJavaxSipHeaderImsPrivacyHeader_class_());
    return ([((NSString *) nil_chk([self getPrivacy])) isEqual:[((id<AndroidGovNistJavaxSipHeaderImsPrivacyHeader>) nil_chk(o)) getPrivacy]]);
  }
  return false;
}

- (id)java_clone {
  AndroidGovNistJavaxSipHeaderImsPrivacy *retval = (AndroidGovNistJavaxSipHeaderImsPrivacy *) cast_chk([super java_clone], [AndroidGovNistJavaxSipHeaderImsPrivacy class]);
  if (self->privacy_ != nil) JreStrongAssign(&((AndroidGovNistJavaxSipHeaderImsPrivacy *) nil_chk(retval))->privacy_, self->privacy_);
  return retval;
}

- (void)dealloc {
  RELEASE_(privacy_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 0, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 0, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(encodeBodyWithJavaLangStringBuilder:);
  methods[3].selector = @selector(getPrivacy);
  methods[4].selector = @selector(setPrivacyWithNSString:);
  methods[5].selector = @selector(setValueWithNSString:);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "privacy_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "encodeBody", "LJavaLangStringBuilder;", "setPrivacy", "LJavaTextParseException;", "setValue", "equals", "LNSObject;", "clone" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderImsPrivacy = { "Privacy", "android.gov.nist.javax.sip.header.ims", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderImsPrivacy;
}

@end

void AndroidGovNistJavaxSipHeaderImsPrivacy_init(AndroidGovNistJavaxSipHeaderImsPrivacy *self) {
  AndroidGovNistJavaxSipHeaderSIPHeader_initWithNSString_(self, AndroidGovNistJavaxSipHeaderImsSIPHeaderNamesIms_PRIVACY);
}

AndroidGovNistJavaxSipHeaderImsPrivacy *new_AndroidGovNistJavaxSipHeaderImsPrivacy_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderImsPrivacy, init)
}

AndroidGovNistJavaxSipHeaderImsPrivacy *create_AndroidGovNistJavaxSipHeaderImsPrivacy_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderImsPrivacy, init)
}

void AndroidGovNistJavaxSipHeaderImsPrivacy_initWithNSString_(AndroidGovNistJavaxSipHeaderImsPrivacy *self, NSString *privacy) {
  AndroidGovNistJavaxSipHeaderImsPrivacy_init(self);
  JreStrongAssign(&self->privacy_, privacy);
}

AndroidGovNistJavaxSipHeaderImsPrivacy *new_AndroidGovNistJavaxSipHeaderImsPrivacy_initWithNSString_(NSString *privacy) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderImsPrivacy, initWithNSString_, privacy)
}

AndroidGovNistJavaxSipHeaderImsPrivacy *create_AndroidGovNistJavaxSipHeaderImsPrivacy_initWithNSString_(NSString *privacy) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderImsPrivacy, initWithNSString_, privacy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderImsPrivacy)
