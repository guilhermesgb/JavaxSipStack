//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/HeaderFactoryImpl.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/address/GenericURI.h"
#include "android/gov/nist/javax/sip/header/Accept.h"
#include "android/gov/nist/javax/sip/header/AcceptEncoding.h"
#include "android/gov/nist/javax/sip/header/AcceptLanguage.h"
#include "android/gov/nist/javax/sip/header/AlertInfo.h"
#include "android/gov/nist/javax/sip/header/Allow.h"
#include "android/gov/nist/javax/sip/header/AllowEvents.h"
#include "android/gov/nist/javax/sip/header/AuthenticationInfo.h"
#include "android/gov/nist/javax/sip/header/Authorization.h"
#include "android/gov/nist/javax/sip/header/CSeq.h"
#include "android/gov/nist/javax/sip/header/CallID.h"
#include "android/gov/nist/javax/sip/header/CallInfo.h"
#include "android/gov/nist/javax/sip/header/Contact.h"
#include "android/gov/nist/javax/sip/header/ContentDisposition.h"
#include "android/gov/nist/javax/sip/header/ContentEncoding.h"
#include "android/gov/nist/javax/sip/header/ContentLanguage.h"
#include "android/gov/nist/javax/sip/header/ContentLength.h"
#include "android/gov/nist/javax/sip/header/ContentType.h"
#include "android/gov/nist/javax/sip/header/ErrorInfo.h"
#include "android/gov/nist/javax/sip/header/Event.h"
#include "android/gov/nist/javax/sip/header/Expires.h"
#include "android/gov/nist/javax/sip/header/ExtensionHeaderImpl.h"
#include "android/gov/nist/javax/sip/header/From.h"
#include "android/gov/nist/javax/sip/header/HeaderFactoryImpl.h"
#include "android/gov/nist/javax/sip/header/InReplyTo.h"
#include "android/gov/nist/javax/sip/header/MaxForwards.h"
#include "android/gov/nist/javax/sip/header/MimeVersion.h"
#include "android/gov/nist/javax/sip/header/MinExpires.h"
#include "android/gov/nist/javax/sip/header/Organization.h"
#include "android/gov/nist/javax/sip/header/Priority.h"
#include "android/gov/nist/javax/sip/header/ProxyAuthenticate.h"
#include "android/gov/nist/javax/sip/header/ProxyAuthorization.h"
#include "android/gov/nist/javax/sip/header/ProxyRequire.h"
#include "android/gov/nist/javax/sip/header/RAck.h"
#include "android/gov/nist/javax/sip/header/RSeq.h"
#include "android/gov/nist/javax/sip/header/Reason.h"
#include "android/gov/nist/javax/sip/header/RecordRoute.h"
#include "android/gov/nist/javax/sip/header/ReferTo.h"
#include "android/gov/nist/javax/sip/header/ReplyTo.h"
#include "android/gov/nist/javax/sip/header/RequestLine.h"
#include "android/gov/nist/javax/sip/header/Require.h"
#include "android/gov/nist/javax/sip/header/RetryAfter.h"
#include "android/gov/nist/javax/sip/header/Route.h"
#include "android/gov/nist/javax/sip/header/SIPDateHeader.h"
#include "android/gov/nist/javax/sip/header/SIPETag.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderList.h"
#include "android/gov/nist/javax/sip/header/SIPIfMatch.h"
#include "android/gov/nist/javax/sip/header/Server.h"
#include "android/gov/nist/javax/sip/header/SipRequestLine.h"
#include "android/gov/nist/javax/sip/header/SipStatusLine.h"
#include "android/gov/nist/javax/sip/header/StatusLine.h"
#include "android/gov/nist/javax/sip/header/Subject.h"
#include "android/gov/nist/javax/sip/header/SubscriptionState.h"
#include "android/gov/nist/javax/sip/header/Supported.h"
#include "android/gov/nist/javax/sip/header/TimeStamp.h"
#include "android/gov/nist/javax/sip/header/To.h"
#include "android/gov/nist/javax/sip/header/Unsupported.h"
#include "android/gov/nist/javax/sip/header/UserAgent.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/header/WWWAuthenticate.h"
#include "android/gov/nist/javax/sip/header/Warning.h"
#include "android/gov/nist/javax/sip/header/extensions/Join.h"
#include "android/gov/nist/javax/sip/header/extensions/JoinHeader.h"
#include "android/gov/nist/javax/sip/header/extensions/MinSE.h"
#include "android/gov/nist/javax/sip/header/extensions/References.h"
#include "android/gov/nist/javax/sip/header/extensions/ReferencesHeader.h"
#include "android/gov/nist/javax/sip/header/extensions/ReferredBy.h"
#include "android/gov/nist/javax/sip/header/extensions/ReferredByHeader.h"
#include "android/gov/nist/javax/sip/header/extensions/Replaces.h"
#include "android/gov/nist/javax/sip/header/extensions/ReplacesHeader.h"
#include "android/gov/nist/javax/sip/header/extensions/SessionExpires.h"
#include "android/gov/nist/javax/sip/header/extensions/SessionExpiresHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PAccessNetworkInfo.h"
#include "android/gov/nist/javax/sip/header/ims/PAccessNetworkInfoHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PAssertedIdentity.h"
#include "android/gov/nist/javax/sip/header/ims/PAssertedIdentityHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PAssertedService.h"
#include "android/gov/nist/javax/sip/header/ims/PAssertedServiceHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PAssociatedURI.h"
#include "android/gov/nist/javax/sip/header/ims/PAssociatedURIHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PCalledPartyID.h"
#include "android/gov/nist/javax/sip/header/ims/PCalledPartyIDHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PChargingFunctionAddresses.h"
#include "android/gov/nist/javax/sip/header/ims/PChargingFunctionAddressesHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PChargingVector.h"
#include "android/gov/nist/javax/sip/header/ims/PChargingVectorHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PMediaAuthorization.h"
#include "android/gov/nist/javax/sip/header/ims/PMediaAuthorizationHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PPreferredIdentity.h"
#include "android/gov/nist/javax/sip/header/ims/PPreferredIdentityHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PPreferredService.h"
#include "android/gov/nist/javax/sip/header/ims/PPreferredServiceHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PProfileKey.h"
#include "android/gov/nist/javax/sip/header/ims/PProfileKeyHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PServedUser.h"
#include "android/gov/nist/javax/sip/header/ims/PServedUserHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PUserDatabase.h"
#include "android/gov/nist/javax/sip/header/ims/PUserDatabaseHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PVisitedNetworkID.h"
#include "android/gov/nist/javax/sip/header/ims/PVisitedNetworkIDHeader.h"
#include "android/gov/nist/javax/sip/header/ims/Path.h"
#include "android/gov/nist/javax/sip/header/ims/PathHeader.h"
#include "android/gov/nist/javax/sip/header/ims/Privacy.h"
#include "android/gov/nist/javax/sip/header/ims/PrivacyHeader.h"
#include "android/gov/nist/javax/sip/header/ims/SecurityClient.h"
#include "android/gov/nist/javax/sip/header/ims/SecurityClientHeader.h"
#include "android/gov/nist/javax/sip/header/ims/SecurityServer.h"
#include "android/gov/nist/javax/sip/header/ims/SecurityServerHeader.h"
#include "android/gov/nist/javax/sip/header/ims/SecurityVerify.h"
#include "android/gov/nist/javax/sip/header/ims/SecurityVerifyHeader.h"
#include "android/gov/nist/javax/sip/header/ims/ServiceRoute.h"
#include "android/gov/nist/javax/sip/header/ims/ServiceRouteHeader.h"
#include "android/gov/nist/javax/sip/parser/RequestLineParser.h"
#include "android/gov/nist/javax/sip/parser/StatusLineParser.h"
#include "android/gov/nist/javax/sip/parser/StringMsgParser.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "android/javax/sip/address/Address.h"
#include "android/javax/sip/address/URI.h"
#include "android/javax/sip/header/AcceptEncodingHeader.h"
#include "android/javax/sip/header/AcceptHeader.h"
#include "android/javax/sip/header/AcceptLanguageHeader.h"
#include "android/javax/sip/header/AlertInfoHeader.h"
#include "android/javax/sip/header/AllowEventsHeader.h"
#include "android/javax/sip/header/AllowHeader.h"
#include "android/javax/sip/header/AuthenticationInfoHeader.h"
#include "android/javax/sip/header/AuthorizationHeader.h"
#include "android/javax/sip/header/CSeqHeader.h"
#include "android/javax/sip/header/CallIdHeader.h"
#include "android/javax/sip/header/CallInfoHeader.h"
#include "android/javax/sip/header/ContactHeader.h"
#include "android/javax/sip/header/ContentDispositionHeader.h"
#include "android/javax/sip/header/ContentEncodingHeader.h"
#include "android/javax/sip/header/ContentLanguageHeader.h"
#include "android/javax/sip/header/ContentLengthHeader.h"
#include "android/javax/sip/header/ContentTypeHeader.h"
#include "android/javax/sip/header/DateHeader.h"
#include "android/javax/sip/header/ErrorInfoHeader.h"
#include "android/javax/sip/header/EventHeader.h"
#include "android/javax/sip/header/ExpiresHeader.h"
#include "android/javax/sip/header/ExtensionHeader.h"
#include "android/javax/sip/header/FromHeader.h"
#include "android/javax/sip/header/Header.h"
#include "android/javax/sip/header/InReplyToHeader.h"
#include "android/javax/sip/header/MaxForwardsHeader.h"
#include "android/javax/sip/header/MimeVersionHeader.h"
#include "android/javax/sip/header/MinExpiresHeader.h"
#include "android/javax/sip/header/OrganizationHeader.h"
#include "android/javax/sip/header/PriorityHeader.h"
#include "android/javax/sip/header/ProxyAuthenticateHeader.h"
#include "android/javax/sip/header/ProxyAuthorizationHeader.h"
#include "android/javax/sip/header/ProxyRequireHeader.h"
#include "android/javax/sip/header/RAckHeader.h"
#include "android/javax/sip/header/RSeqHeader.h"
#include "android/javax/sip/header/ReasonHeader.h"
#include "android/javax/sip/header/RecordRouteHeader.h"
#include "android/javax/sip/header/ReferToHeader.h"
#include "android/javax/sip/header/ReplyToHeader.h"
#include "android/javax/sip/header/RequireHeader.h"
#include "android/javax/sip/header/RetryAfterHeader.h"
#include "android/javax/sip/header/RouteHeader.h"
#include "android/javax/sip/header/SIPETagHeader.h"
#include "android/javax/sip/header/SIPIfMatchHeader.h"
#include "android/javax/sip/header/ServerHeader.h"
#include "android/javax/sip/header/SubjectHeader.h"
#include "android/javax/sip/header/SubscriptionStateHeader.h"
#include "android/javax/sip/header/SupportedHeader.h"
#include "android/javax/sip/header/TimeStampHeader.h"
#include "android/javax/sip/header/ToHeader.h"
#include "android/javax/sip/header/UnsupportedHeader.h"
#include "android/javax/sip/header/UserAgentHeader.h"
#include "android/javax/sip/header/ViaHeader.h"
#include "android/javax/sip/header/WWWAuthenticateHeader.h"
#include "android/javax/sip/header/WarningHeader.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/text/ParseException.h"
#include "java/util/Calendar.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

@interface AndroidGovNistJavaxSipHeaderHeaderFactoryImpl () {
 @public
  jboolean stripAddressScopeZones_;
}

@end

@implementation AndroidGovNistJavaxSipHeaderHeaderFactoryImpl

- (void)setPrettyEncodingWithBoolean:(jboolean)flag {
  AndroidGovNistJavaxSipHeaderSIPHeaderList_setPrettyEncodeWithBoolean_(flag);
}

- (id<AndroidJavaxSipHeaderAcceptEncodingHeader>)createAcceptEncodingHeaderWithNSString:(NSString *)encoding {
  if (encoding == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"the encoding parameter is null");
  AndroidGovNistJavaxSipHeaderAcceptEncoding *acceptEncoding = create_AndroidGovNistJavaxSipHeaderAcceptEncoding_init();
  [acceptEncoding setEncodingWithNSString:encoding];
  return acceptEncoding;
}

- (id<AndroidJavaxSipHeaderAcceptHeader>)createAcceptHeaderWithNSString:(NSString *)contentType
                                                           withNSString:(NSString *)contentSubType {
  if (contentType == nil || contentSubType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"contentType or subtype is null ");
  AndroidGovNistJavaxSipHeaderAccept *accept = create_AndroidGovNistJavaxSipHeaderAccept_init();
  [accept setContentTypeWithNSString:contentType];
  [accept setContentSubTypeWithNSString:contentSubType];
  return accept;
}

- (id<AndroidJavaxSipHeaderAcceptLanguageHeader>)createAcceptLanguageHeaderWithJavaUtilLocale:(JavaUtilLocale *)language {
  if (language == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg");
  AndroidGovNistJavaxSipHeaderAcceptLanguage *acceptLanguage = create_AndroidGovNistJavaxSipHeaderAcceptLanguage_init();
  [acceptLanguage setAcceptLanguageWithJavaUtilLocale:language];
  return acceptLanguage;
}

- (id<AndroidJavaxSipHeaderAlertInfoHeader>)createAlertInfoHeaderWithAndroidJavaxSipAddressURI:(id<AndroidJavaxSipAddressURI>)alertInfo {
  if (alertInfo == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg alertInfo");
  AndroidGovNistJavaxSipHeaderAlertInfo *a = create_AndroidGovNistJavaxSipHeaderAlertInfo_init();
  [a setAlertInfoWithAndroidJavaxSipAddressURI:alertInfo];
  return a;
}

- (id<AndroidJavaxSipHeaderAllowEventsHeader>)createAllowEventsHeaderWithNSString:(NSString *)eventType {
  if (eventType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg eventType");
  AndroidGovNistJavaxSipHeaderAllowEvents *allowEvents = create_AndroidGovNistJavaxSipHeaderAllowEvents_init();
  [allowEvents setEventTypeWithNSString:eventType];
  return allowEvents;
}

- (id<AndroidJavaxSipHeaderAllowHeader>)createAllowHeaderWithNSString:(NSString *)method {
  if (method == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg method");
  AndroidGovNistJavaxSipHeaderAllow *allow = create_AndroidGovNistJavaxSipHeaderAllow_init();
  [allow setMethodWithNSString:method];
  return allow;
}

- (id<AndroidJavaxSipHeaderAuthenticationInfoHeader>)createAuthenticationInfoHeaderWithNSString:(NSString *)response {
  if (response == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg response");
  AndroidGovNistJavaxSipHeaderAuthenticationInfo *auth = create_AndroidGovNistJavaxSipHeaderAuthenticationInfo_init();
  [auth setResponseWithNSString:response];
  return auth;
}

- (id<AndroidJavaxSipHeaderAuthorizationHeader>)createAuthorizationHeaderWithNSString:(NSString *)scheme {
  if (scheme == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg scheme ");
  AndroidGovNistJavaxSipHeaderAuthorization *auth = create_AndroidGovNistJavaxSipHeaderAuthorization_init();
  [auth setSchemeWithNSString:scheme];
  return auth;
}

- (id<AndroidJavaxSipHeaderCSeqHeader>)createCSeqHeaderWithLong:(jlong)sequenceNumber
                                                   withNSString:(NSString *)method {
  if (sequenceNumber < 0) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(JreStrcat("$J", @"bad arg ", sequenceNumber));
  if (method == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg method");
  AndroidGovNistJavaxSipHeaderCSeq *cseq = create_AndroidGovNistJavaxSipHeaderCSeq_init();
  [cseq setMethodWithNSString:method];
  [cseq setSeqNumberWithLong:sequenceNumber];
  return cseq;
}

- (id<AndroidJavaxSipHeaderCSeqHeader>)createCSeqHeaderWithInt:(jint)sequenceNumber
                                                  withNSString:(NSString *)method {
  return [self createCSeqHeaderWithLong:(jlong) sequenceNumber withNSString:method];
}

- (id<AndroidJavaxSipHeaderCallIdHeader>)createCallIdHeaderWithNSString:(NSString *)callId {
  if (callId == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg callId");
  AndroidGovNistJavaxSipHeaderCallID *c = create_AndroidGovNistJavaxSipHeaderCallID_init();
  [c setCallIdWithNSString:callId];
  return c;
}

- (id<AndroidJavaxSipHeaderCallInfoHeader>)createCallInfoHeaderWithAndroidJavaxSipAddressURI:(id<AndroidJavaxSipAddressURI>)callInfo {
  if (callInfo == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg callInfo");
  AndroidGovNistJavaxSipHeaderCallInfo *c = create_AndroidGovNistJavaxSipHeaderCallInfo_init();
  [c setInfoWithAndroidJavaxSipAddressURI:callInfo];
  return c;
}

- (id<AndroidJavaxSipHeaderContactHeader>)createContactHeaderWithAndroidJavaxSipAddressAddress:(id<AndroidJavaxSipAddressAddress>)address {
  if (address == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg address");
  AndroidGovNistJavaxSipHeaderContact *contact = create_AndroidGovNistJavaxSipHeaderContact_init();
  [contact setAddressWithAndroidJavaxSipAddressAddress:address];
  return contact;
}

- (id<AndroidJavaxSipHeaderContactHeader>)createContactHeader {
  AndroidGovNistJavaxSipHeaderContact *contact = create_AndroidGovNistJavaxSipHeaderContact_init();
  [contact setWildCardFlagWithBoolean:true];
  [contact setExpiresWithInt:0];
  return contact;
}

- (id<AndroidJavaxSipHeaderContentDispositionHeader>)createContentDispositionHeaderWithNSString:(NSString *)contentDisposition {
  if (contentDisposition == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg contentDisposition");
  AndroidGovNistJavaxSipHeaderContentDisposition *c = create_AndroidGovNistJavaxSipHeaderContentDisposition_init();
  [c setDispositionTypeWithNSString:contentDisposition];
  return c;
}

- (id<AndroidJavaxSipHeaderContentEncodingHeader>)createContentEncodingHeaderWithNSString:(NSString *)encoding {
  if (encoding == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null encoding");
  AndroidGovNistJavaxSipHeaderContentEncoding *c = create_AndroidGovNistJavaxSipHeaderContentEncoding_init();
  [c setEncodingWithNSString:encoding];
  return c;
}

- (id<AndroidJavaxSipHeaderContentLanguageHeader>)createContentLanguageHeaderWithJavaUtilLocale:(JavaUtilLocale *)contentLanguage {
  if (contentLanguage == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg contentLanguage");
  AndroidGovNistJavaxSipHeaderContentLanguage *c = create_AndroidGovNistJavaxSipHeaderContentLanguage_init();
  [c setContentLanguageWithJavaUtilLocale:contentLanguage];
  return c;
}

- (id<AndroidJavaxSipHeaderContentLengthHeader>)createContentLengthHeaderWithInt:(jint)contentLength {
  if (contentLength < 0) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(@"bad contentLength");
  AndroidGovNistJavaxSipHeaderContentLength *c = create_AndroidGovNistJavaxSipHeaderContentLength_init();
  [c setContentLengthWithInt:contentLength];
  return c;
}

- (id<AndroidJavaxSipHeaderContentTypeHeader>)createContentTypeHeaderWithNSString:(NSString *)contentType
                                                                     withNSString:(NSString *)contentSubType {
  if (contentType == nil || contentSubType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null contentType or subType");
  AndroidGovNistJavaxSipHeaderContentType *c = create_AndroidGovNistJavaxSipHeaderContentType_init();
  [c setContentTypeWithNSString:contentType];
  [c setContentSubTypeWithNSString:contentSubType];
  return c;
}

- (id<AndroidJavaxSipHeaderDateHeader>)createDateHeaderWithJavaUtilCalendar:(JavaUtilCalendar *)date {
  AndroidGovNistJavaxSipHeaderSIPDateHeader *d = create_AndroidGovNistJavaxSipHeaderSIPDateHeader_init();
  if (date == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null date");
  [d setDateWithJavaUtilCalendar:date];
  return d;
}

- (id<AndroidJavaxSipHeaderEventHeader>)createEventHeaderWithNSString:(NSString *)eventType {
  if (eventType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null eventType");
  AndroidGovNistJavaxSipHeaderEvent *event = create_AndroidGovNistJavaxSipHeaderEvent_init();
  [event setEventTypeWithNSString:eventType];
  return event;
}

- (id<AndroidJavaxSipHeaderExpiresHeader>)createExpiresHeaderWithInt:(jint)expires {
  if (expires < 0) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(JreStrcat("$I", @"bad value ", expires));
  AndroidGovNistJavaxSipHeaderExpires *e = create_AndroidGovNistJavaxSipHeaderExpires_init();
  [e setExpiresWithInt:expires];
  return e;
}

- (id<AndroidJavaxSipHeaderExtensionHeader>)createExtensionHeaderWithNSString:(NSString *)name
                                                                 withNSString:(NSString *)value {
  if (name == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"bad name");
  AndroidGovNistJavaxSipHeaderExtensionHeaderImpl *ext = create_AndroidGovNistJavaxSipHeaderExtensionHeaderImpl_init();
  [ext setNameWithNSString:name];
  [ext setValueWithNSString:value];
  return ext;
}

- (id<AndroidJavaxSipHeaderFromHeader>)createFromHeaderWithAndroidJavaxSipAddressAddress:(id<AndroidJavaxSipAddressAddress>)address
                                                                            withNSString:(NSString *)tag {
  if (address == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null address arg");
  AndroidGovNistJavaxSipHeaderFrom *from = create_AndroidGovNistJavaxSipHeaderFrom_init();
  [from setAddressWithAndroidJavaxSipAddressAddress:address];
  if (tag != nil) [from setTagWithNSString:tag];
  return from;
}

- (id<AndroidJavaxSipHeaderInReplyToHeader>)createInReplyToHeaderWithNSString:(NSString *)callId {
  if (callId == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null callId arg");
  AndroidGovNistJavaxSipHeaderInReplyTo *inReplyTo = create_AndroidGovNistJavaxSipHeaderInReplyTo_init();
  [inReplyTo setCallIdWithNSString:callId];
  return inReplyTo;
}

- (id<AndroidJavaxSipHeaderMaxForwardsHeader>)createMaxForwardsHeaderWithInt:(jint)maxForwards {
  if (maxForwards < 0 || maxForwards > 255) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(JreStrcat("$I", @"bad maxForwards arg ", maxForwards));
  AndroidGovNistJavaxSipHeaderMaxForwards *m = create_AndroidGovNistJavaxSipHeaderMaxForwards_init();
  [m setMaxForwardsWithInt:maxForwards];
  return m;
}

- (id<AndroidJavaxSipHeaderMimeVersionHeader>)createMimeVersionHeaderWithInt:(jint)majorVersion
                                                                     withInt:(jint)minorVersion {
  if (majorVersion < 0 || minorVersion < 0) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(@"bad major/minor version");
  AndroidGovNistJavaxSipHeaderMimeVersion *m = create_AndroidGovNistJavaxSipHeaderMimeVersion_init();
  [m setMajorVersionWithInt:majorVersion];
  [m setMinorVersionWithInt:minorVersion];
  return m;
}

- (id<AndroidJavaxSipHeaderMinExpiresHeader>)createMinExpiresHeaderWithInt:(jint)minExpires {
  if (minExpires < 0) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(JreStrcat("$I", @"bad minExpires ", minExpires));
  AndroidGovNistJavaxSipHeaderMinExpires *min = create_AndroidGovNistJavaxSipHeaderMinExpires_init();
  [min setExpiresWithInt:minExpires];
  return min;
}

- (id<AndroidJavaxSipHeaderExtensionHeader>)createMinSEHeaderWithInt:(jint)expires {
  if (expires < 0) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(JreStrcat("$I", @"bad value ", expires));
  AndroidGovNistJavaxSipHeaderExtensionsMinSE *e = create_AndroidGovNistJavaxSipHeaderExtensionsMinSE_init();
  [e setExpiresWithInt:expires];
  return e;
}

- (id<AndroidJavaxSipHeaderOrganizationHeader>)createOrganizationHeaderWithNSString:(NSString *)organization {
  if (organization == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"bad organization arg");
  AndroidGovNistJavaxSipHeaderOrganization *o = create_AndroidGovNistJavaxSipHeaderOrganization_init();
  [o setOrganizationWithNSString:organization];
  return o;
}

- (id<AndroidJavaxSipHeaderPriorityHeader>)createPriorityHeaderWithNSString:(NSString *)priority {
  if (priority == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"bad priority arg");
  AndroidGovNistJavaxSipHeaderPriority *p = create_AndroidGovNistJavaxSipHeaderPriority_init();
  [p setPriorityWithNSString:priority];
  return p;
}

- (id<AndroidJavaxSipHeaderProxyAuthenticateHeader>)createProxyAuthenticateHeaderWithNSString:(NSString *)scheme {
  if (scheme == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"bad scheme arg");
  AndroidGovNistJavaxSipHeaderProxyAuthenticate *p = create_AndroidGovNistJavaxSipHeaderProxyAuthenticate_init();
  [p setSchemeWithNSString:scheme];
  return p;
}

- (id<AndroidJavaxSipHeaderProxyAuthorizationHeader>)createProxyAuthorizationHeaderWithNSString:(NSString *)scheme {
  if (scheme == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"bad scheme arg");
  AndroidGovNistJavaxSipHeaderProxyAuthorization *p = create_AndroidGovNistJavaxSipHeaderProxyAuthorization_init();
  [p setSchemeWithNSString:scheme];
  return p;
}

- (id<AndroidJavaxSipHeaderProxyRequireHeader>)createProxyRequireHeaderWithNSString:(NSString *)optionTag {
  if (optionTag == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"bad optionTag arg");
  AndroidGovNistJavaxSipHeaderProxyRequire *p = create_AndroidGovNistJavaxSipHeaderProxyRequire_init();
  [p setOptionTagWithNSString:optionTag];
  return p;
}

- (id<AndroidJavaxSipHeaderRAckHeader>)createRAckHeaderWithLong:(jlong)rSeqNumber
                                                       withLong:(jlong)cSeqNumber
                                                   withNSString:(NSString *)method {
  if (method == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Bad method");
  if (cSeqNumber < 0 || rSeqNumber < 0) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(@"bad cseq/rseq arg");
  AndroidGovNistJavaxSipHeaderRAck *rack = create_AndroidGovNistJavaxSipHeaderRAck_init();
  [rack setMethodWithNSString:method];
  [rack setCSequenceNumberWithLong:cSeqNumber];
  [rack setRSequenceNumberWithLong:rSeqNumber];
  return rack;
}

- (id<AndroidJavaxSipHeaderRAckHeader>)createRAckHeaderWithInt:(jint)rSeqNumber
                                                       withInt:(jint)cSeqNumber
                                                  withNSString:(NSString *)method {
  return [self createRAckHeaderWithLong:(jlong) rSeqNumber withLong:(jlong) cSeqNumber withNSString:method];
}

- (id<AndroidJavaxSipHeaderRSeqHeader>)createRSeqHeaderWithInt:(jint)sequenceNumber {
  return [self createRSeqHeaderWithLong:(jlong) sequenceNumber];
}

- (id<AndroidJavaxSipHeaderRSeqHeader>)createRSeqHeaderWithLong:(jlong)sequenceNumber {
  if (sequenceNumber < 0) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(JreStrcat("$J", @"invalid sequenceNumber arg ", sequenceNumber));
  AndroidGovNistJavaxSipHeaderRSeq *rseq = create_AndroidGovNistJavaxSipHeaderRSeq_init();
  [rseq setSeqNumberWithLong:sequenceNumber];
  return rseq;
}

- (id<AndroidJavaxSipHeaderReasonHeader>)createReasonHeaderWithNSString:(NSString *)protocol
                                                                withInt:(jint)cause
                                                           withNSString:(NSString *)text {
  if (protocol == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"bad protocol arg");
  if (cause < 0) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(@"bad cause");
  AndroidGovNistJavaxSipHeaderReason *reason = create_AndroidGovNistJavaxSipHeaderReason_init();
  [reason setProtocolWithNSString:protocol];
  [reason setCauseWithInt:cause];
  [reason setTextWithNSString:text];
  return reason;
}

- (id<AndroidJavaxSipHeaderRecordRouteHeader>)createRecordRouteHeaderWithAndroidJavaxSipAddressAddress:(id<AndroidJavaxSipAddressAddress>)address {
  if (address == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Null argument!");
  AndroidGovNistJavaxSipHeaderRecordRoute *recordRoute = create_AndroidGovNistJavaxSipHeaderRecordRoute_init();
  [recordRoute setAddressWithAndroidJavaxSipAddressAddress:address];
  return recordRoute;
}

- (id<AndroidJavaxSipHeaderReplyToHeader>)createReplyToHeaderWithAndroidJavaxSipAddressAddress:(id<AndroidJavaxSipAddressAddress>)address {
  if (address == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null address");
  AndroidGovNistJavaxSipHeaderReplyTo *replyTo = create_AndroidGovNistJavaxSipHeaderReplyTo_init();
  [replyTo setAddressWithAndroidJavaxSipAddressAddress:address];
  return replyTo;
}

- (id<AndroidJavaxSipHeaderRequireHeader>)createRequireHeaderWithNSString:(NSString *)optionTag {
  if (optionTag == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null optionTag");
  AndroidGovNistJavaxSipHeaderRequire *require = create_AndroidGovNistJavaxSipHeaderRequire_init();
  [require setOptionTagWithNSString:optionTag];
  return require;
}

- (id<AndroidJavaxSipHeaderRetryAfterHeader>)createRetryAfterHeaderWithInt:(jint)retryAfter {
  if (retryAfter < 0) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(@"bad retryAfter arg");
  AndroidGovNistJavaxSipHeaderRetryAfter *r = create_AndroidGovNistJavaxSipHeaderRetryAfter_init();
  [r setRetryAfterWithInt:retryAfter];
  return r;
}

- (id<AndroidJavaxSipHeaderRouteHeader>)createRouteHeaderWithAndroidJavaxSipAddressAddress:(id<AndroidJavaxSipAddressAddress>)address {
  if (address == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null address arg");
  AndroidGovNistJavaxSipHeaderRoute *route = create_AndroidGovNistJavaxSipHeaderRoute_init();
  [route setAddressWithAndroidJavaxSipAddressAddress:address];
  return route;
}

- (id<AndroidJavaxSipHeaderServerHeader>)createServerHeaderWithJavaUtilList:(id<JavaUtilList>)product {
  if (product == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null productList arg");
  AndroidGovNistJavaxSipHeaderServer *server = create_AndroidGovNistJavaxSipHeaderServer_init();
  [server setProductWithJavaUtilList:product];
  return server;
}

- (id<AndroidJavaxSipHeaderSubjectHeader>)createSubjectHeaderWithNSString:(NSString *)subject {
  if (subject == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null subject arg");
  AndroidGovNistJavaxSipHeaderSubject *s = create_AndroidGovNistJavaxSipHeaderSubject_init();
  [s setSubjectWithNSString:subject];
  return s;
}

- (id<AndroidJavaxSipHeaderSubscriptionStateHeader>)createSubscriptionStateHeaderWithNSString:(NSString *)subscriptionState {
  if (subscriptionState == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null subscriptionState arg");
  AndroidGovNistJavaxSipHeaderSubscriptionState *s = create_AndroidGovNistJavaxSipHeaderSubscriptionState_init();
  [s setStateWithNSString:subscriptionState];
  return s;
}

- (id<AndroidJavaxSipHeaderSupportedHeader>)createSupportedHeaderWithNSString:(NSString *)optionTag {
  if (optionTag == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null optionTag arg");
  AndroidGovNistJavaxSipHeaderSupported *supported = create_AndroidGovNistJavaxSipHeaderSupported_init();
  [supported setOptionTagWithNSString:optionTag];
  return supported;
}

- (id<AndroidJavaxSipHeaderTimeStampHeader>)createTimeStampHeaderWithFloat:(jfloat)timeStamp {
  if (timeStamp < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"illegal timeStamp");
  AndroidGovNistJavaxSipHeaderTimeStamp *t = create_AndroidGovNistJavaxSipHeaderTimeStamp_init();
  [t setTimeStampWithFloat:timeStamp];
  return t;
}

- (id<AndroidJavaxSipHeaderToHeader>)createToHeaderWithAndroidJavaxSipAddressAddress:(id<AndroidJavaxSipAddressAddress>)address
                                                                        withNSString:(NSString *)tag {
  if (address == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null address");
  AndroidGovNistJavaxSipHeaderTo *to = create_AndroidGovNistJavaxSipHeaderTo_init();
  [to setAddressWithAndroidJavaxSipAddressAddress:address];
  if (tag != nil) [to setTagWithNSString:tag];
  return to;
}

- (id<AndroidJavaxSipHeaderUnsupportedHeader>)createUnsupportedHeaderWithNSString:(NSString *)optionTag {
  if (optionTag == nil) @throw create_JavaLangNullPointerException_initWithNSString_(optionTag);
  AndroidGovNistJavaxSipHeaderUnsupported *unsupported = create_AndroidGovNistJavaxSipHeaderUnsupported_init();
  [unsupported setOptionTagWithNSString:optionTag];
  return unsupported;
}

- (id<AndroidJavaxSipHeaderUserAgentHeader>)createUserAgentHeaderWithJavaUtilList:(id<JavaUtilList>)product {
  if (product == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null user agent");
  AndroidGovNistJavaxSipHeaderUserAgent *userAgent = create_AndroidGovNistJavaxSipHeaderUserAgent_init();
  [userAgent setProductWithJavaUtilList:product];
  return userAgent;
}

- (id<AndroidJavaxSipHeaderViaHeader>)createViaHeaderWithNSString:(NSString *)host
                                                          withInt:(jint)port
                                                     withNSString:(NSString *)transport
                                                     withNSString:(NSString *)branch {
  if (host == nil || transport == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg");
  AndroidGovNistJavaxSipHeaderVia *via = create_AndroidGovNistJavaxSipHeaderVia_init();
  if (branch != nil) [via setBranchWithNSString:branch];
  if ([host java_indexOf:':'] >= 0 && [host java_indexOf:'['] < 0) {
    if (stripAddressScopeZones_) {
      jint zoneStart = [host java_indexOf:'%'];
      if (zoneStart != -1) host = [host java_substring:0 endIndex:zoneStart];
    }
    host = JreStrcat("C$C", '[', host, ']');
  }
  [via setHostWithNSString:host];
  [via setPortWithInt:port];
  [via setTransportWithNSString:transport];
  return via;
}

- (id<AndroidJavaxSipHeaderWWWAuthenticateHeader>)createWWWAuthenticateHeaderWithNSString:(NSString *)scheme {
  if (scheme == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null scheme");
  AndroidGovNistJavaxSipHeaderWWWAuthenticate *www = create_AndroidGovNistJavaxSipHeaderWWWAuthenticate_init();
  [www setSchemeWithNSString:scheme];
  return www;
}

- (id<AndroidJavaxSipHeaderWarningHeader>)createWarningHeaderWithNSString:(NSString *)agent
                                                                  withInt:(jint)code
                                                             withNSString:(NSString *)comment {
  if (agent == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg");
  AndroidGovNistJavaxSipHeaderWarning *warning = create_AndroidGovNistJavaxSipHeaderWarning_init();
  [warning setAgentWithNSString:agent];
  [warning setCodeWithInt:code];
  [warning setTextWithNSString:comment];
  return warning;
}

- (id<AndroidJavaxSipHeaderErrorInfoHeader>)createErrorInfoHeaderWithAndroidJavaxSipAddressURI:(id<AndroidJavaxSipAddressURI>)errorInfo {
  if (errorInfo == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg");
  return create_AndroidGovNistJavaxSipHeaderErrorInfo_initWithAndroidGovNistJavaxSipAddressGenericURI_((AndroidGovNistJavaxSipAddressGenericURI *) cast_chk(errorInfo, [AndroidGovNistJavaxSipAddressGenericURI class]));
}

- (id<AndroidJavaxSipHeaderHeader>)createHeaderWithNSString:(NSString *)headerText {
  AndroidGovNistJavaxSipParserStringMsgParser *smp = create_AndroidGovNistJavaxSipParserStringMsgParser_init();
  AndroidGovNistJavaxSipHeaderSIPHeader *sipHeader = AndroidGovNistJavaxSipParserStringMsgParser_parseSIPHeaderWithNSString_([((NSString *) nil_chk(headerText)) java_trim]);
  if ([sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderSIPHeaderList class]]) {
    if ([((AndroidGovNistJavaxSipHeaderSIPHeaderList *) nil_chk(((AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk(sipHeader, [AndroidGovNistJavaxSipHeaderSIPHeaderList class])))) size] > 1) {
      @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", @"Only singleton allowed ", headerText), 0);
    }
    else if ([((AndroidGovNistJavaxSipHeaderSIPHeaderList *) nil_chk(((AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk(sipHeader, [AndroidGovNistJavaxSipHeaderSIPHeaderList class])))) size] == 0) {
      @try {
        return (id<AndroidJavaxSipHeaderHeader>) cast_check([((IOSClass *) nil_chk([((AndroidGovNistJavaxSipHeaderSIPHeaderList *) nil_chk(((AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk(sipHeader, [AndroidGovNistJavaxSipHeaderSIPHeaderList class])))) getMyClass])) newInstance], AndroidJavaxSipHeaderHeader_class_());
      }
      @catch (JavaLangInstantiationException *ex) {
        [((JavaLangInstantiationException *) nil_chk(ex)) printStackTrace];
        return nil;
      }
      @catch (JavaLangIllegalAccessException *ex) {
        [((JavaLangIllegalAccessException *) nil_chk(ex)) printStackTrace];
        return nil;
      }
    }
    else {
      return [((AndroidGovNistJavaxSipHeaderSIPHeaderList *) nil_chk(((AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk(sipHeader, [AndroidGovNistJavaxSipHeaderSIPHeaderList class])))) getFirst];
    }
  }
  else {
    return sipHeader;
  }
}

- (id<AndroidJavaxSipHeaderHeader>)createHeaderWithNSString:(NSString *)headerName
                                               withNSString:(NSString *)headerValue {
  if (headerName == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"header name is null");
  NSString *hdrText = [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_init() appendWithNSString:headerName])) appendWithNSString:@":"])) appendWithNSString:headerValue])) description];
  return [self createHeaderWithNSString:hdrText];
}

- (id<JavaUtilList>)createHeadersWithNSString:(NSString *)headers {
  if (headers == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg!");
  AndroidGovNistJavaxSipParserStringMsgParser *smp = create_AndroidGovNistJavaxSipParserStringMsgParser_init();
  AndroidGovNistJavaxSipHeaderSIPHeader *shdr = AndroidGovNistJavaxSipParserStringMsgParser_parseSIPHeaderWithNSString_(headers);
  if ([shdr isKindOfClass:[AndroidGovNistJavaxSipHeaderSIPHeaderList class]]) return (AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk(shdr, [AndroidGovNistJavaxSipHeaderSIPHeaderList class]);
  else @throw create_JavaTextParseException_initWithNSString_withInt_(@"List of headers of this type is not allowed in a message", 0);
}

- (id<AndroidJavaxSipHeaderReferToHeader>)createReferToHeaderWithAndroidJavaxSipAddressAddress:(id<AndroidJavaxSipAddressAddress>)address {
  if (address == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null address!");
  AndroidGovNistJavaxSipHeaderReferTo *referTo = create_AndroidGovNistJavaxSipHeaderReferTo_init();
  [referTo setAddressWithAndroidJavaxSipAddressAddress:address];
  return referTo;
}

- (id<AndroidGovNistJavaxSipHeaderExtensionsReferredByHeader>)createReferredByHeaderWithAndroidJavaxSipAddressAddress:(id<AndroidJavaxSipAddressAddress>)address {
  if (address == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null address!");
  AndroidGovNistJavaxSipHeaderExtensionsReferredBy *referredBy = create_AndroidGovNistJavaxSipHeaderExtensionsReferredBy_init();
  [referredBy setAddressWithAndroidJavaxSipAddressAddress:address];
  return referredBy;
}

- (id<AndroidGovNistJavaxSipHeaderExtensionsReplacesHeader>)createReplacesHeaderWithNSString:(NSString *)callId
                                                                                withNSString:(NSString *)toTag
                                                                                withNSString:(NSString *)fromTag {
  AndroidGovNistJavaxSipHeaderExtensionsReplaces *replaces = create_AndroidGovNistJavaxSipHeaderExtensionsReplaces_init();
  [replaces setCallIdWithNSString:callId];
  [replaces setFromTagWithNSString:fromTag];
  [replaces setToTagWithNSString:toTag];
  return replaces;
}

- (id<AndroidGovNistJavaxSipHeaderExtensionsJoinHeader>)createJoinHeaderWithNSString:(NSString *)callId
                                                                        withNSString:(NSString *)toTag
                                                                        withNSString:(NSString *)fromTag {
  AndroidGovNistJavaxSipHeaderExtensionsJoin *join = create_AndroidGovNistJavaxSipHeaderExtensionsJoin_init();
  [join setCallIdWithNSString:callId];
  [join setFromTagWithNSString:fromTag];
  [join setToTagWithNSString:toTag];
  return join;
}

- (id<AndroidJavaxSipHeaderSIPETagHeader>)createSIPETagHeaderWithNSString:(NSString *)etag {
  return create_AndroidGovNistJavaxSipHeaderSIPETag_initWithNSString_(etag);
}

- (id<AndroidJavaxSipHeaderSIPIfMatchHeader>)createSIPIfMatchHeaderWithNSString:(NSString *)etag {
  return create_AndroidGovNistJavaxSipHeaderSIPIfMatch_initWithNSString_(etag);
}

- (id<AndroidGovNistJavaxSipHeaderImsPAccessNetworkInfoHeader>)createPAccessNetworkInfoHeader {
  AndroidGovNistJavaxSipHeaderImsPAccessNetworkInfo *accessNetworkInfo = create_AndroidGovNistJavaxSipHeaderImsPAccessNetworkInfo_init();
  return accessNetworkInfo;
}

- (id<AndroidGovNistJavaxSipHeaderImsPAssertedIdentityHeader>)createPAssertedIdentityHeaderWithAndroidJavaxSipAddressAddress:(id<AndroidJavaxSipAddressAddress>)address {
  if (address == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null address!");
  AndroidGovNistJavaxSipHeaderImsPAssertedIdentity *assertedIdentity = create_AndroidGovNistJavaxSipHeaderImsPAssertedIdentity_init();
  [assertedIdentity setAddressWithAndroidJavaxSipAddressAddress:address];
  return assertedIdentity;
}

- (id<AndroidGovNistJavaxSipHeaderImsPAssociatedURIHeader>)createPAssociatedURIHeaderWithAndroidJavaxSipAddressAddress:(id<AndroidJavaxSipAddressAddress>)assocURI {
  if (assocURI == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null associatedURI!");
  AndroidGovNistJavaxSipHeaderImsPAssociatedURI *associatedURI = create_AndroidGovNistJavaxSipHeaderImsPAssociatedURI_init();
  [associatedURI setAddressWithAndroidJavaxSipAddressAddress:assocURI];
  return associatedURI;
}

- (id<AndroidGovNistJavaxSipHeaderImsPCalledPartyIDHeader>)createPCalledPartyIDHeaderWithAndroidJavaxSipAddressAddress:(id<AndroidJavaxSipAddressAddress>)address {
  if (address == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null address!");
  AndroidGovNistJavaxSipHeaderImsPCalledPartyID *calledPartyID = create_AndroidGovNistJavaxSipHeaderImsPCalledPartyID_init();
  [calledPartyID setAddressWithAndroidJavaxSipAddressAddress:address];
  return calledPartyID;
}

- (id<AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddressesHeader>)createPChargingFunctionAddressesHeader {
  AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses *cfa = create_AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses_init();
  return cfa;
}

- (id<AndroidGovNistJavaxSipHeaderImsPChargingVectorHeader>)createChargingVectorHeaderWithNSString:(NSString *)icid {
  if (icid == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null icid arg!");
  AndroidGovNistJavaxSipHeaderImsPChargingVector *chargingVector = create_AndroidGovNistJavaxSipHeaderImsPChargingVector_init();
  [chargingVector setICIDWithNSString:icid];
  return chargingVector;
}

- (id<AndroidGovNistJavaxSipHeaderImsPMediaAuthorizationHeader>)createPMediaAuthorizationHeaderWithNSString:(NSString *)token {
  if (token == nil || [@"" isEqual:token]) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(@"The Media-Authorization-Token parameter is null or empty");
  AndroidGovNistJavaxSipHeaderImsPMediaAuthorization *mediaAuthorization = create_AndroidGovNistJavaxSipHeaderImsPMediaAuthorization_init();
  [mediaAuthorization setMediaAuthorizationTokenWithNSString:token];
  return mediaAuthorization;
}

- (id<AndroidGovNistJavaxSipHeaderImsPPreferredIdentityHeader>)createPPreferredIdentityHeaderWithAndroidJavaxSipAddressAddress:(id<AndroidJavaxSipAddressAddress>)address {
  if (address == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null address!");
  AndroidGovNistJavaxSipHeaderImsPPreferredIdentity *preferredIdentity = create_AndroidGovNistJavaxSipHeaderImsPPreferredIdentity_init();
  [preferredIdentity setAddressWithAndroidJavaxSipAddressAddress:address];
  return preferredIdentity;
}

- (id<AndroidGovNistJavaxSipHeaderImsPVisitedNetworkIDHeader>)createPVisitedNetworkIDHeader {
  AndroidGovNistJavaxSipHeaderImsPVisitedNetworkID *visitedNetworkID = create_AndroidGovNistJavaxSipHeaderImsPVisitedNetworkID_init();
  return visitedNetworkID;
}

- (id<AndroidGovNistJavaxSipHeaderImsPathHeader>)createPathHeaderWithAndroidJavaxSipAddressAddress:(id<AndroidJavaxSipAddressAddress>)address {
  if (address == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null address!");
  AndroidGovNistJavaxSipHeaderImsPath *path = create_AndroidGovNistJavaxSipHeaderImsPath_init();
  [path setAddressWithAndroidJavaxSipAddressAddress:address];
  return path;
}

- (id<AndroidGovNistJavaxSipHeaderImsPrivacyHeader>)createPrivacyHeaderWithNSString:(NSString *)privacyType {
  if (privacyType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null privacyType arg");
  AndroidGovNistJavaxSipHeaderImsPrivacy *privacy = create_AndroidGovNistJavaxSipHeaderImsPrivacy_initWithNSString_(privacyType);
  return privacy;
}

- (id<AndroidGovNistJavaxSipHeaderImsServiceRouteHeader>)createServiceRouteHeaderWithAndroidJavaxSipAddressAddress:(id<AndroidJavaxSipAddressAddress>)address {
  if (address == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null address!");
  AndroidGovNistJavaxSipHeaderImsServiceRoute *serviceRoute = create_AndroidGovNistJavaxSipHeaderImsServiceRoute_init();
  [serviceRoute setAddressWithAndroidJavaxSipAddressAddress:address];
  return serviceRoute;
}

- (id<AndroidGovNistJavaxSipHeaderImsSecurityServerHeader>)createSecurityServerHeader {
  AndroidGovNistJavaxSipHeaderImsSecurityServer *secServer = create_AndroidGovNistJavaxSipHeaderImsSecurityServer_init();
  return secServer;
}

- (id<AndroidGovNistJavaxSipHeaderImsSecurityClientHeader>)createSecurityClientHeader {
  AndroidGovNistJavaxSipHeaderImsSecurityClient *secClient = create_AndroidGovNistJavaxSipHeaderImsSecurityClient_init();
  return secClient;
}

- (id<AndroidGovNistJavaxSipHeaderImsSecurityVerifyHeader>)createSecurityVerifyHeader {
  AndroidGovNistJavaxSipHeaderImsSecurityVerify *secVerify = create_AndroidGovNistJavaxSipHeaderImsSecurityVerify_init();
  return secVerify;
}

- (id<AndroidGovNistJavaxSipHeaderImsPUserDatabaseHeader>)createPUserDatabaseHeaderWithNSString:(NSString *)databaseName {
  if ((databaseName == nil) || ([((NSString *) nil_chk(databaseName)) isEqual:@" "])) @throw create_JavaLangNullPointerException_initWithNSString_(@"Database name is null");
  AndroidGovNistJavaxSipHeaderImsPUserDatabase *pUserDatabase = create_AndroidGovNistJavaxSipHeaderImsPUserDatabase_init();
  [pUserDatabase setDatabaseNameWithNSString:databaseName];
  return pUserDatabase;
}

- (id<AndroidGovNistJavaxSipHeaderImsPProfileKeyHeader>)createPProfileKeyHeaderWithAndroidJavaxSipAddressAddress:(id<AndroidJavaxSipAddressAddress>)address {
  if (address == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Address is null");
  AndroidGovNistJavaxSipHeaderImsPProfileKey *pProfileKey = create_AndroidGovNistJavaxSipHeaderImsPProfileKey_init();
  [pProfileKey setAddressWithAndroidJavaxSipAddressAddress:address];
  return pProfileKey;
}

- (id<AndroidGovNistJavaxSipHeaderImsPServedUserHeader>)createPServedUserHeaderWithAndroidJavaxSipAddressAddress:(id<AndroidJavaxSipAddressAddress>)address {
  if (address == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Address is null");
  AndroidGovNistJavaxSipHeaderImsPServedUser *psu = create_AndroidGovNistJavaxSipHeaderImsPServedUser_init();
  [psu setAddressWithAndroidJavaxSipAddressAddress:address];
  return psu;
}

- (id<AndroidGovNistJavaxSipHeaderImsPPreferredServiceHeader>)createPPreferredServiceHeader {
  AndroidGovNistJavaxSipHeaderImsPPreferredService *pps = create_AndroidGovNistJavaxSipHeaderImsPPreferredService_init();
  return pps;
}

- (id<AndroidGovNistJavaxSipHeaderImsPAssertedServiceHeader>)createPAssertedServiceHeader {
  AndroidGovNistJavaxSipHeaderImsPAssertedService *pas = create_AndroidGovNistJavaxSipHeaderImsPAssertedService_init();
  return pas;
}

- (id<AndroidGovNistJavaxSipHeaderExtensionsSessionExpiresHeader>)createSessionExpiresHeaderWithInt:(jint)expires {
  if (expires < 0) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(JreStrcat("$I", @"bad value ", expires));
  AndroidGovNistJavaxSipHeaderExtensionsSessionExpires *s = create_AndroidGovNistJavaxSipHeaderExtensionsSessionExpires_init();
  [s setExpiresWithInt:expires];
  return s;
}

- (id<AndroidGovNistJavaxSipHeaderSipRequestLine>)createRequestLineWithNSString:(NSString *)requestLine {
  AndroidGovNistJavaxSipParserRequestLineParser *requestLineParser = create_AndroidGovNistJavaxSipParserRequestLineParser_initWithNSString_(requestLine);
  return [requestLineParser parse];
}

- (id<AndroidGovNistJavaxSipHeaderSipStatusLine>)createStatusLineWithNSString:(NSString *)statusLine {
  AndroidGovNistJavaxSipParserStatusLineParser *statusLineParser = create_AndroidGovNistJavaxSipParserStatusLineParser_initWithNSString_(statusLine);
  return [statusLineParser parse];
}

- (id<AndroidGovNistJavaxSipHeaderExtensionsReferencesHeader>)createReferencesHeaderWithNSString:(NSString *)callId
                                                                                    withNSString:(NSString *)rel {
  id<AndroidGovNistJavaxSipHeaderExtensionsReferencesHeader> retval = create_AndroidGovNistJavaxSipHeaderExtensionsReferences_init();
  [retval setCallIdWithNSString:callId];
  [retval setRelWithNSString:rel];
  return retval;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderHeaderFactoryImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderAcceptEncodingHeader;", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderAcceptHeader;", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderAcceptLanguageHeader;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderAlertInfoHeader;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderAllowEventsHeader;", 0x1, 11, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderAllowHeader;", 0x1, 12, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderAuthenticationInfoHeader;", 0x1, 13, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderAuthorizationHeader;", 0x1, 14, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderCSeqHeader;", 0x1, 15, 16, 17, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderCSeqHeader;", 0x1, 15, 18, 17, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderCallIdHeader;", 0x1, 19, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderCallInfoHeader;", 0x1, 20, 10, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContactHeader;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContactHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContentDispositionHeader;", 0x1, 23, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContentEncodingHeader;", 0x1, 24, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContentLanguageHeader;", 0x1, 25, 8, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContentLengthHeader;", 0x1, 26, 27, 28, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContentTypeHeader;", 0x1, 29, 6, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderDateHeader;", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderEventHeader;", 0x1, 32, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderExpiresHeader;", 0x1, 33, 27, 28, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderExtensionHeader;", 0x1, 34, 6, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderFromHeader;", 0x1, 35, 36, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderInReplyToHeader;", 0x1, 37, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderMaxForwardsHeader;", 0x1, 38, 27, 28, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderMimeVersionHeader;", 0x1, 39, 40, 28, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderMinExpiresHeader;", 0x1, 41, 27, 28, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderExtensionHeader;", 0x1, 42, 27, 28, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderOrganizationHeader;", 0x1, 43, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderPriorityHeader;", 0x1, 44, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderProxyAuthenticateHeader;", 0x1, 45, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderProxyAuthorizationHeader;", 0x1, 46, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderProxyRequireHeader;", 0x1, 47, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderRAckHeader;", 0x1, 48, 49, 50, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderRAckHeader;", 0x1, 48, 51, 50, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderRSeqHeader;", 0x1, 52, 27, 28, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderRSeqHeader;", 0x1, 52, 53, 28, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderReasonHeader;", 0x1, 54, 55, 50, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderRecordRouteHeader;", 0x1, 56, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderReplyToHeader;", 0x1, 57, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderRequireHeader;", 0x1, 58, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderRetryAfterHeader;", 0x1, 59, 27, 28, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderRouteHeader;", 0x1, 60, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderServerHeader;", 0x1, 61, 62, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderSubjectHeader;", 0x1, 63, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderSubscriptionStateHeader;", 0x1, 64, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderSupportedHeader;", 0x1, 65, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderTimeStampHeader;", 0x1, 66, 67, 28, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderToHeader;", 0x1, 68, 36, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderUnsupportedHeader;", 0x1, 69, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderUserAgentHeader;", 0x1, 70, 62, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderViaHeader;", 0x1, 71, 72, 17, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderWWWAuthenticateHeader;", 0x1, 73, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderWarningHeader;", 0x1, 74, 55, 17, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderErrorInfoHeader;", 0x1, 75, 10, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderHeader;", 0x1, 76, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderHeader;", 0x1, 76, 6, 4, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 77, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderReferToHeader;", 0x1, 78, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderExtensionsReferredByHeader;", 0x1, 79, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderExtensionsReplacesHeader;", 0x1, 80, 81, 4, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderExtensionsJoinHeader;", 0x1, 82, 81, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderSIPETagHeader;", 0x1, 83, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderSIPIfMatchHeader;", 0x1, 84, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsPAccessNetworkInfoHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsPAssertedIdentityHeader;", 0x1, 85, 22, 86, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsPAssociatedURIHeader;", 0x1, 87, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsPCalledPartyIDHeader;", 0x1, 88, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsPChargingFunctionAddressesHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsPChargingVectorHeader;", 0x1, 89, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsPMediaAuthorizationHeader;", 0x1, 90, 3, 50, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsPPreferredIdentityHeader;", 0x1, 91, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsPVisitedNetworkIDHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsPathHeader;", 0x1, 92, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsPrivacyHeader;", 0x1, 93, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsServiceRouteHeader;", 0x1, 94, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsSecurityServerHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsSecurityClientHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsSecurityVerifyHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsPUserDatabaseHeader;", 0x1, 95, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsPProfileKeyHeader;", 0x1, 96, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsPServedUserHeader;", 0x1, 97, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsPPreferredServiceHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderImsPAssertedServiceHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderExtensionsSessionExpiresHeader;", 0x1, 98, 27, 28, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSipRequestLine;", 0x1, 99, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSipStatusLine;", 0x1, 100, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderExtensionsReferencesHeader;", 0x1, 101, 6, 4, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setPrettyEncodingWithBoolean:);
  methods[1].selector = @selector(createAcceptEncodingHeaderWithNSString:);
  methods[2].selector = @selector(createAcceptHeaderWithNSString:withNSString:);
  methods[3].selector = @selector(createAcceptLanguageHeaderWithJavaUtilLocale:);
  methods[4].selector = @selector(createAlertInfoHeaderWithAndroidJavaxSipAddressURI:);
  methods[5].selector = @selector(createAllowEventsHeaderWithNSString:);
  methods[6].selector = @selector(createAllowHeaderWithNSString:);
  methods[7].selector = @selector(createAuthenticationInfoHeaderWithNSString:);
  methods[8].selector = @selector(createAuthorizationHeaderWithNSString:);
  methods[9].selector = @selector(createCSeqHeaderWithLong:withNSString:);
  methods[10].selector = @selector(createCSeqHeaderWithInt:withNSString:);
  methods[11].selector = @selector(createCallIdHeaderWithNSString:);
  methods[12].selector = @selector(createCallInfoHeaderWithAndroidJavaxSipAddressURI:);
  methods[13].selector = @selector(createContactHeaderWithAndroidJavaxSipAddressAddress:);
  methods[14].selector = @selector(createContactHeader);
  methods[15].selector = @selector(createContentDispositionHeaderWithNSString:);
  methods[16].selector = @selector(createContentEncodingHeaderWithNSString:);
  methods[17].selector = @selector(createContentLanguageHeaderWithJavaUtilLocale:);
  methods[18].selector = @selector(createContentLengthHeaderWithInt:);
  methods[19].selector = @selector(createContentTypeHeaderWithNSString:withNSString:);
  methods[20].selector = @selector(createDateHeaderWithJavaUtilCalendar:);
  methods[21].selector = @selector(createEventHeaderWithNSString:);
  methods[22].selector = @selector(createExpiresHeaderWithInt:);
  methods[23].selector = @selector(createExtensionHeaderWithNSString:withNSString:);
  methods[24].selector = @selector(createFromHeaderWithAndroidJavaxSipAddressAddress:withNSString:);
  methods[25].selector = @selector(createInReplyToHeaderWithNSString:);
  methods[26].selector = @selector(createMaxForwardsHeaderWithInt:);
  methods[27].selector = @selector(createMimeVersionHeaderWithInt:withInt:);
  methods[28].selector = @selector(createMinExpiresHeaderWithInt:);
  methods[29].selector = @selector(createMinSEHeaderWithInt:);
  methods[30].selector = @selector(createOrganizationHeaderWithNSString:);
  methods[31].selector = @selector(createPriorityHeaderWithNSString:);
  methods[32].selector = @selector(createProxyAuthenticateHeaderWithNSString:);
  methods[33].selector = @selector(createProxyAuthorizationHeaderWithNSString:);
  methods[34].selector = @selector(createProxyRequireHeaderWithNSString:);
  methods[35].selector = @selector(createRAckHeaderWithLong:withLong:withNSString:);
  methods[36].selector = @selector(createRAckHeaderWithInt:withInt:withNSString:);
  methods[37].selector = @selector(createRSeqHeaderWithInt:);
  methods[38].selector = @selector(createRSeqHeaderWithLong:);
  methods[39].selector = @selector(createReasonHeaderWithNSString:withInt:withNSString:);
  methods[40].selector = @selector(createRecordRouteHeaderWithAndroidJavaxSipAddressAddress:);
  methods[41].selector = @selector(createReplyToHeaderWithAndroidJavaxSipAddressAddress:);
  methods[42].selector = @selector(createRequireHeaderWithNSString:);
  methods[43].selector = @selector(createRetryAfterHeaderWithInt:);
  methods[44].selector = @selector(createRouteHeaderWithAndroidJavaxSipAddressAddress:);
  methods[45].selector = @selector(createServerHeaderWithJavaUtilList:);
  methods[46].selector = @selector(createSubjectHeaderWithNSString:);
  methods[47].selector = @selector(createSubscriptionStateHeaderWithNSString:);
  methods[48].selector = @selector(createSupportedHeaderWithNSString:);
  methods[49].selector = @selector(createTimeStampHeaderWithFloat:);
  methods[50].selector = @selector(createToHeaderWithAndroidJavaxSipAddressAddress:withNSString:);
  methods[51].selector = @selector(createUnsupportedHeaderWithNSString:);
  methods[52].selector = @selector(createUserAgentHeaderWithJavaUtilList:);
  methods[53].selector = @selector(createViaHeaderWithNSString:withInt:withNSString:withNSString:);
  methods[54].selector = @selector(createWWWAuthenticateHeaderWithNSString:);
  methods[55].selector = @selector(createWarningHeaderWithNSString:withInt:withNSString:);
  methods[56].selector = @selector(createErrorInfoHeaderWithAndroidJavaxSipAddressURI:);
  methods[57].selector = @selector(createHeaderWithNSString:);
  methods[58].selector = @selector(createHeaderWithNSString:withNSString:);
  methods[59].selector = @selector(createHeadersWithNSString:);
  methods[60].selector = @selector(createReferToHeaderWithAndroidJavaxSipAddressAddress:);
  methods[61].selector = @selector(createReferredByHeaderWithAndroidJavaxSipAddressAddress:);
  methods[62].selector = @selector(createReplacesHeaderWithNSString:withNSString:withNSString:);
  methods[63].selector = @selector(createJoinHeaderWithNSString:withNSString:withNSString:);
  methods[64].selector = @selector(createSIPETagHeaderWithNSString:);
  methods[65].selector = @selector(createSIPIfMatchHeaderWithNSString:);
  methods[66].selector = @selector(createPAccessNetworkInfoHeader);
  methods[67].selector = @selector(createPAssertedIdentityHeaderWithAndroidJavaxSipAddressAddress:);
  methods[68].selector = @selector(createPAssociatedURIHeaderWithAndroidJavaxSipAddressAddress:);
  methods[69].selector = @selector(createPCalledPartyIDHeaderWithAndroidJavaxSipAddressAddress:);
  methods[70].selector = @selector(createPChargingFunctionAddressesHeader);
  methods[71].selector = @selector(createChargingVectorHeaderWithNSString:);
  methods[72].selector = @selector(createPMediaAuthorizationHeaderWithNSString:);
  methods[73].selector = @selector(createPPreferredIdentityHeaderWithAndroidJavaxSipAddressAddress:);
  methods[74].selector = @selector(createPVisitedNetworkIDHeader);
  methods[75].selector = @selector(createPathHeaderWithAndroidJavaxSipAddressAddress:);
  methods[76].selector = @selector(createPrivacyHeaderWithNSString:);
  methods[77].selector = @selector(createServiceRouteHeaderWithAndroidJavaxSipAddressAddress:);
  methods[78].selector = @selector(createSecurityServerHeader);
  methods[79].selector = @selector(createSecurityClientHeader);
  methods[80].selector = @selector(createSecurityVerifyHeader);
  methods[81].selector = @selector(createPUserDatabaseHeaderWithNSString:);
  methods[82].selector = @selector(createPProfileKeyHeaderWithAndroidJavaxSipAddressAddress:);
  methods[83].selector = @selector(createPServedUserHeaderWithAndroidJavaxSipAddressAddress:);
  methods[84].selector = @selector(createPPreferredServiceHeader);
  methods[85].selector = @selector(createPAssertedServiceHeader);
  methods[86].selector = @selector(createSessionExpiresHeaderWithInt:);
  methods[87].selector = @selector(createRequestLineWithNSString:);
  methods[88].selector = @selector(createStatusLineWithNSString:);
  methods[89].selector = @selector(createReferencesHeaderWithNSString:withNSString:);
  methods[90].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stripAddressScopeZones_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setPrettyEncoding", "Z", "createAcceptEncodingHeader", "LNSString;", "LJavaTextParseException;", "createAcceptHeader", "LNSString;LNSString;", "createAcceptLanguageHeader", "LJavaUtilLocale;", "createAlertInfoHeader", "LAndroidJavaxSipAddressURI;", "createAllowEventsHeader", "createAllowHeader", "createAuthenticationInfoHeader", "createAuthorizationHeader", "createCSeqHeader", "JLNSString;", "LJavaTextParseException;LAndroidJavaxSipInvalidArgumentException;", "ILNSString;", "createCallIdHeader", "createCallInfoHeader", "createContactHeader", "LAndroidJavaxSipAddressAddress;", "createContentDispositionHeader", "createContentEncodingHeader", "createContentLanguageHeader", "createContentLengthHeader", "I", "LAndroidJavaxSipInvalidArgumentException;", "createContentTypeHeader", "createDateHeader", "LJavaUtilCalendar;", "createEventHeader", "createExpiresHeader", "createExtensionHeader", "createFromHeader", "LAndroidJavaxSipAddressAddress;LNSString;", "createInReplyToHeader", "createMaxForwardsHeader", "createMimeVersionHeader", "II", "createMinExpiresHeader", "createMinSEHeader", "createOrganizationHeader", "createPriorityHeader", "createProxyAuthenticateHeader", "createProxyAuthorizationHeader", "createProxyRequireHeader", "createRAckHeader", "JJLNSString;", "LAndroidJavaxSipInvalidArgumentException;LJavaTextParseException;", "IILNSString;", "createRSeqHeader", "J", "createReasonHeader", "LNSString;ILNSString;", "createRecordRouteHeader", "createReplyToHeader", "createRequireHeader", "createRetryAfterHeader", "createRouteHeader", "createServerHeader", "LJavaUtilList;", "createSubjectHeader", "createSubscriptionStateHeader", "createSupportedHeader", "createTimeStampHeader", "F", "createToHeader", "createUnsupportedHeader", "createUserAgentHeader", "createViaHeader", "LNSString;ILNSString;LNSString;", "createWWWAuthenticateHeader", "createWarningHeader", "createErrorInfoHeader", "createHeader", "createHeaders", "createReferToHeader", "createReferredByHeader", "createReplacesHeader", "LNSString;LNSString;LNSString;", "createJoinHeader", "createSIPETagHeader", "createSIPIfMatchHeader", "createPAssertedIdentityHeader", "LJavaLangNullPointerException;LJavaTextParseException;", "createPAssociatedURIHeader", "createPCalledPartyIDHeader", "createChargingVectorHeader", "createPMediaAuthorizationHeader", "createPPreferredIdentityHeader", "createPathHeader", "createPrivacyHeader", "createServiceRouteHeader", "createPUserDatabaseHeader", "createPProfileKeyHeader", "createPServedUserHeader", "createSessionExpiresHeader", "createRequestLine", "createStatusLine", "createReferencesHeader" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderHeaderFactoryImpl = { "HeaderFactoryImpl", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x1, 91, 1, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderHeaderFactoryImpl;
}

@end

void AndroidGovNistJavaxSipHeaderHeaderFactoryImpl_init(AndroidGovNistJavaxSipHeaderHeaderFactoryImpl *self) {
  NSObject_init(self);
  self->stripAddressScopeZones_ = false;
  self->stripAddressScopeZones_ = JavaLangBoolean_getBooleanWithNSString_(@"gov.nist.core.STRIP_ADDR_SCOPES");
}

AndroidGovNistJavaxSipHeaderHeaderFactoryImpl *new_AndroidGovNistJavaxSipHeaderHeaderFactoryImpl_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderHeaderFactoryImpl, init)
}

AndroidGovNistJavaxSipHeaderHeaderFactoryImpl *create_AndroidGovNistJavaxSipHeaderHeaderFactoryImpl_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderHeaderFactoryImpl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderHeaderFactoryImpl)
