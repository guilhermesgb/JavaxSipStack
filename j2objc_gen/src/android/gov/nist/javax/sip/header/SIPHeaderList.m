//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/SIPHeaderList.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/core/Separators.h"
#include "android/gov/nist/javax/sip/header/ExtensionHeaderList.h"
#include "android/gov/nist/javax/sip/header/Indentation.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderList.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderNames.h"
#include "android/gov/nist/javax/sip/header/ims/PrivacyHeader.h"
#include "android/javax/sip/header/Header.h"
#include "java/lang/Exception.h"
#include "java/lang/Iterable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Constructor.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Predicate.h"
#include "java/util/function/UnaryOperator.h"
#include "java/util/stream/Stream.h"

@interface AndroidGovNistJavaxSipHeaderSIPHeaderList () {
 @public
  IOSClass *myClass_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipHeaderSIPHeaderList, myClass_, IOSClass *)

inline jboolean AndroidGovNistJavaxSipHeaderSIPHeaderList_get_prettyEncode();
inline jboolean AndroidGovNistJavaxSipHeaderSIPHeaderList_set_prettyEncode(jboolean value);
inline jboolean *AndroidGovNistJavaxSipHeaderSIPHeaderList_getRef_prettyEncode();
static jboolean AndroidGovNistJavaxSipHeaderSIPHeaderList_prettyEncode = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(AndroidGovNistJavaxSipHeaderSIPHeaderList, prettyEncode, jboolean)

__attribute__((unused)) static void AndroidGovNistJavaxSipHeaderSIPHeaderList_init(AndroidGovNistJavaxSipHeaderSIPHeaderList *self);

__attribute__((unused)) static AndroidGovNistJavaxSipHeaderSIPHeaderList *AndroidGovNistJavaxSipHeaderSIPHeaderList_clonehlistWithJavaUtilList_(AndroidGovNistJavaxSipHeaderSIPHeaderList *self, id<JavaUtilList> hlistToClone);

@implementation AndroidGovNistJavaxSipHeaderSIPHeaderList

- (NSString *)getName {
  return self->headerName_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderSIPHeaderList_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithIOSClass:(IOSClass *)objclass
                    withNSString:(NSString *)hname {
  AndroidGovNistJavaxSipHeaderSIPHeaderList_initWithIOSClass_withNSString_(self, objclass, hname);
  return self;
}

- (jboolean)addWithId:(AndroidGovNistJavaxSipHeaderSIPHeader *)objectToAdd {
  [((id<JavaUtilList>) nil_chk(hlist_)) addWithId:objectToAdd];
  return true;
}

- (void)addFirstWithAndroidGovNistJavaxSipHeaderSIPHeader:(AndroidGovNistJavaxSipHeaderSIPHeader *)obj {
  [((id<JavaUtilList>) nil_chk(hlist_)) addWithInt:0 withId:obj];
}

- (void)addWithAndroidGovNistJavaxSipHeaderSIPHeader:(AndroidGovNistJavaxSipHeaderSIPHeader *)sipheader
                                         withBoolean:(jboolean)top {
  if (top) [self addFirstWithAndroidGovNistJavaxSipHeaderSIPHeader:sipheader];
  else [self addWithId:sipheader];
}

- (void)concatenateWithAndroidGovNistJavaxSipHeaderSIPHeaderList:(AndroidGovNistJavaxSipHeaderSIPHeaderList *)other
                                                     withBoolean:(jboolean)topFlag {
  if (!topFlag) {
    [self addAllWithJavaUtilCollection:other];
  }
  else {
    [self addAllWithInt:0 withJavaUtilCollection:other];
  }
}

- (NSString *)encode {
  return [((JavaLangStringBuilder *) nil_chk([self encodeWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])) description];
}

- (JavaLangStringBuilder *)encodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  if ([((id<JavaUtilList>) nil_chk(hlist_)) isEmpty]) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:headerName_])) appendWithChar:':'])) appendWithNSString:AndroidGovNistCoreSeparators_NEWLINE];
  }
  else {
    if ([((NSString *) nil_chk(self->headerName_)) isEqual:AndroidGovNistJavaxSipHeaderSIPHeaderNames_WWW_AUTHENTICATE] || [((NSString *) nil_chk(self->headerName_)) isEqual:AndroidGovNistJavaxSipHeaderSIPHeaderNames_PROXY_AUTHENTICATE] || [((NSString *) nil_chk(self->headerName_)) isEqual:AndroidGovNistJavaxSipHeaderSIPHeaderNames_AUTHORIZATION] || [((NSString *) nil_chk(self->headerName_)) isEqual:AndroidGovNistJavaxSipHeaderSIPHeaderNames_PROXY_AUTHORIZATION] || (AndroidGovNistJavaxSipHeaderSIPHeaderList_prettyEncode && ([((NSString *) nil_chk(self->headerName_)) isEqual:AndroidGovNistJavaxSipHeaderSIPHeaderNames_VIA] || [((NSString *) nil_chk(self->headerName_)) isEqual:AndroidGovNistJavaxSipHeaderSIPHeaderNames_ROUTE] || [((NSString *) nil_chk(self->headerName_)) isEqual:AndroidGovNistJavaxSipHeaderSIPHeaderNames_RECORD_ROUTE])) || [[self java_getClass] isEqual:AndroidGovNistJavaxSipHeaderExtensionHeaderList_class_()]) {
      id<JavaUtilListIterator> li = [((id<JavaUtilList>) nil_chk(hlist_)) listIterator];
      while ([((id<JavaUtilListIterator>) nil_chk(li)) hasNext]) {
        AndroidGovNistJavaxSipHeaderSIPHeader *sipheader = [li next];
        [((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(sipheader)) encodeWithJavaLangStringBuilder:buffer];
      }
    }
    else {
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:headerName_])) appendWithNSString:AndroidGovNistCoreSeparators_COLON])) appendWithNSString:AndroidGovNistCoreSeparators_SP];
      [self encodeBodyWithJavaLangStringBuilder:buffer];
      [buffer appendWithNSString:AndroidGovNistCoreSeparators_NEWLINE];
    }
  }
  return buffer;
}

- (id<JavaUtilList>)getHeadersAsEncodedStrings {
  id<JavaUtilList> retval = create_JavaUtilLinkedList_init();
  id<JavaUtilListIterator> li = [((id<JavaUtilList>) nil_chk(hlist_)) listIterator];
  while ([((id<JavaUtilListIterator>) nil_chk(li)) hasNext]) {
    id<AndroidJavaxSipHeaderHeader> sipheader = [li next];
    [retval addWithId:[((id<AndroidJavaxSipHeaderHeader>) nil_chk(sipheader)) description]];
  }
  return retval;
}

- (id<AndroidJavaxSipHeaderHeader>)getFirst {
  if (hlist_ == nil || [hlist_ isEmpty]) return nil;
  else return [hlist_ getWithInt:0];
}

- (id<AndroidJavaxSipHeaderHeader>)getLast {
  if (hlist_ == nil || [hlist_ isEmpty]) return nil;
  return [hlist_ getWithInt:[hlist_ size] - 1];
}

- (IOSClass *)getMyClass {
  return self->myClass_;
}

- (jboolean)isEmpty {
  return [((id<JavaUtilList>) nil_chk(hlist_)) isEmpty];
}

- (id<JavaUtilListIterator>)listIterator {
  return [((id<JavaUtilList>) nil_chk(hlist_)) listIteratorWithInt:0];
}

- (id<JavaUtilList>)getHeaderList {
  return self->hlist_;
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(jint)position {
  return [((id<JavaUtilList>) nil_chk(hlist_)) listIteratorWithInt:position];
}

- (void)removeFirst {
  if ([((id<JavaUtilList>) nil_chk(hlist_)) size] != 0) [((id<JavaUtilList>) nil_chk(hlist_)) removeWithInt:0];
}

- (void)removeLast {
  if ([((id<JavaUtilList>) nil_chk(hlist_)) size] != 0) [((id<JavaUtilList>) nil_chk(hlist_)) removeWithInt:[hlist_ size] - 1];
}

- (jboolean)removeWithAndroidGovNistJavaxSipHeaderSIPHeader:(AndroidGovNistJavaxSipHeaderSIPHeader *)obj {
  if ([((id<JavaUtilList>) nil_chk(hlist_)) size] == 0) return false;
  else return [((id<JavaUtilList>) nil_chk(hlist_)) removeWithId:obj];
}

- (void)setMyClassWithIOSClass:(IOSClass *)cl {
  JreStrongAssign(&self->myClass_, cl);
}

- (NSString *)debugDumpWithInt:(jint)indentation {
  JreStrongAssign(&stringRepresentation_, @"");
  NSString *indent = [create_AndroidGovNistJavaxSipHeaderIndentation_initWithInt_(indentation) getIndentation];
  NSString *className_ = [[self java_getClass] getName];
  [self sprintWithNSString:JreStrcat("$$", indent, className_)];
  [self sprintWithNSString:JreStrcat("$C", indent, '{')];
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(hlist_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    AndroidGovNistJavaxSipHeaderSIPHeader *sipHeader = [it next];
    [self sprintWithNSString:JreStrcat("$$", indent, [((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(sipHeader)) debugDump])];
  }
  [self sprintWithNSString:JreStrcat("$C", indent, '}')];
  return stringRepresentation_;
}

- (NSString *)debugDump {
  return [self debugDumpWithInt:0];
}

- (IOSObjectArray *)toArray {
  return [((id<JavaUtilList>) nil_chk(hlist_)) toArray];
}

- (jint)indexOfWithAndroidGovNistCoreGenericObject:(AndroidGovNistCoreGenericObject *)gobj {
  return [((id<JavaUtilList>) nil_chk(hlist_)) indexOfWithId:gobj];
}

- (void)addWithInt:(jint)index
            withId:(AndroidGovNistJavaxSipHeaderSIPHeader *)sipHeader {
  [((id<JavaUtilList>) nil_chk(hlist_)) addWithInt:index withId:sipHeader];
}

- (jboolean)isEqual:(id)other {
  if (other == self) return true;
  if ([other isKindOfClass:[AndroidGovNistJavaxSipHeaderSIPHeaderList class]]) {
    AndroidGovNistJavaxSipHeaderSIPHeaderList *that = (AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk(other, [AndroidGovNistJavaxSipHeaderSIPHeaderList class]);
    if (self->hlist_ == ((AndroidGovNistJavaxSipHeaderSIPHeaderList *) nil_chk(that))->hlist_) return true;
    else if (self->hlist_ == nil) return that->hlist_ == nil || [that->hlist_ size] == 0;
    return [self->hlist_ isEqual:that->hlist_];
  }
  return false;
}

- (jboolean)matchWithAndroidGovNistJavaxSipHeaderSIPHeaderList:(AndroidGovNistJavaxSipHeaderSIPHeaderList *)template_ {
  if (template_ == nil) return true;
  if (![[self java_getClass] isEqual:[template_ java_getClass]]) return false;
  AndroidGovNistJavaxSipHeaderSIPHeaderList *that = template_;
  if (self->hlist_ == that->hlist_) return true;
  else if (self->hlist_ == nil) return false;
  else {
    for (id<JavaUtilIterator> it = [that->hlist_ iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      AndroidGovNistJavaxSipHeaderSIPHeader *sipHeader = [it next];
      jboolean found = false;
      for (id<JavaUtilIterator> it1 = [((id<JavaUtilList>) nil_chk(self->hlist_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it1)) hasNext] && !found; ) {
        AndroidGovNistJavaxSipHeaderSIPHeader *sipHeader1 = [it1 next];
        found = [((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(sipHeader1)) matchWithId:sipHeader];
      }
      if (!found) return false;
    }
    return true;
  }
}

- (id)java_clone {
  @try {
    IOSClass *clazz = [self java_getClass];
    JavaLangReflectConstructor *cons = [clazz getConstructor:nil];
    AndroidGovNistJavaxSipHeaderSIPHeaderList *retval = (AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk([((JavaLangReflectConstructor *) nil_chk(cons)) newInstanceWithNSObjectArray:nil], [AndroidGovNistJavaxSipHeaderSIPHeaderList class]);
    JreStrongAssign(&((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(retval))->headerName_, self->headerName_);
    JreStrongAssign(&retval->myClass_, self->myClass_);
    return AndroidGovNistJavaxSipHeaderSIPHeaderList_clonehlistWithJavaUtilList_(retval, self->hlist_);
  }
  @catch (JavaLangException *ex) {
    @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(@"Could not clone!", ex);
  }
}

- (AndroidGovNistJavaxSipHeaderSIPHeaderList *)clonehlistWithJavaUtilList:(id<JavaUtilList>)hlistToClone {
  return AndroidGovNistJavaxSipHeaderSIPHeaderList_clonehlistWithJavaUtilList_(self, hlistToClone);
}

- (jint)size {
  return [((id<JavaUtilList>) nil_chk(hlist_)) size];
}

- (jboolean)isHeaderList {
  return true;
}

- (NSString *)encodeBody {
  return [((JavaLangStringBuilder *) nil_chk([self encodeBodyWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])) description];
}

- (JavaLangStringBuilder *)encodeBodyWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  id<JavaUtilListIterator> iterator = [self listIterator];
  while (true) {
    AndroidGovNistJavaxSipHeaderSIPHeader *sipHeader = [((id<JavaUtilListIterator>) nil_chk(iterator)) next];
    if (sipHeader == self) @throw create_JavaLangRuntimeException_initWithNSString_(@"Unexpected circularity in SipHeaderList");
    [((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(sipHeader)) encodeBodyWithJavaLangStringBuilder:buffer];
    if ([iterator hasNext]) {
      if (![((NSString *) nil_chk(self->headerName_)) isEqual:AndroidGovNistJavaxSipHeaderImsPrivacyHeader_NAME]) [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:AndroidGovNistCoreSeparators_COMMA];
      else [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:AndroidGovNistCoreSeparators_SEMICOLON];
      continue;
    }
    else break;
  }
  return buffer;
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilList>) nil_chk(self->hlist_)) addAllWithJavaUtilCollection:collection];
}

- (jboolean)addAllWithInt:(jint)index
   withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilList>) nil_chk(self->hlist_)) addAllWithInt:index withJavaUtilCollection:collection];
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilList>) nil_chk(self->hlist_)) containsAllWithJavaUtilCollection:collection];
}

- (void)clear {
  [((id<JavaUtilList>) nil_chk(self->hlist_)) clear];
}

- (jboolean)containsWithId:(id)header {
  return [((id<JavaUtilList>) nil_chk(self->hlist_)) containsWithId:header];
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)getWithInt:(jint)index {
  return [((id<JavaUtilList>) nil_chk(self->hlist_)) getWithInt:index];
}

- (jint)indexOfWithId:(id)obj {
  return [((id<JavaUtilList>) nil_chk(self->hlist_)) indexOfWithId:obj];
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilList>) nil_chk(self->hlist_)) listIterator];
}

- (jint)lastIndexOfWithId:(id)obj {
  return [((id<JavaUtilList>) nil_chk(self->hlist_)) lastIndexOfWithId:obj];
}

- (jboolean)removeWithId:(id)obj {
  return [((id<JavaUtilList>) nil_chk(self->hlist_)) removeWithId:obj];
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)removeWithInt:(jint)index {
  return [((id<JavaUtilList>) nil_chk(self->hlist_)) removeWithInt:index];
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilList>) nil_chk(self->hlist_)) removeAllWithJavaUtilCollection:collection];
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilList>) nil_chk(self->hlist_)) retainAllWithJavaUtilCollection:collection];
}

- (id<JavaUtilList>)subListWithInt:(jint)index1
                           withInt:(jint)index2 {
  return [((id<JavaUtilList>) nil_chk(self->hlist_)) subListWithInt:index1 withInt:index2];
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(self->headerName_)) hash]);
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)setWithInt:(jint)position
                                               withId:(AndroidGovNistJavaxSipHeaderSIPHeader *)sipHeader {
  return [((id<JavaUtilList>) nil_chk(hlist_)) setWithInt:position withId:sipHeader];
}

+ (void)setPrettyEncodeWithBoolean:(jboolean)flag {
  AndroidGovNistJavaxSipHeaderSIPHeaderList_setPrettyEncodeWithBoolean_(flag);
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array {
  return [((id<JavaUtilList>) nil_chk(self->hlist_)) toArrayWithNSObjectArray:array];
}

- (void)replaceAllWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0 {
  JavaUtilList_replaceAllWithJavaUtilFunctionUnaryOperator_(self, arg0);
}

- (void)sortWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  JavaUtilList_sortWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaUtilList_spliterator(self);
}

- (id<JavaUtilStreamStream>)parallelStream {
  return JavaUtilCollection_parallelStream(self);
}

- (jboolean)removeIfWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilCollection_removeIfWithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilStreamStream>)stream {
  return JavaUtilCollection_stream(self);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(hlist_);
  RELEASE_(myClass_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 2, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 11, 12, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 16, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilListIterator;", 0x1, -1, -1, -1, 17, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 18, -1, -1 },
    { NULL, "LJavaUtilListIterator;", 0x1, 19, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x4, 23, 24, -1, 25, -1, -1 },
    { NULL, "LNSString;", 0x1, 26, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 29, 30, 31, -1, -1 },
    { NULL, "Z", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 34, 35, -1, 36, -1, -1 },
    { NULL, "LNSObject;", 0x1, 37, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeaderList;", 0x14, 38, 39, -1, 40, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x4, 41, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 42, 43, -1, 44, -1, -1 },
    { NULL, "Z", 0x1, 42, 45, -1, 46, -1, -1 },
    { NULL, "Z", 0x1, 47, 43, -1, 48, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 49, 33, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, 50, 20, -1, 51, -1, -1 },
    { NULL, "I", 0x1, 27, 33, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 52, -1, -1 },
    { NULL, "I", 0x1, 53, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 33, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, 22, 20, -1, 51, -1, -1 },
    { NULL, "Z", 0x1, 54, 43, -1, 48, -1, -1 },
    { NULL, "Z", 0x1, 55, 43, -1, 48, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 56, 57, -1, 58, -1, -1 },
    { NULL, "I", 0x1, 59, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, 60, 29, -1, 61, -1, -1 },
    { NULL, "V", 0x9, 62, 63, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 64, 65, -1, 66, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getName);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithIOSClass:withNSString:);
  methods[3].selector = @selector(addWithId:);
  methods[4].selector = @selector(addFirstWithAndroidGovNistJavaxSipHeaderSIPHeader:);
  methods[5].selector = @selector(addWithAndroidGovNistJavaxSipHeaderSIPHeader:withBoolean:);
  methods[6].selector = @selector(concatenateWithAndroidGovNistJavaxSipHeaderSIPHeaderList:withBoolean:);
  methods[7].selector = @selector(encode);
  methods[8].selector = @selector(encodeWithJavaLangStringBuilder:);
  methods[9].selector = @selector(getHeadersAsEncodedStrings);
  methods[10].selector = @selector(getFirst);
  methods[11].selector = @selector(getLast);
  methods[12].selector = @selector(getMyClass);
  methods[13].selector = @selector(isEmpty);
  methods[14].selector = @selector(listIterator);
  methods[15].selector = @selector(getHeaderList);
  methods[16].selector = @selector(listIteratorWithInt:);
  methods[17].selector = @selector(removeFirst);
  methods[18].selector = @selector(removeLast);
  methods[19].selector = @selector(removeWithAndroidGovNistJavaxSipHeaderSIPHeader:);
  methods[20].selector = @selector(setMyClassWithIOSClass:);
  methods[21].selector = @selector(debugDumpWithInt:);
  methods[22].selector = @selector(debugDump);
  methods[23].selector = @selector(toArray);
  methods[24].selector = @selector(indexOfWithAndroidGovNistCoreGenericObject:);
  methods[25].selector = @selector(addWithInt:withId:);
  methods[26].selector = @selector(isEqual:);
  methods[27].selector = @selector(matchWithAndroidGovNistJavaxSipHeaderSIPHeaderList:);
  methods[28].selector = @selector(java_clone);
  methods[29].selector = @selector(clonehlistWithJavaUtilList:);
  methods[30].selector = @selector(size);
  methods[31].selector = @selector(isHeaderList);
  methods[32].selector = @selector(encodeBody);
  methods[33].selector = @selector(encodeBodyWithJavaLangStringBuilder:);
  methods[34].selector = @selector(addAllWithJavaUtilCollection:);
  methods[35].selector = @selector(addAllWithInt:withJavaUtilCollection:);
  methods[36].selector = @selector(containsAllWithJavaUtilCollection:);
  methods[37].selector = @selector(clear);
  methods[38].selector = @selector(containsWithId:);
  methods[39].selector = @selector(getWithInt:);
  methods[40].selector = @selector(indexOfWithId:);
  methods[41].selector = @selector(iterator);
  methods[42].selector = @selector(lastIndexOfWithId:);
  methods[43].selector = @selector(removeWithId:);
  methods[44].selector = @selector(removeWithInt:);
  methods[45].selector = @selector(removeAllWithJavaUtilCollection:);
  methods[46].selector = @selector(retainAllWithJavaUtilCollection:);
  methods[47].selector = @selector(subListWithInt:withInt:);
  methods[48].selector = @selector(hash);
  methods[49].selector = @selector(setWithInt:withId:);
  methods[50].selector = @selector(setPrettyEncodeWithBoolean:);
  methods[51].selector = @selector(toArrayWithNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "prettyEncode", "Z", .constantValue.asLong = 0, 0xa, -1, 67, -1, -1 },
    { "hlist_", "LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, 68, -1 },
    { "myClass_", "LIOSClass;", .constantValue.asLong = 0, 0x2, -1, -1, 69, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;LNSString;", "(Ljava/lang/Class<THDR;>;Ljava/lang/String;)V", "add", "LAndroidGovNistJavaxSipHeaderSIPHeader;", "(THDR;)Z", "addFirst", "(THDR;)V", "LAndroidGovNistJavaxSipHeaderSIPHeader;Z", "(THDR;Z)V", "concatenate", "LAndroidGovNistJavaxSipHeaderSIPHeaderList;Z", "LJavaLangIllegalArgumentException;", "(Landroid/gov/nist/javax/sip/header/SIPHeaderList<THDR;>;Z)V", "encode", "LJavaLangStringBuilder;", "()Ljava/util/List<Ljava/lang/String;>;", "()Ljava/lang/Class<THDR;>;", "()Ljava/util/ListIterator<THDR;>;", "()Ljava/util/List<THDR;>;", "listIterator", "I", "(I)Ljava/util/ListIterator<THDR;>;", "remove", "setMyClass", "LIOSClass;", "(Ljava/lang/Class<THDR;>;)V", "debugDump", "indexOf", "LAndroidGovNistCoreGenericObject;", "ILAndroidGovNistJavaxSipHeaderSIPHeader;", "LJavaLangIndexOutOfBoundsException;", "(ITHDR;)V", "equals", "LNSObject;", "match", "LAndroidGovNistJavaxSipHeaderSIPHeaderList;", "(Landroid/gov/nist/javax/sip/header/SIPHeaderList<*>;)Z", "clone", "clonehlist", "LJavaUtilList;", "(Ljava/util/List<THDR;>;)Landroid/gov/nist/javax/sip/header/SIPHeaderList<THDR;>;", "encodeBody", "addAll", "LJavaUtilCollection;", "(Ljava/util/Collection<+THDR;>;)Z", "ILJavaUtilCollection;", "(ILjava/util/Collection<+THDR;>;)Z", "containsAll", "(Ljava/util/Collection<*>;)Z", "contains", "get", "(I)THDR;", "()Ljava/util/Iterator<THDR;>;", "lastIndexOf", "removeAll", "retainAll", "subList", "II", "(II)Ljava/util/List<THDR;>;", "hashCode", "set", "(ITHDR;)THDR;", "setPrettyEncode", "Z", "toArray", "[LNSObject;", "<T:Ljava/lang/Object;>([TT;)[TT;", &AndroidGovNistJavaxSipHeaderSIPHeaderList_prettyEncode, "Ljava/util/List<THDR;>;", "Ljava/lang/Class<THDR;>;", "<HDR:Landroid/gov/nist/javax/sip/header/SIPHeader;>Landroid/gov/nist/javax/sip/header/SIPHeader;Ljava/util/List<THDR;>;Landroid/javax/sip/header/Header;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderSIPHeaderList = { "SIPHeaderList", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x401, 52, 3, -1, -1, -1, 70, -1 };
  return &_AndroidGovNistJavaxSipHeaderSIPHeaderList;
}

@end

void AndroidGovNistJavaxSipHeaderSIPHeaderList_init(AndroidGovNistJavaxSipHeaderSIPHeaderList *self) {
  AndroidGovNistJavaxSipHeaderSIPHeader_init(self);
  JreStrongAssignAndConsume(&self->hlist_, new_JavaUtilLinkedList_init());
}

void AndroidGovNistJavaxSipHeaderSIPHeaderList_initWithIOSClass_withNSString_(AndroidGovNistJavaxSipHeaderSIPHeaderList *self, IOSClass *objclass, NSString *hname) {
  AndroidGovNistJavaxSipHeaderSIPHeaderList_init(self);
  JreStrongAssign(&self->headerName_, hname);
  JreStrongAssign(&self->myClass_, objclass);
}

AndroidGovNistJavaxSipHeaderSIPHeaderList *AndroidGovNistJavaxSipHeaderSIPHeaderList_clonehlistWithJavaUtilList_(AndroidGovNistJavaxSipHeaderSIPHeaderList *self, id<JavaUtilList> hlistToClone) {
  if (hlistToClone != nil) {
    for (id<JavaUtilIterator> it = [hlistToClone iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<AndroidJavaxSipHeaderHeader> h = [it next];
      [((id<JavaUtilList>) nil_chk(self->hlist_)) addWithId:(AndroidGovNistJavaxSipHeaderSIPHeader *) cast_chk([((id<AndroidJavaxSipHeaderHeader>) nil_chk(h)) java_clone], [AndroidGovNistJavaxSipHeaderSIPHeader class])];
    }
  }
  return self;
}

void AndroidGovNistJavaxSipHeaderSIPHeaderList_setPrettyEncodeWithBoolean_(jboolean flag) {
  AndroidGovNistJavaxSipHeaderSIPHeaderList_initialize();
  AndroidGovNistJavaxSipHeaderSIPHeaderList_prettyEncode = flag;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderSIPHeaderList)
