//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/RequestLine.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/javax/sip/address/GenericURI.h"
#include "android/gov/nist/javax/sip/header/RequestLine.h"
#include "android/gov/nist/javax/sip/header/SIPObject.h"
#include "android/javax/sip/address/URI.h"
#include "java/lang/StringBuilder.h"

inline jlong AndroidGovNistJavaxSipHeaderRequestLine_get_serialVersionUID();
#define AndroidGovNistJavaxSipHeaderRequestLine_serialVersionUID -3286426172326043129LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipHeaderRequestLine, serialVersionUID, jlong)

@implementation AndroidGovNistJavaxSipHeaderRequestLine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderRequestLine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)encode {
  return [((JavaLangStringBuilder *) nil_chk([self encodeWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])) description];
}

- (JavaLangStringBuilder *)encodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  if (method_ != nil) {
    [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:method_];
    [buffer appendWithNSString:AndroidGovNistCoreGenericObject_SP];
  }
  if (uri_ != nil) {
    [uri_ encodeWithJavaLangStringBuilder:buffer];
    [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:AndroidGovNistCoreGenericObject_SP];
  }
  [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:sipVersion_];
  [buffer appendWithNSString:AndroidGovNistCoreGenericObject_NEWLINE];
  return buffer;
}

- (AndroidGovNistJavaxSipAddressGenericURI *)getUri {
  return uri_;
}

- (instancetype)initWithAndroidGovNistJavaxSipAddressGenericURI:(AndroidGovNistJavaxSipAddressGenericURI *)requestURI
                                                   withNSString:(NSString *)method {
  AndroidGovNistJavaxSipHeaderRequestLine_initWithAndroidGovNistJavaxSipAddressGenericURI_withNSString_(self, requestURI, method);
  return self;
}

- (NSString *)getMethod {
  return method_;
}

- (NSString *)getSipVersion {
  return sipVersion_;
}

- (void)setUriWithAndroidJavaxSipAddressURI:(id<AndroidJavaxSipAddressURI>)uri {
  JreStrongAssign(&self->uri_, (AndroidGovNistJavaxSipAddressGenericURI *) cast_chk(uri, [AndroidGovNistJavaxSipAddressGenericURI class]));
}

- (void)setMethodWithNSString:(NSString *)method {
  JreStrongAssign(&self->method_, method);
}

- (void)setSipVersionWithNSString:(NSString *)version_ {
  JreStrongAssign(&self->sipVersion_, version_);
}

- (NSString *)getVersionMajor {
  if (sipVersion_ == nil) return nil;
  NSString *major = nil;
  jboolean slash = false;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(sipVersion_)) length]); i++) {
    if ([((NSString *) nil_chk(sipVersion_)) charAtWithInt:i] == '.') break;
    if (slash) {
      if (major == nil) major = JreStrcat("C", [((NSString *) nil_chk(sipVersion_)) charAtWithInt:i]);
      else JreStrAppend(&major, "C", [((NSString *) nil_chk(sipVersion_)) charAtWithInt:i]);
    }
    if ([((NSString *) nil_chk(sipVersion_)) charAtWithInt:i] == '/') slash = true;
  }
  return major;
}

- (NSString *)getVersionMinor {
  if (sipVersion_ == nil) return nil;
  NSString *minor = nil;
  jboolean dot = false;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(sipVersion_)) length]); i++) {
    if (dot) {
      if (minor == nil) minor = JreStrcat("C", [((NSString *) nil_chk(sipVersion_)) charAtWithInt:i]);
      else JreStrAppend(&minor, "C", [((NSString *) nil_chk(sipVersion_)) charAtWithInt:i]);
    }
    if ([((NSString *) nil_chk(sipVersion_)) charAtWithInt:i] == '.') dot = true;
  }
  return minor;
}

- (jboolean)isEqual:(id)other {
  if (other == nil) return false;
  if (self == other) return true;
  if (![[other java_getClass] isEqual:[self java_getClass]]) {
    return false;
  }
  AndroidGovNistJavaxSipHeaderRequestLine *that = (AndroidGovNistJavaxSipHeaderRequestLine *) cast_chk(other, [AndroidGovNistJavaxSipHeaderRequestLine class]);
  if (self->method_ == nil) {
    if (that->method_ != nil) return false;
  }
  else if (![self->method_ isEqual:that->method_]) return false;
  if (self->sipVersion_ == nil) {
    if (that->sipVersion_ != nil) return false;
  }
  else if (![self->sipVersion_ isEqual:that->sipVersion_]) return false;
  if (self->uri_ == nil) {
    if (that->uri_ != nil) return false;
  }
  else if (![self->uri_ isEqual:that->uri_]) return false;
  return true;
}

- (id)java_clone {
  AndroidGovNistJavaxSipHeaderRequestLine *retval = (AndroidGovNistJavaxSipHeaderRequestLine *) cast_chk([super java_clone], [AndroidGovNistJavaxSipHeaderRequestLine class]);
  if (self->uri_ != nil) JreStrongAssign(&((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk(retval))->uri_, (AndroidGovNistJavaxSipAddressGenericURI *) cast_chk([self->uri_ java_clone], [AndroidGovNistJavaxSipAddressGenericURI class]));
  return retval;
}

- (void)dealloc {
  RELEASE_(uri_);
  RELEASE_(method_);
  RELEASE_(sipVersion_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipAddressGenericURI;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(encode);
  methods[2].selector = @selector(encodeWithJavaLangStringBuilder:);
  methods[3].selector = @selector(getUri);
  methods[4].selector = @selector(initWithAndroidGovNistJavaxSipAddressGenericURI:withNSString:);
  methods[5].selector = @selector(getMethod);
  methods[6].selector = @selector(getSipVersion);
  methods[7].selector = @selector(setUriWithAndroidJavaxSipAddressURI:);
  methods[8].selector = @selector(setMethodWithNSString:);
  methods[9].selector = @selector(setSipVersionWithNSString:);
  methods[10].selector = @selector(getVersionMajor);
  methods[11].selector = @selector(getVersionMinor);
  methods[12].selector = @selector(isEqual:);
  methods[13].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipHeaderRequestLine_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "uri_", "LAndroidGovNistJavaxSipAddressGenericURI;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "method_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sipVersion_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "encode", "LJavaLangStringBuilder;", "LAndroidGovNistJavaxSipAddressGenericURI;LNSString;", "setUri", "LAndroidJavaxSipAddressURI;", "setMethod", "LNSString;", "setSipVersion", "equals", "LNSObject;", "clone" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderRequestLine = { "RequestLine", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x1, 14, 4, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderRequestLine;
}

@end

void AndroidGovNistJavaxSipHeaderRequestLine_init(AndroidGovNistJavaxSipHeaderRequestLine *self) {
  AndroidGovNistJavaxSipHeaderSIPObject_init(self);
  JreStrongAssign(&self->sipVersion_, @"SIP/2.0");
}

AndroidGovNistJavaxSipHeaderRequestLine *new_AndroidGovNistJavaxSipHeaderRequestLine_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderRequestLine, init)
}

AndroidGovNistJavaxSipHeaderRequestLine *create_AndroidGovNistJavaxSipHeaderRequestLine_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderRequestLine, init)
}

void AndroidGovNistJavaxSipHeaderRequestLine_initWithAndroidGovNistJavaxSipAddressGenericURI_withNSString_(AndroidGovNistJavaxSipHeaderRequestLine *self, AndroidGovNistJavaxSipAddressGenericURI *requestURI, NSString *method) {
  AndroidGovNistJavaxSipHeaderSIPObject_init(self);
  JreStrongAssign(&self->uri_, requestURI);
  JreStrongAssign(&self->method_, method);
  JreStrongAssign(&self->sipVersion_, @"SIP/2.0");
}

AndroidGovNistJavaxSipHeaderRequestLine *new_AndroidGovNistJavaxSipHeaderRequestLine_initWithAndroidGovNistJavaxSipAddressGenericURI_withNSString_(AndroidGovNistJavaxSipAddressGenericURI *requestURI, NSString *method) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderRequestLine, initWithAndroidGovNistJavaxSipAddressGenericURI_withNSString_, requestURI, method)
}

AndroidGovNistJavaxSipHeaderRequestLine *create_AndroidGovNistJavaxSipHeaderRequestLine_initWithAndroidGovNistJavaxSipAddressGenericURI_withNSString_(AndroidGovNistJavaxSipAddressGenericURI *requestURI, NSString *method) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderRequestLine, initWithAndroidGovNistJavaxSipAddressGenericURI_withNSString_, requestURI, method)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderRequestLine)
