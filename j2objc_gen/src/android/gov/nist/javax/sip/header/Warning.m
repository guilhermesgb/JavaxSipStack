//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/Warning.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderNames.h"
#include "android/gov/nist/javax/sip/header/Warning.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/text/ParseException.h"

inline jlong AndroidGovNistJavaxSipHeaderWarning_get_serialVersionUID();
#define AndroidGovNistJavaxSipHeaderWarning_serialVersionUID -3433328864230783899LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipHeaderWarning, serialVersionUID, jlong)

@implementation AndroidGovNistJavaxSipHeaderWarning

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderWarning_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangStringBuilder *)encodeBodyWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  return text_ != nil ? [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:JavaLangInteger_toStringWithInt_(code_)])) appendWithNSString:AndroidGovNistCoreGenericObject_SP])) appendWithNSString:agent_])) appendWithNSString:AndroidGovNistCoreGenericObject_SP])) appendWithNSString:AndroidGovNistCoreGenericObject_DOUBLE_QUOTE])) appendWithNSString:text_])) appendWithNSString:AndroidGovNistCoreGenericObject_DOUBLE_QUOTE] : [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:JavaLangInteger_toStringWithInt_(code_)])) appendWithNSString:AndroidGovNistCoreGenericObject_SP])) appendWithNSString:agent_];
}

- (jint)getCode {
  return code_;
}

- (NSString *)getAgent {
  return agent_;
}

- (NSString *)getText {
  return text_;
}

- (void)setCodeWithInt:(jint)code {
  if (code > 99 && code < 1000) {
    self->code_ = code;
  }
  else @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(JreStrcat("$I", @"Code parameter in the Warning header is invalid: code=", code));
}

- (void)setAgentWithNSString:(NSString *)host {
  if (host == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"the host parameter in the Warning header is null");
  else {
    JreStrongAssign(&self->agent_, host);
  }
}

- (void)setTextWithNSString:(NSString *)text {
  if (text == nil) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(@"The text parameter in the Warning header is null", 0);
  }
  else JreStrongAssign(&self->text_, text);
}

- (void)dealloc {
  RELEASE_(agent_);
  RELEASE_(text_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 6, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(encodeBodyWithJavaLangStringBuilder:);
  methods[2].selector = @selector(getCode);
  methods[3].selector = @selector(getAgent);
  methods[4].selector = @selector(getText);
  methods[5].selector = @selector(setCodeWithInt:);
  methods[6].selector = @selector(setAgentWithNSString:);
  methods[7].selector = @selector(setTextWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipHeaderWarning_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "code_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "agent_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "text_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "encodeBody", "LJavaLangStringBuilder;", "setCode", "I", "LAndroidJavaxSipInvalidArgumentException;", "setAgent", "LNSString;", "LJavaTextParseException;", "setText" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderWarning = { "Warning", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x1, 8, 4, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderWarning;
}

@end

void AndroidGovNistJavaxSipHeaderWarning_init(AndroidGovNistJavaxSipHeaderWarning *self) {
  AndroidGovNistJavaxSipHeaderSIPHeader_initWithNSString_(self, AndroidGovNistJavaxSipHeaderSIPHeaderNames_WARNING);
}

AndroidGovNistJavaxSipHeaderWarning *new_AndroidGovNistJavaxSipHeaderWarning_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderWarning, init)
}

AndroidGovNistJavaxSipHeaderWarning *create_AndroidGovNistJavaxSipHeaderWarning_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderWarning, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderWarning)
