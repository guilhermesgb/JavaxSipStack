//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/AllowList.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/header/Allow.h"
#include "android/gov/nist/javax/sip/header/AllowList.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderList.h"
#include "android/javax/sip/header/AllowHeader.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong AndroidGovNistJavaxSipHeaderAllowList_get_serialVersionUID();
#define AndroidGovNistJavaxSipHeaderAllowList_serialVersionUID -4699795429662562358LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipHeaderAllowList, serialVersionUID, jlong)

@implementation AndroidGovNistJavaxSipHeaderAllowList

- (id)java_clone {
  AndroidGovNistJavaxSipHeaderAllowList *retval = create_AndroidGovNistJavaxSipHeaderAllowList_init();
  [retval clonehlistWithJavaUtilList:self->hlist_];
  return retval;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderAllowList_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilListIterator>)getMethods {
  JavaUtilLinkedList *ll = create_JavaUtilLinkedList_init();
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(self->hlist_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    AndroidGovNistJavaxSipHeaderAllow *a = [it next];
    [ll addWithId:[((AndroidGovNistJavaxSipHeaderAllow *) nil_chk(a)) getMethod]];
  }
  return [ll listIterator];
}

- (void)setMethodsWithJavaUtilList:(id<JavaUtilList>)methods {
  id<JavaUtilListIterator> it = [((id<JavaUtilList>) nil_chk(methods)) listIterator];
  while ([((id<JavaUtilListIterator>) nil_chk(it)) hasNext]) {
    AndroidGovNistJavaxSipHeaderAllow *allow = create_AndroidGovNistJavaxSipHeaderAllow_init();
    [allow setMethodWithNSString:[it next]];
    [self addWithId:allow];
  }
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilListIterator;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(java_clone);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(getMethods);
  methods[3].selector = @selector(setMethodsWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipHeaderAllowList_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "clone", "()Ljava/util/ListIterator<Ljava/lang/String;>;", "setMethods", "LJavaUtilList;", "LJavaTextParseException;", "(Ljava/util/List<Ljava/lang/String;>;)V", "Landroid/gov/nist/javax/sip/header/SIPHeaderList<Landroid/gov/nist/javax/sip/header/Allow;>;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderAllowList = { "AllowList", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, 6, -1 };
  return &_AndroidGovNistJavaxSipHeaderAllowList;
}

@end

void AndroidGovNistJavaxSipHeaderAllowList_init(AndroidGovNistJavaxSipHeaderAllowList *self) {
  AndroidGovNistJavaxSipHeaderSIPHeaderList_initWithIOSClass_withNSString_(self, AndroidGovNistJavaxSipHeaderAllow_class_(), AndroidJavaxSipHeaderAllowHeader_NAME);
}

AndroidGovNistJavaxSipHeaderAllowList *new_AndroidGovNistJavaxSipHeaderAllowList_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderAllowList, init)
}

AndroidGovNistJavaxSipHeaderAllowList *create_AndroidGovNistJavaxSipHeaderAllowList_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderAllowList, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderAllowList)
