//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/ParametersHeader.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/DuplicateNameValueList.h"
#include "android/gov/nist/core/NameValue.h"
#include "android/gov/nist/core/NameValueList.h"
#include "android/gov/nist/javax/sip/address/GenericURI.h"
#include "android/gov/nist/javax/sip/header/ParametersHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/javax/sip/header/Parameters.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/text/ParseException.h"
#include "java/util/Iterator.h"

@implementation AndroidGovNistJavaxSipHeaderParametersHeader

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderParametersHeader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)hdrName {
  AndroidGovNistJavaxSipHeaderParametersHeader_initWithNSString_(self, hdrName);
  return self;
}

- (instancetype)initWithNSString:(NSString *)hdrName
                     withBoolean:(jboolean)sync {
  AndroidGovNistJavaxSipHeaderParametersHeader_initWithNSString_withBoolean_(self, hdrName, sync);
  return self;
}

- (NSString *)getParameterWithNSString:(NSString *)name {
  return [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) getParameterWithNSString:name];
}

- (NSString *)getParameterWithNSString:(NSString *)name
                           withBoolean:(jboolean)stripQuotes {
  return [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) getParameterWithNSString:name withBoolean:stripQuotes];
}

- (id)getParameterValueWithNSString:(NSString *)name {
  return [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) getValueWithNSString:name];
}

- (id<JavaUtilIterator>)getParameterNames {
  return [((AndroidGovNistCoreNameValueList *) nil_chk(parameters_)) getNames];
}

- (jboolean)hasParameters {
  return parameters_ != nil && ![parameters_ isEmpty];
}

- (void)removeParameterWithNSString:(NSString *)name {
  [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) delete__WithNSString:name];
}

- (void)setParameterWithNSString:(NSString *)name
                    withNSString:(NSString *)value {
  AndroidGovNistCoreNameValue *nv = [((AndroidGovNistCoreNameValueList *) nil_chk(parameters_)) getNameValueWithNSString:name];
  if (nv != nil) {
    [nv setValueAsObjectWithId:value];
  }
  else {
    nv = create_AndroidGovNistCoreNameValue_initWithNSString_withId_(name, value);
    [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) setWithAndroidGovNistCoreNameValue:nv];
  }
}

- (void)setQuotedParameterWithNSString:(NSString *)name
                          withNSString:(NSString *)value {
  AndroidGovNistCoreNameValue *nv = [((AndroidGovNistCoreNameValueList *) nil_chk(parameters_)) getNameValueWithNSString:name];
  if (nv != nil) {
    [nv setValueAsObjectWithId:value];
    [nv setQuotedValue];
  }
  else {
    nv = create_AndroidGovNistCoreNameValue_initWithNSString_withId_(name, value);
    [nv setQuotedValue];
    [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) setWithAndroidGovNistCoreNameValue:nv];
  }
}

- (void)setParameterWithNSString:(NSString *)name
                         withInt:(jint)value {
  JavaLangInteger *val = JavaLangInteger_valueOfWithInt_(value);
  [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) setWithNSString:name withId:val];
}

- (void)setParameterWithNSString:(NSString *)name
                     withBoolean:(jboolean)value {
  JavaLangBoolean *val = JavaLangBoolean_valueOfWithBoolean_(value);
  [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) setWithNSString:name withId:val];
}

- (void)setParameterWithNSString:(NSString *)name
                       withFloat:(jfloat)value {
  JavaLangFloat *val = JavaLangFloat_valueOfWithFloat_(value);
  AndroidGovNistCoreNameValue *nv = [((AndroidGovNistCoreNameValueList *) nil_chk(parameters_)) getNameValueWithNSString:name];
  if (nv != nil) {
    [nv setValueAsObjectWithId:val];
  }
  else {
    nv = create_AndroidGovNistCoreNameValue_initWithNSString_withId_(name, val);
    [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) setWithAndroidGovNistCoreNameValue:nv];
  }
}

- (void)setParameterWithNSString:(NSString *)name
                          withId:(id)value {
  [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) setWithNSString:name withId:value];
}

- (jboolean)hasParameterWithNSString:(NSString *)parameterName {
  return [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) hasNameValueWithNSString:parameterName];
}

- (void)removeParameters {
  JreStrongAssignAndConsume(&self->parameters_, new_AndroidGovNistCoreNameValueList_init());
}

- (AndroidGovNistCoreNameValueList *)getParameters {
  return parameters_;
}

- (void)setParameterWithAndroidGovNistCoreNameValue:(AndroidGovNistCoreNameValue *)nameValue {
  [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) setWithAndroidGovNistCoreNameValue:nameValue];
}

- (void)setParametersWithAndroidGovNistCoreNameValueList:(AndroidGovNistCoreNameValueList *)parameters {
  JreStrongAssign(&self->parameters_, parameters);
}

- (jint)getParameterAsIntWithNSString:(NSString *)parameterName {
  if ([self getParameterValueWithNSString:parameterName] != nil) {
    @try {
      if ([[self getParameterValueWithNSString:parameterName] isKindOfClass:[NSString class]]) {
        return JavaLangInteger_parseIntWithNSString_([self getParameterWithNSString:parameterName]);
      }
      else {
        return [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([self getParameterValueWithNSString:parameterName], [JavaLangInteger class])))) intValue];
      }
    }
    @catch (JavaLangNumberFormatException *ex) {
      return -1;
    }
  }
  else return -1;
}

- (jint)getParameterAsHexIntWithNSString:(NSString *)parameterName {
  if ([self getParameterValueWithNSString:parameterName] != nil) {
    @try {
      if ([[self getParameterValueWithNSString:parameterName] isKindOfClass:[NSString class]]) {
        return JavaLangInteger_parseIntWithNSString_withInt_([self getParameterWithNSString:parameterName], 16);
      }
      else {
        return [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([self getParameterValueWithNSString:parameterName], [JavaLangInteger class])))) intValue];
      }
    }
    @catch (JavaLangNumberFormatException *ex) {
      return -1;
    }
  }
  else return -1;
}

- (jfloat)getParameterAsFloatWithNSString:(NSString *)parameterName {
  if ([self getParameterValueWithNSString:parameterName] != nil) {
    @try {
      if ([[self getParameterValueWithNSString:parameterName] isKindOfClass:[NSString class]]) {
        return JavaLangFloat_parseFloatWithNSString_([self getParameterWithNSString:parameterName]);
      }
      else {
        return [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk([self getParameterValueWithNSString:parameterName], [JavaLangFloat class])))) floatValue];
      }
    }
    @catch (JavaLangNumberFormatException *ex) {
      return -1;
    }
  }
  else return -1;
}

- (jlong)getParameterAsLongWithNSString:(NSString *)parameterName {
  if ([self getParameterValueWithNSString:parameterName] != nil) {
    @try {
      if ([[self getParameterValueWithNSString:parameterName] isKindOfClass:[NSString class]]) {
        return JavaLangLong_parseLongWithNSString_([self getParameterWithNSString:parameterName]);
      }
      else {
        return [((JavaLangLong *) nil_chk(((JavaLangLong *) cast_chk([self getParameterValueWithNSString:parameterName], [JavaLangLong class])))) longLongValue];
      }
    }
    @catch (JavaLangNumberFormatException *ex) {
      return -1;
    }
  }
  else return -1;
}

- (AndroidGovNistJavaxSipAddressGenericURI *)getParameterAsURIWithNSString:(NSString *)parameterName {
  id val = [self getParameterValueWithNSString:parameterName];
  if ([val isKindOfClass:[AndroidGovNistJavaxSipAddressGenericURI class]]) return (AndroidGovNistJavaxSipAddressGenericURI *) cast_chk(val, [AndroidGovNistJavaxSipAddressGenericURI class]);
  else {
    @try {
      return create_AndroidGovNistJavaxSipAddressGenericURI_initWithNSString_((NSString *) cast_chk(val, [NSString class]));
    }
    @catch (JavaTextParseException *ex) {
      return nil;
    }
  }
}

- (jboolean)getParameterAsBooleanWithNSString:(NSString *)parameterName {
  id val = [self getParameterValueWithNSString:parameterName];
  if (val == nil) {
    return false;
  }
  else if ([val isKindOfClass:[JavaLangBoolean class]]) {
    return [((JavaLangBoolean *) cast_chk(val, [JavaLangBoolean class])) booleanValue];
  }
  else if ([val isKindOfClass:[NSString class]]) {
    return [((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_((NSString *) cast_chk(val, [NSString class])))) booleanValue];
  }
  else return false;
}

- (AndroidGovNistCoreNameValue *)getNameValueWithNSString:(NSString *)parameterName {
  return [((AndroidGovNistCoreNameValueList *) nil_chk(parameters_)) getNameValueWithNSString:parameterName];
}

- (id)java_clone {
  AndroidGovNistJavaxSipHeaderParametersHeader *retval = (AndroidGovNistJavaxSipHeaderParametersHeader *) cast_chk([super java_clone], [AndroidGovNistJavaxSipHeaderParametersHeader class]);
  if (self->parameters_ != nil) JreStrongAssign(&((AndroidGovNistJavaxSipHeaderParametersHeader *) nil_chk(retval))->parameters_, (AndroidGovNistCoreNameValueList *) cast_chk([self->parameters_ java_clone], [AndroidGovNistCoreNameValueList class]));
  return retval;
}

- (void)setMultiParameterWithNSString:(NSString *)name
                         withNSString:(NSString *)value {
  AndroidGovNistCoreNameValue *nv = create_AndroidGovNistCoreNameValue_init();
  [nv setNameWithNSString:name];
  [nv setValueWithId:value];
  [((AndroidGovNistCoreDuplicateNameValueList *) nil_chk(duplicates_)) setWithAndroidGovNistCoreNameValue:nv];
}

- (void)setMultiParameterWithAndroidGovNistCoreNameValue:(AndroidGovNistCoreNameValue *)nameValue {
  [((AndroidGovNistCoreDuplicateNameValueList *) nil_chk(self->duplicates_)) setWithAndroidGovNistCoreNameValue:nameValue];
}

- (NSString *)getMultiParameterWithNSString:(NSString *)name {
  return [((AndroidGovNistCoreDuplicateNameValueList *) nil_chk(self->duplicates_)) getParameterWithNSString:name];
}

- (AndroidGovNistCoreDuplicateNameValueList *)getMultiParameters {
  return duplicates_;
}

- (id)getMultiParameterValueWithNSString:(NSString *)name {
  return [((AndroidGovNistCoreDuplicateNameValueList *) nil_chk(self->duplicates_)) getValueWithNSString:name];
}

- (id<JavaUtilIterator>)getMultiParameterNames {
  return [((AndroidGovNistCoreDuplicateNameValueList *) nil_chk(duplicates_)) getNames];
}

- (jboolean)hasMultiParameters {
  return duplicates_ != nil && ![duplicates_ isEmpty];
}

- (void)removeMultiParameterWithNSString:(NSString *)name {
  [((AndroidGovNistCoreDuplicateNameValueList *) nil_chk(self->duplicates_)) delete__WithNSString:name];
}

- (jboolean)hasMultiParameterWithNSString:(NSString *)parameterName {
  return [((AndroidGovNistCoreDuplicateNameValueList *) nil_chk(self->duplicates_)) hasNameValueWithNSString:parameterName];
}

- (void)removeMultiParameters {
  JreStrongAssignAndConsume(&self->duplicates_, new_AndroidGovNistCoreDuplicateNameValueList_init());
}

- (jboolean)equalParametersWithAndroidJavaxSipHeaderParameters:(id<AndroidJavaxSipHeaderParameters>)other {
  if (self == other) return true;
  for (id<JavaUtilIterator> i = [self getParameterNames]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    NSString *pname = (NSString *) cast_chk([i next], [NSString class]);
    NSString *p1 = [self getParameterWithNSString:pname];
    NSString *p2 = [((id<AndroidJavaxSipHeaderParameters>) nil_chk(other)) getParameterWithNSString:pname];
    if (p1 == nil ^ p2 == nil) return false;
    else if (p1 != nil && ![p1 java_equalsIgnoreCase:p2]) return false;
  }
  for (id<JavaUtilIterator> i = [((id<AndroidJavaxSipHeaderParameters>) nil_chk(other)) getParameterNames]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    NSString *pname = (NSString *) cast_chk([i next], [NSString class]);
    NSString *p1 = [other getParameterWithNSString:pname];
    NSString *p2 = [self getParameterWithNSString:pname];
    if (p1 == nil ^ p2 == nil) return false;
    else if (p1 != nil && ![p1 java_equalsIgnoreCase:p2]) return false;
  }
  return true;
}

- (JavaLangStringBuilder *)encodeBodyWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(parameters_);
  RELEASE_(duplicates_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValueList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 17, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 18, 0, -1, -1, -1, -1 },
    { NULL, "F", 0x4, 19, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x4, 20, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipAddressGenericURI;", 0x4, 21, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 22, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValue;", 0x1, 23, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 24, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 26, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreDuplicateNameValueList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 27, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, 30, 31, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x404, 32, 33, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(initWithNSString:withBoolean:);
  methods[3].selector = @selector(getParameterWithNSString:);
  methods[4].selector = @selector(getParameterWithNSString:withBoolean:);
  methods[5].selector = @selector(getParameterValueWithNSString:);
  methods[6].selector = @selector(getParameterNames);
  methods[7].selector = @selector(hasParameters);
  methods[8].selector = @selector(removeParameterWithNSString:);
  methods[9].selector = @selector(setParameterWithNSString:withNSString:);
  methods[10].selector = @selector(setQuotedParameterWithNSString:withNSString:);
  methods[11].selector = @selector(setParameterWithNSString:withInt:);
  methods[12].selector = @selector(setParameterWithNSString:withBoolean:);
  methods[13].selector = @selector(setParameterWithNSString:withFloat:);
  methods[14].selector = @selector(setParameterWithNSString:withId:);
  methods[15].selector = @selector(hasParameterWithNSString:);
  methods[16].selector = @selector(removeParameters);
  methods[17].selector = @selector(getParameters);
  methods[18].selector = @selector(setParameterWithAndroidGovNistCoreNameValue:);
  methods[19].selector = @selector(setParametersWithAndroidGovNistCoreNameValueList:);
  methods[20].selector = @selector(getParameterAsIntWithNSString:);
  methods[21].selector = @selector(getParameterAsHexIntWithNSString:);
  methods[22].selector = @selector(getParameterAsFloatWithNSString:);
  methods[23].selector = @selector(getParameterAsLongWithNSString:);
  methods[24].selector = @selector(getParameterAsURIWithNSString:);
  methods[25].selector = @selector(getParameterAsBooleanWithNSString:);
  methods[26].selector = @selector(getNameValueWithNSString:);
  methods[27].selector = @selector(java_clone);
  methods[28].selector = @selector(setMultiParameterWithNSString:withNSString:);
  methods[29].selector = @selector(setMultiParameterWithAndroidGovNistCoreNameValue:);
  methods[30].selector = @selector(getMultiParameterWithNSString:);
  methods[31].selector = @selector(getMultiParameters);
  methods[32].selector = @selector(getMultiParameterValueWithNSString:);
  methods[33].selector = @selector(getMultiParameterNames);
  methods[34].selector = @selector(hasMultiParameters);
  methods[35].selector = @selector(removeMultiParameterWithNSString:);
  methods[36].selector = @selector(hasMultiParameterWithNSString:);
  methods[37].selector = @selector(removeMultiParameters);
  methods[38].selector = @selector(equalParametersWithAndroidJavaxSipHeaderParameters:);
  methods[39].selector = @selector(encodeBodyWithJavaLangStringBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parameters_", "LAndroidGovNistCoreNameValueList;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "duplicates_", "LAndroidGovNistCoreDuplicateNameValueList;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;Z", "getParameter", "getParameterValue", "()Ljava/util/Iterator<Ljava/lang/String;>;", "removeParameter", "setParameter", "LNSString;LNSString;", "LJavaTextParseException;", "setQuotedParameter", "LNSString;I", "LNSString;F", "LNSString;LNSObject;", "hasParameter", "LAndroidGovNistCoreNameValue;", "setParameters", "LAndroidGovNistCoreNameValueList;", "getParameterAsInt", "getParameterAsHexInt", "getParameterAsFloat", "getParameterAsLong", "getParameterAsURI", "getParameterAsBoolean", "getNameValue", "clone", "setMultiParameter", "getMultiParameter", "getMultiParameterValue", "removeMultiParameter", "hasMultiParameter", "equalParameters", "LAndroidJavaxSipHeaderParameters;", "encodeBody", "LJavaLangStringBuilder;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderParametersHeader = { "ParametersHeader", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x401, 40, 2, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderParametersHeader;
}

@end

void AndroidGovNistJavaxSipHeaderParametersHeader_init(AndroidGovNistJavaxSipHeaderParametersHeader *self) {
  AndroidGovNistJavaxSipHeaderSIPHeader_init(self);
  JreStrongAssignAndConsume(&self->parameters_, new_AndroidGovNistCoreNameValueList_init());
  JreStrongAssignAndConsume(&self->duplicates_, new_AndroidGovNistCoreDuplicateNameValueList_init());
}

void AndroidGovNistJavaxSipHeaderParametersHeader_initWithNSString_(AndroidGovNistJavaxSipHeaderParametersHeader *self, NSString *hdrName) {
  AndroidGovNistJavaxSipHeaderSIPHeader_initWithNSString_(self, hdrName);
  JreStrongAssignAndConsume(&self->parameters_, new_AndroidGovNistCoreNameValueList_init());
  JreStrongAssignAndConsume(&self->duplicates_, new_AndroidGovNistCoreDuplicateNameValueList_init());
}

void AndroidGovNistJavaxSipHeaderParametersHeader_initWithNSString_withBoolean_(AndroidGovNistJavaxSipHeaderParametersHeader *self, NSString *hdrName, jboolean sync) {
  AndroidGovNistJavaxSipHeaderSIPHeader_initWithNSString_(self, hdrName);
  JreStrongAssignAndConsume(&self->parameters_, new_AndroidGovNistCoreNameValueList_initWithBoolean_(sync));
  JreStrongAssignAndConsume(&self->duplicates_, new_AndroidGovNistCoreDuplicateNameValueList_init());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderParametersHeader)
