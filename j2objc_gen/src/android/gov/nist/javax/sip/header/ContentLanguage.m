//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/ContentLanguage.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/header/ContentLanguage.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderNames.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Locale.h"

inline jlong AndroidGovNistJavaxSipHeaderContentLanguage_get_serialVersionUID();
#define AndroidGovNistJavaxSipHeaderContentLanguage_serialVersionUID -5195728427134181070LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipHeaderContentLanguage, serialVersionUID, jlong)

@implementation AndroidGovNistJavaxSipHeaderContentLanguage

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderContentLanguage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)languageTag {
  AndroidGovNistJavaxSipHeaderContentLanguage_initWithNSString_(self, languageTag);
  return self;
}

- (JavaLangStringBuilder *)encodeBodyWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  return [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:[self getLanguageTag]];
}

- (NSString *)getLanguageTag {
  if ([@"" isEqual:[((JavaUtilLocale *) nil_chk(locale_)) getCountry]]) {
    return [((JavaUtilLocale *) nil_chk(locale_)) getLanguage];
  }
  else {
    return JreStrcat("$C$", [((JavaUtilLocale *) nil_chk(locale_)) getLanguage], '-', [((JavaUtilLocale *) nil_chk(locale_)) getCountry]);
  }
}

- (void)setLanguageTagWithNSString:(NSString *)languageTag {
  jint slash = [((NSString *) nil_chk(languageTag)) java_indexOf:'-'];
  if (slash >= 0) {
    JreStrongAssignAndConsume(&self->locale_, new_JavaUtilLocale_initWithNSString_withNSString_([languageTag java_substring:0 endIndex:slash], [languageTag java_substring:slash + 1]));
  }
  else {
    JreStrongAssignAndConsume(&self->locale_, new_JavaUtilLocale_initWithNSString_(languageTag));
  }
}

- (JavaUtilLocale *)getContentLanguage {
  return locale_;
}

- (void)setContentLanguageWithJavaUtilLocale:(JavaUtilLocale *)language {
  JreStrongAssign(&self->locale_, language);
}

- (id)java_clone {
  AndroidGovNistJavaxSipHeaderContentLanguage *retval = (AndroidGovNistJavaxSipHeaderContentLanguage *) cast_chk([super java_clone], [AndroidGovNistJavaxSipHeaderContentLanguage class]);
  if (self->locale_ != nil) JreStrongAssign(&((AndroidGovNistJavaxSipHeaderContentLanguage *) nil_chk(retval))->locale_, (JavaUtilLocale *) cast_chk([self->locale_ java_clone], [JavaUtilLocale class]));
  return retval;
}

- (void)dealloc {
  RELEASE_(locale_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLocale;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(encodeBodyWithJavaLangStringBuilder:);
  methods[3].selector = @selector(getLanguageTag);
  methods[4].selector = @selector(setLanguageTagWithNSString:);
  methods[5].selector = @selector(getContentLanguage);
  methods[6].selector = @selector(setContentLanguageWithJavaUtilLocale:);
  methods[7].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipHeaderContentLanguage_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "locale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "encodeBody", "LJavaLangStringBuilder;", "setLanguageTag", "setContentLanguage", "LJavaUtilLocale;", "clone" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderContentLanguage = { "ContentLanguage", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x1, 8, 2, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderContentLanguage;
}

@end

void AndroidGovNistJavaxSipHeaderContentLanguage_init(AndroidGovNistJavaxSipHeaderContentLanguage *self) {
  AndroidGovNistJavaxSipHeaderSIPHeader_initWithNSString_(self, AndroidGovNistJavaxSipHeaderSIPHeaderNames_CONTENT_LANGUAGE);
}

AndroidGovNistJavaxSipHeaderContentLanguage *new_AndroidGovNistJavaxSipHeaderContentLanguage_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderContentLanguage, init)
}

AndroidGovNistJavaxSipHeaderContentLanguage *create_AndroidGovNistJavaxSipHeaderContentLanguage_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderContentLanguage, init)
}

void AndroidGovNistJavaxSipHeaderContentLanguage_initWithNSString_(AndroidGovNistJavaxSipHeaderContentLanguage *self, NSString *languageTag) {
  AndroidGovNistJavaxSipHeaderSIPHeader_initWithNSString_(self, AndroidGovNistJavaxSipHeaderSIPHeaderNames_CONTENT_LANGUAGE);
  [self setLanguageTagWithNSString:languageTag];
}

AndroidGovNistJavaxSipHeaderContentLanguage *new_AndroidGovNistJavaxSipHeaderContentLanguage_initWithNSString_(NSString *languageTag) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderContentLanguage, initWithNSString_, languageTag)
}

AndroidGovNistJavaxSipHeaderContentLanguage *create_AndroidGovNistJavaxSipHeaderContentLanguage_initWithNSString_(NSString *languageTag) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderContentLanguage, initWithNSString_, languageTag)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderContentLanguage)
