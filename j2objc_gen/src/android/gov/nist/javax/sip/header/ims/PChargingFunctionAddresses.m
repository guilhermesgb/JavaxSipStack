//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/ims/PChargingFunctionAddresses.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/DuplicateNameValueList.h"
#include "android/gov/nist/core/NameValue.h"
#include "android/gov/nist/core/NameValueList.h"
#include "android/gov/nist/javax/sip/header/ParametersHeader.h"
#include "android/gov/nist/javax/sip/header/ims/PChargingFunctionAddresses.h"
#include "android/gov/nist/javax/sip/header/ims/ParameterNamesIms.h"
#include "android/gov/nist/javax/sip/header/ims/SIPHeaderNamesIms.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/text/ParseException.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/ListIterator.h"

@implementation AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangStringBuilder *)encodeBodyWithJavaLangStringBuilder:(JavaLangStringBuilder *)encoding {
  if (![((AndroidGovNistCoreDuplicateNameValueList *) nil_chk(duplicates_)) isEmpty]) {
    [((AndroidGovNistCoreDuplicateNameValueList *) nil_chk(duplicates_)) encodeWithJavaLangStringBuilder:encoding];
  }
  return encoding;
}

- (void)setChargingCollectionFunctionAddressWithNSString:(NSString *)ccfAddress {
  if (ccfAddress == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"JAIN-SIP Exception, P-Charging-Function-Addresses, setChargingCollectionFunctionAddress(), the ccfAddress parameter is null.");
  [self setMultiParameterWithNSString:AndroidGovNistJavaxSipHeaderImsParameterNamesIms_CCF withNSString:ccfAddress];
}

- (void)addChargingCollectionFunctionAddressWithNSString:(NSString *)ccfAddress {
  if (ccfAddress == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"JAIN-SIP Exception, P-Charging-Function-Addresses, setChargingCollectionFunctionAddress(), the ccfAddress parameter is null.");
  [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) setWithNSString:AndroidGovNistJavaxSipHeaderImsParameterNamesIms_CCF withId:ccfAddress];
}

- (void)removeChargingCollectionFunctionAddressWithNSString:(NSString *)ccfAddress {
  if (ccfAddress == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"JAIN-SIP Exception, P-Charging-Function-Addresses, setChargingCollectionFunctionAddress(), the ccfAddress parameter is null.");
  if (![self delete__WithNSString:ccfAddress withNSString:AndroidGovNistJavaxSipHeaderImsParameterNamesIms_CCF]) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(@"CCF Address Not Removed", 0);
  }
}

- (id<JavaUtilListIterator>)getChargingCollectionFunctionAddresses {
  id<JavaUtilIterator> li = [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) iterator];
  JavaUtilLinkedList *ccfLIST = create_JavaUtilLinkedList_init();
  AndroidGovNistCoreNameValue *nv;
  while ([((id<JavaUtilIterator>) nil_chk(li)) hasNext]) {
    nv = (AndroidGovNistCoreNameValue *) cast_chk([li next], [AndroidGovNistCoreNameValue class]);
    if ([((NSString *) nil_chk([((AndroidGovNistCoreNameValue *) nil_chk(nv)) getName])) java_equalsIgnoreCase:AndroidGovNistJavaxSipHeaderImsParameterNamesIms_CCF]) {
      AndroidGovNistCoreNameValue *ccfNV = create_AndroidGovNistCoreNameValue_init();
      [ccfNV setNameWithNSString:[nv getName]];
      [ccfNV setValueAsObjectWithId:[nv getValueAsObject]];
      [ccfLIST addWithId:ccfNV];
    }
  }
  return [ccfLIST listIterator];
}

- (void)setEventChargingFunctionAddressWithNSString:(NSString *)ecfAddress {
  if (ecfAddress == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"JAIN-SIP Exception, P-Charging-Function-Addresses, setEventChargingFunctionAddress(), the ecfAddress parameter is null.");
  [self setMultiParameterWithNSString:AndroidGovNistJavaxSipHeaderImsParameterNamesIms_ECF withNSString:ecfAddress];
}

- (void)addEventChargingFunctionAddressWithNSString:(NSString *)ecfAddress {
  if (ecfAddress == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"JAIN-SIP Exception, P-Charging-Function-Addresses, setEventChargingFunctionAddress(), the ecfAddress parameter is null.");
  [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) setWithNSString:AndroidGovNistJavaxSipHeaderImsParameterNamesIms_ECF withId:ecfAddress];
}

- (void)removeEventChargingFunctionAddressWithNSString:(NSString *)ecfAddress {
  if (ecfAddress == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"JAIN-SIP Exception, P-Charging-Function-Addresses, setEventChargingFunctionAddress(), the ecfAddress parameter is null.");
  if (![self delete__WithNSString:ecfAddress withNSString:AndroidGovNistJavaxSipHeaderImsParameterNamesIms_ECF]) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(@"ECF Address Not Removed", 0);
  }
}

- (id<JavaUtilListIterator>)getEventChargingFunctionAddresses {
  JavaUtilLinkedList *listw = create_JavaUtilLinkedList_init();
  id<JavaUtilIterator> li = [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) iterator];
  id<JavaUtilListIterator> ecfLIST = [listw listIterator];
  AndroidGovNistCoreNameValue *nv;
  jboolean removed = false;
  while ([((id<JavaUtilIterator>) nil_chk(li)) hasNext]) {
    nv = (AndroidGovNistCoreNameValue *) cast_chk([li next], [AndroidGovNistCoreNameValue class]);
    if ([((NSString *) nil_chk([((AndroidGovNistCoreNameValue *) nil_chk(nv)) getName])) java_equalsIgnoreCase:AndroidGovNistJavaxSipHeaderImsParameterNamesIms_ECF]) {
      AndroidGovNistCoreNameValue *ecfNV = create_AndroidGovNistCoreNameValue_init();
      [ecfNV setNameWithNSString:[nv getName]];
      [ecfNV setValueAsObjectWithId:[nv getValueAsObject]];
      [((id<JavaUtilListIterator>) nil_chk(ecfLIST)) addWithId:ecfNV];
    }
  }
  return ecfLIST;
}

- (jboolean)delete__WithNSString:(NSString *)value
                    withNSString:(NSString *)name {
  id<JavaUtilIterator> li = [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) iterator];
  AndroidGovNistCoreNameValue *nv;
  jboolean removed = false;
  while ([((id<JavaUtilIterator>) nil_chk(li)) hasNext]) {
    nv = (AndroidGovNistCoreNameValue *) cast_chk([li next], [AndroidGovNistCoreNameValue class]);
    if ([((NSString *) nil_chk(((NSString *) cast_chk([((AndroidGovNistCoreNameValue *) nil_chk(nv)) getValueAsObject], [NSString class])))) java_equalsIgnoreCase:value] && [((NSString *) nil_chk([nv getName])) java_equalsIgnoreCase:name]) {
      [li remove];
      removed = true;
    }
  }
  return removed;
}

- (void)setValueWithNSString:(NSString *)value {
  @throw create_JavaTextParseException_initWithNSString_withInt_(value, 0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, 4, -1, -1, -1 },
    { NULL, "LJavaUtilListIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 3, 4, -1, -1, -1 },
    { NULL, "LJavaUtilListIterator;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 3, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(encodeBodyWithJavaLangStringBuilder:);
  methods[2].selector = @selector(setChargingCollectionFunctionAddressWithNSString:);
  methods[3].selector = @selector(addChargingCollectionFunctionAddressWithNSString:);
  methods[4].selector = @selector(removeChargingCollectionFunctionAddressWithNSString:);
  methods[5].selector = @selector(getChargingCollectionFunctionAddresses);
  methods[6].selector = @selector(setEventChargingFunctionAddressWithNSString:);
  methods[7].selector = @selector(addEventChargingFunctionAddressWithNSString:);
  methods[8].selector = @selector(removeEventChargingFunctionAddressWithNSString:);
  methods[9].selector = @selector(getEventChargingFunctionAddresses);
  methods[10].selector = @selector(delete__WithNSString:withNSString:);
  methods[11].selector = @selector(setValueWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "encodeBody", "LJavaLangStringBuilder;", "setChargingCollectionFunctionAddress", "LNSString;", "LJavaTextParseException;", "addChargingCollectionFunctionAddress", "removeChargingCollectionFunctionAddress", "setEventChargingFunctionAddress", "addEventChargingFunctionAddress", "removeEventChargingFunctionAddress", "()Ljava/util/ListIterator<Landroid/gov/nist/core/NameValue;>;", "delete", "LNSString;LNSString;", "setValue" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses = { "PChargingFunctionAddresses", "android.gov.nist.javax.sip.header.ims", ptrTable, methods, NULL, 7, 0x1, 12, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses;
}

@end

void AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses_init(AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses *self) {
  AndroidGovNistJavaxSipHeaderParametersHeader_initWithNSString_(self, AndroidGovNistJavaxSipHeaderImsSIPHeaderNamesIms_P_CHARGING_FUNCTION_ADDRESSES);
}

AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses *new_AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses, init)
}

AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses *create_AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderImsPChargingFunctionAddresses)
