//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/CallIdentifier.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/javax/sip/header/CallIdentifier.h"
#include "android/gov/nist/javax/sip/header/SIPObject.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"

inline jlong AndroidGovNistJavaxSipHeaderCallIdentifier_get_serialVersionUID();
#define AndroidGovNistJavaxSipHeaderCallIdentifier_serialVersionUID 7314773655675451377LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipHeaderCallIdentifier, serialVersionUID, jlong)

@implementation AndroidGovNistJavaxSipHeaderCallIdentifier

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderCallIdentifier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localId
                    withNSString:(NSString *)host {
  AndroidGovNistJavaxSipHeaderCallIdentifier_initWithNSString_withNSString_(self, localId, host);
  return self;
}

- (instancetype)initWithNSString:(NSString *)cid {
  AndroidGovNistJavaxSipHeaderCallIdentifier_initWithNSString_(self, cid);
  return self;
}

- (NSString *)encode {
  return [((JavaLangStringBuilder *) nil_chk([self encodeWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])) description];
}

- (JavaLangStringBuilder *)encodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:localId_];
  if (host_ != nil) {
    [((JavaLangStringBuilder *) nil_chk([buffer appendWithNSString:AndroidGovNistCoreGenericObject_AT])) appendWithNSString:host_];
  }
  return buffer;
}

- (jboolean)isEqual:(id)other {
  if (other == nil) return false;
  if (![[other java_getClass] isEqual:[self java_getClass]]) {
    return false;
  }
  AndroidGovNistJavaxSipHeaderCallIdentifier *that = (AndroidGovNistJavaxSipHeaderCallIdentifier *) cast_chk(other, [AndroidGovNistJavaxSipHeaderCallIdentifier class]);
  if ([((NSString *) nil_chk(self->localId_)) compareToWithId:that->localId_] != 0) {
    return false;
  }
  if (self->host_ == that->host_) return true;
  if ((self->host_ == nil && that->host_ != nil) || (self->host_ != nil && that->host_ == nil)) return false;
  if ([((NSString *) nil_chk(host_)) java_compareToIgnoreCase:that->host_] != 0) {
    return false;
  }
  return true;
}

- (NSUInteger)hash {
  if (self->localId_ == nil) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Hash code called before id is set");
  }
  return ((jint) [self->localId_ hash]);
}

- (NSString *)getLocalId {
  return localId_;
}

- (NSString *)getHost {
  return host_;
}

- (void)setLocalIdWithNSString:(NSString *)localId {
  JreStrongAssign(&self->localId_, localId);
}

- (void)setCallIDWithNSString:(NSString *)cid {
  if (cid == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"NULL!");
  jint index = [cid java_indexOf:'@'];
  if (index == -1) {
    JreStrongAssign(&localId_, cid);
    JreStrongAssign(&host_, nil);
  }
  else {
    JreStrongAssign(&localId_, [cid java_substring:0 endIndex:index]);
    JreStrongAssign(&host_, [cid java_substring:index + 1 endIndex:((jint) [cid length])]);
    if (localId_ == nil || host_ == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"CallID  must be token@token or token");
    }
  }
}

- (void)setHostWithNSString:(NSString *)host {
  JreStrongAssign(&self->host_, host);
}

- (void)dealloc {
  RELEASE_(localId_);
  RELEASE_(host_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:withNSString:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(encode);
  methods[4].selector = @selector(encodeWithJavaLangStringBuilder:);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(hash);
  methods[7].selector = @selector(getLocalId);
  methods[8].selector = @selector(getHost);
  methods[9].selector = @selector(setLocalIdWithNSString:);
  methods[10].selector = @selector(setCallIDWithNSString:);
  methods[11].selector = @selector(setHostWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipHeaderCallIdentifier_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "localId_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "host_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "LNSString;", "LJavaLangIllegalArgumentException;", "encode", "LJavaLangStringBuilder;", "equals", "LNSObject;", "hashCode", "setLocalId", "setCallID", "setHost" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderCallIdentifier = { "CallIdentifier", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x11, 12, 3, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderCallIdentifier;
}

@end

void AndroidGovNistJavaxSipHeaderCallIdentifier_init(AndroidGovNistJavaxSipHeaderCallIdentifier *self) {
  AndroidGovNistJavaxSipHeaderSIPObject_init(self);
}

AndroidGovNistJavaxSipHeaderCallIdentifier *new_AndroidGovNistJavaxSipHeaderCallIdentifier_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderCallIdentifier, init)
}

AndroidGovNistJavaxSipHeaderCallIdentifier *create_AndroidGovNistJavaxSipHeaderCallIdentifier_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderCallIdentifier, init)
}

void AndroidGovNistJavaxSipHeaderCallIdentifier_initWithNSString_withNSString_(AndroidGovNistJavaxSipHeaderCallIdentifier *self, NSString *localId, NSString *host) {
  AndroidGovNistJavaxSipHeaderSIPObject_init(self);
  JreStrongAssign(&self->localId_, localId);
  JreStrongAssign(&self->host_, host);
}

AndroidGovNistJavaxSipHeaderCallIdentifier *new_AndroidGovNistJavaxSipHeaderCallIdentifier_initWithNSString_withNSString_(NSString *localId, NSString *host) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderCallIdentifier, initWithNSString_withNSString_, localId, host)
}

AndroidGovNistJavaxSipHeaderCallIdentifier *create_AndroidGovNistJavaxSipHeaderCallIdentifier_initWithNSString_withNSString_(NSString *localId, NSString *host) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderCallIdentifier, initWithNSString_withNSString_, localId, host)
}

void AndroidGovNistJavaxSipHeaderCallIdentifier_initWithNSString_(AndroidGovNistJavaxSipHeaderCallIdentifier *self, NSString *cid) {
  AndroidGovNistJavaxSipHeaderSIPObject_init(self);
  [self setCallIDWithNSString:cid];
}

AndroidGovNistJavaxSipHeaderCallIdentifier *new_AndroidGovNistJavaxSipHeaderCallIdentifier_initWithNSString_(NSString *cid) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderCallIdentifier, initWithNSString_, cid)
}

AndroidGovNistJavaxSipHeaderCallIdentifier *create_AndroidGovNistJavaxSipHeaderCallIdentifier_initWithNSString_(NSString *cid) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderCallIdentifier, initWithNSString_, cid)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderCallIdentifier)
