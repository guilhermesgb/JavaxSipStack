//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/Event.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/core/NameValueList.h"
#include "android/gov/nist/javax/sip/header/Event.h"
#include "android/gov/nist/javax/sip/header/ParameterNames.h"
#include "android/gov/nist/javax/sip/header/ParametersHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderNames.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"

inline jlong AndroidGovNistJavaxSipHeaderEvent_get_serialVersionUID();
#define AndroidGovNistJavaxSipHeaderEvent_serialVersionUID -6458387810431874841LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipHeaderEvent, serialVersionUID, jlong)

@implementation AndroidGovNistJavaxSipHeaderEvent

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderEvent_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setEventTypeWithNSString:(NSString *)eventType {
  if (eventType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@" the eventType is null");
  JreStrongAssign(&self->eventType_, eventType);
}

- (NSString *)getEventType {
  return eventType_;
}

- (void)setEventIdWithNSString:(NSString *)eventId {
  if (eventId == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@" the eventId parameter is null");
  [self setParameterWithNSString:AndroidGovNistJavaxSipHeaderParameterNames_ID withNSString:eventId];
}

- (NSString *)getEventId {
  return [self getParameterWithNSString:AndroidGovNistJavaxSipHeaderParameterNames_ID];
}

- (NSString *)encodeBody {
  return [((JavaLangStringBuilder *) nil_chk([self encodeBodyWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])) description];
}

- (JavaLangStringBuilder *)encodeBodyWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  if (eventType_ != nil) [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:eventType_];
  if (![((AndroidGovNistCoreNameValueList *) nil_chk(parameters_)) isEmpty]) {
    [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:AndroidGovNistCoreGenericObject_SEMICOLON];
    [((AndroidGovNistCoreNameValueList *) nil_chk(self->parameters_)) encodeWithJavaLangStringBuilder:buffer];
  }
  return buffer;
}

- (jboolean)matchWithAndroidGovNistJavaxSipHeaderEvent:(AndroidGovNistJavaxSipHeaderEvent *)matchTarget {
  if (((AndroidGovNistJavaxSipHeaderEvent *) nil_chk(matchTarget))->eventType_ == nil && self->eventType_ != nil) return false;
  else if (matchTarget->eventType_ != nil && self->eventType_ == nil) return false;
  else if (self->eventType_ == nil && matchTarget->eventType_ == nil) return false;
  else if ([self getEventId] == nil && [matchTarget getEventId] != nil) return false;
  else if ([self getEventId] != nil && [matchTarget getEventId] == nil) return false;
  return [((NSString *) nil_chk(matchTarget->eventType_)) java_equalsIgnoreCase:self->eventType_] && (([self getEventId] == [matchTarget getEventId]) || [((NSString *) nil_chk([self getEventId])) java_equalsIgnoreCase:[matchTarget getEventId]]);
}

- (void)dealloc {
  RELEASE_(eventType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setEventTypeWithNSString:);
  methods[2].selector = @selector(getEventType);
  methods[3].selector = @selector(setEventIdWithNSString:);
  methods[4].selector = @selector(getEventId);
  methods[5].selector = @selector(encodeBody);
  methods[6].selector = @selector(encodeBodyWithJavaLangStringBuilder:);
  methods[7].selector = @selector(matchWithAndroidGovNistJavaxSipHeaderEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipHeaderEvent_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "eventType_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setEventType", "LNSString;", "LJavaTextParseException;", "setEventId", "encodeBody", "LJavaLangStringBuilder;", "match", "LAndroidGovNistJavaxSipHeaderEvent;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderEvent = { "Event", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x1, 8, 2, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderEvent;
}

@end

void AndroidGovNistJavaxSipHeaderEvent_init(AndroidGovNistJavaxSipHeaderEvent *self) {
  AndroidGovNistJavaxSipHeaderParametersHeader_initWithNSString_(self, AndroidGovNistJavaxSipHeaderSIPHeaderNames_EVENT);
}

AndroidGovNistJavaxSipHeaderEvent *new_AndroidGovNistJavaxSipHeaderEvent_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderEvent, init)
}

AndroidGovNistJavaxSipHeaderEvent *create_AndroidGovNistJavaxSipHeaderEvent_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderEvent, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderEvent)
