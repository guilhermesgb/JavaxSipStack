//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/Via.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/core/Host.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/core/NameValue.h"
#include "android/gov/nist/core/NameValueList.h"
#include "android/gov/nist/javax/sip/header/ParameterNames.h"
#include "android/gov/nist/javax/sip/header/ParametersHeader.h"
#include "android/gov/nist/javax/sip/header/Protocol.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/stack/HopImpl.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "android/javax/sip/address/Hop.h"
#include "android/javax/sip/header/ViaHeader.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/text/ParseException.h"

inline jlong AndroidGovNistJavaxSipHeaderVia_get_serialVersionUID();
#define AndroidGovNistJavaxSipHeaderVia_serialVersionUID 5281728373401351378LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipHeaderVia, serialVersionUID, jlong)

NSString *AndroidGovNistJavaxSipHeaderVia_BRANCH = @"branch";
NSString *AndroidGovNistJavaxSipHeaderVia_RECEIVED = @"received";
NSString *AndroidGovNistJavaxSipHeaderVia_MADDR = @"maddr";
NSString *AndroidGovNistJavaxSipHeaderVia_TTL = @"ttl";
NSString *AndroidGovNistJavaxSipHeaderVia_RPORT = @"rport";

@implementation AndroidGovNistJavaxSipHeaderVia

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderVia_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isEqual:(id)other {
  if (other == self) return true;
  if ([AndroidJavaxSipHeaderViaHeader_class_() isInstance:other]) {
    id<AndroidJavaxSipHeaderViaHeader> o = (id<AndroidJavaxSipHeaderViaHeader>) cast_check(other, AndroidJavaxSipHeaderViaHeader_class_());
    return [((NSString *) nil_chk([self getProtocol])) java_equalsIgnoreCase:[((id<AndroidJavaxSipHeaderViaHeader>) nil_chk(o)) getProtocol]] && [((NSString *) nil_chk([self getTransport])) java_equalsIgnoreCase:[o getTransport]] && [((NSString *) nil_chk([self getHost])) java_equalsIgnoreCase:[o getHost]] && [self getPort] == [o getPort] && [self equalParametersWithAndroidJavaxSipHeaderParameters:o];
  }
  return false;
}

- (NSString *)getProtocolVersion {
  if (sentProtocol_ == nil) return nil;
  else return [sentProtocol_ getProtocolVersion];
}

- (AndroidGovNistJavaxSipHeaderProtocol *)getSentProtocol {
  return sentProtocol_;
}

- (AndroidGovNistCoreHostPort *)getSentBy {
  return sentBy_;
}

- (id<AndroidJavaxSipAddressHop>)getHop {
  AndroidGovNistJavaxSipStackHopImpl *hop = create_AndroidGovNistJavaxSipStackHopImpl_initWithNSString_withInt_withNSString_([((AndroidGovNistCoreHost *) nil_chk([((AndroidGovNistCoreHostPort *) nil_chk(sentBy_)) getHost])) getHostname], [((AndroidGovNistCoreHostPort *) nil_chk(sentBy_)) getPort], [((AndroidGovNistJavaxSipHeaderProtocol *) nil_chk(sentProtocol_)) getTransport]);
  return hop;
}

- (AndroidGovNistCoreNameValueList *)getViaParms {
  return parameters_;
}

- (NSString *)getComment {
  return comment_;
}

- (jboolean)hasPort {
  return [((AndroidGovNistCoreHostPort *) nil_chk(([self getSentBy]))) hasPort];
}

- (jboolean)hasComment {
  return comment_ != nil;
}

- (void)removePort {
  [((AndroidGovNistCoreHostPort *) nil_chk(sentBy_)) removePort];
}

- (void)removeComment {
  JreStrongAssign(&comment_, nil);
}

- (void)setProtocolVersionWithNSString:(NSString *)protocolVersion {
  if (sentProtocol_ == nil) JreStrongAssignAndConsume(&sentProtocol_, new_AndroidGovNistJavaxSipHeaderProtocol_init());
  [sentProtocol_ setProtocolVersionWithNSString:protocolVersion];
}

- (void)setHostWithAndroidGovNistCoreHost:(AndroidGovNistCoreHost *)host {
  if (sentBy_ == nil) {
    JreStrongAssignAndConsume(&sentBy_, new_AndroidGovNistCoreHostPort_init());
  }
  [sentBy_ setHostWithAndroidGovNistCoreHost:host];
}

- (void)setSentProtocolWithAndroidGovNistJavaxSipHeaderProtocol:(AndroidGovNistJavaxSipHeaderProtocol *)s {
  JreStrongAssign(&sentProtocol_, s);
}

- (void)setSentByWithAndroidGovNistCoreHostPort:(AndroidGovNistCoreHostPort *)s {
  JreStrongAssign(&sentBy_, s);
}

- (void)setCommentWithNSString:(NSString *)c {
  JreStrongAssign(&comment_, c);
}

- (NSString *)encodeBody {
  return [((JavaLangStringBuilder *) nil_chk([self encodeBodyWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])) description];
}

- (JavaLangStringBuilder *)encodeBodyWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  [((AndroidGovNistJavaxSipHeaderProtocol *) nil_chk(sentProtocol_)) encodeWithJavaLangStringBuilder:buffer];
  [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:AndroidGovNistCoreGenericObject_SP];
  [((AndroidGovNistCoreHostPort *) nil_chk(sentBy_)) encodeWithJavaLangStringBuilder:buffer];
  if (![((AndroidGovNistCoreNameValueList *) nil_chk(parameters_)) isEmpty]) {
    [buffer appendWithNSString:AndroidGovNistCoreGenericObject_SEMICOLON];
    [((AndroidGovNistCoreNameValueList *) nil_chk(parameters_)) encodeWithJavaLangStringBuilder:buffer];
  }
  if (comment_ != nil) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buffer appendWithNSString:AndroidGovNistCoreGenericObject_SP])) appendWithNSString:AndroidGovNistCoreGenericObject_LPAREN])) appendWithNSString:comment_])) appendWithNSString:AndroidGovNistCoreGenericObject_RPAREN];
  }
  return buffer;
}

- (void)setHostWithNSString:(NSString *)host {
  if (sentBy_ == nil) JreStrongAssignAndConsume(&sentBy_, new_AndroidGovNistCoreHostPort_init());
  @try {
    AndroidGovNistCoreHost *h = create_AndroidGovNistCoreHost_initWithNSString_(host);
    [((AndroidGovNistCoreHostPort *) nil_chk(sentBy_)) setHostWithAndroidGovNistCoreHost:h];
  }
  @catch (JavaLangException *e) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@" host parameter is null");
  }
}

- (NSString *)getHost {
  if (sentBy_ == nil) return nil;
  else {
    AndroidGovNistCoreHost *host = [sentBy_ getHost];
    if (host == nil) return nil;
    else return [host getHostname];
  }
}

- (void)setPortWithInt:(jint)port {
  if (port != -1 && (port < 1 || port > 65535)) {
    @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(@"Port value out of range -1, [1..65535]");
  }
  if (sentBy_ == nil) JreStrongAssignAndConsume(&sentBy_, new_AndroidGovNistCoreHostPort_init());
  [sentBy_ setPortWithInt:port];
}

- (void)setRPort {
  @try {
    [self setParameterWithNSString:AndroidGovNistJavaxSipHeaderVia_RPORT withNSString:nil];
  }
  @catch (JavaTextParseException *e) {
    [((JavaTextParseException *) nil_chk(e)) printStackTrace];
  }
}

- (jint)getPort {
  if (sentBy_ == nil) return -1;
  return [sentBy_ getPort];
}

- (jint)getRPort {
  NSString *strRport = [self getParameterWithNSString:AndroidGovNistJavaxSipHeaderParameterNames_RPORT];
  if (strRport != nil && ![strRport isEqual:@""]) return [((JavaLangInteger *) nil_chk(JavaLangInteger_valueOfWithNSString_(strRport))) intValue];
  else return -1;
}

- (NSString *)getTransport {
  if (sentProtocol_ == nil) return nil;
  return [sentProtocol_ getTransport];
}

- (void)setTransportWithNSString:(NSString *)transport {
  if (transport == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"JAIN-SIP Exception, Via, setTransport(), the transport parameter is null.");
  if (sentProtocol_ == nil) JreStrongAssignAndConsume(&sentProtocol_, new_AndroidGovNistJavaxSipHeaderProtocol_init());
  [sentProtocol_ setTransportWithNSString:transport];
}

- (NSString *)getProtocol {
  if (sentProtocol_ == nil) return nil;
  return [sentProtocol_ getProtocol];
}

- (void)setProtocolWithNSString:(NSString *)protocol {
  if (protocol == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"JAIN-SIP Exception, Via, setProtocol(), the protocol parameter is null.");
  if (sentProtocol_ == nil) JreStrongAssignAndConsume(&sentProtocol_, new_AndroidGovNistJavaxSipHeaderProtocol_init());
  [sentProtocol_ setProtocolWithNSString:protocol];
}

- (jint)getTTL {
  jint ttl = [self getParameterAsIntWithNSString:AndroidGovNistJavaxSipHeaderParameterNames_TTL];
  return ttl;
}

- (void)setTTLWithInt:(jint)ttl {
  if (ttl < 0 && ttl != -1) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(@"JAIN-SIP Exception, Via, setTTL(), the ttl parameter is < 0");
  [self setParameterWithAndroidGovNistCoreNameValue:create_AndroidGovNistCoreNameValue_initWithNSString_withId_(AndroidGovNistJavaxSipHeaderParameterNames_TTL, JavaLangInteger_valueOfWithInt_(ttl))];
}

- (NSString *)getMAddr {
  return [self getParameterWithNSString:AndroidGovNistJavaxSipHeaderParameterNames_MADDR];
}

- (void)setMAddrWithNSString:(NSString *)mAddr {
  if (mAddr == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"JAIN-SIP Exception, Via, setMAddr(), the mAddr parameter is null.");
  AndroidGovNistCoreHost *host = create_AndroidGovNistCoreHost_init();
  [host setAddressWithNSString:mAddr];
  AndroidGovNistCoreNameValue *nameValue = create_AndroidGovNistCoreNameValue_initWithNSString_withId_(AndroidGovNistJavaxSipHeaderParameterNames_MADDR, host);
  [self setParameterWithAndroidGovNistCoreNameValue:nameValue];
}

- (NSString *)getReceived {
  return [self getParameterWithNSString:AndroidGovNistJavaxSipHeaderParameterNames_RECEIVED];
}

- (void)setReceivedWithNSString:(NSString *)received {
  if (received == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"JAIN-SIP Exception, Via, setReceived(), the received parameter is null.");
  [self setParameterWithNSString:AndroidGovNistJavaxSipHeaderParameterNames_RECEIVED withNSString:received];
}

- (NSString *)getBranch {
  return [self getParameterWithNSString:AndroidGovNistJavaxSipHeaderParameterNames_BRANCH];
}

- (void)setBranchWithNSString:(NSString *)branch {
  if (branch == nil || ((jint) [branch length]) == 0) @throw create_JavaLangNullPointerException_initWithNSString_(@"JAIN-SIP Exception, Via, setBranch(), the branch parameter is null or length 0.");
  [self setParameterWithNSString:AndroidGovNistJavaxSipHeaderParameterNames_BRANCH withNSString:branch];
}

- (id)java_clone {
  AndroidGovNistJavaxSipHeaderVia *retval = (AndroidGovNistJavaxSipHeaderVia *) cast_chk([super java_clone], [AndroidGovNistJavaxSipHeaderVia class]);
  if (self->sentProtocol_ != nil) JreStrongAssign(&((AndroidGovNistJavaxSipHeaderVia *) nil_chk(retval))->sentProtocol_, (AndroidGovNistJavaxSipHeaderProtocol *) cast_chk([self->sentProtocol_ java_clone], [AndroidGovNistJavaxSipHeaderProtocol class]));
  if (self->sentBy_ != nil) JreStrongAssign(&((AndroidGovNistJavaxSipHeaderVia *) nil_chk(retval))->sentBy_, (AndroidGovNistCoreHostPort *) cast_chk([self->sentBy_ java_clone], [AndroidGovNistCoreHostPort class]));
  if ([self getRPort] != -1) [((AndroidGovNistJavaxSipHeaderVia *) nil_chk(retval)) setParameterWithNSString:AndroidGovNistJavaxSipHeaderVia_RPORT withInt:[self getRPort]];
  return retval;
}

- (NSString *)getSentByField {
  if (sentBy_ != nil) return [sentBy_ encode];
  return nil;
}

- (NSString *)getSentProtocolField {
  if (sentProtocol_ != nil) return [sentProtocol_ encode];
  return nil;
}

- (void)dealloc {
  RELEASE_(sentProtocol_);
  RELEASE_(sentBy_);
  RELEASE_(comment_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderProtocol;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreHostPort;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipAddressHop;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValueList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x4, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, 13, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 16, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 3, 13, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 3, 13, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 15, 16, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 3, 13, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 3, 13, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 3, 13, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 23, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(getProtocolVersion);
  methods[3].selector = @selector(getSentProtocol);
  methods[4].selector = @selector(getSentBy);
  methods[5].selector = @selector(getHop);
  methods[6].selector = @selector(getViaParms);
  methods[7].selector = @selector(getComment);
  methods[8].selector = @selector(hasPort);
  methods[9].selector = @selector(hasComment);
  methods[10].selector = @selector(removePort);
  methods[11].selector = @selector(removeComment);
  methods[12].selector = @selector(setProtocolVersionWithNSString:);
  methods[13].selector = @selector(setHostWithAndroidGovNistCoreHost:);
  methods[14].selector = @selector(setSentProtocolWithAndroidGovNistJavaxSipHeaderProtocol:);
  methods[15].selector = @selector(setSentByWithAndroidGovNistCoreHostPort:);
  methods[16].selector = @selector(setCommentWithNSString:);
  methods[17].selector = @selector(encodeBody);
  methods[18].selector = @selector(encodeBodyWithJavaLangStringBuilder:);
  methods[19].selector = @selector(setHostWithNSString:);
  methods[20].selector = @selector(getHost);
  methods[21].selector = @selector(setPortWithInt:);
  methods[22].selector = @selector(setRPort);
  methods[23].selector = @selector(getPort);
  methods[24].selector = @selector(getRPort);
  methods[25].selector = @selector(getTransport);
  methods[26].selector = @selector(setTransportWithNSString:);
  methods[27].selector = @selector(getProtocol);
  methods[28].selector = @selector(setProtocolWithNSString:);
  methods[29].selector = @selector(getTTL);
  methods[30].selector = @selector(setTTLWithInt:);
  methods[31].selector = @selector(getMAddr);
  methods[32].selector = @selector(setMAddrWithNSString:);
  methods[33].selector = @selector(getReceived);
  methods[34].selector = @selector(setReceivedWithNSString:);
  methods[35].selector = @selector(getBranch);
  methods[36].selector = @selector(setBranchWithNSString:);
  methods[37].selector = @selector(java_clone);
  methods[38].selector = @selector(getSentByField);
  methods[39].selector = @selector(getSentProtocolField);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipHeaderVia_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "BRANCH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "RECEIVED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "MADDR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "TTL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "RPORT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 28, -1, -1 },
    { "sentProtocol_", "LAndroidGovNistJavaxSipHeaderProtocol;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sentBy_", "LAndroidGovNistCoreHostPort;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "comment_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "equals", "LNSObject;", "setProtocolVersion", "LNSString;", "setHost", "LAndroidGovNistCoreHost;", "setSentProtocol", "LAndroidGovNistJavaxSipHeaderProtocol;", "setSentBy", "LAndroidGovNistCoreHostPort;", "setComment", "encodeBody", "LJavaLangStringBuilder;", "LJavaTextParseException;", "setPort", "I", "LAndroidJavaxSipInvalidArgumentException;", "setTransport", "setProtocol", "setTTL", "setMAddr", "setReceived", "setBranch", "clone", &AndroidGovNistJavaxSipHeaderVia_BRANCH, &AndroidGovNistJavaxSipHeaderVia_RECEIVED, &AndroidGovNistJavaxSipHeaderVia_MADDR, &AndroidGovNistJavaxSipHeaderVia_TTL, &AndroidGovNistJavaxSipHeaderVia_RPORT };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderVia = { "Via", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x1, 40, 9, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderVia;
}

@end

void AndroidGovNistJavaxSipHeaderVia_init(AndroidGovNistJavaxSipHeaderVia *self) {
  AndroidGovNistJavaxSipHeaderParametersHeader_initWithNSString_(self, AndroidJavaxSipHeaderViaHeader_NAME);
  JreStrongAssignAndConsume(&self->sentProtocol_, new_AndroidGovNistJavaxSipHeaderProtocol_init());
}

AndroidGovNistJavaxSipHeaderVia *new_AndroidGovNistJavaxSipHeaderVia_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderVia, init)
}

AndroidGovNistJavaxSipHeaderVia *create_AndroidGovNistJavaxSipHeaderVia_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderVia, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderVia)
