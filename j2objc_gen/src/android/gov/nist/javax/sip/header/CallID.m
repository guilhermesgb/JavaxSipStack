//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/CallID.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/header/CallID.h"
#include "android/gov/nist/javax/sip/header/CallIdentifier.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/javax/sip/header/CallIdHeader.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/text/ParseException.h"

inline jlong AndroidGovNistJavaxSipHeaderCallID_get_serialVersionUID();
#define AndroidGovNistJavaxSipHeaderCallID_serialVersionUID -6463630258703731156LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipHeaderCallID, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipHeaderCallID)

NSString *AndroidGovNistJavaxSipHeaderCallID_NAME_LOWER;

@implementation AndroidGovNistJavaxSipHeaderCallID

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderCallID_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isEqual:(id)other {
  if (self == other) return true;
  if ([AndroidJavaxSipHeaderCallIdHeader_class_() isInstance:other]) {
    id<AndroidJavaxSipHeaderCallIdHeader> o = (id<AndroidJavaxSipHeaderCallIdHeader>) cast_check(other, AndroidJavaxSipHeaderCallIdHeader_class_());
    return [((NSString *) nil_chk([self getCallId])) java_equalsIgnoreCase:[((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk(o)) getCallId]];
  }
  return false;
}

- (NSString *)encodeBody {
  return [((JavaLangStringBuilder *) nil_chk([self encodeBodyWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])) description];
}

- (JavaLangStringBuilder *)encodeBodyWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  if (callIdentifier_ != nil) [callIdentifier_ encodeWithJavaLangStringBuilder:buffer];
  return buffer;
}

- (NSString *)getCallId {
  return [self encodeBody];
}

- (AndroidGovNistJavaxSipHeaderCallIdentifier *)getCallIdentifer {
  return callIdentifier_;
}

- (void)setCallIdWithNSString:(NSString *)cid {
  @try {
    JreStrongAssignAndConsume(&callIdentifier_, new_AndroidGovNistJavaxSipHeaderCallIdentifier_initWithNSString_(cid));
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(cid, 0);
  }
}

- (void)setCallIdentifierWithAndroidGovNistJavaxSipHeaderCallIdentifier:(AndroidGovNistJavaxSipHeaderCallIdentifier *)cid {
  JreStrongAssign(&callIdentifier_, cid);
}

- (instancetype)initWithNSString:(NSString *)callId {
  AndroidGovNistJavaxSipHeaderCallID_initWithNSString_(self, callId);
  return self;
}

- (id)java_clone {
  AndroidGovNistJavaxSipHeaderCallID *retval = (AndroidGovNistJavaxSipHeaderCallID *) cast_chk([super java_clone], [AndroidGovNistJavaxSipHeaderCallID class]);
  if (self->callIdentifier_ != nil) JreStrongAssign(&((AndroidGovNistJavaxSipHeaderCallID *) nil_chk(retval))->callIdentifier_, (AndroidGovNistJavaxSipHeaderCallIdentifier *) cast_chk([self->callIdentifier_ java_clone], [AndroidGovNistJavaxSipHeaderCallIdentifier class]));
  return retval;
}

- (void)dealloc {
  RELEASE_(callIdentifier_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderCallIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, 9, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(encodeBody);
  methods[3].selector = @selector(encodeBodyWithJavaLangStringBuilder:);
  methods[4].selector = @selector(getCallId);
  methods[5].selector = @selector(getCallIdentifer);
  methods[6].selector = @selector(setCallIdWithNSString:);
  methods[7].selector = @selector(setCallIdentifierWithAndroidGovNistJavaxSipHeaderCallIdentifier:);
  methods[8].selector = @selector(initWithNSString:);
  methods[9].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipHeaderCallID_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "NAME_LOWER", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "callIdentifier_", "LAndroidGovNistJavaxSipHeaderCallIdentifier;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "equals", "LNSObject;", "encodeBody", "LJavaLangStringBuilder;", "setCallId", "LNSString;", "LJavaTextParseException;", "setCallIdentifier", "LAndroidGovNistJavaxSipHeaderCallIdentifier;", "LJavaLangIllegalArgumentException;", "clone", &AndroidGovNistJavaxSipHeaderCallID_NAME_LOWER };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderCallID = { "CallID", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x1, 10, 3, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderCallID;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipHeaderCallID class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipHeaderCallID_NAME_LOWER, [((NSString *) nil_chk(AndroidJavaxSipHeaderCallIdHeader_NAME)) lowercaseString]);
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipHeaderCallID)
  }
}

@end

void AndroidGovNistJavaxSipHeaderCallID_init(AndroidGovNistJavaxSipHeaderCallID *self) {
  AndroidGovNistJavaxSipHeaderSIPHeader_initWithNSString_(self, AndroidJavaxSipHeaderCallIdHeader_NAME);
}

AndroidGovNistJavaxSipHeaderCallID *new_AndroidGovNistJavaxSipHeaderCallID_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderCallID, init)
}

AndroidGovNistJavaxSipHeaderCallID *create_AndroidGovNistJavaxSipHeaderCallID_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderCallID, init)
}

void AndroidGovNistJavaxSipHeaderCallID_initWithNSString_(AndroidGovNistJavaxSipHeaderCallID *self, NSString *callId) {
  AndroidGovNistJavaxSipHeaderSIPHeader_initWithNSString_(self, AndroidJavaxSipHeaderCallIdHeader_NAME);
  JreStrongAssignAndConsume(&self->callIdentifier_, new_AndroidGovNistJavaxSipHeaderCallIdentifier_initWithNSString_(callId));
}

AndroidGovNistJavaxSipHeaderCallID *new_AndroidGovNistJavaxSipHeaderCallID_initWithNSString_(NSString *callId) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderCallID, initWithNSString_, callId)
}

AndroidGovNistJavaxSipHeaderCallID *create_AndroidGovNistJavaxSipHeaderCallID_initWithNSString_(NSString *callId) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderCallID, initWithNSString_, callId)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderCallID)
