//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/Challenge.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/core/NameValue.h"
#include "android/gov/nist/core/NameValueList.h"
#include "android/gov/nist/javax/sip/header/Challenge.h"
#include "android/gov/nist/javax/sip/header/SIPObject.h"
#include "java/lang/StringBuilder.h"

inline jlong AndroidGovNistJavaxSipHeaderChallenge_get_serialVersionUID();
#define AndroidGovNistJavaxSipHeaderChallenge_serialVersionUID 5944455875924336LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipHeaderChallenge, serialVersionUID, jlong)

inline NSString *AndroidGovNistJavaxSipHeaderChallenge_get_DOMAIN();
inline NSString *AndroidGovNistJavaxSipHeaderChallenge_set_DOMAIN(NSString *value);
static NSString *AndroidGovNistJavaxSipHeaderChallenge_DOMAIN = @"domain";
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipHeaderChallenge, DOMAIN, NSString *)

inline NSString *AndroidGovNistJavaxSipHeaderChallenge_get_REALM();
inline NSString *AndroidGovNistJavaxSipHeaderChallenge_set_REALM(NSString *value);
static NSString *AndroidGovNistJavaxSipHeaderChallenge_REALM = @"realm";
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipHeaderChallenge, REALM, NSString *)

inline NSString *AndroidGovNistJavaxSipHeaderChallenge_get_OPAQUE();
inline NSString *AndroidGovNistJavaxSipHeaderChallenge_set_OPAQUE(NSString *value);
static NSString *AndroidGovNistJavaxSipHeaderChallenge_OPAQUE = @"opaque";
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipHeaderChallenge, OPAQUE, NSString *)

inline NSString *AndroidGovNistJavaxSipHeaderChallenge_get_ALGORITHM();
inline NSString *AndroidGovNistJavaxSipHeaderChallenge_set_ALGORITHM(NSString *value);
static NSString *AndroidGovNistJavaxSipHeaderChallenge_ALGORITHM = @"algorithm";
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipHeaderChallenge, ALGORITHM, NSString *)

inline NSString *AndroidGovNistJavaxSipHeaderChallenge_get_QOP();
inline NSString *AndroidGovNistJavaxSipHeaderChallenge_set_QOP(NSString *value);
static NSString *AndroidGovNistJavaxSipHeaderChallenge_QOP = @"qop";
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipHeaderChallenge, QOP, NSString *)

inline NSString *AndroidGovNistJavaxSipHeaderChallenge_get_STALE();
inline NSString *AndroidGovNistJavaxSipHeaderChallenge_set_STALE(NSString *value);
static NSString *AndroidGovNistJavaxSipHeaderChallenge_STALE = @"stale";
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipHeaderChallenge, STALE, NSString *)

inline NSString *AndroidGovNistJavaxSipHeaderChallenge_get_SIGNATURE();
inline NSString *AndroidGovNistJavaxSipHeaderChallenge_set_SIGNATURE(NSString *value);
static NSString *AndroidGovNistJavaxSipHeaderChallenge_SIGNATURE = @"signature";
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipHeaderChallenge, SIGNATURE, NSString *)

inline NSString *AndroidGovNistJavaxSipHeaderChallenge_get_RESPONSE();
inline NSString *AndroidGovNistJavaxSipHeaderChallenge_set_RESPONSE(NSString *value);
static NSString *AndroidGovNistJavaxSipHeaderChallenge_RESPONSE = @"response";
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipHeaderChallenge, RESPONSE, NSString *)

inline NSString *AndroidGovNistJavaxSipHeaderChallenge_get_SIGNED_BY();
inline NSString *AndroidGovNistJavaxSipHeaderChallenge_set_SIGNED_BY(NSString *value);
static NSString *AndroidGovNistJavaxSipHeaderChallenge_SIGNED_BY = @"signed-by";
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipHeaderChallenge, SIGNED_BY, NSString *)

inline NSString *AndroidGovNistJavaxSipHeaderChallenge_get_URI();
inline NSString *AndroidGovNistJavaxSipHeaderChallenge_set_URI(NSString *value);
static NSString *AndroidGovNistJavaxSipHeaderChallenge_URI = @"uri";
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipHeaderChallenge, URI, NSString *)

@implementation AndroidGovNistJavaxSipHeaderChallenge

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderChallenge_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)encode {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_initWithNSString_(scheme_) appendWithNSString:AndroidGovNistCoreGenericObject_SP])) appendWithNSString:[((AndroidGovNistCoreNameValueList *) nil_chk(authParams_)) encode]])) description];
}

- (NSString *)getScheme {
  return scheme_;
}

- (AndroidGovNistCoreNameValueList *)getAuthParams {
  return authParams_;
}

- (NSString *)getDomain {
  return (NSString *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk(authParams_)) getValueWithNSString:AndroidGovNistJavaxSipHeaderChallenge_DOMAIN], [NSString class]);
}

- (NSString *)getURI {
  return (NSString *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk(authParams_)) getValueWithNSString:AndroidGovNistJavaxSipHeaderChallenge_URI], [NSString class]);
}

- (NSString *)getOpaque {
  return (NSString *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk(authParams_)) getValueWithNSString:AndroidGovNistJavaxSipHeaderChallenge_OPAQUE], [NSString class]);
}

- (NSString *)getQOP {
  return (NSString *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk(authParams_)) getValueWithNSString:AndroidGovNistJavaxSipHeaderChallenge_QOP], [NSString class]);
}

- (NSString *)getAlgorithm {
  return (NSString *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk(authParams_)) getValueWithNSString:AndroidGovNistJavaxSipHeaderChallenge_ALGORITHM], [NSString class]);
}

- (NSString *)getStale {
  return (NSString *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk(authParams_)) getValueWithNSString:AndroidGovNistJavaxSipHeaderChallenge_STALE], [NSString class]);
}

- (NSString *)getSignature {
  return (NSString *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk(authParams_)) getValueWithNSString:AndroidGovNistJavaxSipHeaderChallenge_SIGNATURE], [NSString class]);
}

- (NSString *)getSignedBy {
  return (NSString *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk(authParams_)) getValueWithNSString:AndroidGovNistJavaxSipHeaderChallenge_SIGNED_BY], [NSString class]);
}

- (NSString *)getResponse {
  return (NSString *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk(authParams_)) getValueWithNSString:AndroidGovNistJavaxSipHeaderChallenge_RESPONSE], [NSString class]);
}

- (NSString *)getRealm {
  return (NSString *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk(authParams_)) getValueWithNSString:AndroidGovNistJavaxSipHeaderChallenge_REALM], [NSString class]);
}

- (NSString *)getParameterWithNSString:(NSString *)name {
  return (NSString *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk(authParams_)) getValueWithNSString:name], [NSString class]);
}

- (jboolean)hasParameterWithNSString:(NSString *)name {
  return [((AndroidGovNistCoreNameValueList *) nil_chk(authParams_)) getNameValueWithNSString:name] != nil;
}

- (jboolean)hasParameters {
  return [((AndroidGovNistCoreNameValueList *) nil_chk(authParams_)) size] != 0;
}

- (jboolean)removeParameterWithNSString:(NSString *)name {
  return [((AndroidGovNistCoreNameValueList *) nil_chk(authParams_)) delete__WithNSString:name];
}

- (void)removeParameters {
  JreStrongAssignAndConsume(&authParams_, new_AndroidGovNistCoreNameValueList_init());
}

- (void)setParameterWithAndroidGovNistCoreNameValue:(AndroidGovNistCoreNameValue *)nv {
  [((AndroidGovNistCoreNameValueList *) nil_chk(authParams_)) setWithAndroidGovNistCoreNameValue:nv];
}

- (void)setSchemeWithNSString:(NSString *)s {
  JreStrongAssign(&scheme_, s);
}

- (void)setAuthParamsWithAndroidGovNistCoreNameValueList:(AndroidGovNistCoreNameValueList *)a {
  JreStrongAssign(&authParams_, a);
}

- (id)java_clone {
  AndroidGovNistJavaxSipHeaderChallenge *retval = (AndroidGovNistJavaxSipHeaderChallenge *) cast_chk([super java_clone], [AndroidGovNistJavaxSipHeaderChallenge class]);
  if (self->authParams_ != nil) JreStrongAssign(&((AndroidGovNistJavaxSipHeaderChallenge *) nil_chk(retval))->authParams_, (AndroidGovNistCoreNameValueList *) cast_chk([self->authParams_ java_clone], [AndroidGovNistCoreNameValueList class]));
  return retval;
}

- (void)dealloc {
  RELEASE_(scheme_);
  RELEASE_(authParams_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValueList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(encode);
  methods[2].selector = @selector(getScheme);
  methods[3].selector = @selector(getAuthParams);
  methods[4].selector = @selector(getDomain);
  methods[5].selector = @selector(getURI);
  methods[6].selector = @selector(getOpaque);
  methods[7].selector = @selector(getQOP);
  methods[8].selector = @selector(getAlgorithm);
  methods[9].selector = @selector(getStale);
  methods[10].selector = @selector(getSignature);
  methods[11].selector = @selector(getSignedBy);
  methods[12].selector = @selector(getResponse);
  methods[13].selector = @selector(getRealm);
  methods[14].selector = @selector(getParameterWithNSString:);
  methods[15].selector = @selector(hasParameterWithNSString:);
  methods[16].selector = @selector(hasParameters);
  methods[17].selector = @selector(removeParameterWithNSString:);
  methods[18].selector = @selector(removeParameters);
  methods[19].selector = @selector(setParameterWithAndroidGovNistCoreNameValue:);
  methods[20].selector = @selector(setSchemeWithNSString:);
  methods[21].selector = @selector(setAuthParamsWithAndroidGovNistCoreNameValueList:);
  methods[22].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipHeaderChallenge_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "DOMAIN", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 10, -1, -1 },
    { "REALM", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 11, -1, -1 },
    { "OPAQUE", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 12, -1, -1 },
    { "ALGORITHM", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 13, -1, -1 },
    { "QOP", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 14, -1, -1 },
    { "STALE", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 15, -1, -1 },
    { "SIGNATURE", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 16, -1, -1 },
    { "RESPONSE", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 17, -1, -1 },
    { "SIGNED_BY", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 18, -1, -1 },
    { "URI", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 19, -1, -1 },
    { "scheme_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "authParams_", "LAndroidGovNistCoreNameValueList;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getParameter", "LNSString;", "hasParameter", "removeParameter", "setParameter", "LAndroidGovNistCoreNameValue;", "setScheme", "setAuthParams", "LAndroidGovNistCoreNameValueList;", "clone", &AndroidGovNistJavaxSipHeaderChallenge_DOMAIN, &AndroidGovNistJavaxSipHeaderChallenge_REALM, &AndroidGovNistJavaxSipHeaderChallenge_OPAQUE, &AndroidGovNistJavaxSipHeaderChallenge_ALGORITHM, &AndroidGovNistJavaxSipHeaderChallenge_QOP, &AndroidGovNistJavaxSipHeaderChallenge_STALE, &AndroidGovNistJavaxSipHeaderChallenge_SIGNATURE, &AndroidGovNistJavaxSipHeaderChallenge_RESPONSE, &AndroidGovNistJavaxSipHeaderChallenge_SIGNED_BY, &AndroidGovNistJavaxSipHeaderChallenge_URI };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderChallenge = { "Challenge", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x1, 23, 13, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderChallenge;
}

@end

void AndroidGovNistJavaxSipHeaderChallenge_init(AndroidGovNistJavaxSipHeaderChallenge *self) {
  AndroidGovNistJavaxSipHeaderSIPObject_init(self);
  JreStrongAssignAndConsume(&self->authParams_, new_AndroidGovNistCoreNameValueList_init());
  [self->authParams_ setSeparatorWithNSString:AndroidGovNistCoreGenericObject_COMMA];
}

AndroidGovNistJavaxSipHeaderChallenge *new_AndroidGovNistJavaxSipHeaderChallenge_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderChallenge, init)
}

AndroidGovNistJavaxSipHeaderChallenge *create_AndroidGovNistJavaxSipHeaderChallenge_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderChallenge, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderChallenge)
