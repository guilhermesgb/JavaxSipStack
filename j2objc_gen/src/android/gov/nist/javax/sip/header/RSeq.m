//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/RSeq.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/header/RSeq.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "android/javax/sip/header/RSeqHeader.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"

inline jlong AndroidGovNistJavaxSipHeaderRSeq_get_serialVersionUID();
#define AndroidGovNistJavaxSipHeaderRSeq_serialVersionUID 8765762413224043394LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipHeaderRSeq, serialVersionUID, jlong)

@implementation AndroidGovNistJavaxSipHeaderRSeq

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderRSeq_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getSequenceNumber {
  return (jint) self->sequenceNumber_;
}

- (JavaLangStringBuilder *)encodeBodyWithJavaLangStringBuilder:(JavaLangStringBuilder *)retval {
  return [((JavaLangStringBuilder *) nil_chk(retval)) appendWithNSString:JavaLangLong_toStringWithLong_(self->sequenceNumber_)];
}

- (jlong)getSeqNumber {
  return self->sequenceNumber_;
}

- (void)setSeqNumberWithLong:(jlong)sequenceNumber {
  if (sequenceNumber <= 0 || sequenceNumber > JreLShift64(((jlong) 1), 32 - 1)) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(JreStrcat("$J", @"Bad seq number ", sequenceNumber));
  self->sequenceNumber_ = sequenceNumber;
}

- (void)setSequenceNumberWithInt:(jint)sequenceNumber {
  [self setSeqNumberWithLong:sequenceNumber];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getSequenceNumber);
  methods[2].selector = @selector(encodeBodyWithJavaLangStringBuilder:);
  methods[3].selector = @selector(getSeqNumber);
  methods[4].selector = @selector(setSeqNumberWithLong:);
  methods[5].selector = @selector(setSequenceNumberWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipHeaderRSeq_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "sequenceNumber_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "encodeBody", "LJavaLangStringBuilder;", "setSeqNumber", "J", "LAndroidJavaxSipInvalidArgumentException;", "setSequenceNumber", "I" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderRSeq = { "RSeq", "android.gov.nist.javax.sip.header", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderRSeq;
}

@end

void AndroidGovNistJavaxSipHeaderRSeq_init(AndroidGovNistJavaxSipHeaderRSeq *self) {
  AndroidGovNistJavaxSipHeaderSIPHeader_initWithNSString_(self, AndroidJavaxSipHeaderRSeqHeader_NAME);
}

AndroidGovNistJavaxSipHeaderRSeq *new_AndroidGovNistJavaxSipHeaderRSeq_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipHeaderRSeq, init)
}

AndroidGovNistJavaxSipHeaderRSeq *create_AndroidGovNistJavaxSipHeaderRSeq_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipHeaderRSeq, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderRSeq)
