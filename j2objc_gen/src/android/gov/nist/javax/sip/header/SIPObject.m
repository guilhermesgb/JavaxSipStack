//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/header/SIPObject.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/core/GenericObjectList.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/core/Match.h"
#include "android/gov/nist/javax/sip/header/SIPObject.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Modifier.h"

@implementation AndroidGovNistJavaxSipHeaderSIPObject

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipHeaderSIPObject_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dbgPrint {
  [super dbgPrint];
}

- (NSString *)encode {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaLangStringBuilder *)encodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  return [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:[self encode]];
}

- (jboolean)isEqual:(id)other {
  if (![[self java_getClass] isEqual:[nil_chk(other) java_getClass]]) return false;
  AndroidGovNistJavaxSipHeaderSIPObject *that = (AndroidGovNistJavaxSipHeaderSIPObject *) cast_chk(other, [AndroidGovNistJavaxSipHeaderSIPObject class]);
  IOSClass *myclass = [self java_getClass];
  IOSClass *hisclass = [other java_getClass];
  while (true) {
    IOSObjectArray *fields = [((IOSClass *) nil_chk(myclass)) getDeclaredFields];
    if (![((IOSClass *) nil_chk(hisclass)) isEqual:myclass]) return false;
    IOSObjectArray *hisfields = [hisclass getDeclaredFields];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
      JavaLangReflectField *f = IOSObjectArray_Get(fields, i);
      JavaLangReflectField *g = IOSObjectArray_Get(nil_chk(hisfields), i);
      jint modifier = [((JavaLangReflectField *) nil_chk(f)) getModifiers];
      if ((modifier & JavaLangReflectModifier_PRIVATE) == JavaLangReflectModifier_PRIVATE) continue;
      IOSClass *fieldType = [f getType];
      NSString *fieldName = [f getName];
      if ([((NSString *) nil_chk(fieldName)) compareToWithId:@"stringRepresentation"] == 0) {
        continue;
      }
      if ([fieldName compareToWithId:@"indentation"] == 0) {
        continue;
      }
      @try {
        if ([((IOSClass *) nil_chk(fieldType)) isPrimitive]) {
          NSString *fname = [fieldType description];
          if ([((NSString *) nil_chk(fname)) compareToWithId:@"int"] == 0) {
            if ([f getIntWithId:self] != [((JavaLangReflectField *) nil_chk(g)) getIntWithId:that]) return false;
          }
          else if ([fname compareToWithId:@"short"] == 0) {
            if ([f getShortWithId:self] != [((JavaLangReflectField *) nil_chk(g)) getShortWithId:that]) return false;
          }
          else if ([fname compareToWithId:@"char"] == 0) {
            if ([f getCharWithId:self] != [((JavaLangReflectField *) nil_chk(g)) getCharWithId:that]) return false;
          }
          else if ([fname compareToWithId:@"long"] == 0) {
            if ([f getLongWithId:self] != [((JavaLangReflectField *) nil_chk(g)) getLongWithId:that]) return false;
          }
          else if ([fname compareToWithId:@"boolean"] == 0) {
            if ([f getBooleanWithId:self] != [((JavaLangReflectField *) nil_chk(g)) getBooleanWithId:that]) return false;
          }
          else if ([fname compareToWithId:@"double"] == 0) {
            if ([f getDoubleWithId:self] != [((JavaLangReflectField *) nil_chk(g)) getDoubleWithId:that]) return false;
          }
          else if ([fname compareToWithId:@"float"] == 0) {
            if ([f getFloatWithId:self] != [((JavaLangReflectField *) nil_chk(g)) getFloatWithId:that]) return false;
          }
        }
        else if ([((JavaLangReflectField *) nil_chk(g)) getWithId:that] == [f getWithId:self]) continue;
        else if ([f getWithId:self] == nil && [g getWithId:that] != nil) return false;
        else if ([g getWithId:that] == nil && [f getWithId:self] != nil) return false;
        else if (![nil_chk([f getWithId:self]) isEqual:[g getWithId:that]]) return false;
      }
      @catch (JavaLangIllegalAccessException *ex1) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"accessed field ", fieldName)];
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"modifier  ", modifier)];
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"modifier.private  ", JavaLangReflectModifier_PRIVATE)];
        AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex1);
      }
    }
    if ([myclass isEqual:AndroidGovNistJavaxSipHeaderSIPObject_class_()]) break;
    else {
      myclass = [myclass getSuperclass];
      hisclass = [hisclass getSuperclass];
    }
  }
  return true;
}

- (jboolean)matchWithId:(id)other {
  if (other == nil) {
    return true;
  }
  if (![[self java_getClass] isEqual:[other java_getClass]]) return false;
  AndroidGovNistCoreGenericObject *that = (AndroidGovNistCoreGenericObject *) cast_chk(other, [AndroidGovNistCoreGenericObject class]);
  IOSClass *myclass = [self java_getClass];
  IOSClass *hisclass = [other java_getClass];
  while (true) {
    IOSObjectArray *fields = [((IOSClass *) nil_chk(myclass)) getDeclaredFields];
    IOSObjectArray *hisfields = [((IOSClass *) nil_chk(hisclass)) getDeclaredFields];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
      JavaLangReflectField *f = IOSObjectArray_Get(fields, i);
      JavaLangReflectField *g = IOSObjectArray_Get(nil_chk(hisfields), i);
      jint modifier = [((JavaLangReflectField *) nil_chk(f)) getModifiers];
      if ((modifier & JavaLangReflectModifier_PRIVATE) == JavaLangReflectModifier_PRIVATE) continue;
      IOSClass *fieldType = [f getType];
      NSString *fieldName = [f getName];
      if ([((NSString *) nil_chk(fieldName)) compareToWithId:@"stringRepresentation"] == 0) {
        continue;
      }
      if ([fieldName compareToWithId:@"indentation"] == 0) {
        continue;
      }
      @try {
        if ([((IOSClass *) nil_chk(fieldType)) isPrimitive]) {
          NSString *fname = [fieldType description];
          if ([((NSString *) nil_chk(fname)) compareToWithId:@"int"] == 0) {
            if ([f getIntWithId:self] != [((JavaLangReflectField *) nil_chk(g)) getIntWithId:that]) return false;
          }
          else if ([fname compareToWithId:@"short"] == 0) {
            if ([f getShortWithId:self] != [((JavaLangReflectField *) nil_chk(g)) getShortWithId:that]) return false;
          }
          else if ([fname compareToWithId:@"char"] == 0) {
            if ([f getCharWithId:self] != [((JavaLangReflectField *) nil_chk(g)) getCharWithId:that]) return false;
          }
          else if ([fname compareToWithId:@"long"] == 0) {
            if ([f getLongWithId:self] != [((JavaLangReflectField *) nil_chk(g)) getLongWithId:that]) return false;
          }
          else if ([fname compareToWithId:@"boolean"] == 0) {
            if ([f getBooleanWithId:self] != [((JavaLangReflectField *) nil_chk(g)) getBooleanWithId:that]) return false;
          }
          else if ([fname compareToWithId:@"double"] == 0) {
            if ([f getDoubleWithId:self] != [((JavaLangReflectField *) nil_chk(g)) getDoubleWithId:that]) return false;
          }
          else if ([fname compareToWithId:@"float"] == 0) {
            if ([f getFloatWithId:self] != [((JavaLangReflectField *) nil_chk(g)) getFloatWithId:that]) return false;
          }
          else {
            AndroidGovNistCoreInternalErrorHandler_handleExceptionWithNSString_(@"unknown type");
          }
        }
        else {
          id myObj = [f getWithId:self];
          id hisObj = [((JavaLangReflectField *) nil_chk(g)) getWithId:that];
          if (hisObj != nil && myObj == nil) return false;
          else if (hisObj == nil && myObj != nil) continue;
          else if (hisObj == nil && myObj == nil) continue;
          else if ([hisObj isKindOfClass:[NSString class]] && [myObj isKindOfClass:[NSString class]]) {
            if ([((NSString *) nil_chk(([((NSString *) nil_chk(((NSString *) cast_chk(hisObj, [NSString class])))) java_trim]))) isEqual:@""]) continue;
            if ([((NSString *) nil_chk(((NSString *) cast_chk(myObj, [NSString class])))) java_compareToIgnoreCase:(NSString *) cast_chk(hisObj, [NSString class])] != 0) return false;
          }
          else if (hisObj != nil && AndroidGovNistCoreGenericObject_isMySubclassWithIOSClass_([nil_chk(myObj) java_getClass]) && AndroidGovNistCoreGenericObject_isMySubclassWithIOSClass_([hisObj java_getClass]) && [[myObj java_getClass] isEqual:[hisObj java_getClass]] && [((AndroidGovNistCoreGenericObject *) cast_chk(hisObj, [AndroidGovNistCoreGenericObject class])) getMatcher] != nil) {
            NSString *myObjEncoded = [((AndroidGovNistCoreGenericObject *) nil_chk(((AndroidGovNistCoreGenericObject *) cast_chk(myObj, [AndroidGovNistCoreGenericObject class])))) encode];
            jboolean retval = [((id<AndroidGovNistCoreMatch>) nil_chk([((AndroidGovNistCoreGenericObject *) cast_chk(hisObj, [AndroidGovNistCoreGenericObject class])) getMatcher])) matchWithNSString:myObjEncoded];
            if (!retval) return false;
          }
          else if (AndroidGovNistCoreGenericObject_isMySubclassWithIOSClass_([nil_chk(myObj) java_getClass]) && ![((AndroidGovNistCoreGenericObject *) cast_chk(myObj, [AndroidGovNistCoreGenericObject class])) matchWithId:hisObj]) return false;
          else if (AndroidGovNistCoreGenericObjectList_isMySubclassWithIOSClass_([myObj java_getClass]) && ![((AndroidGovNistCoreGenericObjectList *) cast_chk(myObj, [AndroidGovNistCoreGenericObjectList class])) matchWithId:hisObj]) return false;
        }
      }
      @catch (JavaLangIllegalAccessException *ex1) {
        AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex1);
      }
    }
    if ([myclass isEqual:AndroidGovNistJavaxSipHeaderSIPObject_class_()]) break;
    else {
      myclass = [myclass getSuperclass];
      hisclass = [hisclass getSuperclass];
    }
  }
  return true;
}

- (NSString *)debugDump {
  JreStrongAssign(&stringRepresentation_, @"");
  IOSClass *myclass = [self java_getClass];
  [self sprintWithNSString:[myclass getName]];
  [self sprintWithNSString:@"{"];
  IOSObjectArray *fields = [myclass getDeclaredFields];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
    JavaLangReflectField *f = IOSObjectArray_Get(fields, i);
    jint modifier = [((JavaLangReflectField *) nil_chk(f)) getModifiers];
    if ((modifier & JavaLangReflectModifier_PRIVATE) == JavaLangReflectModifier_PRIVATE) continue;
    IOSClass *fieldType = [f getType];
    NSString *fieldName = [f getName];
    if ([((NSString *) nil_chk(fieldName)) compareToWithId:@"stringRepresentation"] == 0) {
      continue;
    }
    if ([fieldName compareToWithId:@"indentation"] == 0) {
      continue;
    }
    [self sprintWithNSString:JreStrcat("$C", fieldName, ':')];
    @try {
      if ([((IOSClass *) nil_chk(fieldType)) isPrimitive]) {
        NSString *fname = [fieldType description];
        [self sprintWithNSString:JreStrcat("$C", fname, ':')];
        if ([((NSString *) nil_chk(fname)) compareToWithId:@"int"] == 0) {
          jint intfield = [f getIntWithId:self];
          [self sprintWithInt:intfield];
        }
        else if ([fname compareToWithId:@"short"] == 0) {
          jshort shortField = [f getShortWithId:self];
          [self sprintWithShort:shortField];
        }
        else if ([fname compareToWithId:@"char"] == 0) {
          jchar charField = [f getCharWithId:self];
          [self sprintWithChar:charField];
        }
        else if ([fname compareToWithId:@"long"] == 0) {
          jlong longField = [f getLongWithId:self];
          [self sprintWithLong:longField];
        }
        else if ([fname compareToWithId:@"boolean"] == 0) {
          jboolean booleanField = [f getBooleanWithId:self];
          [self sprintWithBoolean:booleanField];
        }
        else if ([fname compareToWithId:@"double"] == 0) {
          jdouble doubleField = [f getDoubleWithId:self];
          [self sprintWithDouble:doubleField];
        }
        else if ([fname compareToWithId:@"float"] == 0) {
          jfloat floatField = [f getFloatWithId:self];
          [self sprintWithFloat:floatField];
        }
      }
      else if ([AndroidGovNistCoreGenericObject_class_() isAssignableFrom:fieldType]) {
        if ([f getWithId:self] != nil) {
          [self sprintWithNSString:[((AndroidGovNistCoreGenericObject *) nil_chk(((AndroidGovNistCoreGenericObject *) cast_chk([f getWithId:self], [AndroidGovNistCoreGenericObject class])))) debugDumpWithInt:indentation_ + 1]];
        }
        else {
          [self sprintWithNSString:@"<null>"];
        }
      }
      else if ([AndroidGovNistCoreGenericObjectList_class_() isAssignableFrom:fieldType]) {
        if ([f getWithId:self] != nil) {
          [self sprintWithNSString:[((AndroidGovNistCoreGenericObjectList *) nil_chk(((AndroidGovNistCoreGenericObjectList *) cast_chk([f getWithId:self], [AndroidGovNistCoreGenericObjectList class])))) debugDumpWithInt:indentation_ + 1]];
        }
        else {
          [self sprintWithNSString:@"<null>"];
        }
      }
      else {
        if ([f getWithId:self] != nil) {
          [self sprintWithNSString:JreStrcat("$C", [[nil_chk([f getWithId:self]) java_getClass] getName], ':')];
        }
        else {
          [self sprintWithNSString:JreStrcat("$C", [fieldType getName], ':')];
        }
        [self sprintWithNSString:@"{"];
        if ([f getWithId:self] != nil) {
          [self sprintWithNSString:[nil_chk([f getWithId:self]) description]];
        }
        else {
          [self sprintWithNSString:@"<null>"];
        }
        [self sprintWithNSString:@"}"];
      }
    }
    @catch (JavaLangIllegalAccessException *ex1) {
      continue;
    }
  }
  [self sprintWithNSString:@"}"];
  return stringRepresentation_;
}

- (NSString *)debugDumpWithInt:(jint)indent {
  jint save = indentation_;
  indentation_ = indent;
  NSString *retval = [self debugDump];
  indentation_ = save;
  return retval;
}

- (NSString *)description {
  return [self encode];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(dbgPrint);
  methods[2].selector = @selector(encode);
  methods[3].selector = @selector(encodeWithJavaLangStringBuilder:);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(matchWithId:);
  methods[6].selector = @selector(debugDump);
  methods[7].selector = @selector(debugDumpWithInt:);
  methods[8].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "encode", "LJavaLangStringBuilder;", "equals", "LNSObject;", "match", "debugDump", "I", "toString" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipHeaderSIPObject = { "SIPObject", "android.gov.nist.javax.sip.header", ptrTable, methods, NULL, 7, 0x401, 9, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipHeaderSIPObject;
}

@end

void AndroidGovNistJavaxSipHeaderSIPObject_init(AndroidGovNistJavaxSipHeaderSIPObject *self) {
  AndroidGovNistCoreGenericObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipHeaderSIPObject)
