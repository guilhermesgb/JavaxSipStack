//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/clientauthutils/CredentialsCache.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidGovNistJavaxSipClientauthutilsCredentialsCache")
#ifdef RESTRICT_AndroidGovNistJavaxSipClientauthutilsCredentialsCache
#define INCLUDE_ALL_AndroidGovNistJavaxSipClientauthutilsCredentialsCache 0
#else
#define INCLUDE_ALL_AndroidGovNistJavaxSipClientauthutilsCredentialsCache 1
#endif
#undef RESTRICT_AndroidGovNistJavaxSipClientauthutilsCredentialsCache

#if !defined (AndroidGovNistJavaxSipClientauthutilsCredentialsCache_) && (INCLUDE_ALL_AndroidGovNistJavaxSipClientauthutilsCredentialsCache || defined(INCLUDE_AndroidGovNistJavaxSipClientauthutilsCredentialsCache))
#define AndroidGovNistJavaxSipClientauthutilsCredentialsCache_

@protocol AndroidGovNistJavaxSipStackTimersSipTimer;
@protocol AndroidJavaxSipHeaderAuthorizationHeader;
@protocol JavaUtilCollection;

@interface AndroidGovNistJavaxSipClientauthutilsCredentialsCache : NSObject

#pragma mark Public

- (void)removeAuthenticationHeaderWithNSString:(NSString *)callId;

#pragma mark Package-Private

- (instancetype)initWithAndroidGovNistJavaxSipStackTimersSipTimer:(id<AndroidGovNistJavaxSipStackTimersSipTimer>)timer;

- (void)cacheAuthorizationHeaderWithNSString:(NSString *)callId
withAndroidJavaxSipHeaderAuthorizationHeader:(id<AndroidJavaxSipHeaderAuthorizationHeader>)authorization
                                     withInt:(jint)cacheTime;

- (id<JavaUtilCollection>)getCachedAuthorizationHeadersWithNSString:(NSString *)callid;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipClientauthutilsCredentialsCache)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipClientauthutilsCredentialsCache_initWithAndroidGovNistJavaxSipStackTimersSipTimer_(AndroidGovNistJavaxSipClientauthutilsCredentialsCache *self, id<AndroidGovNistJavaxSipStackTimersSipTimer> timer);

FOUNDATION_EXPORT AndroidGovNistJavaxSipClientauthutilsCredentialsCache *new_AndroidGovNistJavaxSipClientauthutilsCredentialsCache_initWithAndroidGovNistJavaxSipStackTimersSipTimer_(id<AndroidGovNistJavaxSipStackTimersSipTimer> timer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipClientauthutilsCredentialsCache *create_AndroidGovNistJavaxSipClientauthutilsCredentialsCache_initWithAndroidGovNistJavaxSipStackTimersSipTimer_(id<AndroidGovNistJavaxSipStackTimersSipTimer> timer);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipClientauthutilsCredentialsCache)

#endif

#if !defined (AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask_) && (INCLUDE_ALL_AndroidGovNistJavaxSipClientauthutilsCredentialsCache || defined(INCLUDE_AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask))
#define AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask_

#define RESTRICT_AndroidGovNistJavaxSipStackSIPStackTimerTask 1
#define INCLUDE_AndroidGovNistJavaxSipStackSIPStackTimerTask 1
#include "android/gov/nist/javax/sip/stack/SIPStackTimerTask.h"

@class AndroidGovNistJavaxSipClientauthutilsCredentialsCache;

@interface AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask : AndroidGovNistJavaxSipStackSIPStackTimerTask {
 @public
  NSString *callId_;
  NSString *userName_;
}

#pragma mark Public

- (instancetype)initWithAndroidGovNistJavaxSipClientauthutilsCredentialsCache:(AndroidGovNistJavaxSipClientauthutilsCredentialsCache *)outer$
                                                                 withNSString:(NSString *)userName
                                                                 withNSString:(NSString *)callId;

- (void)runTask;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask, callId_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask, userName_, NSString *)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask_initWithAndroidGovNistJavaxSipClientauthutilsCredentialsCache_withNSString_withNSString_(AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask *self, AndroidGovNistJavaxSipClientauthutilsCredentialsCache *outer$, NSString *userName, NSString *callId);

FOUNDATION_EXPORT AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask *new_AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask_initWithAndroidGovNistJavaxSipClientauthutilsCredentialsCache_withNSString_withNSString_(AndroidGovNistJavaxSipClientauthutilsCredentialsCache *outer$, NSString *userName, NSString *callId) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask *create_AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask_initWithAndroidGovNistJavaxSipClientauthutilsCredentialsCache_withNSString_withNSString_(AndroidGovNistJavaxSipClientauthutilsCredentialsCache *outer$, NSString *userName, NSString *callId);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidGovNistJavaxSipClientauthutilsCredentialsCache")
