//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/clientauthutils/CredentialsCache.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/clientauthutils/CredentialsCache.h"
#include "android/gov/nist/javax/sip/stack/SIPStackTimerTask.h"
#include "android/gov/nist/javax/sip/stack/timers/SipTimer.h"
#include "android/javax/sip/header/AuthorizationHeader.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Collection.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

@interface AndroidGovNistJavaxSipClientauthutilsCredentialsCache () {
 @public
  JavaUtilConcurrentConcurrentHashMap *authorizationHeaders_;
  id<AndroidGovNistJavaxSipStackTimersSipTimer> timer_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipClientauthutilsCredentialsCache, authorizationHeaders_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipClientauthutilsCredentialsCache, timer_, id<AndroidGovNistJavaxSipStackTimersSipTimer>)

@interface AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask () {
 @public
  AndroidGovNistJavaxSipClientauthutilsCredentialsCache *this$0_;
}

@end

@implementation AndroidGovNistJavaxSipClientauthutilsCredentialsCache

- (instancetype)initWithAndroidGovNistJavaxSipStackTimersSipTimer:(id<AndroidGovNistJavaxSipStackTimersSipTimer>)timer {
  AndroidGovNistJavaxSipClientauthutilsCredentialsCache_initWithAndroidGovNistJavaxSipStackTimersSipTimer_(self, timer);
  return self;
}

- (void)cacheAuthorizationHeaderWithNSString:(NSString *)callId
withAndroidJavaxSipHeaderAuthorizationHeader:(id<AndroidJavaxSipHeaderAuthorizationHeader>)authorization
                                     withInt:(jint)cacheTime {
  NSString *user = [((id<AndroidJavaxSipHeaderAuthorizationHeader>) nil_chk(authorization)) getUsername];
  if (callId == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Call ID is null!");
  if (authorization == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Null authorization domain");
  id<JavaUtilList> authHeaders = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(authorizationHeaders_)) getWithId:callId];
  if (authHeaders == nil) {
    authHeaders = create_JavaUtilLinkedList_init();
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(authorizationHeaders_)) putWithId:callId withId:authHeaders];
  }
  else {
    NSString *realm = [authorization getRealm];
    for (id<JavaUtilListIterator> li = [authHeaders listIterator]; [((id<JavaUtilListIterator>) nil_chk(li)) hasNext]; ) {
      id<AndroidJavaxSipHeaderAuthorizationHeader> authHeader = [li next];
      if ([((NSString *) nil_chk(realm)) isEqual:[((id<AndroidJavaxSipHeaderAuthorizationHeader>) nil_chk(authHeader)) getRealm]]) {
        [li remove];
      }
    }
  }
  [authHeaders addWithId:authorization];
  AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask *timeoutTask = create_AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask_initWithAndroidGovNistJavaxSipClientauthutilsCredentialsCache_withNSString_withNSString_(self, callId, user);
  if (cacheTime != -1) [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk(self->timer_)) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:timeoutTask withLong:cacheTime * 1000];
}

- (id<JavaUtilCollection>)getCachedAuthorizationHeadersWithNSString:(NSString *)callid {
  if (callid == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Null arg!");
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->authorizationHeaders_)) getWithId:callid];
}

- (void)removeAuthenticationHeaderWithNSString:(NSString *)callId {
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->authorizationHeaders_)) removeWithId:callId];
}

- (void)dealloc {
  RELEASE_(authorizationHeaders_);
  RELEASE_(timer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x0, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackTimersSipTimer:);
  methods[1].selector = @selector(cacheAuthorizationHeaderWithNSString:withAndroidJavaxSipHeaderAuthorizationHeader:withInt:);
  methods[2].selector = @selector(getCachedAuthorizationHeadersWithNSString:);
  methods[3].selector = @selector(removeAuthenticationHeaderWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "authorizationHeaders_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
    { "timer_", "LAndroidGovNistJavaxSipStackTimersSipTimer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackTimersSipTimer;", "cacheAuthorizationHeader", "LNSString;LAndroidJavaxSipHeaderAuthorizationHeader;I", "getCachedAuthorizationHeaders", "LNSString;", "(Ljava/lang/String;)Ljava/util/Collection<Landroid/javax/sip/header/AuthorizationHeader;>;", "removeAuthenticationHeader", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/util/List<Landroid/javax/sip/header/AuthorizationHeader;>;>;", "LAndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipClientauthutilsCredentialsCache = { "CredentialsCache", "android.gov.nist.javax.sip.clientauthutils", ptrTable, methods, fields, 7, 0x0, 4, 2, -1, 8, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipClientauthutilsCredentialsCache;
}

@end

void AndroidGovNistJavaxSipClientauthutilsCredentialsCache_initWithAndroidGovNistJavaxSipStackTimersSipTimer_(AndroidGovNistJavaxSipClientauthutilsCredentialsCache *self, id<AndroidGovNistJavaxSipStackTimersSipTimer> timer) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->authorizationHeaders_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssign(&self->timer_, timer);
}

AndroidGovNistJavaxSipClientauthutilsCredentialsCache *new_AndroidGovNistJavaxSipClientauthutilsCredentialsCache_initWithAndroidGovNistJavaxSipStackTimersSipTimer_(id<AndroidGovNistJavaxSipStackTimersSipTimer> timer) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipClientauthutilsCredentialsCache, initWithAndroidGovNistJavaxSipStackTimersSipTimer_, timer)
}

AndroidGovNistJavaxSipClientauthutilsCredentialsCache *create_AndroidGovNistJavaxSipClientauthutilsCredentialsCache_initWithAndroidGovNistJavaxSipStackTimersSipTimer_(id<AndroidGovNistJavaxSipStackTimersSipTimer> timer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipClientauthutilsCredentialsCache, initWithAndroidGovNistJavaxSipStackTimersSipTimer_, timer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipClientauthutilsCredentialsCache)

@implementation AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask

- (instancetype)initWithAndroidGovNistJavaxSipClientauthutilsCredentialsCache:(AndroidGovNistJavaxSipClientauthutilsCredentialsCache *)outer$
                                                                 withNSString:(NSString *)userName
                                                                 withNSString:(NSString *)callId {
  AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask_initWithAndroidGovNistJavaxSipClientauthutilsCredentialsCache_withNSString_withNSString_(self, outer$, userName, callId);
  return self;
}

- (void)runTask {
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->authorizationHeaders_)) removeWithId:callId_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(callId_);
  RELEASE_(userName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipClientauthutilsCredentialsCache:withNSString:withNSString:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipClientauthutilsCredentialsCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "callId_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "userName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "LAndroidGovNistJavaxSipClientauthutilsCredentialsCache;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask = { "TimeoutTask", "android.gov.nist.javax.sip.clientauthutils", ptrTable, methods, fields, 7, 0x0, 2, 3, 1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask;
}

@end

void AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask_initWithAndroidGovNistJavaxSipClientauthutilsCredentialsCache_withNSString_withNSString_(AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask *self, AndroidGovNistJavaxSipClientauthutilsCredentialsCache *outer$, NSString *userName, NSString *callId) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
  JreStrongAssign(&self->callId_, callId);
  JreStrongAssign(&self->userName_, userName);
}

AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask *new_AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask_initWithAndroidGovNistJavaxSipClientauthutilsCredentialsCache_withNSString_withNSString_(AndroidGovNistJavaxSipClientauthutilsCredentialsCache *outer$, NSString *userName, NSString *callId) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask, initWithAndroidGovNistJavaxSipClientauthutilsCredentialsCache_withNSString_withNSString_, outer$, userName, callId)
}

AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask *create_AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask_initWithAndroidGovNistJavaxSipClientauthutilsCredentialsCache_withNSString_withNSString_(AndroidGovNistJavaxSipClientauthutilsCredentialsCache *outer$, NSString *userName, NSString *callId) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask, initWithAndroidGovNistJavaxSipClientauthutilsCredentialsCache_withNSString_withNSString_, outer$, userName, callId)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipClientauthutilsCredentialsCache_TimeoutTask)
