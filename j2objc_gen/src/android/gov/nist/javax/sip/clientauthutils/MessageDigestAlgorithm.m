//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/clientauthutils/MessageDigestAlgorithm.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/clientauthutils/MessageDigestAlgorithm.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/security/MessageDigest.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "org/slf4j/Logger.h"

@interface AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm ()

+ (NSString *)HWithNSString:(NSString *)data;

+ (NSString *)KDWithNSString:(NSString *)secret
                withNSString:(NSString *)data;

+ (NSString *)toHexStringWithByteArray:(IOSByteArray *)b;

@end

inline IOSCharArray *AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_get_toHex();
static IOSCharArray *AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_toHex;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm, toHex, IOSCharArray *)

__attribute__((unused)) static NSString *AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_HWithNSString_(NSString *data);

__attribute__((unused)) static NSString *AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_KDWithNSString_withNSString_(NSString *secret, NSString *data);

__attribute__((unused)) static NSString *AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_toHexStringWithByteArray_(IOSByteArray *b);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm)

@implementation AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)calculateResponseWithNSString:(NSString *)algorithm
                               withNSString:(NSString *)hashUserNameRealmPasswd
                               withNSString:(NSString *)nonce_value
                               withNSString:(NSString *)nc_value
                               withNSString:(NSString *)cnonce_value
                               withNSString:(NSString *)method
                               withNSString:(NSString *)digest_uri_value
                               withNSString:(NSString *)entity_body
                               withNSString:(NSString *)qop_value
                         withOrgSlf4jLogger:(id<OrgSlf4jLogger>)stackLogger {
  return AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_calculateResponseWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgSlf4jLogger_(algorithm, hashUserNameRealmPasswd, nonce_value, nc_value, cnonce_value, method, digest_uri_value, entity_body, qop_value, stackLogger);
}

+ (NSString *)calculateResponseWithNSString:(NSString *)algorithm
                               withNSString:(NSString *)username_value
                               withNSString:(NSString *)realm_value
                               withNSString:(NSString *)passwd
                               withNSString:(NSString *)nonce_value
                               withNSString:(NSString *)nc_value
                               withNSString:(NSString *)cnonce_value
                               withNSString:(NSString *)method
                               withNSString:(NSString *)digest_uri_value
                               withNSString:(NSString *)entity_body
                               withNSString:(NSString *)qop_value
                         withOrgSlf4jLogger:(id<OrgSlf4jLogger>)stackLogger {
  return AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_calculateResponseWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgSlf4jLogger_(algorithm, username_value, realm_value, passwd, nonce_value, nc_value, cnonce_value, method, digest_uri_value, entity_body, qop_value, stackLogger);
}

+ (NSString *)HWithNSString:(NSString *)data {
  return AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_HWithNSString_(data);
}

+ (NSString *)KDWithNSString:(NSString *)secret
                withNSString:(NSString *)data {
  return AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_KDWithNSString_withNSString_(secret, data);
}

+ (NSString *)toHexStringWithByteArray:(IOSByteArray *)b {
  return AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_toHexStringWithByteArray_(b);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(calculateResponseWithNSString:withNSString:withNSString:withNSString:withNSString:withNSString:withNSString:withNSString:withNSString:withOrgSlf4jLogger:);
  methods[2].selector = @selector(calculateResponseWithNSString:withNSString:withNSString:withNSString:withNSString:withNSString:withNSString:withNSString:withNSString:withNSString:withNSString:withOrgSlf4jLogger:);
  methods[3].selector = @selector(HWithNSString:);
  methods[4].selector = @selector(KDWithNSString:withNSString:);
  methods[5].selector = @selector(toHexStringWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "toHex", "[C", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "calculateResponse", "LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;LOrgSlf4jLogger;", "LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;LOrgSlf4jLogger;", "H", "LNSString;", "KD", "LNSString;LNSString;", "toHexString", "[B", &AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_toHex };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm = { "MessageDigestAlgorithm", "android.gov.nist.javax.sip.clientauthutils", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm class]) {
    JreStrongAssignAndConsume(&AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_toHex, [IOSCharArray newArrayWithChars:(jchar[]){ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' } count:16]);
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm)
  }
}

@end

void AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_init(AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm *self) {
  NSObject_init(self);
}

AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm *new_AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm, init)
}

AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm *create_AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm, init)
}

NSString *AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_calculateResponseWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgSlf4jLogger_(NSString *algorithm, NSString *hashUserNameRealmPasswd, NSString *nonce_value, NSString *nc_value, NSString *cnonce_value, NSString *method, NSString *digest_uri_value, NSString *entity_body, NSString *qop_value, id<OrgSlf4jLogger> stackLogger) {
  AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_initialize();
  [((id<OrgSlf4jLogger>) nil_chk(stackLogger)) debugWithNSString:JreStrcat("$$$$$$$$$$$$$$$$$$", @"trying to authenticate using : ", algorithm, @", ", hashUserNameRealmPasswd, @", ", nonce_value, @", ", nc_value, @", ", cnonce_value, @", ", method, @", ", digest_uri_value, @", ", entity_body, @", ", qop_value)];
  if (hashUserNameRealmPasswd == nil || method == nil || digest_uri_value == nil || nonce_value == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Null parameter to MessageDigestAlgorithm.calculateResponse()");
  if (cnonce_value == nil || ((jint) [cnonce_value length]) == 0) @throw create_JavaLangNullPointerException_initWithNSString_(@"cnonce_value may not be absent for MD5-Sess algorithm.");
  NSString *A2 = nil;
  if (qop_value == nil || ((jint) [((NSString *) nil_chk([qop_value java_trim])) length]) == 0 || [((NSString *) nil_chk([qop_value java_trim])) java_equalsIgnoreCase:@"auth"]) {
    A2 = JreStrcat("$C$", method, ':', digest_uri_value);
  }
  else {
    if (entity_body == nil) entity_body = @"";
    A2 = JreStrcat("$C$C$", method, ':', digest_uri_value, ':', AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_HWithNSString_(entity_body));
  }
  NSString *request_digest = nil;
  if (cnonce_value != nil && qop_value != nil && nc_value != nil && ([qop_value java_equalsIgnoreCase:@"auth"] || [qop_value java_equalsIgnoreCase:@"auth-int"])) {
    request_digest = AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_KDWithNSString_withNSString_(hashUserNameRealmPasswd, JreStrcat("$C$C$C$C$", nonce_value, ':', nc_value, ':', cnonce_value, ':', qop_value, ':', AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_HWithNSString_(A2)));
  }
  else {
    request_digest = AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_KDWithNSString_withNSString_(hashUserNameRealmPasswd, JreStrcat("$C$", nonce_value, ':', AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_HWithNSString_(A2)));
  }
  return request_digest;
}

NSString *AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_calculateResponseWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgSlf4jLogger_(NSString *algorithm, NSString *username_value, NSString *realm_value, NSString *passwd, NSString *nonce_value, NSString *nc_value, NSString *cnonce_value, NSString *method, NSString *digest_uri_value, NSString *entity_body, NSString *qop_value, id<OrgSlf4jLogger> stackLogger) {
  AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_initialize();
  [((id<OrgSlf4jLogger>) nil_chk(stackLogger)) debugWithNSString:JreStrcat("$$$$$$$Z$$$$$$$$$$$$$$", @"trying to authenticate using : ", algorithm, @", ", username_value, @", ", realm_value, @", ", (passwd != nil && ((jint) [((NSString *) nil_chk([passwd java_trim])) length]) > 0), @", ", nonce_value, @", ", nc_value, @", ", cnonce_value, @", ", method, @", ", digest_uri_value, @", ", entity_body, @", ", qop_value)];
  if (username_value == nil || realm_value == nil || passwd == nil || method == nil || digest_uri_value == nil || nonce_value == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Null parameter to MessageDigestAlgorithm.calculateResponse()");
  NSString *A1 = nil;
  if (algorithm == nil || ((jint) [((NSString *) nil_chk([algorithm java_trim])) length]) == 0 || [((NSString *) nil_chk([algorithm java_trim])) java_equalsIgnoreCase:@"MD5"]) {
    A1 = JreStrcat("$C$C$", username_value, ':', realm_value, ':', passwd);
  }
  else {
    if (cnonce_value == nil || ((jint) [cnonce_value length]) == 0) @throw create_JavaLangNullPointerException_initWithNSString_(@"cnonce_value may not be absent for MD5-Sess algorithm.");
    A1 = JreStrcat("$C$C$", AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_HWithNSString_(JreStrcat("$C$C$", username_value, ':', realm_value, ':', passwd)), ':', nonce_value, ':', cnonce_value);
  }
  NSString *A2 = nil;
  if (qop_value == nil || ((jint) [((NSString *) nil_chk([qop_value java_trim])) length]) == 0 || [((NSString *) nil_chk([qop_value java_trim])) java_equalsIgnoreCase:@"auth"]) {
    A2 = JreStrcat("$C$", method, ':', digest_uri_value);
  }
  else {
    if (entity_body == nil) entity_body = @"";
    A2 = JreStrcat("$C$C$", method, ':', digest_uri_value, ':', AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_HWithNSString_(entity_body));
  }
  NSString *request_digest = nil;
  if (cnonce_value != nil && qop_value != nil && nc_value != nil && ([qop_value java_equalsIgnoreCase:@"auth"] || [qop_value java_equalsIgnoreCase:@"auth-int"])) {
    request_digest = AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_KDWithNSString_withNSString_(AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_HWithNSString_(A1), JreStrcat("$C$C$C$C$", nonce_value, ':', nc_value, ':', cnonce_value, ':', qop_value, ':', AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_HWithNSString_(A2)));
  }
  else {
    request_digest = AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_KDWithNSString_withNSString_(AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_HWithNSString_(A1), JreStrcat("$C$", nonce_value, ':', AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_HWithNSString_(A2)));
  }
  return request_digest;
}

NSString *AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_HWithNSString_(NSString *data) {
  AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_initialize();
  @try {
    JavaSecurityMessageDigest *digest = JavaSecurityMessageDigest_getInstanceWithNSString_(@"MD5");
    return AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_toHexStringWithByteArray_([((JavaSecurityMessageDigest *) nil_chk(digest)) digestWithByteArray:[((NSString *) nil_chk(data)) java_getBytes]]);
  }
  @catch (JavaSecurityNoSuchAlgorithmException *ex) {
    @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(@"Failed to instantiate an MD5 algorithm", ex);
  }
}

NSString *AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_KDWithNSString_withNSString_(NSString *secret, NSString *data) {
  AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_initialize();
  return AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_HWithNSString_(JreStrcat("$C$", secret, ':', data));
}

NSString *AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_toHexStringWithByteArray_(IOSByteArray *b) {
  AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_initialize();
  jint pos = 0;
  IOSCharArray *c = [IOSCharArray arrayWithLength:((IOSByteArray *) nil_chk(b))->size_ * 2];
  for (jint i = 0; i < b->size_; i++) {
    *IOSCharArray_GetRef(c, pos++) = IOSCharArray_Get(nil_chk(AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_toHex), (JreRShift32(IOSByteArray_Get(b, i), 4)) & (jint) 0x0F);
    *IOSCharArray_GetRef(c, pos++) = IOSCharArray_Get(AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm_toHex, IOSByteArray_Get(b, i) & (jint) 0x0f);
  }
  return [NSString java_stringWithCharacters:c];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipClientauthutilsMessageDigestAlgorithm)
