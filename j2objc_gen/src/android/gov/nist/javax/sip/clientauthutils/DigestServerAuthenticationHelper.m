//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/clientauthutils/DigestServerAuthenticationHelper.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/javax/sip/clientauthutils/DigestServerAuthenticationHelper.h"
#include "android/javax/sip/address/URI.h"
#include "android/javax/sip/header/Header.h"
#include "android/javax/sip/header/HeaderFactory.h"
#include "android/javax/sip/header/ProxyAuthenticateHeader.h"
#include "android/javax/sip/header/ProxyAuthorizationHeader.h"
#include "android/javax/sip/message/Request.h"
#include "android/javax/sip/message/Response.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/security/MessageDigest.h"
#include "java/util/Date.h"
#include "java/util/Random.h"

@interface AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper () {
 @public
  JavaSecurityMessageDigest *messageDigest_;
}

- (NSString *)generateNonce;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper, messageDigest_, JavaSecurityMessageDigest *)

inline IOSCharArray *AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_get_toHex();
static IOSCharArray *AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_toHex;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper, toHex, IOSCharArray *)

__attribute__((unused)) static NSString *AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_generateNonce(AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper *self);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper)

NSString *AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_DEFAULT_ALGORITHM = @"MD5";
NSString *AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_DEFAULT_SCHEME = @"Digest";

@implementation AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)toHexStringWithByteArray:(IOSByteArray *)b {
  return AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_toHexStringWithByteArray_(b);
}

- (NSString *)generateNonce {
  return AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_generateNonce(self);
}

- (void)generateChallengeWithAndroidJavaxSipHeaderHeaderFactory:(id<AndroidJavaxSipHeaderHeaderFactory>)headerFactory
                             withAndroidJavaxSipMessageResponse:(id<AndroidJavaxSipMessageResponse>)response
                                                   withNSString:(NSString *)realm {
  @try {
    id<AndroidJavaxSipHeaderProxyAuthenticateHeader> proxyAuthenticate = [((id<AndroidJavaxSipHeaderHeaderFactory>) nil_chk(headerFactory)) createProxyAuthenticateHeaderWithNSString:AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_DEFAULT_SCHEME];
    [((id<AndroidJavaxSipHeaderProxyAuthenticateHeader>) nil_chk(proxyAuthenticate)) setParameterWithNSString:@"realm" withNSString:realm];
    [proxyAuthenticate setParameterWithNSString:@"nonce" withNSString:AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_generateNonce(self)];
    [proxyAuthenticate setParameterWithNSString:@"opaque" withNSString:@""];
    [proxyAuthenticate setParameterWithNSString:@"stale" withNSString:@"FALSE"];
    [proxyAuthenticate setParameterWithNSString:@"algorithm" withNSString:AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_DEFAULT_ALGORITHM];
    [((id<AndroidJavaxSipMessageResponse>) nil_chk(response)) setHeaderWithAndroidJavaxSipHeaderHeader:proxyAuthenticate];
  }
  @catch (JavaLangException *ex) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
  }
}

- (jboolean)doAuthenticateHashedPasswordWithAndroidJavaxSipMessageRequest:(id<AndroidJavaxSipMessageRequest>)request
                                                             withNSString:(NSString *)hashedPassword {
  id<AndroidJavaxSipHeaderProxyAuthorizationHeader> authHeader = (id<AndroidJavaxSipHeaderProxyAuthorizationHeader>) cast_check([((id<AndroidJavaxSipMessageRequest>) nil_chk(request)) getHeaderWithNSString:AndroidJavaxSipHeaderProxyAuthorizationHeader_NAME], AndroidJavaxSipHeaderProxyAuthorizationHeader_class_());
  if (authHeader == nil) return false;
  NSString *realm = [authHeader getRealm];
  NSString *username = [authHeader getUsername];
  if (username == nil || realm == nil) {
    return false;
  }
  NSString *nonce = [authHeader getNonce];
  id<AndroidJavaxSipAddressURI> uri = [authHeader getURI];
  if (uri == nil) {
    return false;
  }
  NSString *A2 = JreStrcat("$C$", [((NSString *) nil_chk([request getMethod])) uppercaseString], ':', [uri description]);
  NSString *HA1 = hashedPassword;
  IOSByteArray *mdbytes = [((JavaSecurityMessageDigest *) nil_chk(messageDigest_)) digestWithByteArray:[A2 java_getBytes]];
  NSString *HA2 = AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_toHexStringWithByteArray_(mdbytes);
  NSString *cnonce = [authHeader getCNonce];
  NSString *KD = JreStrcat("$C$", HA1, ':', nonce);
  if (cnonce != nil) {
    JreStrAppend(&KD, "C$", ':', cnonce);
  }
  JreStrAppend(&KD, "C$", ':', HA2);
  mdbytes = [((JavaSecurityMessageDigest *) nil_chk(messageDigest_)) digestWithByteArray:[KD java_getBytes]];
  NSString *mdString = AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_toHexStringWithByteArray_(mdbytes);
  NSString *response = [authHeader getResponse];
  return [((NSString *) nil_chk(mdString)) isEqual:response];
}

- (jboolean)doAuthenticatePlainTextPasswordWithAndroidJavaxSipMessageRequest:(id<AndroidJavaxSipMessageRequest>)request
                                                                withNSString:(NSString *)pass {
  id<AndroidJavaxSipHeaderProxyAuthorizationHeader> authHeader = (id<AndroidJavaxSipHeaderProxyAuthorizationHeader>) cast_check([((id<AndroidJavaxSipMessageRequest>) nil_chk(request)) getHeaderWithNSString:AndroidJavaxSipHeaderProxyAuthorizationHeader_NAME], AndroidJavaxSipHeaderProxyAuthorizationHeader_class_());
  if (authHeader == nil) return false;
  NSString *realm = [authHeader getRealm];
  NSString *username = [authHeader getUsername];
  if (username == nil || realm == nil) {
    return false;
  }
  NSString *nonce = [authHeader getNonce];
  id<AndroidJavaxSipAddressURI> uri = [authHeader getURI];
  if (uri == nil) {
    return false;
  }
  NSString *A1 = JreStrcat("$C$C$", username, ':', realm, ':', pass);
  NSString *A2 = JreStrcat("$C$", [((NSString *) nil_chk([request getMethod])) uppercaseString], ':', [uri description]);
  IOSByteArray *mdbytes = [((JavaSecurityMessageDigest *) nil_chk(messageDigest_)) digestWithByteArray:[A1 java_getBytes]];
  NSString *HA1 = AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_toHexStringWithByteArray_(mdbytes);
  mdbytes = [((JavaSecurityMessageDigest *) nil_chk(messageDigest_)) digestWithByteArray:[A2 java_getBytes]];
  NSString *HA2 = AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_toHexStringWithByteArray_(mdbytes);
  NSString *cnonce = [authHeader getCNonce];
  NSString *KD = JreStrcat("$C$", HA1, ':', nonce);
  if (cnonce != nil) {
    JreStrAppend(&KD, "C$", ':', cnonce);
  }
  JreStrAppend(&KD, "C$", ':', HA2);
  mdbytes = [((JavaSecurityMessageDigest *) nil_chk(messageDigest_)) digestWithByteArray:[KD java_getBytes]];
  NSString *mdString = AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_toHexStringWithByteArray_(mdbytes);
  NSString *response = [authHeader getResponse];
  return [((NSString *) nil_chk(mdString)) isEqual:response];
}

- (void)dealloc {
  RELEASE_(messageDigest_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toHexStringWithByteArray:);
  methods[2].selector = @selector(generateNonce);
  methods[3].selector = @selector(generateChallengeWithAndroidJavaxSipHeaderHeaderFactory:withAndroidJavaxSipMessageResponse:withNSString:);
  methods[4].selector = @selector(doAuthenticateHashedPasswordWithAndroidJavaxSipMessageRequest:withNSString:);
  methods[5].selector = @selector(doAuthenticatePlainTextPasswordWithAndroidJavaxSipMessageRequest:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "messageDigest_", "LJavaSecurityMessageDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_ALGORITHM", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "DEFAULT_SCHEME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "toHex", "[C", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecurityNoSuchAlgorithmException;", "toHexString", "[B", "generateChallenge", "LAndroidJavaxSipHeaderHeaderFactory;LAndroidJavaxSipMessageResponse;LNSString;", "doAuthenticateHashedPassword", "LAndroidJavaxSipMessageRequest;LNSString;", "doAuthenticatePlainTextPassword", &AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_DEFAULT_ALGORITHM, &AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_DEFAULT_SCHEME, &AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_toHex };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper = { "DigestServerAuthenticationHelper", "android.gov.nist.javax.sip.clientauthutils", ptrTable, methods, fields, 7, 0x1, 6, 4, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper class]) {
    JreStrongAssignAndConsume(&AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_toHex, [IOSCharArray newArrayWithChars:(jchar[]){ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' } count:16]);
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper)
  }
}

@end

void AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_init(AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper *self) {
  NSObject_init(self);
  JreStrongAssign(&self->messageDigest_, JavaSecurityMessageDigest_getInstanceWithNSString_(AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_DEFAULT_ALGORITHM));
}

AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper *new_AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper, init)
}

AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper *create_AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper, init)
}

NSString *AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_toHexStringWithByteArray_(IOSByteArray *b) {
  AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_initialize();
  jint pos = 0;
  IOSCharArray *c = [IOSCharArray arrayWithLength:((IOSByteArray *) nil_chk(b))->size_ * 2];
  for (jint i = 0; i < b->size_; i++) {
    *IOSCharArray_GetRef(c, pos++) = IOSCharArray_Get(nil_chk(AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_toHex), (JreRShift32(IOSByteArray_Get(b, i), 4)) & (jint) 0x0F);
    *IOSCharArray_GetRef(c, pos++) = IOSCharArray_Get(AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_toHex, IOSByteArray_Get(b, i) & (jint) 0x0f);
  }
  return [NSString java_stringWithCharacters:c];
}

NSString *AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_generateNonce(AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper *self) {
  JavaUtilDate *date = create_JavaUtilDate_init();
  jlong time = [date getTime];
  JavaUtilRandom *rand = create_JavaUtilRandom_init();
  jlong pad = [rand nextLong];
  NSString *nonceString = JreStrcat("$$", [(create_JavaLangLong_initWithLong_(time)) description], [(create_JavaLangLong_initWithLong_(pad)) description]);
  IOSByteArray *mdbytes = [((JavaSecurityMessageDigest *) nil_chk(self->messageDigest_)) digestWithByteArray:[nonceString java_getBytes]];
  return AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper_toHexStringWithByteArray_(mdbytes);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipClientauthutilsDigestServerAuthenticationHelper)
