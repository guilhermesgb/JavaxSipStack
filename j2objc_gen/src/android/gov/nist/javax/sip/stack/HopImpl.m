//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/HopImpl.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/stack/HopImpl.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"

@implementation AndroidGovNistJavaxSipStackHopImpl

- (NSString *)description {
  return JreStrcat("$CIC$", host_, ':', port_, '/', transport_);
}

- (instancetype)initWithNSString:(NSString *)hostName
                         withInt:(jint)portNumber
                    withNSString:(NSString *)trans {
  AndroidGovNistJavaxSipStackHopImpl_initWithNSString_withInt_withNSString_(self, hostName, portNumber, trans);
  return self;
}

- (instancetype)initWithNSString:(NSString *)hop {
  AndroidGovNistJavaxSipStackHopImpl_initWithNSString_(self, hop);
  return self;
}

- (NSString *)getHost {
  return host_;
}

- (jint)getPort {
  return port_;
}

- (NSString *)getTransport {
  return transport_;
}

- (jboolean)isURIRoute {
  return uriRoute_;
}

- (void)setURIRouteFlag {
  uriRoute_ = true;
}

- (void)dealloc {
  RELEASE_(host_);
  RELEASE_(transport_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(description);
  methods[1].selector = @selector(initWithNSString:withInt:withNSString:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(getHost);
  methods[4].selector = @selector(getPort);
  methods[5].selector = @selector(getTransport);
  methods[6].selector = @selector(isURIRoute);
  methods[7].selector = @selector(setURIRouteFlag);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "host_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "transport_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "defaultRoute_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "uriRoute_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "LNSString;ILNSString;", "LNSString;", "LJavaLangIllegalArgumentException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackHopImpl = { "HopImpl", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x11, 8, 5, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackHopImpl;
}

@end

void AndroidGovNistJavaxSipStackHopImpl_initWithNSString_withInt_withNSString_(AndroidGovNistJavaxSipStackHopImpl *self, NSString *hostName, jint portNumber, NSString *trans) {
  NSObject_init(self);
  JreStrongAssign(&self->host_, hostName);
  if ([((NSString *) nil_chk(self->host_)) java_indexOfString:@":"] >= 0) if ([((NSString *) nil_chk(self->host_)) java_indexOfString:@"["] < 0) JreStrongAssign(&self->host_, JreStrcat("C$C", '[', self->host_, ']'));
  self->port_ = portNumber;
  JreStrongAssign(&self->transport_, trans);
}

AndroidGovNistJavaxSipStackHopImpl *new_AndroidGovNistJavaxSipStackHopImpl_initWithNSString_withInt_withNSString_(NSString *hostName, jint portNumber, NSString *trans) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackHopImpl, initWithNSString_withInt_withNSString_, hostName, portNumber, trans)
}

AndroidGovNistJavaxSipStackHopImpl *create_AndroidGovNistJavaxSipStackHopImpl_initWithNSString_withInt_withNSString_(NSString *hostName, jint portNumber, NSString *trans) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackHopImpl, initWithNSString_withInt_withNSString_, hostName, portNumber, trans)
}

void AndroidGovNistJavaxSipStackHopImpl_initWithNSString_(AndroidGovNistJavaxSipStackHopImpl *self, NSString *hop) {
  NSObject_init(self);
  if (hop == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Null arg!");
  jint brack = [hop java_indexOf:']'];
  jint colon = [hop java_indexOf:':' fromIndex:brack];
  jint slash = [hop java_indexOf:'/' fromIndex:colon];
  if (colon > 0) {
    JreStrongAssign(&self->host_, [hop java_substring:0 endIndex:colon]);
    NSString *portstr;
    if (slash > 0) {
      portstr = [hop java_substring:colon + 1 endIndex:slash];
      JreStrongAssign(&self->transport_, [hop java_substring:slash + 1]);
    }
    else {
      portstr = [hop java_substring:colon + 1];
      JreStrongAssign(&self->transport_, @"UDP");
    }
    @try {
      self->port_ = JavaLangInteger_parseIntWithNSString_(portstr);
    }
    @catch (JavaLangNumberFormatException *ex) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Bad port spec");
    }
  }
  else {
    if (slash > 0) {
      JreStrongAssign(&self->host_, [hop java_substring:0 endIndex:slash]);
      JreStrongAssign(&self->transport_, [hop java_substring:slash + 1]);
      self->port_ = [((NSString *) nil_chk(self->transport_)) java_equalsIgnoreCase:@"TLS"] ? 5061 : 5060;
    }
    else {
      JreStrongAssign(&self->host_, hop);
      JreStrongAssign(&self->transport_, @"UDP");
      self->port_ = 5060;
    }
  }
  if (self->host_ == nil || ((jint) [self->host_ length]) == 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"no host!");
  JreStrongAssign(&self->host_, [self->host_ java_trim]);
  JreStrongAssign(&self->transport_, [((NSString *) nil_chk(self->transport_)) java_trim]);
  if ((brack > 0) && [((NSString *) nil_chk(self->host_)) charAtWithInt:0] != '[') {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Bad IPv6 reference spec");
  }
}

AndroidGovNistJavaxSipStackHopImpl *new_AndroidGovNistJavaxSipStackHopImpl_initWithNSString_(NSString *hop) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackHopImpl, initWithNSString_, hop)
}

AndroidGovNistJavaxSipStackHopImpl *create_AndroidGovNistJavaxSipStackHopImpl_initWithNSString_(NSString *hop) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackHopImpl, initWithNSString_, hop)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackHopImpl)
