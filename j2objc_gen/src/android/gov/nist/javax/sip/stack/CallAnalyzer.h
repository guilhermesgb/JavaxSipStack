//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/CallAnalyzer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidGovNistJavaxSipStackCallAnalyzer")
#ifdef RESTRICT_AndroidGovNistJavaxSipStackCallAnalyzer
#define INCLUDE_ALL_AndroidGovNistJavaxSipStackCallAnalyzer 0
#else
#define INCLUDE_ALL_AndroidGovNistJavaxSipStackCallAnalyzer 1
#endif
#undef RESTRICT_AndroidGovNistJavaxSipStackCallAnalyzer

#if !defined (AndroidGovNistJavaxSipStackCallAnalyzer_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackCallAnalyzer || defined(INCLUDE_AndroidGovNistJavaxSipStackCallAnalyzer))
#define AndroidGovNistJavaxSipStackCallAnalyzer_

@class AndroidGovNistJavaxSipSipStackImpl;
@class AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration;
@class AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference;
@class AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo;
@class IOSObjectArray;
@class JavaLangLong;
@class JavaLangThread;
@class JavaUtilHashMap;

@interface AndroidGovNistJavaxSipStackCallAnalyzer : NSObject

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithAndroidGovNistJavaxSipSipStackImpl:(AndroidGovNistJavaxSipSipStackImpl *)stack;

- (void)configureWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)ref
     withAndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *)config;

- (void)enterWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)metricReference;

- (void)enterWithJavaLangThread:(JavaLangThread *)threadId
withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)metricReference;

- (JavaUtilHashMap *)getAttributesWithJavaLangThread:(JavaLangThread *)threadId;

- (NSString *)getCurrentStackWithJavaLangThread:(JavaLangThread *)thread;

- (AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)getMetricStatsWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)ref;

- (jint)getNumberOfThreads;

- (id)getObjectWithJavaLangThread:(JavaLangThread *)threadId
                     withNSString:(NSString *)objectName;

- (NSString *)getThreadDump;

- (JavaLangLong *)getTimeWithJavaLangThread:(JavaLangThread *)threadId
withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)metricReference;

- (jboolean)isAnalysisStartedWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)ref;

- (void)leaveWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)metricReference;

- (void)leaveWithJavaLangThread:(JavaLangThread *)threadId
withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)metricReference;

+ (void)mainWithNSStringArray:(IOSObjectArray *)arg;

- (void)resetStatsWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)metricReference;

- (void)setObjectWithJavaLangThread:(JavaLangThread *)threadId
withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)objectName
                             withId:(id)object;

- (void)startAnalysisWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)metricReference;

- (void)stop;

- (void)stopAnalysisWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)metricReference;

@end

J2OBJC_STATIC_INIT(AndroidGovNistJavaxSipStackCallAnalyzer)

inline jint AndroidGovNistJavaxSipStackCallAnalyzer_get_count();
inline jint AndroidGovNistJavaxSipStackCallAnalyzer_set_count(jint value);
inline jint *AndroidGovNistJavaxSipStackCallAnalyzer_getRef_count();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint AndroidGovNistJavaxSipStackCallAnalyzer_count;
J2OBJC_STATIC_FIELD_PRIMITIVE(AndroidGovNistJavaxSipStackCallAnalyzer, count, jint)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackCallAnalyzer_initWithAndroidGovNistJavaxSipSipStackImpl_(AndroidGovNistJavaxSipStackCallAnalyzer *self, AndroidGovNistJavaxSipSipStackImpl *stack);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer *new_AndroidGovNistJavaxSipStackCallAnalyzer_initWithAndroidGovNistJavaxSipSipStackImpl_(AndroidGovNistJavaxSipSipStackImpl *stack) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer *create_AndroidGovNistJavaxSipStackCallAnalyzer_initWithAndroidGovNistJavaxSipSipStackImpl_(AndroidGovNistJavaxSipSipStackImpl *stack);

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackCallAnalyzer_init(AndroidGovNistJavaxSipStackCallAnalyzer *self);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer *new_AndroidGovNistJavaxSipStackCallAnalyzer_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer *create_AndroidGovNistJavaxSipStackCallAnalyzer_init();

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackCallAnalyzer_mainWithNSStringArray_(IOSObjectArray *arg);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackCallAnalyzer)

#endif

#if !defined (AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackCallAnalyzer || defined(INCLUDE_AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo))
#define AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_

@class AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration;
@class JavaLangLong;
@class JavaUtilTimerTask;

@interface AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo : NSObject {
 @public
  JavaLangLong *totalTime_;
  JavaLangLong *numberOfEvents_;
  JavaLangLong *averageTime_;
  JavaLangLong *lastLoggedEventTime_;
  JavaUtilTimerTask *task_;
  AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *config_;
}

#pragma mark Public

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo, totalTime_, JavaLangLong *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo, numberOfEvents_, JavaLangLong *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo, averageTime_, JavaLangLong *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo, lastLoggedEventTime_, JavaLangLong *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo, task_, JavaUtilTimerTask *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo, config_, AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_init(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *self);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *new_AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *create_AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_init();

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo)

#endif

#if !defined (AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackCallAnalyzer || defined(INCLUDE_AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration))
#define AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_

@class JavaLangLong;

@interface AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration : NSObject {
 @public
  JavaLangLong *checkingInterval_;
  JavaLangLong *minimumDumpInterval_;
  JavaLangLong *stuckTimeBeforeDump_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)checkingInterval
                    withInt:(jint)minDumpInterval
                    withInt:(jint)stuckTimerBeforeDump;

- (instancetype)initWithJavaLangLong:(JavaLangLong *)checkingInterval
                    withJavaLangLong:(JavaLangLong *)minDumpInterval
                    withJavaLangLong:(JavaLangLong *)stuckTimerBeforeDump;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration, checkingInterval_, JavaLangLong *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration, minimumDumpInterval_, JavaLangLong *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration, stuckTimeBeforeDump_, JavaLangLong *)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_initWithJavaLangLong_withJavaLangLong_withJavaLangLong_(AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *self, JavaLangLong *checkingInterval, JavaLangLong *minDumpInterval, JavaLangLong *stuckTimerBeforeDump);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *new_AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_initWithJavaLangLong_withJavaLangLong_withJavaLangLong_(JavaLangLong *checkingInterval, JavaLangLong *minDumpInterval, JavaLangLong *stuckTimerBeforeDump) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *create_AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_initWithJavaLangLong_withJavaLangLong_withJavaLangLong_(JavaLangLong *checkingInterval, JavaLangLong *minDumpInterval, JavaLangLong *stuckTimerBeforeDump);

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_initWithInt_withInt_withInt_(AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *self, jint checkingInterval, jint minDumpInterval, jint stuckTimerBeforeDump);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *new_AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_initWithInt_withInt_withInt_(jint checkingInterval, jint minDumpInterval, jint stuckTimerBeforeDump) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *create_AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_initWithInt_withInt_withInt_(jint checkingInterval, jint minDumpInterval, jint stuckTimerBeforeDump);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration)

#endif

#if !defined (AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackCallAnalyzer || defined(INCLUDE_AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference))
#define AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_

@interface AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference : NSObject {
 @public
  NSString *name_;
}

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)name;

- (jboolean)isEqual:(id)other;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference, name_, NSString *)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_initWithNSString_(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *self, NSString *name);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *new_AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *create_AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_initWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference)

#endif

#if !defined (AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackCallAnalyzer || defined(INCLUDE_AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap))
#define AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap_

#define RESTRICT_JavaUtilWeakHashMap 1
#define INCLUDE_JavaUtilWeakHashMap 1
#include "java/util/WeakHashMap.h"

@class AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference;
@class AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo;
@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilFunctionFunction;

@interface AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap : JavaUtilWeakHashMap

#pragma mark Public

- (instancetype)init;

- (AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)computeIfAbsentWithId:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)arg0
                                                     withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg1;

- (AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)computeIfPresentWithId:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)arg0
                                                    withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)computeWithId:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)arg0
                                           withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)getWithId:(id)key;

- (AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)getOrDefaultWithId:(id)arg0
                                                                        withId:(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)arg1;

- (AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)mergeWithId:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)arg0
                                                                 withId:(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)arg1
                                         withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg2;

- (AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)putIfAbsentWithId:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)arg0
                                                                       withId:(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)arg1;

- (AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)putWithId:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)arg0
                                                               withId:(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)arg1;

- (AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)removeWithId:(id)arg0;

- (AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)replaceWithId:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)arg0
                                                                   withId:(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap_init(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *self);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *new_AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *create_AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap_init();

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap)

#endif

#if !defined (AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackCallAnalyzer || defined(INCLUDE_AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace))
#define AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace_

@interface AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace : NSObject {
 @public
  jint delta_;
  NSString *trace_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)delta
               withNSString:(NSString *)trace;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace, trace_, NSString *)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace_initWithInt_withNSString_(AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace *self, jint delta, NSString *trace);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace *new_AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace_initWithInt_withNSString_(jint delta, NSString *trace) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace *create_AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace_initWithInt_withNSString_(jint delta, NSString *trace);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace)

#endif

#if !defined (AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackCallAnalyzer || defined(INCLUDE_AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo))
#define AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo_

@class JavaUtilLinkedList;

@interface AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo : NSObject {
 @public
  JavaUtilLinkedList *stackTraces_;
  id data_;
}

#pragma mark Public

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo, stackTraces_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo, data_, id)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo_init(AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo *self);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo *new_AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo *create_AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo_init();

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidGovNistJavaxSipStackCallAnalyzer")
