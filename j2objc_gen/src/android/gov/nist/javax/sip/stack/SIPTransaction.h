//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/SIPTransaction.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidGovNistJavaxSipStackSIPTransaction")
#ifdef RESTRICT_AndroidGovNistJavaxSipStackSIPTransaction
#define INCLUDE_ALL_AndroidGovNistJavaxSipStackSIPTransaction 0
#else
#define INCLUDE_ALL_AndroidGovNistJavaxSipStackSIPTransaction 1
#endif
#undef RESTRICT_AndroidGovNistJavaxSipStackSIPTransaction

#if !defined (AndroidGovNistJavaxSipStackSIPTransaction_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackSIPTransaction || defined(INCLUDE_AndroidGovNistJavaxSipStackSIPTransaction))
#define AndroidGovNistJavaxSipStackSIPTransaction_

#define RESTRICT_AndroidGovNistJavaxSipTransactionExt 1
#define INCLUDE_AndroidGovNistJavaxSipTransactionExt 1
#include "android/gov/nist/javax/sip/TransactionExt.h"

@class AndroidGovNistJavaxSipHeaderVia;
@class AndroidGovNistJavaxSipMessageSIPMessage;
@class AndroidGovNistJavaxSipMessageSIPRequest;
@class AndroidGovNistJavaxSipMessageSIPResponse;
@class AndroidGovNistJavaxSipReleaseReferencesStrategy;
@class AndroidGovNistJavaxSipSipProviderImpl;
@class AndroidGovNistJavaxSipStackMessageChannel;
@class AndroidGovNistJavaxSipStackMessageProcessor;
@class AndroidGovNistJavaxSipStackSIPDialog;
@class AndroidGovNistJavaxSipStackSIPTransactionStack;
@class AndroidJavaxSipTransactionState;
@class IOSObjectArray;
@class JavaNetInetAddress;
@protocol AndroidGovNistJavaxSipStackSIPTransactionEventListener;
@protocol AndroidJavaxSipDialog;
@protocol AndroidJavaxSipMessageRequest;
@protocol AndroidJavaxSipMessageResponse;
@protocol JavaUtilList;

@protocol AndroidGovNistJavaxSipStackSIPTransaction < AndroidGovNistJavaxSipTransactionExt, JavaObject >

- (NSString *)getBranchId;

- (void)cleanUp;

- (void)setOriginalRequestWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)newOriginalRequest;

- (AndroidGovNistJavaxSipMessageSIPRequest *)getOriginalRequest;

- (id<AndroidJavaxSipMessageRequest>)getRequest;

- (jboolean)isDialogCreatingTransaction;

- (jboolean)isInviteTransaction;

- (jboolean)isCancelTransaction;

- (jboolean)isByeTransaction;

- (AndroidGovNistJavaxSipStackMessageChannel *)getMessageChannel;

- (void)setBranchWithNSString:(NSString *)newBranch;

- (NSString *)getBranch;

- (NSString *)getMethod;

- (jlong)getCSeq;

- (void)setStateWithInt:(jint)newState;

- (jint)getInternalState;

- (AndroidJavaxSipTransactionState *)getState;

- (jboolean)isTerminated;

- (NSString *)getHost;

- (NSString *)getKey;

- (jint)getPort;

- (AndroidGovNistJavaxSipStackSIPTransactionStack *)getSIPStack;

- (NSString *)getPeerAddress;

- (jint)getPeerPort;

- (NSString *)getPeerProtocol;

- (jint)getPeerPacketSourcePort;

- (JavaNetInetAddress *)getPeerPacketSourceAddress;

- (NSString *)getTransport;

- (jboolean)isReliable;

- (AndroidGovNistJavaxSipHeaderVia *)getViaHeader;

- (void)sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)messageToSend;

- (void)addEventListenerWithAndroidGovNistJavaxSipStackSIPTransactionEventListener:(id<AndroidGovNistJavaxSipStackSIPTransactionEventListener>)newListener;

- (void)removeEventListenerWithAndroidGovNistJavaxSipStackSIPTransactionEventListener:(id<AndroidGovNistJavaxSipStackSIPTransactionEventListener>)oldListener;

- (id<AndroidJavaxSipDialog>)getDialog;

- (void)setDialogWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)sipDialog
                                             withNSString:(NSString *)dialogId;

- (jint)getRetransmitTimer;

- (NSString *)getViaHost;

- (AndroidGovNistJavaxSipMessageSIPResponse *)getLastResponse;

- (id<AndroidJavaxSipMessageResponse>)getResponse;

- (NSString *)getTransactionId;

- (NSUInteger)hash;

- (jint)getViaPort;

- (jboolean)doesCancelMatchTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)requestToTest;

- (void)setRetransmitTimerWithInt:(jint)retransmitTimer;

- (void)close;

- (jboolean)isSecure;

- (AndroidGovNistJavaxSipStackMessageProcessor *)getMessageProcessor;

- (void)setApplicationDataWithId:(id)applicationData;

- (id)getApplicationData;

- (void)setEncapsulatedChannelWithAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)messageChannel;

- (AndroidGovNistJavaxSipSipProviderImpl *)getSipProvider;

- (void)raiseIOExceptionEvent;

- (jboolean)acquireSem;

- (void)releaseSem;

- (jboolean)passToListener;

- (void)setPassToListener;

- (NSString *)getCipherSuite;

- (IOSObjectArray *)getLocalCertificates;

- (IOSObjectArray *)getPeerCertificates;

- (id<JavaUtilList>)extractCertIdentities;

- (jboolean)isMessagePartOfTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)messageToTest;

- (AndroidGovNistJavaxSipReleaseReferencesStrategy *)getReleaseReferencesStrategy;

- (void)setReleaseReferencesStrategyWithAndroidGovNistJavaxSipReleaseReferencesStrategy:(AndroidGovNistJavaxSipReleaseReferencesStrategy *)releaseReferenceStrategy;

- (jint)getTimerD;

- (jint)getTimerT2;

- (jint)getTimerT4;

- (void)setTimerDWithInt:(jint)interval;

- (void)setTimerT2WithInt:(jint)interval;

- (void)setTimerT4WithInt:(jint)interval;

- (void)setForkIdWithNSString:(NSString *)forkId;

- (NSString *)getForkId;

- (void)cancelMaxTxLifeTimeTimer;

- (NSString *)getMergeId;

- (jlong)getAuditTag;

- (void)setAuditTagWithLong:(jlong)auditTag;

- (void)semRelease;

- (jboolean)isTransactionMapped;

- (void)setTransactionMappedWithBoolean:(jboolean)transactionMapped;

- (void)fireTimeoutTimer;

- (void)raiseErrorEventWithInt:(jint)errorEventID;

- (void)fireTimer;

- (jboolean)isServerTransaction;

- (void)startTransactionTimer;

- (void)fireRetransmissionTimer;

- (jboolean)testAndSetTransactionTerminatedEvent;

- (void)scheduleMaxTxLifeTimeTimer;

- (void)setCollectionTimeWithInt:(jint)collectionTime;

- (void)disableRetransmissionTimer;

- (void)disableTimeoutTimer;

- (jint)getTimerK;

- (jint)getTimerI;

- (jint)getT2;

- (jint)getT4;

- (jint)getBaseTimerInterval;

@end

@interface AndroidGovNistJavaxSipStackSIPTransaction : NSObject

@end

J2OBJC_STATIC_INIT(AndroidGovNistJavaxSipStackSIPTransaction)

inline jint AndroidGovNistJavaxSipStackSIPTransaction_get_T1();
#define AndroidGovNistJavaxSipStackSIPTransaction_T1 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackSIPTransaction, T1, jint)

inline jint AndroidGovNistJavaxSipStackSIPTransaction_get_TIMER_A();
#define AndroidGovNistJavaxSipStackSIPTransaction_TIMER_A 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackSIPTransaction, TIMER_A, jint)

inline jint AndroidGovNistJavaxSipStackSIPTransaction_get_TIMER_B();
#define AndroidGovNistJavaxSipStackSIPTransaction_TIMER_B 64
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackSIPTransaction, TIMER_B, jint)

inline jint AndroidGovNistJavaxSipStackSIPTransaction_get_TIMER_J();
#define AndroidGovNistJavaxSipStackSIPTransaction_TIMER_J 64
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackSIPTransaction, TIMER_J, jint)

inline jint AndroidGovNistJavaxSipStackSIPTransaction_get_TIMER_F();
#define AndroidGovNistJavaxSipStackSIPTransaction_TIMER_F 64
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackSIPTransaction, TIMER_F, jint)

inline jint AndroidGovNistJavaxSipStackSIPTransaction_get_TIMER_H();
#define AndroidGovNistJavaxSipStackSIPTransaction_TIMER_H 64
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackSIPTransaction, TIMER_H, jint)

inline AndroidJavaxSipTransactionState *AndroidGovNistJavaxSipStackSIPTransaction_get_INITIAL_STATE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidJavaxSipTransactionState *AndroidGovNistJavaxSipStackSIPTransaction_INITIAL_STATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipStackSIPTransaction, INITIAL_STATE, AndroidJavaxSipTransactionState *)

inline AndroidJavaxSipTransactionState *AndroidGovNistJavaxSipStackSIPTransaction_get_TRYING_STATE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidJavaxSipTransactionState *AndroidGovNistJavaxSipStackSIPTransaction_TRYING_STATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipStackSIPTransaction, TRYING_STATE, AndroidJavaxSipTransactionState *)

inline AndroidJavaxSipTransactionState *AndroidGovNistJavaxSipStackSIPTransaction_get_CALLING_STATE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidJavaxSipTransactionState *AndroidGovNistJavaxSipStackSIPTransaction_CALLING_STATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipStackSIPTransaction, CALLING_STATE, AndroidJavaxSipTransactionState *)

inline AndroidJavaxSipTransactionState *AndroidGovNistJavaxSipStackSIPTransaction_get_PROCEEDING_STATE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidJavaxSipTransactionState *AndroidGovNistJavaxSipStackSIPTransaction_PROCEEDING_STATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipStackSIPTransaction, PROCEEDING_STATE, AndroidJavaxSipTransactionState *)

inline AndroidJavaxSipTransactionState *AndroidGovNistJavaxSipStackSIPTransaction_get_COMPLETED_STATE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidJavaxSipTransactionState *AndroidGovNistJavaxSipStackSIPTransaction_COMPLETED_STATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipStackSIPTransaction, COMPLETED_STATE, AndroidJavaxSipTransactionState *)

inline AndroidJavaxSipTransactionState *AndroidGovNistJavaxSipStackSIPTransaction_get_CONFIRMED_STATE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidJavaxSipTransactionState *AndroidGovNistJavaxSipStackSIPTransaction_CONFIRMED_STATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipStackSIPTransaction, CONFIRMED_STATE, AndroidJavaxSipTransactionState *)

inline AndroidJavaxSipTransactionState *AndroidGovNistJavaxSipStackSIPTransaction_get_TERMINATED_STATE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidJavaxSipTransactionState *AndroidGovNistJavaxSipStackSIPTransaction_TERMINATED_STATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipStackSIPTransaction, TERMINATED_STATE, AndroidJavaxSipTransactionState *)

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackSIPTransaction)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidGovNistJavaxSipStackSIPTransaction")
