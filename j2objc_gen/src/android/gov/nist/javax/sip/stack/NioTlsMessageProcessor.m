//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/NioTlsMessageProcessor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/net/SecurityManagerProvider.h"
#include "android/gov/nist/javax/sip/stack/ClientAuthType.h"
#include "android/gov/nist/javax/sip/stack/ConnectionOrientedMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/NioTcpMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/NioTcpMessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/NioTlsMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/NioTlsMessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/net/InetAddress.h"
#include "java/nio/channels/SocketChannel.h"
#include "java/security/cert/X509Certificate.h"
#include "javax/net/ssl/SSLContext.h"
#include "javax/net/ssl/TrustManager.h"
#include "javax/net/ssl/X509TrustManager.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackNioTlsMessageProcessor_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackNioTlsMessageProcessor_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackNioTlsMessageProcessor_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackNioTlsMessageProcessor, logger, id<OrgSlf4jLogger>)

@interface AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1 : NSObject < JavaxNetSslX509TrustManager >

- (instancetype)init;

- (IOSObjectArray *)getAcceptedIssuers;

- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certs
                                                      withNSString:(NSString *)authType;

- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certs
                                                      withNSString:(NSString *)authType;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1_init(AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1 *self);

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1 *new_AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1 *create_AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1_init();

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackNioTlsMessageProcessor)

@implementation AndroidGovNistJavaxSipStackNioTlsMessageProcessor

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)ipAddress
withAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
                                   withInt:(jint)port {
  AndroidGovNistJavaxSipStackNioTlsMessageProcessor_initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_(self, ipAddress, sipStack, port);
  return self;
}

- (AndroidGovNistJavaxSipStackNioTcpMessageChannel *)createMessageChannelWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor:(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *)nioTcpMessageProcessor
                                                                                              withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)client {
  return AndroidGovNistJavaxSipStackNioTlsMessageChannel_createWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(self, client);
}

- (AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *)constructMessageChannelWithJavaNetInetAddress:(JavaNetInetAddress *)targetHost
                                                                                                       withInt:(jint)port {
  return create_AndroidGovNistJavaxSipStackNioTlsMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(targetHost, port, sipStack_, self);
}

- (void)init__ {
  if ([((id<AndroidGovNistCoreNetSecurityManagerProvider>) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->securityManagerProvider_)) getKeyManagersWithBoolean:false] == nil || [((id<AndroidGovNistCoreNetSecurityManagerProvider>) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->securityManagerProvider_)) getTrustManagersWithBoolean:false] == nil || [((id<AndroidGovNistCoreNetSecurityManagerProvider>) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->securityManagerProvider_)) getTrustManagersWithBoolean:true] == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTlsMessageProcessor_logger)) debugWithNSString:@"TLS initialization failed due to NULL security config"];
    return;
  }
  JreStrongAssign(&sslServerCtx_, JavaxNetSslSSLContext_getInstanceWithNSString_(@"TLS"));
  JreStrongAssign(&sslClientCtx_, JavaxNetSslSSLContext_getInstanceWithNSString_(@"TLS"));
  if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getClientAuth] == JreLoadEnum(AndroidGovNistJavaxSipStackClientAuthType, DisabledAll)) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTlsMessageProcessor_logger)) debugWithNSString:JreStrcat("$@$", @"ClientAuth ", [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getClientAuth], @" bypassing all cert validations")];
    [((JavaxNetSslSSLContext *) nil_chk(sslServerCtx_)) init__WithJavaxNetSslKeyManagerArray:[((id<AndroidGovNistCoreNetSecurityManagerProvider>) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->securityManagerProvider_)) getKeyManagersWithBoolean:false] withJavaxNetSslTrustManagerArray:trustAllCerts_ withJavaSecuritySecureRandom:nil];
    [((JavaxNetSslSSLContext *) nil_chk(sslClientCtx_)) init__WithJavaxNetSslKeyManagerArray:[((id<AndroidGovNistCoreNetSecurityManagerProvider>) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->securityManagerProvider_)) getKeyManagersWithBoolean:true] withJavaxNetSslTrustManagerArray:trustAllCerts_ withJavaSecuritySecureRandom:nil];
  }
  else {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTlsMessageProcessor_logger)) debugWithNSString:JreStrcat("$@", @"ClientAuth ", [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getClientAuth])];
    [((JavaxNetSslSSLContext *) nil_chk(sslServerCtx_)) init__WithJavaxNetSslKeyManagerArray:[((id<AndroidGovNistCoreNetSecurityManagerProvider>) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->securityManagerProvider_)) getKeyManagersWithBoolean:false] withJavaxNetSslTrustManagerArray:[((id<AndroidGovNistCoreNetSecurityManagerProvider>) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->securityManagerProvider_)) getTrustManagersWithBoolean:false] withJavaSecuritySecureRandom:nil];
    [((JavaxNetSslSSLContext *) nil_chk(sslClientCtx_)) init__WithJavaxNetSslKeyManagerArray:[((id<AndroidGovNistCoreNetSecurityManagerProvider>) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->securityManagerProvider_)) getKeyManagersWithBoolean:true] withJavaxNetSslTrustManagerArray:[((id<AndroidGovNistCoreNetSecurityManagerProvider>) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->securityManagerProvider_)) getTrustManagersWithBoolean:true] withJavaSecuritySecureRandom:nil];
  }
}

- (void)dealloc {
  RELEASE_(trustAllCerts_);
  RELEASE_(sslServerCtx_);
  RELEASE_(sslClientCtx_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackNioTcpMessageChannel;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel;", 0x0, 4, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 6, -1, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaNetInetAddress:withAndroidGovNistJavaxSipStackSIPTransactionStack:withInt:);
  methods[1].selector = @selector(createMessageChannelWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor:withJavaNioChannelsSocketChannel:);
  methods[2].selector = @selector(constructMessageChannelWithJavaNetInetAddress:withInt:);
  methods[3].selector = @selector(init__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
    { "trustAllCerts_", "[LJavaxNetSslTrustManager;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sslServerCtx_", "LJavaxNetSslSSLContext;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sslClientCtx_", "LJavaxNetSslSSLContext;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetInetAddress;LAndroidGovNistJavaxSipStackSIPTransactionStack;I", "createMessageChannel", "LAndroidGovNistJavaxSipStackNioTcpMessageProcessor;LJavaNioChannelsSocketChannel;", "LJavaIoIOException;", "constructMessageChannel", "LJavaNetInetAddress;I", "init", "LJavaLangException;LJavaSecurityCertCertificateException;LJavaIoFileNotFoundException;LJavaIoIOException;", &AndroidGovNistJavaxSipStackNioTlsMessageProcessor_logger };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackNioTlsMessageProcessor = { "NioTlsMessageProcessor", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 4, 4, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackNioTlsMessageProcessor;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackNioTlsMessageProcessor class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackNioTlsMessageProcessor_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackNioTlsMessageProcessor_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackNioTlsMessageProcessor)
  }
}

@end

void AndroidGovNistJavaxSipStackNioTlsMessageProcessor_initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_(AndroidGovNistJavaxSipStackNioTlsMessageProcessor *self, JavaNetInetAddress *ipAddress, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, jint port) {
  AndroidGovNistJavaxSipStackNioTcpMessageProcessor_initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_(self, ipAddress, sipStack, port);
  JreStrongAssignAndConsume(&self->trustAllCerts_, [IOSObjectArray newArrayWithObjects:(id[]){ create_AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1_init() } count:1 type:JavaxNetSslTrustManager_class_()]);
  JreStrongAssign(&self->transport_, @"TLS");
  @try {
    [self init__];
  }
  @catch (JavaLangException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

AndroidGovNistJavaxSipStackNioTlsMessageProcessor *new_AndroidGovNistJavaxSipStackNioTlsMessageProcessor_initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_(JavaNetInetAddress *ipAddress, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, jint port) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTlsMessageProcessor, initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_, ipAddress, sipStack, port)
}

AndroidGovNistJavaxSipStackNioTlsMessageProcessor *create_AndroidGovNistJavaxSipStackNioTlsMessageProcessor_initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_(JavaNetInetAddress *ipAddress, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, jint port) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTlsMessageProcessor, initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_, ipAddress, sipStack, port)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackNioTlsMessageProcessor)

@implementation AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSObjectArray *)getAcceptedIssuers {
  return [IOSObjectArray arrayWithLength:0 type:JavaSecurityCertX509Certificate_class_()];
}

- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certs
                                                      withNSString:(NSString *)authType {
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTlsMessageProcessor, logger))) debugWithNSString:JreStrcat("$@$$", @"checkClientTrusted : Not validating certs ", certs, @" authType ", authType)];
}

- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certs
                                                      withNSString:(NSString *)authType {
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTlsMessageProcessor, logger))) debugWithNSString:JreStrcat("$@$$", @"checkServerTrusted : Not validating certs ", certs, @" authType ", authType)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertX509Certificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAcceptedIssuers);
  methods[2].selector = @selector(checkClientTrustedWithJavaSecurityCertX509CertificateArray:withNSString:);
  methods[3].selector = @selector(checkServerTrustedWithJavaSecurityCertX509CertificateArray:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "checkClientTrusted", "[LJavaSecurityCertX509Certificate;LNSString;", "checkServerTrusted", "LAndroidGovNistJavaxSipStackNioTlsMessageProcessor;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 3, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1;
}

@end

void AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1_init(AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1 *self) {
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1 *new_AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1, init)
}

AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1 *create_AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTlsMessageProcessor_1, init)
}
