//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/timers/DefaultSipTimer.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/stack/SIPStackTimerTask.h"
#include "android/gov/nist/javax/sip/stack/timers/DefaultSipTimer.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/util/Properties.h"
#include "java/util/Timer.h"
#include "java/util/TimerTask.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackTimersDefaultSipTimer_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackTimersDefaultSipTimer_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackTimersDefaultSipTimer_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackTimersDefaultSipTimer, logger, id<OrgSlf4jLogger>)

@interface AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask : JavaUtilTimerTask {
 @public
  AndroidGovNistJavaxSipStackSIPStackTimerTask *task_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackTimersDefaultSipTimer:(AndroidGovNistJavaxSipStackTimersDefaultSipTimer *)outer$
                        withAndroidGovNistJavaxSipStackSIPStackTimerTask:(AndroidGovNistJavaxSipStackSIPStackTimerTask *)task;

- (void)run;

- (jboolean)cancel;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask, task_, AndroidGovNistJavaxSipStackSIPStackTimerTask *)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask_initWithAndroidGovNistJavaxSipStackTimersDefaultSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask *self, AndroidGovNistJavaxSipStackTimersDefaultSipTimer *outer$, AndroidGovNistJavaxSipStackSIPStackTimerTask *task);

__attribute__((unused)) static AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask *new_AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask_initWithAndroidGovNistJavaxSipStackTimersDefaultSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(AndroidGovNistJavaxSipStackTimersDefaultSipTimer *outer$, AndroidGovNistJavaxSipStackSIPStackTimerTask *task) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask *create_AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask_initWithAndroidGovNistJavaxSipStackTimersDefaultSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(AndroidGovNistJavaxSipStackTimersDefaultSipTimer *outer$, AndroidGovNistJavaxSipStackSIPStackTimerTask *task);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackTimersDefaultSipTimer)

@implementation AndroidGovNistJavaxSipStackTimersDefaultSipTimer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackTimersDefaultSipTimer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:(AndroidGovNistJavaxSipStackSIPStackTimerTask *)task
                                                            withLong:(jlong)delay {
  if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(started_)) get]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"The SIP Stack Timer has been stopped, no new tasks can be scheduled !");
  }
  [super scheduleWithJavaUtilTimerTask:create_AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask_initWithAndroidGovNistJavaxSipStackTimersDefaultSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(self, task) withLong:delay];
  return true;
}

- (jboolean)scheduleWithFixedDelayWithAndroidGovNistJavaxSipStackSIPStackTimerTask:(AndroidGovNistJavaxSipStackSIPStackTimerTask *)task
                                                                          withLong:(jlong)delay
                                                                          withLong:(jlong)period {
  if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(started_)) get]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"The SIP Stack Timer has been stopped, no new tasks can be scheduled !");
  }
  [super scheduleWithJavaUtilTimerTask:create_AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask_initWithAndroidGovNistJavaxSipStackTimersDefaultSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(self, task) withLong:delay withLong:period];
  return true;
}

- (jboolean)cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:(AndroidGovNistJavaxSipStackSIPStackTimerTask *)task {
  return [((JavaUtilTimerTask *) nil_chk(((JavaUtilTimerTask *) cast_chk([((AndroidGovNistJavaxSipStackSIPStackTimerTask *) nil_chk(task)) getSipTimerTask], [JavaUtilTimerTask class])))) cancel];
}

- (void)startWithAndroidGovNistJavaxSipSipStackImpl:(AndroidGovNistJavaxSipSipStackImpl *)sipStack
                             withJavaUtilProperties:(JavaUtilProperties *)configurationProperties {
  JreStrongAssign(&sipStackImpl_, sipStack);
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(started_)) setWithBoolean:true];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTimersDefaultSipTimer_logger)) infoWithNSString:JreStrcat("$$$", @"the sip stack timer ", [[self java_getClass] getName], @" has been started")];
}

- (void)stop {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(started_)) setWithBoolean:false];
  [self cancel];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTimersDefaultSipTimer_logger)) infoWithNSString:JreStrcat("$$$", @"the sip stack timer ", [[self java_getClass] getName], @" has been stopped")];
}

- (jboolean)isStarted {
  return [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(started_)) get];
}

- (void)dealloc {
  RELEASE_(started_);
  RELEASE_(sipStackImpl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:withLong:);
  methods[2].selector = @selector(scheduleWithFixedDelayWithAndroidGovNistJavaxSipStackSIPStackTimerTask:withLong:withLong:);
  methods[3].selector = @selector(cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:);
  methods[4].selector = @selector(startWithAndroidGovNistJavaxSipSipStackImpl:withJavaUtilProperties:);
  methods[5].selector = @selector(stop);
  methods[6].selector = @selector(isStarted);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
    { "started_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sipStackImpl_", "LAndroidGovNistJavaxSipSipStackImpl;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "schedule", "LAndroidGovNistJavaxSipStackSIPStackTimerTask;J", "scheduleWithFixedDelay", "LAndroidGovNistJavaxSipStackSIPStackTimerTask;JJ", "cancel", "LAndroidGovNistJavaxSipStackSIPStackTimerTask;", "start", "LAndroidGovNistJavaxSipSipStackImpl;LJavaUtilProperties;", &AndroidGovNistJavaxSipStackTimersDefaultSipTimer_logger, "LAndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackTimersDefaultSipTimer = { "DefaultSipTimer", "android.gov.nist.javax.sip.stack.timers", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, 9, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackTimersDefaultSipTimer;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackTimersDefaultSipTimer class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackTimersDefaultSipTimer_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackTimersDefaultSipTimer_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackTimersDefaultSipTimer)
  }
}

@end

void AndroidGovNistJavaxSipStackTimersDefaultSipTimer_init(AndroidGovNistJavaxSipStackTimersDefaultSipTimer *self) {
  JavaUtilTimer_initWithNSString_(self, @"DefaultSipTimerThread");
  JreStrongAssignAndConsume(&self->started_, new_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false));
}

AndroidGovNistJavaxSipStackTimersDefaultSipTimer *new_AndroidGovNistJavaxSipStackTimersDefaultSipTimer_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackTimersDefaultSipTimer, init)
}

AndroidGovNistJavaxSipStackTimersDefaultSipTimer *create_AndroidGovNistJavaxSipStackTimersDefaultSipTimer_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackTimersDefaultSipTimer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackTimersDefaultSipTimer)

@implementation AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask

- (instancetype)initWithAndroidGovNistJavaxSipStackTimersDefaultSipTimer:(AndroidGovNistJavaxSipStackTimersDefaultSipTimer *)outer$
                        withAndroidGovNistJavaxSipStackSIPStackTimerTask:(AndroidGovNistJavaxSipStackSIPStackTimerTask *)task {
  AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask_initWithAndroidGovNistJavaxSipStackTimersDefaultSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(self, outer$, task);
  return self;
}

- (void)run {
  @try {
    if (task_ != nil) {
      [task_ runTask];
    }
  }
  @catch (NSException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"SIP stack timer task failed due to exception:"];
    [((NSException *) nil_chk(e)) printStackTrace];
  }
}

- (jboolean)cancel {
  if (task_ != nil) {
    [task_ cleanUpBeforeCancel];
    JreStrongAssign(&task_, nil);
  }
  return [super cancel];
}

- (void)dealloc {
  RELEASE_(task_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackTimersDefaultSipTimer:withAndroidGovNistJavaxSipStackSIPStackTimerTask:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "task_", "LAndroidGovNistJavaxSipStackSIPStackTimerTask;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPStackTimerTask;", "LAndroidGovNistJavaxSipStackTimersDefaultSipTimer;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask = { "DefaultTimerTask", "android.gov.nist.javax.sip.stack.timers", ptrTable, methods, fields, 7, 0x2, 3, 1, 1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask;
}

@end

void AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask_initWithAndroidGovNistJavaxSipStackTimersDefaultSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask *self, AndroidGovNistJavaxSipStackTimersDefaultSipTimer *outer$, AndroidGovNistJavaxSipStackSIPStackTimerTask *task) {
  JavaUtilTimerTask_init(self);
  JreStrongAssign(&self->task_, task);
  [((AndroidGovNistJavaxSipStackSIPStackTimerTask *) nil_chk(task)) setSipTimerTaskWithId:self];
}

AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask *new_AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask_initWithAndroidGovNistJavaxSipStackTimersDefaultSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(AndroidGovNistJavaxSipStackTimersDefaultSipTimer *outer$, AndroidGovNistJavaxSipStackSIPStackTimerTask *task) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask, initWithAndroidGovNistJavaxSipStackTimersDefaultSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_, outer$, task)
}

AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask *create_AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask_initWithAndroidGovNistJavaxSipStackTimersDefaultSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(AndroidGovNistJavaxSipStackTimersDefaultSipTimer *outer$, AndroidGovNistJavaxSipStackSIPStackTimerTask *task) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask, initWithAndroidGovNistJavaxSipStackTimersDefaultSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_, outer$, task)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackTimersDefaultSipTimer_DefaultTimerTask)
