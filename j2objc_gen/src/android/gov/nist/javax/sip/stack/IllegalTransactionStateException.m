//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/IllegalTransactionStateException.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/stack/IllegalTransactionStateException.h"
#include "android/javax/sip/SipException.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

__attribute__((unused)) static void AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_initWithNSString_withInt_(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *self, NSString *__name, jint __ordinal);

@implementation AndroidGovNistJavaxSipStackIllegalTransactionStateException

- (instancetype)initWithAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason:(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *)reason {
  AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(self, reason);
  return self;
}

- (instancetype)initWithNSString:(NSString *)message
withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason:(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *)reason {
  AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(self, message, reason);
  return self;
}

- (instancetype)initWithNSString:(NSString *)message
                 withNSException:(NSException *)cause
withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason:(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *)reason {
  AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withNSException_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(self, message, cause, reason);
  return self;
}

- (AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *)getReason {
  return (reason_);
}

- (void)dealloc {
  RELEASE_(reason_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason:);
  methods[1].selector = @selector(initWithNSString:withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason:);
  methods[2].selector = @selector(initWithNSString:withNSException:withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason:);
  methods[3].selector = @selector(getReason);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "reason_", "LAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason;", "LNSString;LAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason;", "LNSString;LNSException;LAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackIllegalTransactionStateException = { "IllegalTransactionStateException", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, 0, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackIllegalTransactionStateException;
}

@end

void AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(AndroidGovNistJavaxSipStackIllegalTransactionStateException *self, AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason) {
  AndroidJavaxSipSipException_init(self);
  JreStrongAssign(&self->reason_, JreLoadEnum(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, GenericReason));
  JreStrongAssign(&self->reason_, reason);
}

AndroidGovNistJavaxSipStackIllegalTransactionStateException *new_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackIllegalTransactionStateException, initWithAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_, reason)
}

AndroidGovNistJavaxSipStackIllegalTransactionStateException *create_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackIllegalTransactionStateException, initWithAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_, reason)
}

void AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(AndroidGovNistJavaxSipStackIllegalTransactionStateException *self, NSString *message, AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason) {
  AndroidJavaxSipSipException_initWithNSString_(self, message);
  JreStrongAssign(&self->reason_, JreLoadEnum(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, GenericReason));
  JreStrongAssign(&self->reason_, reason);
}

AndroidGovNistJavaxSipStackIllegalTransactionStateException *new_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(NSString *message, AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackIllegalTransactionStateException, initWithNSString_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_, message, reason)
}

AndroidGovNistJavaxSipStackIllegalTransactionStateException *create_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(NSString *message, AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackIllegalTransactionStateException, initWithNSString_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_, message, reason)
}

void AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withNSException_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(AndroidGovNistJavaxSipStackIllegalTransactionStateException *self, NSString *message, NSException *cause, AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason) {
  AndroidJavaxSipSipException_initWithNSString_withNSException_(self, message, cause);
  JreStrongAssign(&self->reason_, JreLoadEnum(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, GenericReason));
  JreStrongAssign(&self->reason_, reason);
}

AndroidGovNistJavaxSipStackIllegalTransactionStateException *new_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withNSException_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(NSString *message, NSException *cause, AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackIllegalTransactionStateException, initWithNSString_withNSException_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_, message, cause, reason)
}

AndroidGovNistJavaxSipStackIllegalTransactionStateException *create_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withNSException_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(NSString *message, NSException *cause, AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackIllegalTransactionStateException, initWithNSString_withNSException_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_, message, cause, reason)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackIllegalTransactionStateException)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason)

AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_values_[6];

@implementation AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason

+ (IOSObjectArray *)values {
  return AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_values();
}

+ (AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *)valueOfWithNSString:(NSString *)name {
  return AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "RequestAlreadySent", "LAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "MissingRequiredHeader", "LAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "UnmatchingCSeq", "LAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "ExpiresHeaderMandatory", "LAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "ContactHeaderMandatory", "LAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "GenericReason", "LAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, RequestAlreadySent), &JreEnum(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, MissingRequiredHeader), &JreEnum(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, UnmatchingCSeq), &JreEnum(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, ExpiresHeaderMandatory), &JreEnum(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, ContactHeaderMandatory), &JreEnum(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, GenericReason), "LAndroidGovNistJavaxSipStackIllegalTransactionStateException;", "Ljava/lang/Enum<Landroid/gov/nist/javax/sip/stack/IllegalTransactionStateException$Reason;>;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason = { "Reason", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x4019, 2, 6, 8, -1, -1, 9, -1 };
  return &_AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 6 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"RequestAlreadySent", @"MissingRequiredHeader", @"UnmatchingCSeq", @"ExpiresHeaderMandatory", @"ContactHeaderMandatory", @"GenericReason",
    };
    for (jint i = 0; i < 6; i++) {
      (AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason)
  }
}

@end

void AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_initWithNSString_withInt_(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_values() {
  AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_initialize();
  return [IOSObjectArray arrayWithObjects:AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_values_ count:6 type:AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_class_()];
}

AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_valueOfWithNSString_(NSString *name) {
  AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_initialize();
  for (int i = 0; i < 6; i++) {
    AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *e = AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_fromOrdinal(NSUInteger ordinal) {
  AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_initialize();
  if (ordinal >= 6) {
    return nil;
  }
  return AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason)
