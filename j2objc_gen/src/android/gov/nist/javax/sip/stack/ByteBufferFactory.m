//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/ByteBufferFactory.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/stack/ByteBufferFactory.h"
#include "java/nio/ByteBuffer.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface AndroidGovNistJavaxSipStackByteBufferFactory () {
 @public
  jboolean useDirect_;
}

@end

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackByteBufferFactory_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackByteBufferFactory_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackByteBufferFactory_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackByteBufferFactory, logger, id<OrgSlf4jLogger>)

inline AndroidGovNistJavaxSipStackByteBufferFactory *AndroidGovNistJavaxSipStackByteBufferFactory_get_instance();
inline AndroidGovNistJavaxSipStackByteBufferFactory *AndroidGovNistJavaxSipStackByteBufferFactory_set_instance(AndroidGovNistJavaxSipStackByteBufferFactory *value);
static AndroidGovNistJavaxSipStackByteBufferFactory *AndroidGovNistJavaxSipStackByteBufferFactory_instance;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackByteBufferFactory, instance, AndroidGovNistJavaxSipStackByteBufferFactory *)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackByteBufferFactory)

@implementation AndroidGovNistJavaxSipStackByteBufferFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackByteBufferFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (AndroidGovNistJavaxSipStackByteBufferFactory *)getInstance {
  return AndroidGovNistJavaxSipStackByteBufferFactory_getInstance();
}

- (JavaNioByteBuffer *)allocateDirectWithInt:(jint)capacity {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackByteBufferFactory_logger)) traceWithNSString:JreStrcat("$I", @"Allocating direct buffer ", capacity)];
  return useDirect_ ? JavaNioByteBuffer_allocateDirectWithInt_(capacity) : JavaNioByteBuffer_allocateWithInt_(capacity);
}

- (JavaNioByteBuffer *)allocateWithInt:(jint)capacity {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackByteBufferFactory_logger)) traceWithNSString:JreStrcat("$I", @"Allocating buffer ", capacity)];
  return JavaNioByteBuffer_allocateWithInt_(capacity);
}

- (void)setUseDirectWithBoolean:(jboolean)useDirect {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackByteBufferFactory_logger)) traceWithNSString:JreStrcat("$$", @"Direct buffers are ", (useDirect ? @"enabled" : @"disabled"))];
  self->useDirect_ = useDirect;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackByteBufferFactory;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNioByteBuffer;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaNioByteBuffer;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getInstance);
  methods[2].selector = @selector(allocateDirectWithInt:);
  methods[3].selector = @selector(allocateWithInt:);
  methods[4].selector = @selector(setUseDirectWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 5, -1, -1 },
    { "instance", "LAndroidGovNistJavaxSipStackByteBufferFactory;", .constantValue.asLong = 0, 0xa, -1, 6, -1, -1 },
    { "useDirect_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "allocateDirect", "I", "allocate", "setUseDirect", "Z", &AndroidGovNistJavaxSipStackByteBufferFactory_logger, &AndroidGovNistJavaxSipStackByteBufferFactory_instance };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackByteBufferFactory = { "ByteBufferFactory", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackByteBufferFactory;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackByteBufferFactory class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackByteBufferFactory_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackByteBufferFactory_class_()));
    JreStrongAssignAndConsume(&AndroidGovNistJavaxSipStackByteBufferFactory_instance, new_AndroidGovNistJavaxSipStackByteBufferFactory_init());
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackByteBufferFactory)
  }
}

@end

void AndroidGovNistJavaxSipStackByteBufferFactory_init(AndroidGovNistJavaxSipStackByteBufferFactory *self) {
  NSObject_init(self);
  self->useDirect_ = true;
}

AndroidGovNistJavaxSipStackByteBufferFactory *new_AndroidGovNistJavaxSipStackByteBufferFactory_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackByteBufferFactory, init)
}

AndroidGovNistJavaxSipStackByteBufferFactory *create_AndroidGovNistJavaxSipStackByteBufferFactory_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackByteBufferFactory, init)
}

AndroidGovNistJavaxSipStackByteBufferFactory *AndroidGovNistJavaxSipStackByteBufferFactory_getInstance() {
  AndroidGovNistJavaxSipStackByteBufferFactory_initialize();
  return AndroidGovNistJavaxSipStackByteBufferFactory_instance;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackByteBufferFactory)
