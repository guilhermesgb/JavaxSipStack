//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/CallAnalyzer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/stack/CallAnalyzer.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Timer.h"
#include "java/util/TimerTask.h"
#include "java/util/WeakHashMap.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface AndroidGovNistJavaxSipStackCallAnalyzer () {
 @public
  id<JavaUtilMap> threadMap_;
  AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *metricStatisticsMap_;
  JavaUtilTimer *timer_;
  AndroidGovNistJavaxSipSipStackImpl *stack_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalyzer, threadMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalyzer, metricStatisticsMap_, AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalyzer, timer_, JavaUtilTimer *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalyzer, stack_, AndroidGovNistJavaxSipSipStackImpl *)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackCallAnalyzer_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackCallAnalyzer_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackCallAnalyzer_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackCallAnalyzer, logger, id<OrgSlf4jLogger>)

inline jlong AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap_get_serialVersionUID();
#define AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap_serialVersionUID 393231609328924828LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap, serialVersionUID, jlong)

@interface AndroidGovNistJavaxSipStackCallAnalyzer_1 : JavaUtilTimerTask {
 @public
  AndroidGovNistJavaxSipStackCallAnalyzer *this$0_;
  AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *val$statInfo_;
  AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *val$metricReference_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackCallAnalyzer:(AndroidGovNistJavaxSipStackCallAnalyzer *)outer$
     withAndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo:(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)capture$0
    withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackCallAnalyzer_1)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackCallAnalyzer_1_initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_(AndroidGovNistJavaxSipStackCallAnalyzer_1 *self, AndroidGovNistJavaxSipStackCallAnalyzer *outer$, AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *capture$0, AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *capture$1);

__attribute__((unused)) static AndroidGovNistJavaxSipStackCallAnalyzer_1 *new_AndroidGovNistJavaxSipStackCallAnalyzer_1_initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_(AndroidGovNistJavaxSipStackCallAnalyzer *outer$, AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *capture$0, AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackCallAnalyzer_1 *create_AndroidGovNistJavaxSipStackCallAnalyzer_1_initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_(AndroidGovNistJavaxSipStackCallAnalyzer *outer$, AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *capture$0, AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *capture$1);

@interface AndroidGovNistJavaxSipStackCallAnalyzer_2 : NSObject < JavaLangRunnable > {
 @public
  AndroidGovNistJavaxSipStackCallAnalyzer *val$tp_;
  AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *val$sec_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackCallAnalyzer:(AndroidGovNistJavaxSipStackCallAnalyzer *)capture$0
    withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackCallAnalyzer_2)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackCallAnalyzer_2_initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_(AndroidGovNistJavaxSipStackCallAnalyzer_2 *self, AndroidGovNistJavaxSipStackCallAnalyzer *capture$0, AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *capture$1);

__attribute__((unused)) static AndroidGovNistJavaxSipStackCallAnalyzer_2 *new_AndroidGovNistJavaxSipStackCallAnalyzer_2_initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_(AndroidGovNistJavaxSipStackCallAnalyzer *capture$0, AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackCallAnalyzer_2 *create_AndroidGovNistJavaxSipStackCallAnalyzer_2_initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_(AndroidGovNistJavaxSipStackCallAnalyzer *capture$0, AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *capture$1);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackCallAnalyzer)

jint AndroidGovNistJavaxSipStackCallAnalyzer_count = 0;

@implementation AndroidGovNistJavaxSipStackCallAnalyzer

- (instancetype)initWithAndroidGovNistJavaxSipSipStackImpl:(AndroidGovNistJavaxSipSipStackImpl *)stack {
  AndroidGovNistJavaxSipStackCallAnalyzer_initWithAndroidGovNistJavaxSipSipStackImpl_(self, stack);
  return self;
}

- (void)configureWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)ref
     withAndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *)config {
  JreStrongAssign(&((AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *) nil_chk([((AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *) nil_chk(metricStatisticsMap_)) getWithId:ref]))->config_, config);
  if (![self isAnalysisStartedWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:ref]) {
    [self startAnalysisWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:ref];
  }
}

- (jboolean)isAnalysisStartedWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)ref {
  return ((AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *) nil_chk([((AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *) nil_chk(metricStatisticsMap_)) getWithId:ref]))->task_ != nil;
}

- (AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)getMetricStatsWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)ref {
  return [((AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *) nil_chk(metricStatisticsMap_)) getWithId:ref];
}

- (void)resetStatsWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)metricReference {
  AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *info = [((AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *) nil_chk(metricStatisticsMap_)) getWithId:metricReference];
  JreStrongAssignAndConsume(&((AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *) nil_chk(info))->totalTime_, new_JavaLangLong_initWithLong_(0));
  JreStrongAssignAndConsume(&info->numberOfEvents_, new_JavaLangLong_initWithLong_(0));
  JreStrongAssignAndConsume(&info->averageTime_, new_JavaLangLong_initWithLong_(1));
  JreStrongAssignAndConsume(&info->lastLoggedEventTime_, new_JavaLangLong_initWithLong_(0));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackCallAnalyzer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)stopAnalysisWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)metricReference {
  AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *statInfo = [((AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *) nil_chk(metricStatisticsMap_)) getWithId:metricReference];
  if (((AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *) nil_chk(statInfo))->task_ != nil) {
    [statInfo->task_ cancel];
    JreStrongAssign(&statInfo->task_, nil);
  }
}

- (void)startAnalysisWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)metricReference {
  [self stopAnalysisWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:metricReference];
  [self resetStatsWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:metricReference];
  AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *statInfo = [((AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *) nil_chk(metricStatisticsMap_)) getWithId:metricReference];
  JreStrongAssignAndConsume(&((AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *) nil_chk(statInfo))->task_, new_AndroidGovNistJavaxSipStackCallAnalyzer_1_initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_(self, statInfo, metricReference));
  [((JavaUtilTimer *) nil_chk(timer_)) scheduleAtFixedRateWithJavaUtilTimerTask:statInfo->task_ withLong:[((JavaLangLong *) nil_chk(((AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *) nil_chk(statInfo->config_))->checkingInterval_)) longLongValue] withLong:[statInfo->config_->checkingInterval_ longLongValue]];
}

- (void)stop {
  [((JavaUtilTimer *) nil_chk(timer_)) cancel];
  JreStrongAssign(&timer_, nil);
}

- (JavaLangLong *)getTimeWithJavaLangThread:(JavaLangThread *)threadId
withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)metricReference {
  JavaUtilHashMap *attribs = [self getAttributesWithJavaLangThread:threadId];
  return (JavaLangLong *) cast_chk([((JavaUtilHashMap *) nil_chk(attribs)) getWithId:metricReference], [JavaLangLong class]);
}

- (void)setObjectWithJavaLangThread:(JavaLangThread *)threadId
withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)objectName
                             withId:(id)object {
  [((JavaUtilHashMap *) nil_chk([self getAttributesWithJavaLangThread:threadId])) putWithId:objectName withId:object];
}

- (id)getObjectWithJavaLangThread:(JavaLangThread *)threadId
                     withNSString:(NSString *)objectName {
  return [((JavaUtilHashMap *) nil_chk([self getAttributesWithJavaLangThread:threadId])) getWithId:objectName];
}

- (JavaUtilHashMap *)getAttributesWithJavaLangThread:(JavaLangThread *)threadId {
  @synchronized(self) {
    JavaUtilHashMap *threadLocal = [((id<JavaUtilMap>) nil_chk(threadMap_)) getWithId:threadId];
    if (threadLocal == nil) {
      threadLocal = create_JavaUtilHashMap_init();
      [((id<JavaUtilMap>) nil_chk(threadMap_)) putWithId:threadId withId:threadLocal];
    }
    return threadLocal;
  }
}

- (void)enterWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)metricReference {
  JavaLangThread *threadId = JavaLangThread_currentThread();
  [self enterWithJavaLangThread:threadId withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:metricReference];
}

- (void)leaveWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)metricReference {
  JavaLangThread *threadId = JavaLangThread_currentThread();
  [self leaveWithJavaLangThread:threadId withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:metricReference];
}

- (void)enterWithJavaLangThread:(JavaLangThread *)threadId
withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)metricReference {
  JavaUtilHashMap *attribs = [self getAttributesWithJavaLangThread:threadId];
  [((JavaUtilHashMap *) nil_chk(attribs)) putWithId:metricReference withId:JavaLangLong_valueOfWithLong_(JavaLangSystem_currentTimeMillis())];
}

- (void)leaveWithJavaLangThread:(JavaLangThread *)threadId
withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)metricReference {
  AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *info = [((AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *) nil_chk(metricStatisticsMap_)) getWithId:metricReference];
  JavaUtilHashMap *attribs = [self getAttributesWithJavaLangThread:threadId];
  jlong delta = JavaLangSystem_currentTimeMillis() - [((JavaLangLong *) nil_chk((JavaLangLong *) cast_chk([((JavaUtilHashMap *) nil_chk(attribs)) getWithId:metricReference], [JavaLangLong class]))) longLongValue];
  JreBoxedPlusAssignStrongLong(&((AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *) nil_chk(info))->totalTime_, delta);
  JreBoxedPostIncrStrongLong(&info->numberOfEvents_);
  JreStrongAssign(&info->averageTime_, JavaLangLong_valueOfWithLong_([((JavaLangLong *) nil_chk(info->totalTime_)) longLongValue] / [((JavaLangLong *) nil_chk(info->numberOfEvents_)) longLongValue]));
  [attribs putWithId:metricReference withId:JavaLangLong_valueOfWithLong_(JavaLangLong_MIN_VALUE)];
}

- (NSString *)getCurrentStackWithJavaLangThread:(JavaLangThread *)thread {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [sb appendWithNSString:JreStrcat("C$CJC$C", 0x000a, [((JavaLangThread *) nil_chk(thread)) getName], ' ', [thread getId], ' ', [((JavaLangThread_State *) nil_chk([thread getState])) description], 0x000a)];
  IOSObjectArray *ste = [thread getStackTrace];
  {
    IOSObjectArray *a__ = ste;
    JavaLangStackTraceElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangStackTraceElement * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangStackTraceElement *el = *b__++;
      [sb appendWithNSString:JreStrcat("C$C", ' ', [((JavaLangStackTraceElement *) nil_chk(el)) description], 0x000a)];
    }
  }
  return [sb description];
}

- (NSString *)getThreadDump {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  IOSObjectArray *threads = [IOSObjectArray arrayWithLength:5000 type:JavaLangThread_class_()];
  jint count = JavaLangThread_enumerateWithJavaLangThreadArray_(threads);
  for (jint q = 0; q < count; q++) {
    [sb appendWithNSString:[self getCurrentStackWithJavaLangThread:IOSObjectArray_Get(threads, q)]];
  }
  return [sb description];
}

- (jint)getNumberOfThreads {
  return [((id<JavaUtilMap>) nil_chk(threadMap_)) size];
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)arg {
  AndroidGovNistJavaxSipStackCallAnalyzer_mainWithNSStringArray_(arg);
}

- (void)dealloc {
  RELEASE_(threadMap_);
  RELEASE_(metricStatisticsMap_);
  RELEASE_(timer_);
  RELEASE_(stack_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x21, 15, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 20, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 21, 22, 23, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipSipStackImpl:);
  methods[1].selector = @selector(configureWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:withAndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration:);
  methods[2].selector = @selector(isAnalysisStartedWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:);
  methods[3].selector = @selector(getMetricStatsWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:);
  methods[4].selector = @selector(resetStatsWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:);
  methods[5].selector = @selector(init);
  methods[6].selector = @selector(stopAnalysisWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:);
  methods[7].selector = @selector(startAnalysisWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:);
  methods[8].selector = @selector(stop);
  methods[9].selector = @selector(getTimeWithJavaLangThread:withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:);
  methods[10].selector = @selector(setObjectWithJavaLangThread:withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:withId:);
  methods[11].selector = @selector(getObjectWithJavaLangThread:withNSString:);
  methods[12].selector = @selector(getAttributesWithJavaLangThread:);
  methods[13].selector = @selector(enterWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:);
  methods[14].selector = @selector(leaveWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:);
  methods[15].selector = @selector(enterWithJavaLangThread:withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:);
  methods[16].selector = @selector(leaveWithJavaLangThread:withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:);
  methods[17].selector = @selector(getCurrentStackWithJavaLangThread:);
  methods[18].selector = @selector(getThreadDump);
  methods[19].selector = @selector(getNumberOfThreads);
  methods[20].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 24, -1, -1 },
    { "threadMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 25, -1 },
    { "metricStatisticsMap_", "LAndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timer_", "LJavaUtilTimer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stack_", "LAndroidGovNistJavaxSipSipStackImpl;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "count", "I", .constantValue.asLong = 0, 0x8, -1, 26, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipSipStackImpl;", "configure", "LAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference;LAndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration;", "isAnalysisStarted", "LAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference;", "getMetricStats", "resetStats", "stopAnalysis", "startAnalysis", "getTime", "LJavaLangThread;LAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference;", "setObject", "LJavaLangThread;LAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference;LNSObject;", "getObject", "LJavaLangThread;LNSString;", "getAttributes", "LJavaLangThread;", "(Ljava/lang/Thread;)Ljava/util/HashMap<Landroid/gov/nist/javax/sip/stack/CallAnalyzer$MetricReference;Ljava/lang/Object;>;", "enter", "leave", "getCurrentStack", "main", "[LNSString;", "LJavaLangInterruptedException;", &AndroidGovNistJavaxSipStackCallAnalyzer_logger, "Ljava/util/Map<Ljava/lang/Thread;Ljava/util/HashMap<Landroid/gov/nist/javax/sip/stack/CallAnalyzer$MetricReference;Ljava/lang/Object;>;>;", &AndroidGovNistJavaxSipStackCallAnalyzer_count, "LAndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo;LAndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration;LAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference;LAndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap;LAndroidGovNistJavaxSipStackCallAnalyzer_StackTrace;LAndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackCallAnalyzer = { "CallAnalyzer", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 21, 6, -1, 27, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackCallAnalyzer;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackCallAnalyzer class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackCallAnalyzer_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackCallAnalyzer_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackCallAnalyzer)
  }
}

@end

void AndroidGovNistJavaxSipStackCallAnalyzer_initWithAndroidGovNistJavaxSipSipStackImpl_(AndroidGovNistJavaxSipStackCallAnalyzer *self, AndroidGovNistJavaxSipSipStackImpl *stack) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->threadMap_, new_JavaUtilWeakHashMap_init());
  JreStrongAssignAndConsume(&self->metricStatisticsMap_, new_AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap_init());
  JreStrongAssignAndConsume(&self->timer_, new_JavaUtilTimer_init());
  JreStrongAssign(&self->stack_, stack);
}

AndroidGovNistJavaxSipStackCallAnalyzer *new_AndroidGovNistJavaxSipStackCallAnalyzer_initWithAndroidGovNistJavaxSipSipStackImpl_(AndroidGovNistJavaxSipSipStackImpl *stack) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer, initWithAndroidGovNistJavaxSipSipStackImpl_, stack)
}

AndroidGovNistJavaxSipStackCallAnalyzer *create_AndroidGovNistJavaxSipStackCallAnalyzer_initWithAndroidGovNistJavaxSipSipStackImpl_(AndroidGovNistJavaxSipSipStackImpl *stack) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer, initWithAndroidGovNistJavaxSipSipStackImpl_, stack)
}

void AndroidGovNistJavaxSipStackCallAnalyzer_init(AndroidGovNistJavaxSipStackCallAnalyzer *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->threadMap_, new_JavaUtilWeakHashMap_init());
  JreStrongAssignAndConsume(&self->metricStatisticsMap_, new_AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap_init());
  JreStrongAssignAndConsume(&self->timer_, new_JavaUtilTimer_init());
}

AndroidGovNistJavaxSipStackCallAnalyzer *new_AndroidGovNistJavaxSipStackCallAnalyzer_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer, init)
}

AndroidGovNistJavaxSipStackCallAnalyzer *create_AndroidGovNistJavaxSipStackCallAnalyzer_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer, init)
}

void AndroidGovNistJavaxSipStackCallAnalyzer_mainWithNSStringArray_(IOSObjectArray *arg) {
  AndroidGovNistJavaxSipStackCallAnalyzer_initialize();
  id<JavaUtilConcurrentExecutorService> ex = JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_(1000);
  AndroidGovNistJavaxSipStackCallAnalyzer *tp = create_AndroidGovNistJavaxSipStackCallAnalyzer_init();
  AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *sec = create_AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_initWithNSString_(@"sec");
  AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *se1c = create_AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_initWithNSString_(@"se111c");
  [tp configureWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:sec withAndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration:create_AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_initWithInt_withInt_withInt_(500, 500, 500)];
  [tp startAnalysisWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:sec];
  [tp startAnalysisWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:se1c];
  id<JavaLangRunnable> r = create_AndroidGovNistJavaxSipStackCallAnalyzer_2_initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_(tp, sec);
  for (jint q = 0; q < 2000000; q++) {
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(ex)) executeWithJavaLangRunnable:r];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$ICI", @"size:", [((id<JavaUtilMap>) nil_chk(tp->threadMap_)) size], ' ', [((AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *) nil_chk(tp->metricStatisticsMap_)) size])];
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(ex)) shutdown];
  [ex awaitTerminationWithLong:200 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ex shutdownNow];
  JavaLangSystem_gc();
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$ICI", @"size:", [((id<JavaUtilMap>) nil_chk(tp->threadMap_)) size], ' ', [((AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *) nil_chk(tp->metricStatisticsMap_)) size])];
  JavaLangSystem_gc();
  JavaLangThread_sleepWithLong_(5000);
  JavaLangSystem_gc();
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$ICI", @"size:", [((id<JavaUtilMap>) nil_chk(tp->threadMap_)) size], ' ', [((AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *) nil_chk(tp->metricStatisticsMap_)) size])];
  JavaLangSystem_gc();
  se1c = nil;
  JavaLangSystem_gc();
  JavaLangThread_sleepWithLong_(5000);
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$ICI", @"size:", [((id<JavaUtilMap>) nil_chk(tp->threadMap_)) size], ' ', [((AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *) nil_chk(tp->metricStatisticsMap_)) size])];
  JavaLangSystem_gc();
  JavaLangSystem_gc();
  JavaLangThread_sleepWithLong_(5000);
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$ICI", @"size:", [((id<JavaUtilMap>) nil_chk(tp->threadMap_)) size], ' ', [((AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *) nil_chk(tp->metricStatisticsMap_)) size])];
  JavaLangSystem_gc();
  JavaLangThread_sleepWithLong_(5000);
  JavaLangSystem_gc();
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$ICI", @"size:", [((id<JavaUtilMap>) nil_chk(tp->threadMap_)) size], ' ', [((AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *) nil_chk(tp->metricStatisticsMap_)) size])];
  JavaLangSystem_gc();
  JavaLangSystem_gc();
  JavaLangThread_sleepWithLong_(5000);
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$ICI", @"size:", [((id<JavaUtilMap>) nil_chk(tp->threadMap_)) size], ' ', [((AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *) nil_chk(tp->metricStatisticsMap_)) size])];
  JavaLangSystem_gc();
  JavaLangSystem_gc();
  JavaLangThread_sleepWithLong_(5000);
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$ICI", @"size:", [((id<JavaUtilMap>) nil_chk(tp->threadMap_)) size], ' ', [((AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *) nil_chk(tp->metricStatisticsMap_)) size])];
  JavaLangSystem_gc();
  if ([((id<JavaUtilMap>) nil_chk(tp->threadMap_)) size] > 0) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Should be zero by this point. Leak.");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackCallAnalyzer)

@implementation AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(totalTime_);
  RELEASE_(numberOfEvents_);
  RELEASE_(averageTime_);
  RELEASE_(lastLoggedEventTime_);
  RELEASE_(task_);
  RELEASE_(config_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "totalTime_", "LJavaLangLong;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "numberOfEvents_", "LJavaLangLong;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "averageTime_", "LJavaLangLong;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "lastLoggedEventTime_", "LJavaLangLong;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "task_", "LJavaUtilTimerTask;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "config_", "LAndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackCallAnalyzer;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo = { "TImeMetricInfo", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x9, 1, 6, 0, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo;
}

@end

void AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_init(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->totalTime_, new_JavaLangLong_initWithLong_(0));
  JreStrongAssignAndConsume(&self->numberOfEvents_, new_JavaLangLong_initWithLong_(0));
  JreStrongAssignAndConsume(&self->averageTime_, new_JavaLangLong_initWithLong_(1));
  JreStrongAssignAndConsume(&self->lastLoggedEventTime_, new_JavaLangLong_initWithLong_(0));
  JreStrongAssignAndConsume(&self->config_, new_AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_initWithInt_withInt_withInt_(5000, 5000, 5000));
}

AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *new_AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo, init)
}

AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *create_AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo)

@implementation AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration

- (instancetype)initWithJavaLangLong:(JavaLangLong *)checkingInterval
                    withJavaLangLong:(JavaLangLong *)minDumpInterval
                    withJavaLangLong:(JavaLangLong *)stuckTimerBeforeDump {
  AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_initWithJavaLangLong_withJavaLangLong_withJavaLangLong_(self, checkingInterval, minDumpInterval, stuckTimerBeforeDump);
  return self;
}

- (instancetype)initWithInt:(jint)checkingInterval
                    withInt:(jint)minDumpInterval
                    withInt:(jint)stuckTimerBeforeDump {
  AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_initWithInt_withInt_withInt_(self, checkingInterval, minDumpInterval, stuckTimerBeforeDump);
  return self;
}

- (void)dealloc {
  RELEASE_(checkingInterval_);
  RELEASE_(minimumDumpInterval_);
  RELEASE_(stuckTimeBeforeDump_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangLong:withJavaLangLong:withJavaLangLong:);
  methods[1].selector = @selector(initWithInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "checkingInterval_", "LJavaLangLong;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "minimumDumpInterval_", "LJavaLangLong;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "stuckTimeBeforeDump_", "LJavaLangLong;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangLong;LJavaLangLong;LJavaLangLong;", "III", "LAndroidGovNistJavaxSipStackCallAnalyzer;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration = { "MetricAnalysisConfiguration", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x9, 2, 3, 2, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration;
}

@end

void AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_initWithJavaLangLong_withJavaLangLong_withJavaLangLong_(AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *self, JavaLangLong *checkingInterval, JavaLangLong *minDumpInterval, JavaLangLong *stuckTimerBeforeDump) {
  NSObject_init(self);
  JreStrongAssign(&self->checkingInterval_, checkingInterval);
  JreStrongAssign(&self->minimumDumpInterval_, minDumpInterval);
  JreStrongAssign(&self->stuckTimeBeforeDump_, stuckTimerBeforeDump);
}

AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *new_AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_initWithJavaLangLong_withJavaLangLong_withJavaLangLong_(JavaLangLong *checkingInterval, JavaLangLong *minDumpInterval, JavaLangLong *stuckTimerBeforeDump) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration, initWithJavaLangLong_withJavaLangLong_withJavaLangLong_, checkingInterval, minDumpInterval, stuckTimerBeforeDump)
}

AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *create_AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_initWithJavaLangLong_withJavaLangLong_withJavaLangLong_(JavaLangLong *checkingInterval, JavaLangLong *minDumpInterval, JavaLangLong *stuckTimerBeforeDump) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration, initWithJavaLangLong_withJavaLangLong_withJavaLangLong_, checkingInterval, minDumpInterval, stuckTimerBeforeDump)
}

void AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_initWithInt_withInt_withInt_(AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *self, jint checkingInterval, jint minDumpInterval, jint stuckTimerBeforeDump) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->checkingInterval_, new_JavaLangLong_initWithLong_(checkingInterval));
  JreStrongAssignAndConsume(&self->minimumDumpInterval_, new_JavaLangLong_initWithLong_(minDumpInterval));
  JreStrongAssignAndConsume(&self->stuckTimeBeforeDump_, new_JavaLangLong_initWithLong_(stuckTimerBeforeDump));
}

AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *new_AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_initWithInt_withInt_withInt_(jint checkingInterval, jint minDumpInterval, jint stuckTimerBeforeDump) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration, initWithInt_withInt_withInt_, checkingInterval, minDumpInterval, stuckTimerBeforeDump)
}

AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *create_AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_initWithInt_withInt_withInt_(jint checkingInterval, jint minDumpInterval, jint stuckTimerBeforeDump) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration, initWithInt_withInt_withInt_, checkingInterval, minDumpInterval, stuckTimerBeforeDump)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration)

@implementation AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference

- (instancetype)initWithNSString:(NSString *)name {
  AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_initWithNSString_(self, name);
  return self;
}

- (jboolean)isEqual:(id)other {
  if ([other isKindOfClass:[AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference class]]) {
    AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *stat = (AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *) cast_chk(other, [AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference class]);
    return [((NSString *) nil_chk(((AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *) nil_chk(stat))->name_)) isEqual:self->name_];
  }
  return false;
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(self->name_)) hash]);
}

- (void)dealloc {
  RELEASE_(name_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "equals", "LNSObject;", "hashCode", "LAndroidGovNistJavaxSipStackCallAnalyzer;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference = { "MetricReference", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x9, 3, 1, 4, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference;
}

@end

void AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_initWithNSString_(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *self, NSString *name) {
  NSObject_init(self);
  JreStrongAssign(&self->name_, name);
}

AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *new_AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference, initWithNSString_, name)
}

AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *create_AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference, initWithNSString_, name)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference)

@implementation AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)getWithId:(id)key {
  if ([super getWithId:key] == nil) {
    [super putWithId:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *) cast_chk(key, [AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference class]) withId:create_AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_init()];
  }
  return [super getWithId:key];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "LNSObject;", "LAndroidGovNistJavaxSipStackCallAnalyzer;", "Ljava/util/WeakHashMap<Landroid/gov/nist/javax/sip/stack/CallAnalyzer$MetricReference;Landroid/gov/nist/javax/sip/stack/CallAnalyzer$TImeMetricInfo;>;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap = { "MetricReferenceMap", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x9, 2, 1, 2, -1, -1, 3, -1 };
  return &_AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap;
}

@end

void AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap_init(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *self) {
  JavaUtilWeakHashMap_init(self);
}

AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *new_AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap, init)
}

AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap *create_AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReferenceMap)

@implementation AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace

- (instancetype)initWithInt:(jint)delta
               withNSString:(NSString *)trace {
  AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace_initWithInt_withNSString_(self, delta, trace);
  return self;
}

- (void)dealloc {
  RELEASE_(trace_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delta_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "trace_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;", "LAndroidGovNistJavaxSipStackCallAnalyzer;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace = { "StackTrace", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x9, 1, 2, 1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace;
}

@end

void AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace_initWithInt_withNSString_(AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace *self, jint delta, NSString *trace) {
  NSObject_init(self);
  self->delta_ = delta;
  JreStrongAssign(&self->trace_, trace);
}

AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace *new_AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace_initWithInt_withNSString_(jint delta, NSString *trace) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace, initWithInt_withNSString_, delta, trace)
}

AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace *create_AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace_initWithInt_withNSString_(jint delta, NSString *trace) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace, initWithInt_withNSString_, delta, trace)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackCallAnalyzer_StackTrace)

@implementation AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(stackTraces_);
  RELEASE_(data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stackTraces_", "LJavaUtilLinkedList;", .constantValue.asLong = 0, 0x1, -1, -1, 0, -1 },
    { "data_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/LinkedList<Landroid/gov/nist/javax/sip/stack/CallAnalyzer$StackTrace;>;", "LAndroidGovNistJavaxSipStackCallAnalyzer;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo = { "ThreadInfo", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x9, 1, 2, 1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo;
}

@end

void AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo_init(AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->stackTraces_, new_JavaUtilLinkedList_init());
}

AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo *new_AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo, init)
}

AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo *create_AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackCallAnalyzer_ThreadInfo)

@implementation AndroidGovNistJavaxSipStackCallAnalyzer_1

- (instancetype)initWithAndroidGovNistJavaxSipStackCallAnalyzer:(AndroidGovNistJavaxSipStackCallAnalyzer *)outer$
     withAndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo:(AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *)capture$0
    withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)capture$1 {
  AndroidGovNistJavaxSipStackCallAnalyzer_1_initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)run {
  @try {
    JavaLangLong *lastDump = ((AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *) nil_chk(val$statInfo_))->lastLoggedEventTime_;
    if (JavaLangSystem_currentTimeMillis() - [((JavaLangLong *) nil_chk(lastDump)) longLongValue] > [((JavaLangLong *) nil_chk(((AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *) nil_chk(val$statInfo_->config_))->minimumDumpInterval_)) longLongValue]) {
      id<JavaUtilIterator> threadInfos = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(this$0_->threadMap_)) entrySet])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(threadInfos)) hasNext]) {
        id<JavaUtilMap_Entry> info = [threadInfos next];
        JavaLangLong *entryTime = (JavaLangLong *) cast_chk([((JavaUtilHashMap *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(info)) getValue])) getWithId:val$metricReference_], [JavaLangLong class]);
        if (![((JavaLangLong *) nil_chk(entryTime)) isEqual:JavaLangLong_valueOfWithLong_(JavaLangLong_MIN_VALUE)]) {
          JavaLangLong *delta = JavaLangLong_valueOfWithLong_(JavaLangSystem_currentTimeMillis() - [entryTime longLongValue]);
          if (JreLoadStatic(AndroidGovNistJavaxSipStackCallAnalyzer, logger) != nil && [delta longLongValue] > [((JavaLangLong *) nil_chk(((AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *) nil_chk(val$statInfo_->config_))->stuckTimeBeforeDump_)) longLongValue]) {
            [JreLoadStatic(AndroidGovNistJavaxSipStackCallAnalyzer, logger) warnWithNSString:JreStrcat("$$", @"Offending thread:\n", [this$0_ getCurrentStackWithJavaLangThread:[info getKey]])];
            JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
            IOSObjectArray *threads = [IOSObjectArray arrayWithLength:5000 type:JavaLangThread_class_()];
            jint count = JavaLangThread_enumerateWithJavaLangThreadArray_(threads);
            for (jint q = 0; q < count; q++) {
              jlong threadStuck = 0;
              JavaUtilHashMap *subInfo = [((id<JavaUtilMap>) nil_chk(this$0_->threadMap_)) getWithId:IOSObjectArray_Get(threads, q)];
              if (subInfo != nil) {
                JavaLangLong *stamp = (JavaLangLong *) cast_chk([((JavaUtilHashMap *) nil_chk([((id<JavaUtilMap>) nil_chk(this$0_->threadMap_)) getWithId:IOSObjectArray_Get(threads, q)])) getWithId:val$metricReference_], [JavaLangLong class]);
                if (stamp != nil) {
                  threadStuck = JavaLangSystem_currentTimeMillis() - [stamp longLongValue];
                }
                if ([((JavaLangLong *) nil_chk(stamp)) longLongValue] != JavaLangLong_MIN_VALUE) {
                  [sb appendWithNSString:JreStrcat("$JC$", @"->Stuck time:", threadStuck, ' ', [this$0_ getCurrentStackWithJavaLangThread:IOSObjectArray_Get(threads, q)])];
                }
              }
            }
            [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackCallAnalyzer, logger))) warnWithNSString:[sb description]];
            threads = nil;
            break;
          }
        }
      }
    }
  }
  @catch (JavaLangException *ex) {
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$statInfo_);
  RELEASE_(val$metricReference_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackCallAnalyzer:withAndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo:withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackCallAnalyzer;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$statInfo_", "LAndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$metricReference_", "LAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackCallAnalyzer;", "startAnalysisWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackCallAnalyzer_1 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8008, 2, 3, 0, -1, 1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackCallAnalyzer_1;
}

@end

void AndroidGovNistJavaxSipStackCallAnalyzer_1_initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_(AndroidGovNistJavaxSipStackCallAnalyzer_1 *self, AndroidGovNistJavaxSipStackCallAnalyzer *outer$, AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *capture$0, AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$statInfo_, capture$0);
  JreStrongAssign(&self->val$metricReference_, capture$1);
  JavaUtilTimerTask_init(self);
}

AndroidGovNistJavaxSipStackCallAnalyzer_1 *new_AndroidGovNistJavaxSipStackCallAnalyzer_1_initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_(AndroidGovNistJavaxSipStackCallAnalyzer *outer$, AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *capture$0, AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *capture$1) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_1, initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_, outer$, capture$0, capture$1)
}

AndroidGovNistJavaxSipStackCallAnalyzer_1 *create_AndroidGovNistJavaxSipStackCallAnalyzer_1_initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_(AndroidGovNistJavaxSipStackCallAnalyzer *outer$, AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *capture$0, AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *capture$1) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_1, initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_, outer$, capture$0, capture$1)
}

@implementation AndroidGovNistJavaxSipStackCallAnalyzer_2

- (instancetype)initWithAndroidGovNistJavaxSipStackCallAnalyzer:(AndroidGovNistJavaxSipStackCallAnalyzer *)capture$0
    withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:(AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)capture$1 {
  AndroidGovNistJavaxSipStackCallAnalyzer_2_initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_(self, capture$0, capture$1);
  return self;
}

- (void)run {
  [((AndroidGovNistJavaxSipStackCallAnalyzer *) nil_chk(val$tp_)) enterWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:val$sec_];
  @try {
    if (++(*JreLoadStaticRef(AndroidGovNistJavaxSipStackCallAnalyzer, count)) % 10000 == 0) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Avg ", ((AndroidGovNistJavaxSipStackCallAnalyzer_TImeMetricInfo *) nil_chk([val$tp_ getMetricStatsWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:val$sec_]))->averageTime_)];
      JavaLangThread_sleepWithLong_(1000);
    }
    JavaLangThread_sleepWithLong_(100);
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  [val$tp_ leaveWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:val$sec_];
}

- (void)dealloc {
  RELEASE_(val$tp_);
  RELEASE_(val$sec_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackCallAnalyzer:withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$tp_", "LAndroidGovNistJavaxSipStackCallAnalyzer;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$sec_", "LAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackCallAnalyzer;", "mainWithNSStringArray:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackCallAnalyzer_2 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8008, 2, 2, 0, -1, 1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackCallAnalyzer_2;
}

@end

void AndroidGovNistJavaxSipStackCallAnalyzer_2_initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_(AndroidGovNistJavaxSipStackCallAnalyzer_2 *self, AndroidGovNistJavaxSipStackCallAnalyzer *capture$0, AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *capture$1) {
  JreStrongAssign(&self->val$tp_, capture$0);
  JreStrongAssign(&self->val$sec_, capture$1);
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackCallAnalyzer_2 *new_AndroidGovNistJavaxSipStackCallAnalyzer_2_initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_(AndroidGovNistJavaxSipStackCallAnalyzer *capture$0, AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *capture$1) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_2, initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_, capture$0, capture$1)
}

AndroidGovNistJavaxSipStackCallAnalyzer_2 *create_AndroidGovNistJavaxSipStackCallAnalyzer_2_initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_(AndroidGovNistJavaxSipStackCallAnalyzer *capture$0, AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *capture$1) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackCallAnalyzer_2, initWithAndroidGovNistJavaxSipStackCallAnalyzer_withAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_, capture$0, capture$1)
}
