//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/MultiPipelineExecutor.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/NamingThreadFactory.h"
#include "android/gov/nist/javax/sip/stack/MultiPipelineExecutor.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/util/Enumeration.h"
#include "java/util/LinkedList.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Semaphore.h"

@interface AndroidGovNistJavaxSipStackMultiPipelineExecutor () {
 @public
  id<JavaUtilConcurrentExecutorService> executor_;
  JavaUtilConcurrentConcurrentHashMap *map_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackMultiPipelineExecutor, executor_, id<JavaUtilConcurrentExecutorService>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackMultiPipelineExecutor, map_, JavaUtilConcurrentConcurrentHashMap *)

inline jlong AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList_get_serialVersionUID();
#define AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList, serialVersionUID, jlong)

@implementation AndroidGovNistJavaxSipStackMultiPipelineExecutor

- (instancetype)initWithInt:(jint)threads {
  AndroidGovNistJavaxSipStackMultiPipelineExecutor_initWithInt_(self, threads);
  return self;
}

- (void)addTaskWithId:(id)key
 withJavaLangRunnable:(id<JavaLangRunnable>)task {
  @synchronized(self) {
    AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList *list = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(map_)) getWithId:key];
    if (list == nil) {
      list = create_AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList_init();
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(map_)) putWithId:key withId:list];
    }
    [list addFirstWithId:create_AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreRunnable_initWithJavaLangRunnable_withJavaUtilConcurrentSemaphore_withAndroidGovNistJavaxSipStackMultiPipelineExecutor_(task, list->semaphore_, self)];
    [self java_notifyAll];
  }
}

- (void)processTasks {
  @synchronized(self) {
    @try {
      [self java_wait];
    }
    @catch (JavaLangInterruptedException *e1) {
      [((JavaLangInterruptedException *) nil_chk(e1)) printStackTrace];
    }
    id<JavaUtilEnumeration> keys = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(map_)) keys];
    id key;
    while ([((id<JavaUtilEnumeration>) nil_chk(keys)) hasMoreElements]) {
      key = [keys nextElement];
      AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList *e = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(map_)) getWithId:key];
      if (![((AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList *) nil_chk(e)) isEmpty] && [((JavaUtilConcurrentSemaphore *) nil_chk(e->semaphore_)) tryAcquire]) {
        id<JavaLangRunnable> task = [e pollLast];
        [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor_)) executeWithJavaLangRunnable:task];
      }
    }
  }
}

- (void)removeWithId:(id)key {
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(map_)) removeWithId:key];
}

- (void)dealloc {
  RELEASE_(executor_);
  RELEASE_(map_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(addTaskWithId:withJavaLangRunnable:);
  methods[2].selector = @selector(processTasks);
  methods[3].selector = @selector(removeWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "executor_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "map_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "I", "addTask", "LNSObject;LJavaLangRunnable;", "(TK;Ljava/lang/Runnable;)V", "remove", "LNSObject;", "(TK;)V", "Ljava/util/concurrent/ConcurrentHashMap<TK;Landroid/gov/nist/javax/sip/stack/MultiPipelineExecutor$SemaphoreLinkedList<Landroid/gov/nist/javax/sip/stack/MultiPipelineExecutor$SemaphoreRunnable<TK;>;>;>;", "LAndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList;LAndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreRunnable;", "<K:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackMultiPipelineExecutor = { "MultiPipelineExecutor", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, 8, -1, 9, -1 };
  return &_AndroidGovNistJavaxSipStackMultiPipelineExecutor;
}

@end

void AndroidGovNistJavaxSipStackMultiPipelineExecutor_initWithInt_(AndroidGovNistJavaxSipStackMultiPipelineExecutor *self, jint threads) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->map_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssign(&self->executor_, JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_withJavaUtilConcurrentThreadFactory_(threads, create_AndroidGovNistCoreNamingThreadFactory_initWithNSString_(@"jain_sip_multi_pipeline_executor")));
}

AndroidGovNistJavaxSipStackMultiPipelineExecutor *new_AndroidGovNistJavaxSipStackMultiPipelineExecutor_initWithInt_(jint threads) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackMultiPipelineExecutor, initWithInt_, threads)
}

AndroidGovNistJavaxSipStackMultiPipelineExecutor *create_AndroidGovNistJavaxSipStackMultiPipelineExecutor_initWithInt_(jint threads) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackMultiPipelineExecutor, initWithInt_, threads)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackMultiPipelineExecutor)

@implementation AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList class]);
  RELEASE_(semaphore_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "semaphore_", "LJavaUtilConcurrentSemaphore;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackMultiPipelineExecutor;", "<A:Ljava/lang/Object;>Ljava/util/LinkedList<TA;>;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList = { "SemaphoreLinkedList", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x9, 1, 2, 0, -1, -1, 1, -1 };
  return &_AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList;
}

@end

void AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList_init(AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList *self) {
  JavaUtilLinkedList_init(self);
  JreStrongAssignAndConsume(&self->semaphore_, new_JavaUtilConcurrentSemaphore_initWithInt_(1));
}

AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList *new_AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList, init)
}

AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList *create_AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreLinkedList)

@implementation AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreRunnable

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)task
         withJavaUtilConcurrentSemaphore:(JavaUtilConcurrentSemaphore *)semaphore
withAndroidGovNistJavaxSipStackMultiPipelineExecutor:(AndroidGovNistJavaxSipStackMultiPipelineExecutor *)parent {
  AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreRunnable_initWithJavaLangRunnable_withJavaUtilConcurrentSemaphore_withAndroidGovNistJavaxSipStackMultiPipelineExecutor_(self, task, semaphore, parent);
  return self;
}

- (void)run {
  @try {
    [((id<JavaLangRunnable>) nil_chk(wrappedTask_)) run];
  }
  @finally {
    [((JavaUtilConcurrentSemaphore *) nil_chk(semaphore_)) release__];
    [((AndroidGovNistJavaxSipStackMultiPipelineExecutor *) nil_chk(parent_)) java_notifyAll];
  }
}

- (void)dealloc {
  RELEASE_(wrappedTask_);
  RELEASE_(semaphore_);
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangRunnable:withJavaUtilConcurrentSemaphore:withAndroidGovNistJavaxSipStackMultiPipelineExecutor:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "wrappedTask_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "semaphore_", "LJavaUtilConcurrentSemaphore;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "parent_", "LAndroidGovNistJavaxSipStackMultiPipelineExecutor;", .constantValue.asLong = 0, 0x4, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangRunnable;LJavaUtilConcurrentSemaphore;LAndroidGovNistJavaxSipStackMultiPipelineExecutor;", "(Ljava/lang/Runnable;Ljava/util/concurrent/Semaphore;Landroid/gov/nist/javax/sip/stack/MultiPipelineExecutor<TK;>;)V", "Landroid/gov/nist/javax/sip/stack/MultiPipelineExecutor<TK;>;", "LAndroidGovNistJavaxSipStackMultiPipelineExecutor;", "<K:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreRunnable = { "SemaphoreRunnable", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x9, 2, 3, 3, -1, -1, 4, -1 };
  return &_AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreRunnable;
}

@end

void AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreRunnable_initWithJavaLangRunnable_withJavaUtilConcurrentSemaphore_withAndroidGovNistJavaxSipStackMultiPipelineExecutor_(AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreRunnable *self, id<JavaLangRunnable> task, JavaUtilConcurrentSemaphore *semaphore, AndroidGovNistJavaxSipStackMultiPipelineExecutor *parent) {
  NSObject_init(self);
  JreStrongAssign(&self->wrappedTask_, task);
  JreStrongAssign(&self->semaphore_, semaphore);
  JreStrongAssign(&self->parent_, parent);
}

AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreRunnable *new_AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreRunnable_initWithJavaLangRunnable_withJavaUtilConcurrentSemaphore_withAndroidGovNistJavaxSipStackMultiPipelineExecutor_(id<JavaLangRunnable> task, JavaUtilConcurrentSemaphore *semaphore, AndroidGovNistJavaxSipStackMultiPipelineExecutor *parent) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreRunnable, initWithJavaLangRunnable_withJavaUtilConcurrentSemaphore_withAndroidGovNistJavaxSipStackMultiPipelineExecutor_, task, semaphore, parent)
}

AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreRunnable *create_AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreRunnable_initWithJavaLangRunnable_withJavaUtilConcurrentSemaphore_withAndroidGovNistJavaxSipStackMultiPipelineExecutor_(id<JavaLangRunnable> task, JavaUtilConcurrentSemaphore *semaphore, AndroidGovNistJavaxSipStackMultiPipelineExecutor *parent) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreRunnable, initWithJavaLangRunnable_withJavaUtilConcurrentSemaphore_withAndroidGovNistJavaxSipStackMultiPipelineExecutor_, task, semaphore, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackMultiPipelineExecutor_SemaphoreRunnable)
