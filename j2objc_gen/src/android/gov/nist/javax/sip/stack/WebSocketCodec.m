//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/WebSocketCodec.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/stack/WebSocketCodec.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface AndroidGovNistJavaxSipStackWebSocketCodec () {
 @public
  jint fragmentedFramesCount_;
  jboolean frameFinalFlag_;
  jint frameRsv_;
  jint frameOpcode_;
  jlong framePayloadLength_;
  IOSByteArray *maskingKey_;
  jboolean allowExtensions_;
  jboolean maskedPayload_;
  jboolean closeOpcodeReceived_;
  jint payloadStartIndex_;
  IOSByteArray *buffer_;
  jint writeIndex_;
  jint readIndex_;
  jlong totalPacketLength_;
}

- (jbyte)readNextByte;

- (void)unmaskWithByteArray:(IOSByteArray *)frame
                    withInt:(jint)startIndex
                    withInt:(jint)endIndex;

- (void)protocolViolationWithNSString:(NSString *)reason;

- (void)protocolChecks;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackWebSocketCodec, maskingKey_, IOSByteArray *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackWebSocketCodec, buffer_, IOSByteArray *)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackWebSocketCodec_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackWebSocketCodec_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackWebSocketCodec_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackWebSocketCodec, logger, id<OrgSlf4jLogger>)

inline jbyte AndroidGovNistJavaxSipStackWebSocketCodec_get_OPCODE_CONT();
#define AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_CONT 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackWebSocketCodec, OPCODE_CONT, jbyte)

inline jbyte AndroidGovNistJavaxSipStackWebSocketCodec_get_OPCODE_TEXT();
#define AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_TEXT 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackWebSocketCodec, OPCODE_TEXT, jbyte)

inline jbyte AndroidGovNistJavaxSipStackWebSocketCodec_get_OPCODE_BINARY();
#define AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_BINARY 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackWebSocketCodec, OPCODE_BINARY, jbyte)

inline jbyte AndroidGovNistJavaxSipStackWebSocketCodec_get_OPCODE_CLOSE();
#define AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_CLOSE 8
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackWebSocketCodec, OPCODE_CLOSE, jbyte)

inline jbyte AndroidGovNistJavaxSipStackWebSocketCodec_get_OPCODE_PING();
#define AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_PING 9
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackWebSocketCodec, OPCODE_PING, jbyte)

inline jbyte AndroidGovNistJavaxSipStackWebSocketCodec_get_OPCODE_PONG();
#define AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_PONG 10
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackWebSocketCodec, OPCODE_PONG, jbyte)

__attribute__((unused)) static jbyte AndroidGovNistJavaxSipStackWebSocketCodec_readNextByte(AndroidGovNistJavaxSipStackWebSocketCodec *self);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackWebSocketCodec_unmaskWithByteArray_withInt_withInt_(AndroidGovNistJavaxSipStackWebSocketCodec *self, IOSByteArray *frame, jint startIndex, jint endIndex);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackWebSocketCodec_protocolViolationWithNSString_(AndroidGovNistJavaxSipStackWebSocketCodec *self, NSString *reason);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackWebSocketCodec_protocolChecks(AndroidGovNistJavaxSipStackWebSocketCodec *self);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackWebSocketCodec)

@implementation AndroidGovNistJavaxSipStackWebSocketCodec

- (instancetype)initWithBoolean:(jboolean)maskedPayload
                    withBoolean:(jboolean)allowExtensions {
  AndroidGovNistJavaxSipStackWebSocketCodec_initWithBoolean_withBoolean_(self, maskedPayload, allowExtensions);
  return self;
}

- (jbyte)readNextByte {
  return AndroidGovNistJavaxSipStackWebSocketCodec_readNextByte(self);
}

- (IOSByteArray *)decodeWithJavaIoInputStream:(JavaIoInputStream *)is {
  jint bytesRead = [((JavaIoInputStream *) nil_chk(is)) readWithByteArray:buffer_ withInt:writeIndex_ withInt:((IOSByteArray *) nil_chk(buffer_))->size_ - writeIndex_];
  if (bytesRead < 0) bytesRead = 0;
  writeIndex_ += bytesRead;
  readIndex_ = 0;
  if (writeIndex_ < 4) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackWebSocketCodec_logger)) debugWithNSString:JreStrcat("$I", @"Abort decode. Write index is at ", writeIndex_)];
    return nil;
  }
  jbyte b = AndroidGovNistJavaxSipStackWebSocketCodec_readNextByte(self);
  frameFinalFlag_ = ((b & (jint) 0x80) != 0);
  frameRsv_ = JreRShift32((b & (jint) 0x70), 4);
  frameOpcode_ = b & (jint) 0x0F;
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackWebSocketCodec_logger)) debugWithNSString:JreStrcat("$I", @"Decoding WebSocket Frame opCode=", frameOpcode_)];
  if (frameOpcode_ == 8) {
    self->closeOpcodeReceived_ = true;
  }
  b = AndroidGovNistJavaxSipStackWebSocketCodec_readNextByte(self);
  jboolean frameMasked = (b & (jint) 0x80) != 0;
  jint framePayloadLen1 = b & (jint) 0x7F;
  if (frameRsv_ != 0 && !allowExtensions_) {
    AndroidGovNistJavaxSipStackWebSocketCodec_protocolViolationWithNSString_(self, JreStrcat("$I", @"RSV != 0 and no extension negotiated, RSV:", frameRsv_));
    return nil;
  }
  if (maskedPayload_ && !frameMasked) {
    AndroidGovNistJavaxSipStackWebSocketCodec_protocolViolationWithNSString_(self, @"unmasked client to server frame");
    return nil;
  }
  AndroidGovNistJavaxSipStackWebSocketCodec_protocolChecks(self);
  @try {
    if (framePayloadLen1 == 126) {
      jint byte1 = (jint) 0xff & AndroidGovNistJavaxSipStackWebSocketCodec_readNextByte(self);
      jint byte2 = (jint) 0xff & AndroidGovNistJavaxSipStackWebSocketCodec_readNextByte(self);
      jint value = (JreLShift32(byte1, 8)) | byte2;
      framePayloadLength_ = value;
    }
    else if (framePayloadLen1 == 127) {
      jlong value = 0;
      for (jint q = 0; q < 8; q++) {
        value &= JreLShift32(((jint) 0xff & AndroidGovNistJavaxSipStackWebSocketCodec_readNextByte(self)), (7 - q));
      }
      framePayloadLength_ = value;
      if (framePayloadLength_ < 65536) {
        AndroidGovNistJavaxSipStackWebSocketCodec_protocolViolationWithNSString_(self, JreStrcat("$J", @"invalid data frame length (not using minimal length encoding): ", framePayloadLength_));
        return nil;
      }
    }
    else {
      framePayloadLength_ = framePayloadLen1;
    }
    if (framePayloadLength_ < 0) {
      AndroidGovNistJavaxSipStackWebSocketCodec_protocolViolationWithNSString_(self, JreStrcat("$J", @"Negative payload size: ", framePayloadLength_));
    }
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackWebSocketCodec_logger)) debugWithNSString:JreStrcat("$J", @"Decoding WebSocket Frame length=", framePayloadLength_)];
    if (frameMasked) {
      for (jint q = 0; q < 4; q++) *IOSByteArray_GetRef(nil_chk(maskingKey_), q) = AndroidGovNistJavaxSipStackWebSocketCodec_readNextByte(self);
    }
  }
  @catch (JavaLangIllegalStateException *e) {
    return nil;
  }
  payloadStartIndex_ = readIndex_;
  totalPacketLength_ = readIndex_ + framePayloadLength_;
  if (writeIndex_ < totalPacketLength_) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackWebSocketCodec_logger)) debugWithNSString:JreStrcat("$I$J", @"Abort decode. Write index is at ", writeIndex_, @" and totalPacketLength is ", totalPacketLength_)];
    return nil;
  }
  if (frameMasked) {
    AndroidGovNistJavaxSipStackWebSocketCodec_unmaskWithByteArray_withInt_withInt_(self, buffer_, payloadStartIndex_, (jint) (payloadStartIndex_ + framePayloadLength_));
  }
  IOSByteArray *plainTextBytes = [IOSByteArray arrayWithLength:(jint) framePayloadLength_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, payloadStartIndex_, plainTextBytes, 0, (jint) framePayloadLength_);
  for (jint q = 1; q < writeIndex_ - totalPacketLength_; q++) {
    *IOSByteArray_GetRef(nil_chk(buffer_), q) = IOSByteArray_Get(buffer_, (jint) totalPacketLength_ + q);
  }
  writeIndex_ -= totalPacketLength_;
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackWebSocketCodec_logger)) debugWithNSString:JreStrcat("$ICJ", @"writeIndex = ", writeIndex_, ' ', totalPacketLength_)];
  return plainTextBytes;
}

+ (IOSByteArray *)encodeWithByteArray:(IOSByteArray *)msg
                              withInt:(jint)rsv
                          withBoolean:(jboolean)fin
                          withBoolean:(jboolean)maskPayload {
  return AndroidGovNistJavaxSipStackWebSocketCodec_encodeWithByteArray_withInt_withBoolean_withBoolean_(msg, rsv, fin, maskPayload);
}

+ (IOSByteArray *)encodeWithByteArray:(IOSByteArray *)msg
                              withInt:(jint)rsv
                          withBoolean:(jboolean)fin
                          withBoolean:(jboolean)maskPayload
                             withByte:(jbyte)opcode {
  return AndroidGovNistJavaxSipStackWebSocketCodec_encodeWithByteArray_withInt_withBoolean_withBoolean_withByte_(msg, rsv, fin, maskPayload, opcode);
}

- (void)unmaskWithByteArray:(IOSByteArray *)frame
                    withInt:(jint)startIndex
                    withInt:(jint)endIndex {
  AndroidGovNistJavaxSipStackWebSocketCodec_unmaskWithByteArray_withInt_withInt_(self, frame, startIndex, endIndex);
}

+ (void)applyMaskWithByteArray:(IOSByteArray *)frame
                       withInt:(jint)startIndex
                       withInt:(jint)endIndex
                 withByteArray:(IOSByteArray *)mask {
  AndroidGovNistJavaxSipStackWebSocketCodec_applyMaskWithByteArray_withInt_withInt_withByteArray_(frame, startIndex, endIndex, mask);
}

- (void)protocolViolationWithNSString:(NSString *)reason {
  AndroidGovNistJavaxSipStackWebSocketCodec_protocolViolationWithNSString_(self, reason);
}

- (void)protocolChecks {
  AndroidGovNistJavaxSipStackWebSocketCodec_protocolChecks(self);
}

- (jboolean)isCloseOpcodeReceived {
  return self->closeOpcodeReceived_;
}

- (void)dealloc {
  RELEASE_(maskingKey_);
  RELEASE_(buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "B", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "[B", 0xc, 4, 5, 3, -1, -1, -1 },
    { NULL, "[B", 0xc, 4, 6, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:withBoolean:);
  methods[1].selector = @selector(readNextByte);
  methods[2].selector = @selector(decodeWithJavaIoInputStream:);
  methods[3].selector = @selector(encodeWithByteArray:withInt:withBoolean:withBoolean:);
  methods[4].selector = @selector(encodeWithByteArray:withInt:withBoolean:withBoolean:withByte:);
  methods[5].selector = @selector(unmaskWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(applyMaskWithByteArray:withInt:withInt:withByteArray:);
  methods[7].selector = @selector(protocolViolationWithNSString:);
  methods[8].selector = @selector(protocolChecks);
  methods[9].selector = @selector(isCloseOpcodeReceived);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 13, -1, -1 },
    { "OPCODE_CONT", "B", .constantValue.asChar = AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_CONT, 0x1a, -1, -1, -1, -1 },
    { "OPCODE_TEXT", "B", .constantValue.asChar = AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_TEXT, 0x1a, -1, -1, -1, -1 },
    { "OPCODE_BINARY", "B", .constantValue.asChar = AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_BINARY, 0x1a, -1, -1, -1, -1 },
    { "OPCODE_CLOSE", "B", .constantValue.asChar = AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_CLOSE, 0x1a, -1, -1, -1, -1 },
    { "OPCODE_PING", "B", .constantValue.asChar = AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_PING, 0x1a, -1, -1, -1, -1 },
    { "OPCODE_PONG", "B", .constantValue.asChar = AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_PONG, 0x1a, -1, -1, -1, -1 },
    { "fragmentedFramesCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "frameFinalFlag_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "frameRsv_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "frameOpcode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "framePayloadLength_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maskingKey_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "allowExtensions_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maskedPayload_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "closeOpcodeReceived_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "payloadStartIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buffer_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writeIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "readIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "totalPacketLength_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZZ", "decode", "LJavaIoInputStream;", "LJavaLangException;", "encode", "[BIZZ", "[BIZZB", "unmask", "[BII", "applyMask", "[BII[B", "protocolViolation", "LNSString;", &AndroidGovNistJavaxSipStackWebSocketCodec_logger };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackWebSocketCodec = { "WebSocketCodec", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 10, 21, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackWebSocketCodec;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackWebSocketCodec class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackWebSocketCodec_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackWebSocketCodec_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackWebSocketCodec)
  }
}

@end

void AndroidGovNistJavaxSipStackWebSocketCodec_initWithBoolean_withBoolean_(AndroidGovNistJavaxSipStackWebSocketCodec *self, jboolean maskedPayload, jboolean allowExtensions) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->maskingKey_, [IOSByteArray newArrayWithLength:4]);
  self->payloadStartIndex_ = -1;
  JreStrongAssignAndConsume(&self->buffer_, [IOSByteArray newArrayWithLength:66000]);
  self->writeIndex_ = 0;
  self->totalPacketLength_ = -1;
  self->maskedPayload_ = maskedPayload;
  self->allowExtensions_ = allowExtensions;
}

AndroidGovNistJavaxSipStackWebSocketCodec *new_AndroidGovNistJavaxSipStackWebSocketCodec_initWithBoolean_withBoolean_(jboolean maskedPayload, jboolean allowExtensions) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackWebSocketCodec, initWithBoolean_withBoolean_, maskedPayload, allowExtensions)
}

AndroidGovNistJavaxSipStackWebSocketCodec *create_AndroidGovNistJavaxSipStackWebSocketCodec_initWithBoolean_withBoolean_(jboolean maskedPayload, jboolean allowExtensions) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackWebSocketCodec, initWithBoolean_withBoolean_, maskedPayload, allowExtensions)
}

jbyte AndroidGovNistJavaxSipStackWebSocketCodec_readNextByte(AndroidGovNistJavaxSipStackWebSocketCodec *self) {
  if (self->readIndex_ >= self->writeIndex_) {
    @throw create_JavaLangIllegalStateException_init();
  }
  return IOSByteArray_Get(nil_chk(self->buffer_), self->readIndex_++);
}

IOSByteArray *AndroidGovNistJavaxSipStackWebSocketCodec_encodeWithByteArray_withInt_withBoolean_withBoolean_(IOSByteArray *msg, jint rsv, jboolean fin, jboolean maskPayload) {
  AndroidGovNistJavaxSipStackWebSocketCodec_initialize();
  return AndroidGovNistJavaxSipStackWebSocketCodec_encodeWithByteArray_withInt_withBoolean_withBoolean_withByte_(msg, rsv, fin, maskPayload, AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_TEXT);
}

IOSByteArray *AndroidGovNistJavaxSipStackWebSocketCodec_encodeWithByteArray_withInt_withBoolean_withBoolean_withByte_(IOSByteArray *msg, jint rsv, jboolean fin, jboolean maskPayload, jbyte opcode) {
  AndroidGovNistJavaxSipStackWebSocketCodec_initialize();
  JavaIoByteArrayOutputStream *frame = create_JavaIoByteArrayOutputStream_init();
  jint length = ((IOSByteArray *) nil_chk(msg))->size_;
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackWebSocketCodec_logger)) debugWithNSString:JreStrcat("$B$I", @"Encoding WebSocket Frame opCode=", opcode, @" length=", length)];
  jint b0 = 0;
  if (fin) {
    b0 |= JreLShift32(1, 7);
  }
  b0 |= JreLShift32(rsv % 8, 4);
  b0 |= opcode % 128;
  if (length <= 125) {
    [frame writeWithInt:b0];
    jbyte b = (jbyte) (maskPayload ? (jint) 0x80 | (jbyte) length : (jbyte) length);
    [frame writeWithInt:b];
  }
  else if (length <= (jint) 0xFFFF) {
    [frame writeWithInt:b0];
    [frame writeWithInt:maskPayload ? (jint) 0xFE : 126];
    [frame writeWithInt:(JreURShift32(length, 8)) & (jint) 0xFF];
    [frame writeWithInt:length & (jint) 0xFF];
  }
  else {
    [frame writeWithInt:b0];
    [frame writeWithInt:maskPayload ? (jint) 0xFF : 127];
    for (jint q = 0; q < 8; q++) {
      [frame writeWithInt:((jint) 0xFF) & (JreRShift32(length, q))];
    }
  }
  if (maskPayload) {
    IOSByteArray *mask = [IOSByteArray arrayWithBytes:(jbyte[]){ 1, 1, 1, 1 } count:4];
    [frame writeWithByteArray:mask];
    AndroidGovNistJavaxSipStackWebSocketCodec_applyMaskWithByteArray_withInt_withInt_withByteArray_(msg, 0, msg->size_, mask);
  }
  [frame writeWithByteArray:msg];
  return [frame toByteArray];
}

void AndroidGovNistJavaxSipStackWebSocketCodec_unmaskWithByteArray_withInt_withInt_(AndroidGovNistJavaxSipStackWebSocketCodec *self, IOSByteArray *frame, jint startIndex, jint endIndex) {
  AndroidGovNistJavaxSipStackWebSocketCodec_applyMaskWithByteArray_withInt_withInt_withByteArray_(frame, startIndex, endIndex, self->maskingKey_);
}

void AndroidGovNistJavaxSipStackWebSocketCodec_applyMaskWithByteArray_withInt_withInt_withByteArray_(IOSByteArray *frame, jint startIndex, jint endIndex, IOSByteArray *mask) {
  AndroidGovNistJavaxSipStackWebSocketCodec_initialize();
  for (jint i = 0; i < endIndex - startIndex; i++) {
    *IOSByteArray_GetRef(nil_chk(frame), startIndex + i) = (jbyte) (IOSByteArray_Get(frame, startIndex + i) ^ IOSByteArray_Get(nil_chk(mask), i % 4));
  }
}

void AndroidGovNistJavaxSipStackWebSocketCodec_protocolViolationWithNSString_(AndroidGovNistJavaxSipStackWebSocketCodec *self, NSString *reason) {
  @throw create_JavaLangRuntimeException_initWithNSString_(reason);
}

void AndroidGovNistJavaxSipStackWebSocketCodec_protocolChecks(AndroidGovNistJavaxSipStackWebSocketCodec *self) {
  if (self->frameOpcode_ > 7) {
    if (!self->frameFinalFlag_) {
      AndroidGovNistJavaxSipStackWebSocketCodec_protocolViolationWithNSString_(self, @"fragmented control frame");
    }
    if (!(self->frameOpcode_ == AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_CLOSE || self->frameOpcode_ == AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_PING || self->frameOpcode_ == AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_PONG)) {
      AndroidGovNistJavaxSipStackWebSocketCodec_protocolViolationWithNSString_(self, JreStrcat("$I", @"control frame using reserved opcode ", self->frameOpcode_));
    }
  }
  else {
    if (!(self->frameOpcode_ == AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_CONT || self->frameOpcode_ == AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_TEXT || self->frameOpcode_ == AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_BINARY)) {
      AndroidGovNistJavaxSipStackWebSocketCodec_protocolViolationWithNSString_(self, JreStrcat("$I", @"data frame using reserved opcode ", self->frameOpcode_));
    }
    if (self->fragmentedFramesCount_ == 0 && self->frameOpcode_ == AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_CONT) {
      AndroidGovNistJavaxSipStackWebSocketCodec_protocolViolationWithNSString_(self, @"received continuation data frame outside fragmented message");
    }
    if (self->fragmentedFramesCount_ != 0 && self->frameOpcode_ != AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_CONT && self->frameOpcode_ != AndroidGovNistJavaxSipStackWebSocketCodec_OPCODE_PING) {
      AndroidGovNistJavaxSipStackWebSocketCodec_protocolViolationWithNSString_(self, @"received non-continuation data frame while inside fragmented message");
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackWebSocketCodec)
