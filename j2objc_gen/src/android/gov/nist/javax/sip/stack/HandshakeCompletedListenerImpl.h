//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/HandshakeCompletedListenerImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl")
#ifdef RESTRICT_AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl
#define INCLUDE_ALL_AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl 0
#else
#define INCLUDE_ALL_AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl 1
#endif
#undef RESTRICT_AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl

#if !defined (AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl || defined(INCLUDE_AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl))
#define AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl_

#define RESTRICT_JavaxNetSslHandshakeCompletedListener 1
#define INCLUDE_JavaxNetSslHandshakeCompletedListener 1
#include "javax/net/ssl/HandshakeCompletedListener.h"

@class AndroidGovNistJavaxSipStackNioTlsMessageChannel;
@class AndroidGovNistJavaxSipStackTLSMessageChannel;
@class IOSObjectArray;
@class JavaNetSocket;
@class JavaNioChannelsSocketChannel;
@class JavaxNetSslHandshakeCompletedEvent;

@interface AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl : NSObject < JavaxNetSslHandshakeCompletedListener >

#pragma mark Public

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTlsMessageChannel:(AndroidGovNistJavaxSipStackNioTlsMessageChannel *)tlsMessageChannel
                                       withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socket;

- (instancetype)initWithAndroidGovNistJavaxSipStackTLSMessageChannel:(AndroidGovNistJavaxSipStackTLSMessageChannel *)tlsMessageChannel
                                                   withJavaNetSocket:(JavaNetSocket *)socket;

- (NSString *)getCipherSuite;

- (JavaxNetSslHandshakeCompletedEvent *)getHandshakeCompletedEvent;

- (IOSObjectArray *)getLocalCertificates;

- (IOSObjectArray *)getPeerCertificates;

- (void)handshakeCompletedWithJavaxNetSslHandshakeCompletedEvent:(JavaxNetSslHandshakeCompletedEvent *)handshakeCompletedEvent;

- (void)setCipherSuiteWithNSString:(NSString *)cipherSuite;

- (void)setLocalCertificatesWithJavaSecurityCertCertificateArray:(IOSObjectArray *)localCertificates;

- (void)setPeerCertificatesWithJavaSecurityCertCertificateArray:(IOSObjectArray *)peerCertificates;

- (void)startHandshakeWatchdog;

@end

J2OBJC_STATIC_INIT(AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl_initWithAndroidGovNistJavaxSipStackTLSMessageChannel_withJavaNetSocket_(AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *self, AndroidGovNistJavaxSipStackTLSMessageChannel *tlsMessageChannel, JavaNetSocket *socket);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *new_AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl_initWithAndroidGovNistJavaxSipStackTLSMessageChannel_withJavaNetSocket_(AndroidGovNistJavaxSipStackTLSMessageChannel *tlsMessageChannel, JavaNetSocket *socket) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *create_AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl_initWithAndroidGovNistJavaxSipStackTLSMessageChannel_withJavaNetSocket_(AndroidGovNistJavaxSipStackTLSMessageChannel *tlsMessageChannel, JavaNetSocket *socket);

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl_initWithAndroidGovNistJavaxSipStackNioTlsMessageChannel_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *self, AndroidGovNistJavaxSipStackNioTlsMessageChannel *tlsMessageChannel, JavaNioChannelsSocketChannel *socket);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *new_AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl_initWithAndroidGovNistJavaxSipStackNioTlsMessageChannel_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackNioTlsMessageChannel *tlsMessageChannel, JavaNioChannelsSocketChannel *socket) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *create_AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl_initWithAndroidGovNistJavaxSipStackNioTlsMessageChannel_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackNioTlsMessageChannel *tlsMessageChannel, JavaNioChannelsSocketChannel *socket);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl)

#endif

#if !defined (AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl_HandshakeWatchdog_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl || defined(INCLUDE_AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl_HandshakeWatchdog))
#define AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl_HandshakeWatchdog_

#define RESTRICT_AndroidGovNistJavaxSipStackSIPStackTimerTask 1
#define INCLUDE_AndroidGovNistJavaxSipStackSIPStackTimerTask 1
#include "android/gov/nist/javax/sip/stack/SIPStackTimerTask.h"

@class JavaNetSocket;

@interface AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl_HandshakeWatchdog : AndroidGovNistJavaxSipStackSIPStackTimerTask {
 @public
  JavaNetSocket *socket_;
}

#pragma mark Public

- (void)runTask;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl_HandshakeWatchdog)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl_HandshakeWatchdog, socket_, JavaNetSocket *)

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl_HandshakeWatchdog)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl")
