//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/SIPTransactionImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidGovNistJavaxSipStackSIPTransactionImpl")
#ifdef RESTRICT_AndroidGovNistJavaxSipStackSIPTransactionImpl
#define INCLUDE_ALL_AndroidGovNistJavaxSipStackSIPTransactionImpl 0
#else
#define INCLUDE_ALL_AndroidGovNistJavaxSipStackSIPTransactionImpl 1
#endif
#undef RESTRICT_AndroidGovNistJavaxSipStackSIPTransactionImpl

#if !defined (AndroidGovNistJavaxSipStackSIPTransactionImpl_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackSIPTransactionImpl || defined(INCLUDE_AndroidGovNistJavaxSipStackSIPTransactionImpl))
#define AndroidGovNistJavaxSipStackSIPTransactionImpl_

#define RESTRICT_AndroidGovNistJavaxSipStackSIPTransaction 1
#define INCLUDE_AndroidGovNistJavaxSipStackSIPTransaction 1
#include "android/gov/nist/javax/sip/stack/SIPTransaction.h"

@class AndroidGovNistJavaxSipHeaderVia;
@class AndroidGovNistJavaxSipMessageSIPMessage;
@class AndroidGovNistJavaxSipMessageSIPRequest;
@class AndroidGovNistJavaxSipMessageSIPResponse;
@class AndroidGovNistJavaxSipReleaseReferencesStrategy;
@class AndroidGovNistJavaxSipSipProviderImpl;
@class AndroidGovNistJavaxSipStackMessageChannel;
@class AndroidGovNistJavaxSipStackMessageProcessor;
@class AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask;
@class AndroidGovNistJavaxSipStackSIPDialog;
@class AndroidGovNistJavaxSipStackSIPTransactionStack;
@class AndroidJavaxSipTransactionState;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaNetInetAddress;
@class JavaUtilConcurrentAtomicAtomicBoolean;
@protocol AndroidGovNistJavaxSipStackSIPTransactionEventListener;
@protocol AndroidJavaxSipDialog;
@protocol AndroidJavaxSipMessageRequest;
@protocol AndroidJavaxSipMessageResponse;
@protocol JavaUtilList;

@interface AndroidGovNistJavaxSipStackSIPTransactionImpl : NSObject < AndroidGovNistJavaxSipStackSIPTransaction > {
 @public
  jboolean toListener_;
  jint baseTimerInterval_;
  jint T4_;
  jint T2_;
  jint timerI_;
  jint timerK_;
  jint timerD_;
  id applicationData_;
  AndroidGovNistJavaxSipMessageSIPResponse *lastResponse_;
  jboolean isMapped_;
  NSString *transactionId_;
  jlong auditTag_;
  AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack_;
  AndroidGovNistJavaxSipMessageSIPRequest *originalRequest_;
  IOSByteArray *originalRequestBytes_;
  jlong originalRequestCSeqNumber_;
  NSString *originalRequestBranch_;
  jboolean originalRequestHasPort_;
  AndroidGovNistJavaxSipStackMessageChannel *encapsulatedChannel_;
  JavaUtilConcurrentAtomicAtomicBoolean *transactionTimerStarted_;
  jint timeoutTimerTicksLeft_;
  jint collectionTime_;
  NSString *mergeId_;
  AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask *expiresTimerTask_;
}

#pragma mark Public

- (jboolean)acquireSem;

- (void)addEventListenerWithAndroidGovNistJavaxSipStackSIPTransactionEventListener:(id<AndroidGovNistJavaxSipStackSIPTransactionEventListener>)newListener;

- (void)cancelMaxTxLifeTimeTimer;

- (void)cleanUp;

- (void)close;

- (void)disableRetransmissionTimer;

- (void)disableTimeoutTimer;

- (jboolean)doesCancelMatchTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)requestToTest;

- (id<JavaUtilList>)extractCertIdentities;

- (void)fireTimer;

- (id)getApplicationData;

- (jlong)getAuditTag;

- (jint)getBaseTimerInterval;

- (NSString *)getBranch;

- (NSString *)getBranchId;

- (NSString *)getCipherSuite;

- (jlong)getCSeq;

- (id<AndroidJavaxSipDialog>)getDialog;

- (NSString *)getForkId;

- (NSString *)getHost;

- (jint)getInternalState;

- (NSString *)getKey;

- (AndroidGovNistJavaxSipMessageSIPResponse *)getLastResponse;

- (IOSObjectArray *)getLocalCertificates;

- (NSString *)getMergeId;

- (AndroidGovNistJavaxSipStackMessageChannel *)getMessageChannel;

- (AndroidGovNistJavaxSipStackMessageProcessor *)getMessageProcessor;

- (NSString *)getMethod;

- (AndroidGovNistJavaxSipMessageSIPRequest *)getOriginalRequest;

- (NSString *)getPeerAddress;

- (IOSObjectArray *)getPeerCertificates;

- (JavaNetInetAddress *)getPeerInetAddress;

- (JavaNetInetAddress *)getPeerPacketSourceAddress;

- (jint)getPeerPacketSourcePort;

- (jint)getPeerPort;

- (NSString *)getPeerProtocol;

- (jint)getPort;

- (AndroidGovNistJavaxSipReleaseReferencesStrategy *)getReleaseReferencesStrategy;

- (id<AndroidJavaxSipMessageRequest>)getRequest;

- (id<AndroidJavaxSipMessageResponse>)getResponse;

- (jint)getRetransmitTimer;

- (AndroidGovNistJavaxSipSipProviderImpl *)getSipProvider;

- (AndroidGovNistJavaxSipStackSIPTransactionStack *)getSIPStack;

- (AndroidJavaxSipTransactionState *)getState;

- (jint)getT2;

- (jint)getT4;

- (jint)getTimerD;

- (jint)getTimerI;

- (jint)getTimerK;

- (jint)getTimerT2;

- (jint)getTimerT4;

- (NSString *)getTransactionId;

- (NSString *)getTransport;

- (AndroidGovNistJavaxSipHeaderVia *)getViaHeader;

- (NSString *)getViaHost;

- (jint)getViaPort;

- (NSUInteger)hash;

- (jboolean)isByeTransaction;

- (jboolean)isCancelTransaction;

- (jboolean)isDialogCreatingTransaction;

- (jboolean)isInviteTransaction;

- (jboolean)isMessagePartOfTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)messageToTest;

- (jboolean)isReliable;

- (jboolean)isSecure;

- (jboolean)isServerTransaction;

- (jboolean)isTerminated;

- (jboolean)isTransactionMapped;

- (jboolean)passToListener;

- (void)raiseErrorEventWithInt:(jint)errorEventID;

- (void)raiseIOExceptionEvent;

- (void)releaseSem;

- (void)removeEventListenerWithAndroidGovNistJavaxSipStackSIPTransactionEventListener:(id<AndroidGovNistJavaxSipStackSIPTransactionEventListener>)oldListener;

- (void)scheduleMaxTxLifeTimeTimer;

- (void)semRelease;

- (void)sendMessageWithByteArray:(IOSByteArray *)messageBytes
          withJavaNetInetAddress:(JavaNetInetAddress *)receiverAddress
                         withInt:(jint)receiverPort
                     withBoolean:(jboolean)retry;

- (void)sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)messageToSend;

- (void)setApplicationDataWithId:(id)applicationData;

- (void)setAuditTagWithLong:(jlong)auditTag;

- (void)setBranchWithNSString:(NSString *)newBranch;

- (void)setCollectionTimeWithInt:(jint)collectionTime;

- (void)setDialogWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)sipDialog
                                             withNSString:(NSString *)dialogId;

- (void)setEncapsulatedChannelWithAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)messageChannel;

- (void)setForkIdWithNSString:(NSString *)forkId;

- (void)setOriginalRequestWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)newOriginalRequest;

- (void)setPassToListener;

- (void)setReleaseReferencesStrategyWithAndroidGovNistJavaxSipReleaseReferencesStrategy:(AndroidGovNistJavaxSipReleaseReferencesStrategy *)releaseReferencesStrategy;

- (void)setRetransmitTimerWithInt:(jint)retransmitTimer;

- (void)setStateWithInt:(jint)newState;

- (void)setTimerDWithInt:(jint)interval;

- (void)setTimerT2WithInt:(jint)interval;

- (void)setTimerT4WithInt:(jint)interval;

- (void)setTransactionMappedWithBoolean:(jboolean)transactionMapped;

- (jboolean)testAndSetTransactionTerminatedEvent;

#pragma mark Protected

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)newParentStack
                         withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)newEncapsulatedChannel;

- (void)enableRetransmissionTimer;

- (void)enableRetransmissionTimerWithInt:(jint)tickCount;

- (void)enableTimeoutTimerWithInt:(jint)tickCount;

@end

J2OBJC_STATIC_INIT(AndroidGovNistJavaxSipStackSIPTransactionImpl)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, applicationData_, id)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, lastResponse_, AndroidGovNistJavaxSipMessageSIPResponse *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, transactionId_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, sipStack_, AndroidGovNistJavaxSipStackSIPTransactionStack *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, originalRequest_, AndroidGovNistJavaxSipMessageSIPRequest *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, originalRequestBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, originalRequestBranch_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, encapsulatedChannel_, AndroidGovNistJavaxSipStackMessageChannel *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, transactionTimerStarted_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, mergeId_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, expiresTimerTask_, AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask *)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackSIPTransactionImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_(AndroidGovNistJavaxSipStackSIPTransactionImpl *self, AndroidGovNistJavaxSipStackSIPTransactionStack *newParentStack, AndroidGovNistJavaxSipStackMessageChannel *newEncapsulatedChannel);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackSIPTransactionImpl)

#endif

#if !defined (AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackSIPTransactionImpl || defined(INCLUDE_AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore))
#define AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore_

@class AndroidGovNistJavaxSipStackSIPTransactionImpl;
@class JavaUtilConcurrentLocksReentrantLock;
@class JavaUtilConcurrentSemaphore;

@interface AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore : NSObject {
 @public
  JavaUtilConcurrentSemaphore *sem_;
  JavaUtilConcurrentLocksReentrantLock *lock_;
}

#pragma mark Public

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionImpl:(AndroidGovNistJavaxSipStackSIPTransactionImpl *)outer$;

- (jboolean)acquire;

- (void)release__;

- (jboolean)tryAcquire;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore, sem_, JavaUtilConcurrentSemaphore *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore, lock_, JavaUtilConcurrentLocksReentrantLock *)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore *self, AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore *new_AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore *create_AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore)

#endif

#if !defined (AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackSIPTransactionImpl || defined(INCLUDE_AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer))
#define AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer_

#define RESTRICT_AndroidGovNistJavaxSipStackSIPStackTimerTask 1
#define INCLUDE_AndroidGovNistJavaxSipStackSIPStackTimerTask 1
#include "android/gov/nist/javax/sip/stack/SIPStackTimerTask.h"

@class AndroidGovNistJavaxSipStackSIPTransactionImpl;

@interface AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer : AndroidGovNistJavaxSipStackSIPStackTimerTask

#pragma mark Public

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionImpl:(AndroidGovNistJavaxSipStackSIPTransactionImpl *)outer$;

- (void)runTask;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer *self, AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer *new_AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer *create_AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer)

#endif

#if !defined (AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackSIPTransactionImpl || defined(INCLUDE_AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener))
#define AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener_

#define RESTRICT_AndroidGovNistJavaxSipStackSIPStackTimerTask 1
#define INCLUDE_AndroidGovNistJavaxSipStackSIPStackTimerTask 1
#include "android/gov/nist/javax/sip/stack/SIPStackTimerTask.h"

@class AndroidGovNistJavaxSipStackSIPTransactionImpl;
@protocol AndroidGovNistJavaxSipStackSIPTransaction;

@interface AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener : AndroidGovNistJavaxSipStackSIPStackTimerTask {
 @public
  id<AndroidGovNistJavaxSipStackSIPTransaction> sipTransaction_;
}

#pragma mark Public

- (void)runTask;

#pragma mark Package-Private

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionImpl:(AndroidGovNistJavaxSipStackSIPTransactionImpl *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener, sipTransaction_, id<AndroidGovNistJavaxSipStackSIPTransaction>)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener *self, AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener *new_AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener *create_AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidGovNistJavaxSipStackSIPTransactionImpl")
