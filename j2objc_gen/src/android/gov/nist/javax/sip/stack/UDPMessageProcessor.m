//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/UDPMessageProcessor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/core/ThreadAuditor.h"
#include "android/gov/nist/core/net/NetworkLayer.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/stack/BlockingQueueDispatchAuditor.h"
#include "android/gov/nist/javax/sip/stack/DatagramQueuedMessageDispatch.h"
#include "android/gov/nist/javax/sip/stack/MessageChannel.h"
#include "android/gov/nist/javax/sip/stack/MessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/gov/nist/javax/sip/stack/UDPMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/UDPMessageProcessor.h"
#include "android/javax/sip/IOExceptionEvent.h"
#include "android/javax/sip/SipListener.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/net/DatagramPacket.h"
#include "java/net/DatagramSocket.h"
#include "java/net/InetAddress.h"
#include "java/net/SocketException.h"
#include "java/net/SocketTimeoutException.h"
#include "java/util/LinkedList.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

static void (*AndroidGovNistJavaxSipStackUDPMessageProcessor_super$_setIpAddressWithJavaNetInetAddress_)(id, SEL, id);

@interface AndroidGovNistJavaxSipStackUDPMessageProcessor () {
 @public
  jint port_UDPMessageProcessor_;
  jint maxMessageSize_;
  jint exceptionsReportedCounter_;
}

- (void)reportSockeExceptionWithJavaLangException:(JavaLangException *)e;

@end

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackUDPMessageProcessor_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackUDPMessageProcessor_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackUDPMessageProcessor_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackUDPMessageProcessor, logger, id<OrgSlf4jLogger>)

inline jint AndroidGovNistJavaxSipStackUDPMessageProcessor_get_HIGHWAT();
#define AndroidGovNistJavaxSipStackUDPMessageProcessor_HIGHWAT 5000
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackUDPMessageProcessor, HIGHWAT, jint)

inline jint AndroidGovNistJavaxSipStackUDPMessageProcessor_get_LOWAT();
#define AndroidGovNistJavaxSipStackUDPMessageProcessor_LOWAT 2500
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackUDPMessageProcessor, LOWAT, jint)

inline jint AndroidGovNistJavaxSipStackUDPMessageProcessor_get_MAX_EXCEPTIONS_TO_REPORT();
#define AndroidGovNistJavaxSipStackUDPMessageProcessor_MAX_EXCEPTIONS_TO_REPORT 10
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackUDPMessageProcessor, MAX_EXCEPTIONS_TO_REPORT, jint)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackUDPMessageProcessor_reportSockeExceptionWithJavaLangException_(AndroidGovNistJavaxSipStackUDPMessageProcessor *self, JavaLangException *e);

@interface AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent : AndroidJavaxSipIOExceptionEvent {
 @public
  NSString *msg_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackUDPMessageProcessor:(AndroidGovNistJavaxSipStackUDPMessageProcessor *)outer$
                                                          withNSString:(NSString *)msg;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent, msg_, NSString *)

inline jlong AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent_get_serialVersionUID();
#define AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent_serialVersionUID 778500971662697296LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent, serialVersionUID, jlong)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent_initWithAndroidGovNistJavaxSipStackUDPMessageProcessor_withNSString_(AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent *self, AndroidGovNistJavaxSipStackUDPMessageProcessor *outer$, NSString *msg);

__attribute__((unused)) static AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent *new_AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent_initWithAndroidGovNistJavaxSipStackUDPMessageProcessor_withNSString_(AndroidGovNistJavaxSipStackUDPMessageProcessor *outer$, NSString *msg) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent *create_AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent_initWithAndroidGovNistJavaxSipStackUDPMessageProcessor_withNSString_(AndroidGovNistJavaxSipStackUDPMessageProcessor *outer$, NSString *msg);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackUDPMessageProcessor)

@implementation AndroidGovNistJavaxSipStackUDPMessageProcessor

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)ipAddress
withAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
                                   withInt:(jint)port {
  AndroidGovNistJavaxSipStackUDPMessageProcessor_initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_(self, ipAddress, sipStack, port);
  return self;
}

- (jint)getPort {
  return self->port_UDPMessageProcessor_;
}

- (void)start {
  self->isRunning_ = true;
  JavaLangThread *thread = create_JavaLangThread_initWithJavaLangRunnable_(self);
  [thread setDaemonWithBoolean:true];
  [thread setNameWithNSString:JreStrcat("$$CI", @"MessageProcessorThread-UDP-", [((JavaNetInetAddress *) nil_chk([self getIpAddress])) getHostAddress], '/', [self getPort])];
  [thread setPriorityWithInt:[((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getThreadPriority]];
  [thread start];
}

- (void)run {
  JreStrongAssignAndConsume(&self->messageChannels_, new_JavaUtilLinkedList_init());
  if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->threadPoolSize_ != -1) {
    for (jint i = 0; i < ((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->threadPoolSize_; i++) {
      AndroidGovNistJavaxSipStackUDPMessageChannel *channel = create_AndroidGovNistJavaxSipStackUDPMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_withNSString_(sipStack_, self, JreStrcat("$$I", [((AndroidGovNistJavaxSipSipStackImpl *) cast_chk(sipStack_, [AndroidGovNistJavaxSipSipStackImpl class])) getStackName], @"-UDPMessageChannelThread-", i));
      [((JavaUtilLinkedList *) nil_chk(self->messageChannels_)) addWithId:channel];
    }
  }
  AndroidGovNistCoreThreadAuditor_ThreadHandle *threadHandle = nil;
  if ([sipStack_ getThreadAuditor] != nil) {
    threadHandle = [((AndroidGovNistCoreThreadAuditor *) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getThreadAuditor])) addCurrentThread];
  }
  while (self->isRunning_) {
    @try {
      if (threadHandle != nil) [threadHandle ping];
      jint bufsize = self->maxMessageSize_;
      IOSByteArray *message = [IOSByteArray arrayWithLength:bufsize];
      JavaNetDatagramPacket *packet = create_JavaNetDatagramPacket_initWithByteArray_withInt_(message, bufsize);
      [((JavaNetDatagramSocket *) nil_chk(sock_)) receiveWithJavaNetDatagramPacket:packet];
      if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->threadPoolSize_ != -1) {
        [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(self->messageQueue_)) offerWithId:create_AndroidGovNistJavaxSipStackDatagramQueuedMessageDispatch_initWithJavaNetDatagramPacket_withLong_(packet, JavaLangSystem_currentTimeMillis())];
      }
      else {
        create_AndroidGovNistJavaxSipStackUDPMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_withJavaNetDatagramPacket_(sipStack_, self, packet);
      }
      exceptionsReportedCounter_ = 0;
    }
    @catch (JavaNetSocketTimeoutException *ex) {
    }
    @catch (JavaNetSocketException *ex) {
      if (!isRunning_) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackUDPMessageProcessor_logger)) debugWithNSString:@"UDPMessageProcessor: Stopping"];
        return;
      }
      else {
        AndroidGovNistJavaxSipStackUDPMessageProcessor_reportSockeExceptionWithJavaLangException_(self, ex);
      }
    }
    @catch (JavaIoIOException *ex) {
      AndroidGovNistJavaxSipStackUDPMessageProcessor_reportSockeExceptionWithJavaLangException_(self, ex);
    }
    @catch (JavaLangException *ex) {
      AndroidGovNistJavaxSipStackUDPMessageProcessor_reportSockeExceptionWithJavaLangException_(self, ex);
    }
  }
}

- (void)reportSockeExceptionWithJavaLangException:(JavaLangException *)e {
  AndroidGovNistJavaxSipStackUDPMessageProcessor_reportSockeExceptionWithJavaLangException_(self, e);
}

- (void)stop {
  self->isRunning_ = false;
  [((JavaNetDatagramSocket *) nil_chk(sock_)) close];
  for (id __strong messageChannel in nil_chk(messageChannels_)) {
    [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackMessageChannel *) cast_chk(messageChannel, [AndroidGovNistJavaxSipStackMessageChannel class])))) close];
  }
  if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getStackCongestionControlTimeout] > 0 && congestionAuditor_ != nil) {
    [self->congestionAuditor_ stop];
  }
}

- (NSString *)getTransport {
  return @"udp";
}

- (AndroidGovNistJavaxSipStackSIPTransactionStack *)getSIPStack {
  return sipStack_;
}

- (AndroidGovNistJavaxSipStackMessageChannel *)createMessageChannelWithAndroidGovNistCoreHostPort:(AndroidGovNistCoreHostPort *)targetHostPort {
  return create_AndroidGovNistJavaxSipStackUDPMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_([((AndroidGovNistCoreHostPort *) nil_chk(targetHostPort)) getInetAddress], [targetHostPort getPort], sipStack_, self);
}

- (AndroidGovNistJavaxSipStackMessageChannel *)createMessageChannelWithJavaNetInetAddress:(JavaNetInetAddress *)host
                                                                                  withInt:(jint)port {
  return create_AndroidGovNistJavaxSipStackUDPMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_(host, port, sipStack_, self);
}

- (jint)getDefaultTargetPort {
  return 5060;
}

- (jboolean)isSecure {
  return false;
}

- (jint)getMaximumMessageSize {
  return [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getReceiveUdpBufferSize];
}

- (jboolean)inUse {
  return ![((id<JavaUtilConcurrentBlockingQueue>) nil_chk(messageQueue_)) isEmpty];
}

- (void)dealloc {
  RELEASE_(messageQueue_);
  RELEASE_(congestionAuditor_);
  RELEASE_(messageChannels_);
  RELEASE_(sock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPTransactionStack;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageChannel;", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageChannel;", 0x1, 4, 7, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaNetInetAddress:withAndroidGovNistJavaxSipStackSIPTransactionStack:withInt:);
  methods[1].selector = @selector(getPort);
  methods[2].selector = @selector(start);
  methods[3].selector = @selector(run);
  methods[4].selector = @selector(reportSockeExceptionWithJavaLangException:);
  methods[5].selector = @selector(stop);
  methods[6].selector = @selector(getTransport);
  methods[7].selector = @selector(getSIPStack);
  methods[8].selector = @selector(createMessageChannelWithAndroidGovNistCoreHostPort:);
  methods[9].selector = @selector(createMessageChannelWithJavaNetInetAddress:withInt:);
  methods[10].selector = @selector(getDefaultTargetPort);
  methods[11].selector = @selector(isSecure);
  methods[12].selector = @selector(getMaximumMessageSize);
  methods[13].selector = @selector(inUse);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
    { "port_UDPMessageProcessor_", "I", .constantValue.asLong = 0, 0x2, 9, -1, -1, -1 },
    { "messageQueue_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x4, -1, -1, 10, -1 },
    { "congestionAuditor_", "LAndroidGovNistJavaxSipStackBlockingQueueDispatchAuditor;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "messageChannels_", "LJavaUtilLinkedList;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "threadPoolSize_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sock_", "LJavaNetDatagramSocket;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "isRunning_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "HIGHWAT", "I", .constantValue.asInt = AndroidGovNistJavaxSipStackUDPMessageProcessor_HIGHWAT, 0x1a, -1, -1, -1, -1 },
    { "LOWAT", "I", .constantValue.asInt = AndroidGovNistJavaxSipStackUDPMessageProcessor_LOWAT, 0x1a, -1, -1, -1, -1 },
    { "maxMessageSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "exceptionsReportedCounter_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_EXCEPTIONS_TO_REPORT", "I", .constantValue.asInt = AndroidGovNistJavaxSipStackUDPMessageProcessor_MAX_EXCEPTIONS_TO_REPORT, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetInetAddress;LAndroidGovNistJavaxSipStackSIPTransactionStack;I", "LJavaIoIOException;", "reportSockeException", "LJavaLangException;", "createMessageChannel", "LAndroidGovNistCoreHostPort;", "LJavaNetUnknownHostException;", "LJavaNetInetAddress;I", &AndroidGovNistJavaxSipStackUDPMessageProcessor_logger, "port", "Ljava/util/concurrent/BlockingQueue<Landroid/gov/nist/javax/sip/stack/DatagramQueuedMessageDispatch;>;", "LAndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackUDPMessageProcessor = { "UDPMessageProcessor", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 14, 13, -1, 11, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackUDPMessageProcessor;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackUDPMessageProcessor class]) {
    AndroidGovNistJavaxSipStackUDPMessageProcessor_super$_setIpAddressWithJavaNetInetAddress_ = (void (*)(id, SEL, id))[AndroidGovNistJavaxSipStackMessageProcessor instanceMethodForSelector:@selector(setIpAddressWithJavaNetInetAddress:)];
    JreStrongAssign(&AndroidGovNistJavaxSipStackUDPMessageProcessor_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackUDPMessageProcessor_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackUDPMessageProcessor)
  }
}

@end

void AndroidGovNistJavaxSipStackUDPMessageProcessor_initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_(AndroidGovNistJavaxSipStackUDPMessageProcessor *self, JavaNetInetAddress *ipAddress, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, jint port) {
  AndroidGovNistJavaxSipStackMessageProcessor_initWithJavaNetInetAddress_withInt_withNSString_withAndroidGovNistJavaxSipStackSIPTransactionStack_(self, ipAddress, port, @"udp", sipStack);
  self->maxMessageSize_ = [((JavaLangInteger *) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipSipStackImpl, MAX_DATAGRAM_SIZE))) intValue];
  JreStrongAssign(&self->sipStack_, sipStack);
  if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack)) getMaxMessageSize] < [JreLoadStatic(AndroidGovNistJavaxSipSipStackImpl, MAX_DATAGRAM_SIZE) intValue] && [sipStack getMaxMessageSize] > 0) {
    self->maxMessageSize_ = [sipStack getMaxMessageSize];
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackUDPMessageProcessor_logger)) debugWithNSString:JreStrcat("$I", @"Max Message size is ", self->maxMessageSize_)];
  JreStrongAssignAndConsume(&self->messageQueue_, new_JavaUtilConcurrentLinkedBlockingQueue_init());
  if ([sipStack getStackCongestionControlTimeout] > 0) {
    JreStrongAssignAndConsume(&self->congestionAuditor_, new_AndroidGovNistJavaxSipStackBlockingQueueDispatchAuditor_initWithJavaUtilQueue_(self->messageQueue_));
    [self->congestionAuditor_ setTimeoutWithInt:[sipStack getStackCongestionControlTimeout]];
    [((AndroidGovNistJavaxSipStackBlockingQueueDispatchAuditor *) nil_chk(self->congestionAuditor_)) startWithInt:2000];
  }
  self->port_UDPMessageProcessor_ = port;
  @try {
    JreStrongAssign(&self->sock_, [((id<AndroidGovNistCoreNetNetworkLayer>) nil_chk([sipStack getNetworkLayer])) createDatagramSocketWithInt:port withJavaNetInetAddress:ipAddress]);
    [((JavaNetDatagramSocket *) nil_chk(self->sock_)) setReceiveBufferSizeWithInt:[sipStack getReceiveUdpBufferSize]];
    [((JavaNetDatagramSocket *) nil_chk(self->sock_)) setSendBufferSizeWithInt:[sipStack getSendUdpBufferSize]];
    if ([sipStack getThreadAuditor] != nil && [((AndroidGovNistCoreThreadAuditor *) nil_chk([sipStack getThreadAuditor])) isEnabled]) {
      [((JavaNetDatagramSocket *) nil_chk(self->sock_)) setSoTimeoutWithInt:(jint) [((AndroidGovNistCoreThreadAuditor *) nil_chk([sipStack getThreadAuditor])) getPingIntervalInMillisecs]];
    }
    if ([((NSString *) nil_chk([((JavaNetInetAddress *) nil_chk(ipAddress)) getHostAddress])) isEqual:AndroidGovNistJavaxSipStackMessageProcessor_IN_ADDR_ANY] || [((NSString *) nil_chk([ipAddress getHostAddress])) isEqual:AndroidGovNistJavaxSipStackMessageProcessor_IN6_ADDR_ANY]) {
      AndroidGovNistJavaxSipStackUDPMessageProcessor_super$_setIpAddressWithJavaNetInetAddress_(self, @selector(setIpAddressWithJavaNetInetAddress:), [((JavaNetDatagramSocket *) nil_chk(self->sock_)) getLocalAddress]);
    }
  }
  @catch (JavaLangException *ex) {
    if (self->congestionAuditor_ != nil) [self->congestionAuditor_ stop];
    @throw create_JavaIoIOException_initWithNSException_(ex);
  }
}

AndroidGovNistJavaxSipStackUDPMessageProcessor *new_AndroidGovNistJavaxSipStackUDPMessageProcessor_initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_(JavaNetInetAddress *ipAddress, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, jint port) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackUDPMessageProcessor, initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_, ipAddress, sipStack, port)
}

AndroidGovNistJavaxSipStackUDPMessageProcessor *create_AndroidGovNistJavaxSipStackUDPMessageProcessor_initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_(JavaNetInetAddress *ipAddress, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, jint port) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackUDPMessageProcessor, initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_, ipAddress, sipStack, port)
}

void AndroidGovNistJavaxSipStackUDPMessageProcessor_reportSockeExceptionWithJavaLangException_(AndroidGovNistJavaxSipStackUDPMessageProcessor *self, JavaLangException *e) {
  if (self->exceptionsReportedCounter_ < AndroidGovNistJavaxSipStackUDPMessageProcessor_MAX_EXCEPTIONS_TO_REPORT) {
    self->exceptionsReportedCounter_++;
    jboolean lastBeforeFloodingChecker = self->exceptionsReportedCounter_ == AndroidGovNistJavaxSipStackUDPMessageProcessor_MAX_EXCEPTIONS_TO_REPORT;
    NSString *msg = NSString_java_formatWithNSString_withNSObjectArray_(@"Caught '%s' on UDP receive socket on %s:%s, message '%s'. Trying to ignore it ... %s", [IOSObjectArray arrayWithObjects:(id[]){ [[((JavaLangException *) nil_chk(e)) java_getClass] getSimpleName], [((JavaNetInetAddress *) nil_chk([((JavaNetDatagramSocket *) nil_chk(self->sock_)) getLocalAddress])) getHostAddress], JavaLangInteger_valueOfWithInt_([self getPort]), [e getMessage], lastBeforeFloodingChecker ? @"(Flooding checker active, no more socket IO-exceptions will be reported)" : @"" } count:5 type:NSObject_class_()]);
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackUDPMessageProcessor_logger)) warnWithNSString:msg withNSException:e];
    id<AndroidJavaxSipSipListener> listener = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getSipListener];
    if (listener != nil) {
      [listener processIOExceptionWithAndroidJavaxSipIOExceptionEvent:create_AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent_initWithAndroidGovNistJavaxSipStackUDPMessageProcessor_withNSString_(self, msg)];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackUDPMessageProcessor)

@implementation AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent

- (instancetype)initWithAndroidGovNistJavaxSipStackUDPMessageProcessor:(AndroidGovNistJavaxSipStackUDPMessageProcessor *)outer$
                                                          withNSString:(NSString *)msg {
  AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent_initWithAndroidGovNistJavaxSipStackUDPMessageProcessor_withNSString_(self, outer$, msg);
  return self;
}

- (NSString *)description {
  return msg_;
}

- (void)dealloc {
  RELEASE_(msg_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackUDPMessageProcessor:withNSString:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "msg_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "toString", "LAndroidGovNistJavaxSipStackUDPMessageProcessor;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent = { "SocketIOExceptionEvent", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x2, 2, 2, 2, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent;
}

@end

void AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent_initWithAndroidGovNistJavaxSipStackUDPMessageProcessor_withNSString_(AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent *self, AndroidGovNistJavaxSipStackUDPMessageProcessor *outer$, NSString *msg) {
  AndroidJavaxSipIOExceptionEvent_initWithId_withNSString_withInt_withNSString_(self, outer$, [((JavaNetInetAddress *) nil_chk([((JavaNetDatagramSocket *) nil_chk(outer$->sock_)) getLocalAddress])) getHostAddress], outer$->port_UDPMessageProcessor_, outer$->transport_);
  JreStrongAssign(&self->msg_, msg);
}

AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent *new_AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent_initWithAndroidGovNistJavaxSipStackUDPMessageProcessor_withNSString_(AndroidGovNistJavaxSipStackUDPMessageProcessor *outer$, NSString *msg) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent, initWithAndroidGovNistJavaxSipStackUDPMessageProcessor_withNSString_, outer$, msg)
}

AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent *create_AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent_initWithAndroidGovNistJavaxSipStackUDPMessageProcessor_withNSString_(AndroidGovNistJavaxSipStackUDPMessageProcessor *outer$, NSString *msg) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent, initWithAndroidGovNistJavaxSipStackUDPMessageProcessor_withNSString_, outer$, msg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackUDPMessageProcessor_SocketIOExceptionEvent)
