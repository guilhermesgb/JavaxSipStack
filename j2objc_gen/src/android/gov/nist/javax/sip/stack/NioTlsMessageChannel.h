//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/NioTlsMessageChannel.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidGovNistJavaxSipStackNioTlsMessageChannel")
#ifdef RESTRICT_AndroidGovNistJavaxSipStackNioTlsMessageChannel
#define INCLUDE_ALL_AndroidGovNistJavaxSipStackNioTlsMessageChannel 0
#else
#define INCLUDE_ALL_AndroidGovNistJavaxSipStackNioTlsMessageChannel 1
#endif
#undef RESTRICT_AndroidGovNistJavaxSipStackNioTlsMessageChannel

#if !defined (AndroidGovNistJavaxSipStackNioTlsMessageChannel_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackNioTlsMessageChannel || defined(INCLUDE_AndroidGovNistJavaxSipStackNioTlsMessageChannel))
#define AndroidGovNistJavaxSipStackNioTlsMessageChannel_

#define RESTRICT_AndroidGovNistJavaxSipStackNioTcpMessageChannel 1
#define INCLUDE_AndroidGovNistJavaxSipStackNioTcpMessageChannel 1
#include "android/gov/nist/javax/sip/stack/NioTcpMessageChannel.h"

#define RESTRICT_AndroidGovNistJavaxSipStackNioTlsChannelInterface 1
#define INCLUDE_AndroidGovNistJavaxSipStackNioTlsChannelInterface 1
#include "android/gov/nist/javax/sip/stack/NioTlsChannelInterface.h"

@class AndroidGovNistJavaxSipSipStackImpl;
@class AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl;
@class AndroidGovNistJavaxSipStackNioTcpMessageProcessor;
@class AndroidGovNistJavaxSipStackSIPTransactionStack;
@class AndroidGovNistJavaxSipStackSSLStateMachine;
@class IOSByteArray;
@class JavaNetInetAddress;
@class JavaNioByteBuffer;
@class JavaNioChannelsSocketChannel;
@protocol AndroidGovNistJavaxSipStackSIPClientTransaction;
@protocol JavaxNetSslHandshakeCompletedListener;

@interface AndroidGovNistJavaxSipStackNioTlsMessageChannel : AndroidGovNistJavaxSipStackNioTcpMessageChannel < AndroidGovNistJavaxSipStackNioTlsChannelInterface > {
 @public
  AndroidGovNistJavaxSipStackSSLStateMachine *sslStateMachine_;
}

#pragma mark Public

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)inetAddress
                                   withInt:(jint)port
withAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
withAndroidGovNistJavaxSipStackNioTcpMessageProcessor:(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *)nioTcpMessageProcessor;

- (void)addPlaintextBytesWithByteArray:(IOSByteArray *)bytes;

+ (AndroidGovNistJavaxSipStackNioTcpMessageChannel *)createWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor:(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *)nioTcpMessageProcessor
                                                                                withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel;

- (id<AndroidGovNistJavaxSipStackSIPClientTransaction>)getEncapsulatedClientTransaction;

- (AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *)getHandshakeCompletedListener;

- (AndroidGovNistJavaxSipSipStackImpl *)getSIPStack;

- (NSString *)getTransport;

- (void)init__WithBoolean:(jboolean)clientMode OBJC_METHOD_FAMILY_NONE;

- (jboolean)isHandshakeCompleted;

- (jboolean)isSecure;

- (void)onNewSocketWithByteArray:(IOSByteArray *)message;

- (JavaNioByteBuffer *)prepareAppDataBuffer;

- (JavaNioByteBuffer *)prepareAppDataBufferWithInt:(jint)capacity;

- (JavaNioByteBuffer *)prepareEncryptedDataBuffer;

- (void)sendEncryptedDataWithByteArray:(IOSByteArray *)msg;

- (void)sendMessageWithByteArray:(IOSByteArray *)message
          withJavaNetInetAddress:(JavaNetInetAddress *)receiverAddress
                         withInt:(jint)receiverPort
                     withBoolean:(jboolean)retry;

- (void)setHandshakeCompletedWithBoolean:(jboolean)handshakeCompleted;

- (void)setHandshakeCompletedListenerWithJavaxNetSslHandshakeCompletedListener:(id<JavaxNetSslHandshakeCompletedListener>)handshakeCompletedListenerImpl;

#pragma mark Protected

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor:(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *)nioTcpMessageProcessor
                                         withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel;

- (void)addBytesWithByteArray:(IOSByteArray *)bytes;

- (void)createBuffers;

- (void)sendMessageWithByteArray:(IOSByteArray *)msg
                     withBoolean:(jboolean)isClient;

@end

J2OBJC_STATIC_INIT(AndroidGovNistJavaxSipStackNioTlsMessageChannel)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackNioTlsMessageChannel, sslStateMachine_, AndroidGovNistJavaxSipStackSSLStateMachine *)

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackNioTcpMessageChannel *AndroidGovNistJavaxSipStackNioTlsMessageChannel_createWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor, JavaNioChannelsSocketChannel *socketChannel);

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackNioTlsMessageChannel_initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackNioTlsMessageChannel *self, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor, JavaNioChannelsSocketChannel *socketChannel);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackNioTlsMessageChannel *new_AndroidGovNistJavaxSipStackNioTlsMessageChannel_initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor, JavaNioChannelsSocketChannel *socketChannel) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackNioTlsMessageChannel *create_AndroidGovNistJavaxSipStackNioTlsMessageChannel_initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor, JavaNioChannelsSocketChannel *socketChannel);

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackNioTlsMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(AndroidGovNistJavaxSipStackNioTlsMessageChannel *self, JavaNetInetAddress *inetAddress, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackNioTlsMessageChannel *new_AndroidGovNistJavaxSipStackNioTlsMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(JavaNetInetAddress *inetAddress, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackNioTlsMessageChannel *create_AndroidGovNistJavaxSipStackNioTlsMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(JavaNetInetAddress *inetAddress, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackNioTlsMessageChannel)

#endif

#if !defined (AndroidGovNistJavaxSipStackNioTlsMessageChannel_SSLReconnectedException_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackNioTlsMessageChannel || defined(INCLUDE_AndroidGovNistJavaxSipStackNioTlsMessageChannel_SSLReconnectedException))
#define AndroidGovNistJavaxSipStackNioTlsMessageChannel_SSLReconnectedException_

#define RESTRICT_JavaIoIOException 1
#define INCLUDE_JavaIoIOException 1
#include "java/io/IOException.h"

@interface AndroidGovNistJavaxSipStackNioTlsMessageChannel_SSLReconnectedException : JavaIoIOException

#pragma mark Public

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackNioTlsMessageChannel_SSLReconnectedException)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackNioTlsMessageChannel_SSLReconnectedException_init(AndroidGovNistJavaxSipStackNioTlsMessageChannel_SSLReconnectedException *self);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackNioTlsMessageChannel_SSLReconnectedException *new_AndroidGovNistJavaxSipStackNioTlsMessageChannel_SSLReconnectedException_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackNioTlsMessageChannel_SSLReconnectedException *create_AndroidGovNistJavaxSipStackNioTlsMessageChannel_SSLReconnectedException_init();

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackNioTlsMessageChannel_SSLReconnectedException)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidGovNistJavaxSipStackNioTlsMessageChannel")
