//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/ConnectionOrientedMessageChannel.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/core/ServerLogger.h"
#include "android/gov/nist/core/net/AddressResolver.h"
#include "android/gov/nist/javax/sip/IOExceptionEventExt.h"
#include "android/gov/nist/javax/sip/SipListenerExt.h"
#include "android/gov/nist/javax/sip/SipProviderImpl.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/header/RequestLine.h"
#include "android/gov/nist/javax/sip/header/RetryAfter.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/header/ViaList.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/message/SIPRequest.h"
#include "android/gov/nist/javax/sip/message/SIPResponse.h"
#include "android/gov/nist/javax/sip/parser/Pipeline.h"
#include "android/gov/nist/javax/sip/parser/PipelinedMsgParser.h"
#include "android/gov/nist/javax/sip/stack/ConnectionOrientedMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/ConnectionOrientedMessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/IOHandler.h"
#include "android/gov/nist/javax/sip/stack/MessageChannel.h"
#include "android/gov/nist/javax/sip/stack/MessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/NIOHandler.h"
#include "android/gov/nist/javax/sip/stack/NioTcpMessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/SIPClientTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPServerTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPStackTimerTask.h"
#include "android/gov/nist/javax/sip/stack/SIPTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/gov/nist/javax/sip/stack/ServerRequestInterface.h"
#include "android/gov/nist/javax/sip/stack/ServerResponseInterface.h"
#include "android/gov/nist/javax/sip/stack/timers/SipTimer.h"
#include "android/javax/sip/ListeningPoint.h"
#include "android/javax/sip/SipListener.h"
#include "android/javax/sip/address/Hop.h"
#include "android/javax/sip/header/CSeqHeader.h"
#include "android/javax/sip/header/CallIdHeader.h"
#include "android/javax/sip/header/ContentLengthHeader.h"
#include "android/javax/sip/header/FromHeader.h"
#include "android/javax/sip/header/Header.h"
#include "android/javax/sip/header/ToHeader.h"
#include "android/javax/sip/message/Response.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/Socket.h"
#include "java/net/SocketAddress.h"
#include "java/nio/channels/SocketChannel.h"
#include "java/text/ParseException.h"
#include "java/util/Iterator.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/Semaphore.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel () {
 @public
  volatile_jlong lastKeepAliveReceivedTime_;
  AndroidGovNistJavaxSipStackSIPStackTimerTask *pingKeepAliveTimeoutTask_;
  JavaUtilConcurrentSemaphore *keepAliveSemaphore_;
  jlong keepAliveTimeout_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel, pingKeepAliveTimeoutTask_, AndroidGovNistJavaxSipStackSIPStackTimerTask *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel, keepAliveSemaphore_, JavaUtilConcurrentSemaphore *)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel, logger, id<OrgSlf4jLogger>)

@interface AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1 : NSObject < JavaLangRunnable > {
 @public
  AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *this$0_;
  AndroidGovNistJavaxSipMessageSIPMessage *val$sipMessage_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel:(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *)outer$
                                        withAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1_initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1 *self, AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *outer$, AndroidGovNistJavaxSipMessageSIPMessage *capture$0);

__attribute__((unused)) static AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1 *new_AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1_initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *outer$, AndroidGovNistJavaxSipMessageSIPMessage *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1 *create_AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1_initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *outer$, AndroidGovNistJavaxSipMessageSIPMessage *capture$0);

@interface AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_KeepAliveTimeoutTimerTask () {
 @public
  AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel)

@implementation AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack {
  AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(self, sipStack);
  return self;
}

- (jboolean)isReliable {
  return true;
}

- (void)close {
  [self closeWithBoolean:true withBoolean:true];
}

- (void)closeWithBoolean:(jboolean)removeSocket
             withBoolean:(jboolean)stopKeepAliveTask {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (AndroidGovNistJavaxSipStackSIPTransactionStack *)getSIPStack {
  return sipStack_;
}

- (NSString *)getPeerAddress {
  if (peerAddress_ != nil) {
    return [peerAddress_ getHostAddress];
  }
  else return [self getHost];
}

- (JavaNetInetAddress *)getPeerInetAddress {
  return peerAddress_;
}

- (NSString *)getPeerProtocol {
  return self->peerProtocol_;
}

- (void)sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage {
  if (![((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) isNullRequest]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) debugWithNSString:JreStrcat("$$$$", @"sendMessage:: ", [sipMessage getFirstLine], @" cseq method = ", [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipMessage getCSeq])) getMethod])];
  }
  {
    IOSObjectArray *a__ = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([self getSIPStack])) getMessageProcessors];
    AndroidGovNistJavaxSipStackMessageProcessor * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    AndroidGovNistJavaxSipStackMessageProcessor * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      AndroidGovNistJavaxSipStackMessageProcessor *messageProcessor = *b__++;
      if ([((NSString *) nil_chk([((JavaNetInetAddress *) nil_chk([((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(messageProcessor)) getIpAddress])) getHostAddress])) isEqual:[self getPeerAddress]] && [messageProcessor getPort] == [self getPeerPort] && [((NSString *) nil_chk([messageProcessor getTransport])) java_equalsIgnoreCase:[self getPeerProtocol]]) {
        id<JavaLangRunnable> processMessageTask = create_AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1_initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(self, sipMessage);
        [((id<JavaUtilConcurrentExecutor>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([self getSIPStack])) getSelfRoutingThreadpoolExecutor])) executeWithJavaLangRunnable:processMessageTask];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) debugWithNSString:@"Self routing message"];
        return;
      }
    }
  }
  IOSByteArray *msg = [sipMessage encodeAsBytesWithNSString:[self getTransport]];
  jlong time = JavaLangSystem_currentTimeMillis();
  if (peerPortAdvertisedInHeaders_ <= 0) {
    if ([sipMessage isKindOfClass:[AndroidGovNistJavaxSipMessageSIPResponse class]]) {
      AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = (AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(sipMessage, [AndroidGovNistJavaxSipMessageSIPResponse class]);
      AndroidGovNistJavaxSipHeaderVia *via = [sipResponse getTopmostVia];
      if ([((AndroidGovNistJavaxSipHeaderVia *) nil_chk(via)) getRPort] > 0) {
        if ([via getPort] <= 0) {
          self->peerPortAdvertisedInHeaders_ = 5060;
        }
        else {
          self->peerPortAdvertisedInHeaders_ = [via getPort];
        }
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) debugWithNSString:JreStrcat("$I$I$I$I$@$$", @"1.Storing peerPortAdvertisedInHeaders = ", peerPortAdvertisedInHeaders_, @" for via port = ", [via getPort], @" via rport = ", [via getRPort], @" and peer port = ", peerPort_, @" for this channel ", self, @" key ", key_)];
      }
    }
  }
  [self sendMessageWithByteArray:msg withBoolean:[sipMessage isKindOfClass:[AndroidGovNistJavaxSipMessageSIPRequest class]]];
  [sipMessage setRemoteAddressWithJavaNetInetAddress:self->peerAddress_];
  [sipMessage setRemotePortWithInt:self->peerPort_];
  [sipMessage setLocalAddressWithJavaNetInetAddress:[((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk([self getMessageProcessor])) getIpAddress]];
  [sipMessage setLocalPortWithInt:[self getPort]];
  [self logMessageWithAndroidGovNistJavaxSipMessageSIPMessage:sipMessage withJavaNetInetAddress:peerAddress_ withInt:peerPort_ withLong:time];
}

- (void)sendMessageWithByteArray:(IOSByteArray *)msg
                     withBoolean:(jboolean)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage
                                           withJavaNetInetAddress:(JavaNetInetAddress *)address {
  JreStrongAssign(&self->peerAddress_, address);
  @try {
    [self processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:sipMessage];
  }
  @catch (JavaLangException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) errorWithNSString:@"ERROR processing self routing" withNSException:e];
  }
}

- (void)processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage {
  @try {
    if ([((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) getFrom] == nil || [sipMessage getTo] == nil || [sipMessage getCallId] == nil || [sipMessage getCSeq] == nil || [sipMessage getViaHeaders] == nil) {
      NSString *badmsg = [sipMessage encode];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) errorWithNSString:JreStrcat("$$", @"bad message ", badmsg)];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) errorWithNSString:@">>> Dropped Bad Msg"];
      return;
    }
    [sipMessage setRemoteAddressWithJavaNetInetAddress:self->peerAddress_];
    [sipMessage setRemotePortWithInt:[self getPeerPort]];
    [sipMessage setLocalAddressWithJavaNetInetAddress:[((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk([self getMessageProcessor])) getIpAddress]];
    [sipMessage setLocalPortWithInt:[self getPort]];
    [sipMessage setPeerPacketSourceAddressWithJavaNetInetAddress:self->peerAddress_];
    [sipMessage setPeerPacketSourcePortWithInt:self->peerPort_];
    AndroidGovNistJavaxSipHeaderViaList *viaList = [sipMessage getViaHeaders];
    if ([sipMessage isKindOfClass:[AndroidGovNistJavaxSipMessageSIPRequest class]]) {
      AndroidGovNistJavaxSipHeaderVia *v = (AndroidGovNistJavaxSipHeaderVia *) cast_chk([((AndroidGovNistJavaxSipHeaderViaList *) nil_chk(viaList)) getFirst], [AndroidGovNistJavaxSipHeaderVia class]);
      id<AndroidJavaxSipAddressHop> hop = [((id<AndroidGovNistCoreNetAddressResolver>) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->addressResolver_)) resolveAddressWithAndroidJavaxSipAddressHop:[((AndroidGovNistJavaxSipHeaderVia *) nil_chk(v)) getHop]];
      JreStrongAssign(&self->peerProtocol_, [v getTransport]);
      jint hopPort = [v getPort];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) debugWithNSString:JreStrcat("$I$@$@$$", @"hop port = ", hopPort, @" for request ", sipMessage, @" for this channel ", self, @" key ", key_)];
      if (hopPort <= 0) {
        self->peerPortAdvertisedInHeaders_ = 5060;
      }
      else {
        self->peerPortAdvertisedInHeaders_ = hopPort;
      }
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) debugWithNSString:JreStrcat("$I$@$$", @"3.Storing peerPortAdvertisedInHeaders = ", peerPortAdvertisedInHeaders_, @" for this channel ", self, @" key ", key_)];
      if (peerAddressAdvertisedInHeaders_ == nil) {
        JreStrongAssign(&peerAddressAdvertisedInHeaders_, [((id<AndroidJavaxSipAddressHop>) nil_chk(hop)) getHost]);
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) debugWithNSString:JreStrcat("$$$@$$", @"3.Storing peerAddressAdvertisedInHeaders = ", peerAddressAdvertisedInHeaders_, @" for this channel ", self, @" key ", key_)];
      }
      @try {
        if (mySock_ != nil) {
          JreStrongAssign(&self->peerAddress_, [mySock_ getInetAddress]);
        }
        jboolean hasRPort = [v hasParameterWithNSString:AndroidGovNistJavaxSipHeaderVia_RPORT];
        if (!hasRPort && [v getPort] != peerPort_) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) debugWithNSString:JreStrcat("$I$I$", @"setting rport since viaPort ", [v getPort], @" different than peerPacketSourcePort ", peerPort_, @" so that the response can be routed back")];
          hasRPort = true;
        }
        if (hasRPort || ![((NSString *) nil_chk([((id<AndroidJavaxSipAddressHop>) nil_chk(hop)) getHost])) isEqual:[((JavaNetInetAddress *) nil_chk(self->peerAddress_)) getHostAddress]]) {
          [v setParameterWithNSString:AndroidGovNistJavaxSipHeaderVia_RECEIVED withNSString:[((JavaNetInetAddress *) nil_chk(self->peerAddress_)) getHostAddress]];
        }
        [v setParameterWithNSString:AndroidGovNistJavaxSipHeaderVia_RPORT withNSString:JavaLangInteger_toStringWithInt_(self->peerPort_)];
      }
      @catch (JavaTextParseException *ex) {
        AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
      }
      if (!self->isCached_ && mySock_ != nil) {
        self->isCached_ = true;
        jint remotePort = [((JavaNetInetSocketAddress *) nil_chk(((JavaNetInetSocketAddress *) cast_chk([mySock_ getRemoteSocketAddress], [JavaNetInetSocketAddress class])))) getPort];
        NSString *key = AndroidGovNistJavaxSipStackIOHandler_makeKeyWithJavaNetInetAddress_withInt_([((JavaNetSocket *) nil_chk(mySock_)) getInetAddress], remotePort);
        if ([self->messageProcessor_ isKindOfClass:[AndroidGovNistJavaxSipStackNioTcpMessageProcessor class]]) {
          [((AndroidGovNistJavaxSipStackNIOHandler *) nil_chk(((AndroidGovNistJavaxSipStackNioTcpMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackNioTcpMessageProcessor *) cast_chk(self->messageProcessor_, [AndroidGovNistJavaxSipStackNioTcpMessageProcessor class]))))->nioHandler_)) putSocketWithNSString:key withJavaNioChannelsSocketChannel:[((JavaNetSocket *) nil_chk(mySock_)) getChannel]];
        }
        else {
          [((AndroidGovNistJavaxSipStackIOHandler *) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->ioHandler_)) putSocketWithNSString:key withJavaNetSocket:mySock_];
        }
        [((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) cast_chk(self->messageProcessor_, [AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor class])))) cacheMessageChannelWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel:self];
      }
    }
    jlong receptionTime = JavaLangSystem_currentTimeMillis();
    if ([sipMessage isKindOfClass:[AndroidGovNistJavaxSipMessageSIPRequest class]]) {
      AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(sipMessage, [AndroidGovNistJavaxSipMessageSIPRequest class]);
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) debugWithNSString:@"----Processing Message---"];
      [((id<AndroidGovNistCoreServerLogger>) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->serverLogger_)) logMessageWithAndroidGovNistJavaxSipMessageSIPMessage:sipMessage withNSString:[((AndroidGovNistCoreHostPort *) nil_chk([self getPeerHostPort])) description] withNSString:JreStrcat("$CI", [((JavaNetInetAddress *) nil_chk([((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(self->messageProcessor_)) getIpAddress])) getHostAddress], ':', [((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(self->messageProcessor_)) getPort]) withBoolean:false withLong:receptionTime];
      if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMaxMessageSize] > 0 && [sipRequest getSize] + ([sipRequest getContentLength] == nil ? 0 : [((id<AndroidJavaxSipHeaderContentLengthHeader>) nil_chk([sipRequest getContentLength])) getContentLength]) > [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMaxMessageSize]) {
        AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = [sipRequest createResponseWithInt:AndroidJavaxSipMessageResponse_MESSAGE_TOO_LARGE];
        IOSByteArray *resp = [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) encodeAsBytesWithNSString:[self getTransport]];
        [self sendMessageWithByteArray:resp withBoolean:false];
        @throw create_JavaLangException_initWithNSString_(@"Message size exceeded");
      }
      NSString *sipVersion = [((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(sipMessage, [AndroidGovNistJavaxSipMessageSIPRequest class])) getRequestLine])) getSipVersion];
      if (![((NSString *) nil_chk(sipVersion)) isEqual:@"SIP/2.0"]) {
        AndroidGovNistJavaxSipMessageSIPResponse *versionNotSupported = [((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(sipMessage, [AndroidGovNistJavaxSipMessageSIPRequest class])) createResponseWithInt:AndroidJavaxSipMessageResponse_VERSION_NOT_SUPPORTED withNSString:JreStrcat("$$", @"Bad SIP version ", sipVersion)];
        [self sendMessageWithByteArray:[((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(versionNotSupported)) encodeAsBytesWithNSString:[self getTransport]] withBoolean:false];
        @throw create_JavaLangException_initWithNSString_(@"Bad version ");
      }
      NSString *method = [((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(sipMessage, [AndroidGovNistJavaxSipMessageSIPRequest class])) getMethod];
      NSString *cseqMethod = [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(sipMessage, [AndroidGovNistJavaxSipMessageSIPRequest class])) getCSeqHeader])) getMethod];
      if (![((NSString *) nil_chk(method)) java_equalsIgnoreCase:cseqMethod]) {
        AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = [sipRequest createResponseWithInt:AndroidJavaxSipMessageResponse_BAD_REQUEST];
        IOSByteArray *resp = [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) encodeAsBytesWithNSString:[self getTransport]];
        [self sendMessageWithByteArray:resp withBoolean:false];
        @throw create_JavaLangException_initWithNSString_(JreStrcat("$@$$", @"Bad CSeq method", sipMessage, @" method ", method));
      }
      id<AndroidGovNistJavaxSipStackServerRequestInterface> sipServerRequest = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) newSIPServerRequestWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest withAndroidGovNistJavaxSipStackMessageChannel:self];
      if (sipServerRequest != nil) {
        @try {
          [sipServerRequest processRequestWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest withAndroidGovNistJavaxSipStackMessageChannel:self];
        }
        @finally {
          if ([AndroidGovNistJavaxSipStackSIPTransaction_class_() isInstance:sipServerRequest]) {
            id<AndroidGovNistJavaxSipStackSIPServerTransaction> sipServerTx = (id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check(sipServerRequest, AndroidGovNistJavaxSipStackSIPServerTransaction_class_());
            if (![sipServerTx passToListener]) [((id<AndroidGovNistJavaxSipStackSIPTransaction>) cast_check(sipServerRequest, AndroidGovNistJavaxSipStackSIPTransaction_class_())) releaseSem];
          }
        }
      }
      else {
        if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->sipMessageValve_ == nil) {
          AndroidGovNistJavaxSipMessageSIPResponse *response = [sipRequest createResponseWithInt:AndroidJavaxSipMessageResponse_SERVICE_UNAVAILABLE];
          AndroidGovNistJavaxSipHeaderRetryAfter *retryAfter = create_AndroidGovNistJavaxSipHeaderRetryAfter_init();
          @try {
            [retryAfter setRetryAfterWithInt:JreFpToInt((10 * (JavaLangMath_random())))];
            [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(response)) setHeaderWithAndroidJavaxSipHeaderHeader:retryAfter];
            [self sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:response];
          }
          @catch (JavaLangException *e) {
          }
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) warnWithNSString:@"Dropping message -- could not acquire semaphore"];
        }
      }
    }
    else {
      AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = (AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(sipMessage, [AndroidGovNistJavaxSipMessageSIPResponse class]);
      @try {
        [sipResponse checkHeaders];
      }
      @catch (JavaTextParseException *ex) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) errorWithNSString:JreStrcat("$@", @"Dropping Badly formatted response message >>> ", sipResponse)];
        return;
      }
      if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMaxMessageSize] > 0 && [sipResponse getSize] + ([sipResponse getContentLength] == nil ? 0 : [((id<AndroidJavaxSipHeaderContentLengthHeader>) nil_chk([sipResponse getContentLength])) getContentLength]) > [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMaxMessageSize]) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) debugWithNSString:@"Message size exceeded"];
        return;
      }
      id<AndroidGovNistJavaxSipStackServerResponseInterface> sipServerResponse = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) newSIPServerResponseWithAndroidGovNistJavaxSipMessageSIPResponse:sipResponse withAndroidGovNistJavaxSipStackMessageChannel:self];
      if (sipServerResponse != nil) {
        @try {
          if ([AndroidGovNistJavaxSipStackSIPClientTransaction_class_() isInstance:sipServerResponse] && ![((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(sipServerResponse, AndroidGovNistJavaxSipStackSIPClientTransaction_class_())) checkFromTagWithAndroidGovNistJavaxSipMessageSIPResponse:sipResponse]) {
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) errorWithNSString:JreStrcat("$@", @"Dropping response message with invalid tag >>> ", sipResponse)];
            return;
          }
          [sipServerResponse processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:sipResponse withAndroidGovNistJavaxSipStackMessageChannel:self];
        }
        @finally {
          if ([AndroidGovNistJavaxSipStackSIPTransaction_class_() isInstance:sipServerResponse] && ![((id<AndroidGovNistJavaxSipStackSIPTransaction>) cast_check(sipServerResponse, AndroidGovNistJavaxSipStackSIPTransaction_class_())) passToListener]) {
            [((id<AndroidGovNistJavaxSipStackSIPTransaction>) cast_check(sipServerResponse, AndroidGovNistJavaxSipStackSIPTransaction_class_())) releaseSem];
          }
        }
      }
      else {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) warnWithNSString:@"Application is blocked -- could not acquire semaphore -- dropping response"];
      }
    }
  }
  @finally {
  }
}

- (void)run {
  AndroidGovNistJavaxSipParserPipeline *hispipe = nil;
  hispipe = create_AndroidGovNistJavaxSipParserPipeline_initWithJavaIoInputStream_withInt_withAndroidGovNistJavaxSipStackTimersSipTimer_(myClientInputStream_, ((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->readTimeout_, [(sipStack_) getTimer]);
  JreStrongAssignAndConsume(&myParser_, new_AndroidGovNistJavaxSipParserPipelinedMsgParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withAndroidGovNistJavaxSipParserPipeline_withInt_(sipStack_, self, hispipe, [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getMaxMessageSize]));
  [myParser_ processInput];
  jint bufferSize = 4096;
  ((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) cast_chk(self->messageProcessor_, [AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor class]))))->useCount_++;
  self->isRunning_ = true;
  @try {
    while (true) {
      @try {
        IOSByteArray *msg = [IOSByteArray arrayWithLength:bufferSize];
        jint nbytes = [((JavaIoInputStream *) nil_chk(myClientInputStream_)) readWithByteArray:msg withInt:0 withInt:bufferSize];
        if (nbytes == -1) {
          [hispipe writeWithByteArray:[@"\x0d\n\x0d\n" java_getBytesWithCharsetName:@"UTF-8"]];
          @try {
            if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->maxConnections_ != -1) {
              @synchronized(messageProcessor_) {
                ((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) cast_chk(self->messageProcessor_, [AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor class]))))->nConnections_--;
                [((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(messageProcessor_)) java_notify];
              }
            }
            [hispipe close];
            [self close];
          }
          @catch (JavaIoIOException *ioex) {
          }
          return;
        }
        [hispipe writeWithByteArray:msg withInt:0 withInt:nbytes];
      }
      @catch (JavaIoIOException *ex) {
        @try {
          [hispipe writeWithByteArray:[@"\x0d\n\x0d\n" java_getBytesWithCharsetName:@"UTF-8"]];
        }
        @catch (JavaLangException *e) {
        }
        @try {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) debugWithNSString:JreStrcat("$@", @"IOException closing sock ", ex)];
          @try {
            if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->maxConnections_ != -1) {
              @synchronized(messageProcessor_) {
                ((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) cast_chk(self->messageProcessor_, [AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor class]))))->nConnections_--;
                [((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(messageProcessor_)) java_notify];
              }
            }
            [self close];
            [hispipe close];
          }
          @catch (JavaIoIOException *ioex) {
          }
        }
        @catch (JavaLangException *ex1) {
        }
        return;
      }
      @catch (JavaLangException *ex) {
        AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_withOrgSlf4jLogger_(ex, AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger);
      }
    }
  }
  @finally {
    self->isRunning_ = false;
    [((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) cast_chk(self->messageProcessor_, [AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor class])))) removeWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel:self];
    ((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) cast_chk(self->messageProcessor_, [AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor class]))))->useCount_--;
    if (myParser_ != nil) {
      [myParser_ close];
    }
  }
}

- (void)uncache {
  if (isCached_ && !isRunning_) {
    [((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) cast_chk(self->messageProcessor_, [AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor class])))) removeWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel:self];
  }
}

- (NSString *)getKey {
  if (self->key_ != nil) {
    return self->key_;
  }
  else {
    JreStrongAssign(&self->key_, AndroidGovNistJavaxSipStackMessageChannel_getKeyWithJavaNetInetAddress_withInt_withNSString_(self->peerAddress_, self->peerPort_, [self getTransport]));
    return self->key_;
  }
}

- (NSString *)getViaHost {
  return myAddress_;
}

- (jint)getViaPort {
  return myPort_;
}

- (jint)getPeerPort {
  return peerPort_;
}

- (jint)getPeerPacketSourcePort {
  return self->peerPort_;
}

- (JavaNetInetAddress *)getPeerPacketSourceAddress {
  return self->peerAddress_;
}

- (void)sendSingleCLRF {
  JreAssignVolatileLong(&lastKeepAliveReceivedTime_, JavaLangSystem_currentTimeMillis());
  if (mySock_ != nil && ![mySock_ isClosed]) {
    [self sendMessageWithByteArray:[@"\x0d\n" java_getBytesWithCharsetName:@"UTF-8"] withBoolean:false];
  }
  @synchronized(self) {
    if (isRunning_) {
      if (keepAliveTimeout_ > 0) {
        [self rescheduleKeepAliveTimeoutWithLong:keepAliveTimeout_];
      }
    }
  }
}

- (void)cancelPingKeepAliveTimeoutTaskIfStarted {
  if (pingKeepAliveTimeoutTask_ != nil && [pingKeepAliveTimeoutTask_ getSipTimerTask] != nil) {
    @try {
      [((JavaUtilConcurrentSemaphore *) nil_chk(keepAliveSemaphore_)) acquire];
    }
    @catch (JavaLangInterruptedException *e) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) errorWithNSString:@"Couldn't acquire keepAliveSemaphore"];
      return;
    }
    @try {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) debugWithNSString:JreStrcat("$$$@$I$JC", @"~~~ cancelPingKeepAliveTimeoutTaskIfStarted for MessageChannel(key=", key_, @"), clientAddress=", peerAddress_, @", clientPort=", peerPort_, @", timeout=", keepAliveTimeout_, ')')];
      [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:pingKeepAliveTimeoutTask_];
    }
    @finally {
      [((JavaUtilConcurrentSemaphore *) nil_chk(keepAliveSemaphore_)) release__];
    }
  }
}

- (void)setKeepAliveTimeoutWithLong:(jlong)keepAliveTimeout {
  if (keepAliveTimeout < 0) {
    [self cancelPingKeepAliveTimeoutTaskIfStarted];
  }
  if (keepAliveTimeout == 0) {
    keepAliveTimeout = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(messageProcessor_)) getSIPStack])) getReliableConnectionKeepAliveTimeout];
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) debugWithNSString:JreStrcat("$$$@$I$JC", @"~~~ setKeepAliveTimeout for MessageChannel(key=", key_, @"), clientAddress=", peerAddress_, @", clientPort=", peerPort_, @", timeout=", keepAliveTimeout, ')')];
  self->keepAliveTimeout_ = keepAliveTimeout;
  if (keepAliveSemaphore_ == nil) {
    JreStrongAssignAndConsume(&keepAliveSemaphore_, new_JavaUtilConcurrentSemaphore_initWithInt_(1));
  }
  jboolean isKeepAliveTimeoutTaskScheduled = pingKeepAliveTimeoutTask_ != nil;
  if (isKeepAliveTimeoutTaskScheduled && keepAliveTimeout > 0) {
    [self rescheduleKeepAliveTimeoutWithLong:keepAliveTimeout];
  }
}

- (jlong)getKeepAliveTimeout {
  return keepAliveTimeout_;
}

- (void)rescheduleKeepAliveTimeoutWithLong:(jlong)newKeepAliveTimeout {
  JavaLangStringBuilder *methodLog = create_JavaLangStringBuilder_init();
  [methodLog appendWithNSString:JreStrcat("$$$@$I$J$", @"~~~ rescheduleKeepAliveTimeout for MessageChannel(key=", key_, @"), clientAddress=", peerAddress_, @", clientPort=", peerPort_, @", timeout=", keepAliveTimeout_, @"): newKeepAliveTimeout=")];
  if (newKeepAliveTimeout == JavaLangLong_MAX_VALUE) {
    [methodLog appendWithNSString:@"Long.MAX_VALUE"];
  }
  else {
    [methodLog appendWithLong:newKeepAliveTimeout];
  }
  @try {
    [((JavaUtilConcurrentSemaphore *) nil_chk(keepAliveSemaphore_)) acquire];
  }
  @catch (JavaLangInterruptedException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) warnWithNSString:@"Couldn't acquire keepAliveSemaphore"];
    return;
  }
  @try {
    if (pingKeepAliveTimeoutTask_ == nil) {
      JreStrongAssignAndConsume(&pingKeepAliveTimeoutTask_, new_AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_KeepAliveTimeoutTimerTask_initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_(self));
      [methodLog appendWithNSString:@", scheduling pingKeepAliveTimeoutTask to execute after "];
      [methodLog appendWithLong:keepAliveTimeout_ / 1000];
      [methodLog appendWithNSString:@" seconds"];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) debugWithNSString:[methodLog description]];
      [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:pingKeepAliveTimeoutTask_ withLong:keepAliveTimeout_];
    }
    else {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) debugWithNSString:JreStrcat("$$$@$I$JC", @"~~~ cancelPingKeepAliveTimeout for MessageChannel(key=", key_, @"), clientAddress=", peerAddress_, @", clientPort=", peerPort_, @", timeout=", keepAliveTimeout_, ')')];
      [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:pingKeepAliveTimeoutTask_];
      JreStrongAssignAndConsume(&pingKeepAliveTimeoutTask_, new_AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_KeepAliveTimeoutTimerTask_initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_(self));
      [methodLog appendWithNSString:@", scheduling pingKeepAliveTimeoutTask to execute after "];
      [methodLog appendWithLong:keepAliveTimeout_ / 1000];
      [methodLog appendWithNSString:@" seconds"];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger)) debugWithNSString:[methodLog description]];
      [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:pingKeepAliveTimeoutTask_ withLong:keepAliveTimeout_];
    }
  }
  @finally {
    [((JavaUtilConcurrentSemaphore *) nil_chk(keepAliveSemaphore_)) release__];
  }
}

- (void)dealloc {
  RELEASE_(sipStack_);
  RELEASE_(mySock_);
  RELEASE_(myParser_);
  RELEASE_(key_);
  RELEASE_(myClientInputStream_);
  RELEASE_(mythread_);
  RELEASE_(myAddress_);
  RELEASE_(peerAddress_);
  RELEASE_(peerAddressAdvertisedInHeaders_);
  RELEASE_(peerProtocol_);
  RELEASE_(pingKeepAliveTimeoutTask_);
  RELEASE_(keepAliveSemaphore_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 1, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPTransactionStack;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x404, 3, 6, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 4, 9, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 9, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionStack:);
  methods[1].selector = @selector(isReliable);
  methods[2].selector = @selector(close);
  methods[3].selector = @selector(closeWithBoolean:withBoolean:);
  methods[4].selector = @selector(getSIPStack);
  methods[5].selector = @selector(getPeerAddress);
  methods[6].selector = @selector(getPeerInetAddress);
  methods[7].selector = @selector(getPeerProtocol);
  methods[8].selector = @selector(sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[9].selector = @selector(sendMessageWithByteArray:withBoolean:);
  methods[10].selector = @selector(processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:withJavaNetInetAddress:);
  methods[11].selector = @selector(processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[12].selector = @selector(run);
  methods[13].selector = @selector(uncache);
  methods[14].selector = @selector(getKey);
  methods[15].selector = @selector(getViaHost);
  methods[16].selector = @selector(getViaPort);
  methods[17].selector = @selector(getPeerPort);
  methods[18].selector = @selector(getPeerPacketSourcePort);
  methods[19].selector = @selector(getPeerPacketSourceAddress);
  methods[20].selector = @selector(sendSingleCLRF);
  methods[21].selector = @selector(cancelPingKeepAliveTimeoutTaskIfStarted);
  methods[22].selector = @selector(setKeepAliveTimeoutWithLong:);
  methods[23].selector = @selector(getKeepAliveTimeout);
  methods[24].selector = @selector(rescheduleKeepAliveTimeoutWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 13, -1, -1 },
    { "sipStack_", "LAndroidGovNistJavaxSipStackSIPTransactionStack;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mySock_", "LJavaNetSocket;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "myParser_", "LAndroidGovNistJavaxSipParserPipelinedMsgParser;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "myClientInputStream_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "isRunning_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "isCached_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mythread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "myAddress_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "myPort_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "peerAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "peerPortAdvertisedInHeaders_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "peerAddressAdvertisedInHeaders_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "peerPort_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "peerProtocol_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "lastKeepAliveReceivedTime_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "pingKeepAliveTimeoutTask_", "LAndroidGovNistJavaxSipStackSIPStackTimerTask;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keepAliveSemaphore_", "LJavaUtilConcurrentSemaphore;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keepAliveTimeout_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPTransactionStack;", "close", "ZZ", "sendMessage", "LAndroidGovNistJavaxSipMessageSIPMessage;", "LJavaIoIOException;", "[BZ", "processMessage", "LAndroidGovNistJavaxSipMessageSIPMessage;LJavaNetInetAddress;", "LJavaLangException;", "setKeepAliveTimeout", "J", "rescheduleKeepAliveTimeout", &AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger, "LAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_KeepAliveTimeoutTimerTask;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel = { "ConnectionOrientedMessageChannel", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x401, 25, 20, -1, 14, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel)
  }
}

@end

void AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *self, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack) {
  AndroidGovNistJavaxSipStackMessageChannel_init(self);
  self->isRunning_ = true;
  self->peerPortAdvertisedInHeaders_ = -1;
  JreStrongAssign(&self->sipStack_, sipStack);
  self->keepAliveTimeout_ = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack)) getReliableConnectionKeepAliveTimeout];
  if (self->keepAliveTimeout_ > 0) {
    JreStrongAssignAndConsume(&self->keepAliveSemaphore_, new_JavaUtilConcurrentSemaphore_initWithInt_(1));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel)

@implementation AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1

- (instancetype)initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel:(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *)outer$
                                        withAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)capture$0 {
  AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1_initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(self, outer$, capture$0);
  return self;
}

- (void)run {
  @try {
    [this$0_ processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *) cast_chk([((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(val$sipMessage_)) java_clone], [AndroidGovNistJavaxSipMessageSIPMessage class])];
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel, logger))) errorWithNSString:@"Error self routing message cause by: " withNSException:ex];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$sipMessage_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel:withAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$sipMessage_", "LAndroidGovNistJavaxSipMessageSIPMessage;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel;", "sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8008, 2, 2, 0, -1, 1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1;
}

@end

void AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1_initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1 *self, AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *outer$, AndroidGovNistJavaxSipMessageSIPMessage *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$sipMessage_, capture$0);
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1 *new_AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1_initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *outer$, AndroidGovNistJavaxSipMessageSIPMessage *capture$0) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1, initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_, outer$, capture$0)
}

AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1 *create_AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1_initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *outer$, AndroidGovNistJavaxSipMessageSIPMessage *capture$0) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_1, initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_, outer$, capture$0)
}

@implementation AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_KeepAliveTimeoutTimerTask

- (instancetype)initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel:(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *)outer$ {
  AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_KeepAliveTimeoutTimerTask_initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_(self, outer$);
  return self;
}

- (void)runTask {
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel, logger))) debugWithNSString:JreStrcat("$$CI$", @"~~~ Starting processing of KeepAliveTimeoutEvent( ", [((JavaNetInetAddress *) nil_chk(this$0_->peerAddress_)) getHostAddress], ',', this$0_->peerPort_, @")...")];
  [this$0_ closeWithBoolean:true withBoolean:true];
  if ([this$0_->sipStack_ isKindOfClass:[AndroidGovNistJavaxSipSipStackImpl class]]) {
    for (id<JavaUtilIterator> it = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(((AndroidGovNistJavaxSipSipStackImpl *) cast_chk(this$0_->sipStack_, [AndroidGovNistJavaxSipSipStackImpl class])))) getSipProviders]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      AndroidGovNistJavaxSipSipProviderImpl *nextProvider = [it next];
      id<AndroidJavaxSipSipListener> sipListener = [((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(nextProvider)) getSipListener];
      IOSObjectArray *listeningPoints = [nextProvider getListeningPoints];
      {
        IOSObjectArray *a__ = listeningPoints;
        id<AndroidJavaxSipListeningPoint> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id<AndroidJavaxSipListeningPoint> const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id<AndroidJavaxSipListeningPoint> listeningPoint = *b__++;
          if (sipListener != nil && [AndroidGovNistJavaxSipSipListenerExt_class_() isInstance:sipListener] && [((NSString *) nil_chk([((id<AndroidJavaxSipListeningPoint>) nil_chk(listeningPoint)) getIPAddress])) java_equalsIgnoreCase:this$0_->myAddress_] && [listeningPoint getPort] == this$0_->myPort_ && [((NSString *) nil_chk([listeningPoint getTransport])) java_equalsIgnoreCase:[this$0_ getTransport]]) {
            [((id<AndroidGovNistJavaxSipSipListenerExt>) cast_check(sipListener, AndroidGovNistJavaxSipSipListenerExt_class_())) processIOExceptionWithAndroidJavaxSipIOExceptionEvent:create_AndroidGovNistJavaxSipIOExceptionEventExt_initWithId_withAndroidGovNistJavaxSipIOExceptionEventExt_Reason_withNSString_withInt_withNSString_withInt_withNSString_(nextProvider, JreLoadEnum(AndroidGovNistJavaxSipIOExceptionEventExt_Reason, KeepAliveTimeout), this$0_->myAddress_, this$0_->myPort_, [((JavaNetInetAddress *) nil_chk(this$0_->peerAddress_)) getHostAddress], this$0_->peerPort_, [this$0_ getTransport])];
          }
        }
      }
    }
  }
  else {
    id<AndroidJavaxSipSipListener> sipListener = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_)) getSipListener];
    if ([AndroidGovNistJavaxSipSipListenerExt_class_() isInstance:sipListener]) {
      [((id<AndroidGovNistJavaxSipSipListenerExt>) nil_chk(((id<AndroidGovNistJavaxSipSipListenerExt>) cast_check(sipListener, AndroidGovNistJavaxSipSipListenerExt_class_())))) processIOExceptionWithAndroidJavaxSipIOExceptionEvent:create_AndroidGovNistJavaxSipIOExceptionEventExt_initWithId_withAndroidGovNistJavaxSipIOExceptionEventExt_Reason_withNSString_withInt_withNSString_withInt_withNSString_(self, JreLoadEnum(AndroidGovNistJavaxSipIOExceptionEventExt_Reason, KeepAliveTimeout), this$0_->myAddress_, this$0_->myPort_, [((JavaNetInetAddress *) nil_chk(this$0_->peerAddress_)) getHostAddress], this$0_->peerPort_, [this$0_ getTransport])];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_KeepAliveTimeoutTimerTask = { "KeepAliveTimeoutTimerTask", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 2, 1, 0, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_KeepAliveTimeoutTimerTask;
}

@end

void AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_KeepAliveTimeoutTimerTask_initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_KeepAliveTimeoutTimerTask *self, AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
}

AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_KeepAliveTimeoutTimerTask *new_AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_KeepAliveTimeoutTimerTask_initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_KeepAliveTimeoutTimerTask, initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_, outer$)
}

AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_KeepAliveTimeoutTimerTask *create_AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_KeepAliveTimeoutTimerTask_initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_KeepAliveTimeoutTimerTask, initWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_KeepAliveTimeoutTimerTask)
