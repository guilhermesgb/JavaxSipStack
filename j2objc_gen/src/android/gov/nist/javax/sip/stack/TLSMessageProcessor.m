//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/TLSMessageProcessor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/core/net/NetworkLayer.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/stack/ClientAuthType.h"
#include "android/gov/nist/javax/sip/stack/ConnectionOrientedMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/ConnectionOrientedMessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/MessageChannel.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/gov/nist/javax/sip/stack/TLSMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/TLSMessageProcessor.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/net/InetAddress.h"
#include "java/net/ServerSocket.h"
#include "java/net/Socket.h"
#include "java/net/SocketException.h"
#include "java/net/UnknownHostException.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "javax/net/ssl/SSLException.h"
#include "javax/net/ssl/SSLServerSocket.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackTLSMessageProcessor_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackTLSMessageProcessor_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackTLSMessageProcessor_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackTLSMessageProcessor, logger, id<OrgSlf4jLogger>)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackTLSMessageProcessor)

@implementation AndroidGovNistJavaxSipStackTLSMessageProcessor

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)ipAddress
withAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
                                   withInt:(jint)port {
  AndroidGovNistJavaxSipStackTLSMessageProcessor_initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_(self, ipAddress, sipStack, port);
  return self;
}

- (void)start {
  JavaLangThread *thread = create_JavaLangThread_initWithJavaLangRunnable_(self);
  [thread setNameWithNSString:JreStrcat("$$CI", @"MessageProcessorThread-TLS-", [((JavaNetInetAddress *) nil_chk([self getIpAddress])) getHostAddress], '/', [self getPort])];
  [thread setPriorityWithInt:[((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getThreadPriority]];
  [thread setDaemonWithBoolean:true];
  JreStrongAssign(&self->sock_, [((id<AndroidGovNistCoreNetNetworkLayer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getNetworkLayer])) createSSLServerSocketWithInt:[self getPort] withInt:0 withJavaNetInetAddress:[self getIpAddress]]);
  if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getClientAuth] == JreLoadEnum(AndroidGovNistJavaxSipStackClientAuthType, Want) || [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getClientAuth] == JreLoadEnum(AndroidGovNistJavaxSipStackClientAuthType, Default)) {
    [((JavaxNetSslSSLServerSocket *) nil_chk(((JavaxNetSslSSLServerSocket *) cast_chk(self->sock_, [JavaxNetSslSSLServerSocket class])))) setWantClientAuthWithBoolean:true];
  }
  else {
    [((JavaxNetSslSSLServerSocket *) nil_chk(((JavaxNetSslSSLServerSocket *) cast_chk(self->sock_, [JavaxNetSslSSLServerSocket class])))) setWantClientAuthWithBoolean:false];
  }
  if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getClientAuth] == JreLoadEnum(AndroidGovNistJavaxSipStackClientAuthType, Enabled)) {
    [((JavaxNetSslSSLServerSocket *) nil_chk(((JavaxNetSslSSLServerSocket *) cast_chk(self->sock_, [JavaxNetSslSSLServerSocket class])))) setNeedClientAuthWithBoolean:true];
  }
  else {
    [((JavaxNetSslSSLServerSocket *) nil_chk(((JavaxNetSslSSLServerSocket *) cast_chk(self->sock_, [JavaxNetSslSSLServerSocket class])))) setNeedClientAuthWithBoolean:false];
  }
  [((JavaxNetSslSSLServerSocket *) nil_chk(((JavaxNetSslSSLServerSocket *) cast_chk(self->sock_, [JavaxNetSslSSLServerSocket class])))) setUseClientModeWithBoolean:false];
  IOSObjectArray *enabledCiphers = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(((AndroidGovNistJavaxSipSipStackImpl *) cast_chk(sipStack_, [AndroidGovNistJavaxSipSipStackImpl class])))) getEnabledCipherSuites];
  [((JavaxNetSslSSLServerSocket *) nil_chk(((JavaxNetSslSSLServerSocket *) cast_chk(sock_, [JavaxNetSslSSLServerSocket class])))) setEnabledProtocolsWithNSStringArray:[((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(((AndroidGovNistJavaxSipSipStackImpl *) cast_chk(sipStack_, [AndroidGovNistJavaxSipSipStackImpl class])))) getEnabledProtocols]];
  [((JavaxNetSslSSLServerSocket *) nil_chk(((JavaxNetSslSSLServerSocket *) cast_chk(self->sock_, [JavaxNetSslSSLServerSocket class])))) setEnabledCipherSuitesWithNSStringArray:enabledCiphers];
  if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getClientAuth] == JreLoadEnum(AndroidGovNistJavaxSipStackClientAuthType, Want) || [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getClientAuth] == JreLoadEnum(AndroidGovNistJavaxSipStackClientAuthType, Default)) {
    [((JavaxNetSslSSLServerSocket *) nil_chk(((JavaxNetSslSSLServerSocket *) cast_chk(self->sock_, [JavaxNetSslSSLServerSocket class])))) setWantClientAuthWithBoolean:true];
  }
  else {
    [((JavaxNetSslSSLServerSocket *) nil_chk(((JavaxNetSslSSLServerSocket *) cast_chk(self->sock_, [JavaxNetSslSSLServerSocket class])))) setWantClientAuthWithBoolean:false];
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTLSMessageProcessor_logger)) debugWithNSString:JreStrcat("$Z", @"SSLServerSocket want client auth ", [((JavaxNetSslSSLServerSocket *) nil_chk(((JavaxNetSslSSLServerSocket *) cast_chk(self->sock_, [JavaxNetSslSSLServerSocket class])))) getWantClientAuth])];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTLSMessageProcessor_logger)) debugWithNSString:JreStrcat("$Z", @"SSLServerSocket need client auth ", [((JavaxNetSslSSLServerSocket *) nil_chk(((JavaxNetSslSSLServerSocket *) cast_chk(self->sock_, [JavaxNetSslSSLServerSocket class])))) getNeedClientAuth])];
  self->isRunning_ = true;
  [thread start];
}

- (void)run {
  while (self->isRunning_) {
    JavaNetSocket *newsock = nil;
    @try {
      @synchronized(self) {
        while (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->maxConnections_ != -1 && self->nConnections_ >= sipStack_->maxConnections_) {
          @try {
            [self java_wait];
            if (!self->isRunning_) return;
          }
          @catch (JavaLangInterruptedException *ex) {
            break;
          }
        }
        self->nConnections_++;
      }
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTLSMessageProcessor_logger)) debugWithNSString:@" waiting to accept new connection!"];
      newsock = [((JavaNetServerSocket *) nil_chk(sock_)) accept];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTLSMessageProcessor_logger)) debugWithNSString:@"Accepting new connection!"];
    }
    @catch (JavaNetSocketException *ex) {
      if (self->isRunning_) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTLSMessageProcessor_logger)) errorWithNSString:@"Fatal - SocketException occured while Accepting connection" withNSException:ex];
        self->isRunning_ = false;
        break;
      }
    }
    @catch (JavaxNetSslSSLException *ex) {
      self->isRunning_ = false;
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTLSMessageProcessor_logger)) errorWithNSString:@"Fatal - SSSLException occured while Accepting connection" withNSException:ex];
      break;
    }
    @catch (JavaIoIOException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTLSMessageProcessor_logger)) errorWithNSString:@"Problem Accepting Connection" withNSException:ex];
      continue;
    }
    @catch (JavaLangException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTLSMessageProcessor_logger)) errorWithNSString:@"Unexpected Exception!" withNSException:ex];
      continue;
    }
    if (isRunning_) {
      @try {
        AndroidGovNistJavaxSipStackTLSMessageChannel *newChannel = create_AndroidGovNistJavaxSipStackTLSMessageChannel_initWithJavaNetSocket_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTLSMessageProcessor_withNSString_(newsock, sipStack_, self, JreStrcat("$I", @"TLSMessageChannelThread-", nConnections_));
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTLSMessageProcessor_logger)) debugWithNSString:JreStrcat("@$$", JavaLangThread_currentThread(), @" adding incoming channel ", [newChannel getKey])];
        if ([newChannel isHandshakeCompleted]) {
          [((id<JavaUtilMap>) nil_chk(incomingMessageChannels_)) putWithId:[newChannel getKey] withId:newChannel];
        }
      }
      @catch (JavaLangException *ex) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTLSMessageProcessor_logger)) errorWithNSString:@"A problem occured while Accepting connection" withNSException:ex];
      }
    }
  }
}

- (void)stop {
  @synchronized(self) {
    if (!isRunning_) return;
    isRunning_ = false;
    @try {
      [((JavaNetServerSocket *) nil_chk(sock_)) close];
    }
    @catch (JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    }
    id<JavaUtilCollection> en = [((id<JavaUtilMap>) nil_chk(messageChannels_)) values];
    for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(en)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      AndroidGovNistJavaxSipStackTLSMessageChannel *next = (AndroidGovNistJavaxSipStackTLSMessageChannel *) cast_chk([it next], [AndroidGovNistJavaxSipStackTLSMessageChannel class]);
      [((AndroidGovNistJavaxSipStackTLSMessageChannel *) nil_chk(next)) close];
    }
    for (id<JavaUtilIterator> incomingMCIterator = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(incomingMessageChannels_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(incomingMCIterator)) hasNext]; ) {
      AndroidGovNistJavaxSipStackTLSMessageChannel *next = (AndroidGovNistJavaxSipStackTLSMessageChannel *) cast_chk([incomingMCIterator next], [AndroidGovNistJavaxSipStackTLSMessageChannel class]);
      [((AndroidGovNistJavaxSipStackTLSMessageChannel *) nil_chk(next)) close];
    }
    [self java_notify];
  }
}

- (AndroidGovNistJavaxSipStackMessageChannel *)createMessageChannelWithAndroidGovNistCoreHostPort:(AndroidGovNistCoreHostPort *)targetHostPort {
  @synchronized(self) {
    NSString *key = AndroidGovNistJavaxSipStackMessageChannel_getKeyWithAndroidGovNistCoreHostPort_withNSString_(targetHostPort, @"TLS");
    if ([((id<JavaUtilMap>) nil_chk(messageChannels_)) getWithId:key] != nil) {
      return (AndroidGovNistJavaxSipStackTLSMessageChannel *) cast_chk([self->messageChannels_ getWithId:key], [AndroidGovNistJavaxSipStackTLSMessageChannel class]);
    }
    else {
      AndroidGovNistJavaxSipStackTLSMessageChannel *retval = create_AndroidGovNistJavaxSipStackTLSMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTLSMessageProcessor_([((AndroidGovNistCoreHostPort *) nil_chk(targetHostPort)) getInetAddress], [targetHostPort getPort], sipStack_, self);
      [self->messageChannels_ putWithId:key withId:retval];
      retval->isCached_ = true;
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTLSMessageProcessor_logger)) debugWithNSString:JreStrcat("$$", @"key ", key)];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTLSMessageProcessor_logger)) debugWithNSString:JreStrcat("$@", @"Creating ", retval)];
      return retval;
    }
  }
}

- (AndroidGovNistJavaxSipStackMessageChannel *)createMessageChannelWithJavaNetInetAddress:(JavaNetInetAddress *)host
                                                                                  withInt:(jint)port {
  @synchronized(self) {
    @try {
      NSString *key = AndroidGovNistJavaxSipStackMessageChannel_getKeyWithJavaNetInetAddress_withInt_withNSString_(host, port, @"TLS");
      if ([((id<JavaUtilMap>) nil_chk(messageChannels_)) getWithId:key] != nil) {
        return (AndroidGovNistJavaxSipStackTLSMessageChannel *) cast_chk([self->messageChannels_ getWithId:key], [AndroidGovNistJavaxSipStackTLSMessageChannel class]);
      }
      else {
        AndroidGovNistJavaxSipStackTLSMessageChannel *retval = create_AndroidGovNistJavaxSipStackTLSMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTLSMessageProcessor_(host, port, sipStack_, self);
        [self->messageChannels_ putWithId:key withId:retval];
        retval->isCached_ = true;
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTLSMessageProcessor_logger)) debugWithNSString:JreStrcat("$$", @"key ", key)];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTLSMessageProcessor_logger)) debugWithNSString:JreStrcat("$@", @"Creating ", retval)];
        return retval;
      }
    }
    @catch (JavaNetUnknownHostException *ex) {
      @throw create_JavaIoIOException_initWithNSString_([((JavaNetUnknownHostException *) nil_chk(ex)) getMessage]);
    }
  }
}

- (jint)getDefaultTargetPort {
  return 5061;
}

- (jboolean)isSecure {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageChannel;", 0x21, 2, 3, 1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageChannel;", 0x21, 2, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaNetInetAddress:withAndroidGovNistJavaxSipStackSIPTransactionStack:withInt:);
  methods[1].selector = @selector(start);
  methods[2].selector = @selector(run);
  methods[3].selector = @selector(stop);
  methods[4].selector = @selector(createMessageChannelWithAndroidGovNistCoreHostPort:);
  methods[5].selector = @selector(createMessageChannelWithJavaNetInetAddress:withInt:);
  methods[6].selector = @selector(getDefaultTargetPort);
  methods[7].selector = @selector(isSecure);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetInetAddress;LAndroidGovNistJavaxSipStackSIPTransactionStack;I", "LJavaIoIOException;", "createMessageChannel", "LAndroidGovNistCoreHostPort;", "LJavaNetInetAddress;I", &AndroidGovNistJavaxSipStackTLSMessageProcessor_logger };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackTLSMessageProcessor = { "TLSMessageProcessor", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackTLSMessageProcessor;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackTLSMessageProcessor class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackTLSMessageProcessor_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackTLSMessageProcessor_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackTLSMessageProcessor)
  }
}

@end

void AndroidGovNistJavaxSipStackTLSMessageProcessor_initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_(AndroidGovNistJavaxSipStackTLSMessageProcessor *self, JavaNetInetAddress *ipAddress, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, jint port) {
  AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor_initWithJavaNetInetAddress_withInt_withNSString_withAndroidGovNistJavaxSipStackSIPTransactionStack_(self, ipAddress, port, @"tls", sipStack);
}

AndroidGovNistJavaxSipStackTLSMessageProcessor *new_AndroidGovNistJavaxSipStackTLSMessageProcessor_initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_(JavaNetInetAddress *ipAddress, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, jint port) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackTLSMessageProcessor, initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_, ipAddress, sipStack, port)
}

AndroidGovNistJavaxSipStackTLSMessageProcessor *create_AndroidGovNistJavaxSipStackTLSMessageProcessor_initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_(JavaNetInetAddress *ipAddress, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, jint port) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackTLSMessageProcessor, initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_, ipAddress, sipStack, port)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackTLSMessageProcessor)
