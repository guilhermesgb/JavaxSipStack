//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/MessageProcessor.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/Host.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/javax/sip/ListeningPointImpl.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/stack/MessageChannel.h"
#include "android/gov/nist/javax/sip/stack/MessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/net/InetAddress.h"
#include "java/text/ParseException.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface AndroidGovNistJavaxSipStackMessageProcessor () {
 @public
  NSString *sentBy_;
  AndroidGovNistCoreHostPort *sentByHostPort_;
  NSString *savedIpAddress_;
  JavaNetInetAddress *ipAddress_;
  jint port_;
  AndroidGovNistJavaxSipListeningPointImpl *listeningPoint_;
  jboolean sentBySet_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackMessageProcessor, sentBy_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackMessageProcessor, sentByHostPort_, AndroidGovNistCoreHostPort *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackMessageProcessor, savedIpAddress_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackMessageProcessor, ipAddress_, JavaNetInetAddress *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackMessageProcessor, listeningPoint_, AndroidGovNistJavaxSipListeningPointImpl *)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackMessageProcessor_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackMessageProcessor_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackMessageProcessor_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackMessageProcessor, logger, id<OrgSlf4jLogger>)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackMessageProcessor_initialize__WithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_(AndroidGovNistJavaxSipStackMessageProcessor *self, JavaNetInetAddress *ipAddress, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *transactionStack);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackMessageProcessor)

NSString *AndroidGovNistJavaxSipStackMessageProcessor_IN_ADDR_ANY = @"0.0.0.0";
NSString *AndroidGovNistJavaxSipStackMessageProcessor_IN6_ADDR_ANY = @"::0";

@implementation AndroidGovNistJavaxSipStackMessageProcessor

- (instancetype)initWithNSString:(NSString *)transport {
  AndroidGovNistJavaxSipStackMessageProcessor_initWithNSString_(self, transport);
  return self;
}

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)ipAddress
                                   withInt:(jint)port
                              withNSString:(NSString *)transport
withAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)transactionStack {
  AndroidGovNistJavaxSipStackMessageProcessor_initWithJavaNetInetAddress_withInt_withNSString_withAndroidGovNistJavaxSipStackSIPTransactionStack_(self, ipAddress, port, transport, transactionStack);
  return self;
}

- (void)initialize__WithJavaNetInetAddress:(JavaNetInetAddress *)ipAddress
                                   withInt:(jint)port
withAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)transactionStack {
  AndroidGovNistJavaxSipStackMessageProcessor_initialize__WithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_(self, ipAddress, port, transactionStack);
}

- (NSString *)getTransport {
  return self->transport_;
}

- (jint)getPort {
  return self->port_;
}

- (AndroidGovNistJavaxSipHeaderVia *)getViaHeader {
  @try {
    AndroidGovNistJavaxSipHeaderVia *via = create_AndroidGovNistJavaxSipHeaderVia_init();
    if (self->sentByHostPort_ != nil) {
      [via setSentByWithAndroidGovNistCoreHostPort:sentByHostPort_];
      [via setTransportWithNSString:[self getTransport]];
    }
    else {
      AndroidGovNistCoreHost *host = create_AndroidGovNistCoreHost_init();
      [host setHostnameWithNSString:[((JavaNetInetAddress *) nil_chk([self getIpAddress])) getHostAddress]];
      [via setHostWithAndroidGovNistCoreHost:host];
      [via setPortWithInt:[self getPort]];
      [via setTransportWithNSString:[self getTransport]];
    }
    return via;
  }
  @catch (JavaTextParseException *ex) {
    [((JavaTextParseException *) nil_chk(ex)) printStackTrace];
    return nil;
  }
  @catch (AndroidJavaxSipInvalidArgumentException *ex) {
    [((AndroidJavaxSipInvalidArgumentException *) nil_chk(ex)) printStackTrace];
    return nil;
  }
}

- (AndroidGovNistJavaxSipListeningPointImpl *)getListeningPoint {
  if (listeningPoint_ == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackMessageProcessor_logger)) errorWithNSString:JreStrcat("$@$", @"getListeningPoint", self, @" returning null listeningpoint")];
  }
  return listeningPoint_;
}

- (void)setListeningPointWithAndroidGovNistJavaxSipListeningPointImpl:(AndroidGovNistJavaxSipListeningPointImpl *)lp {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackMessageProcessor_logger)) debugWithNSString:JreStrcat("$@$@", @"setListeningPoint", self, @" listeningPoint = ", lp)];
  if ([((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(lp)) getPort] != [self getPort]) AndroidGovNistCoreInternalErrorHandler_handleExceptionWithNSString_withOrgSlf4jLogger_(@"lp mismatch with provider", AndroidGovNistJavaxSipStackMessageProcessor_logger);
  JreStrongAssign(&self->listeningPoint_, lp);
}

- (NSString *)getSavedIpAddress {
  return self->savedIpAddress_;
}

- (JavaNetInetAddress *)getIpAddress {
  return self->ipAddress_;
}

- (void)setIpAddressWithJavaNetInetAddress:(JavaNetInetAddress *)ipAddress {
  [((AndroidGovNistCoreHostPort *) nil_chk(self->sentByHostPort_)) setHostWithAndroidGovNistCoreHost:create_AndroidGovNistCoreHost_initWithNSString_([((JavaNetInetAddress *) nil_chk(ipAddress)) getHostAddress])];
  JreStrongAssign(&self->ipAddress_, ipAddress);
}

- (void)setSentByWithNSString:(NSString *)sentBy {
  jint ind = [((NSString *) nil_chk(sentBy)) java_indexOfString:@":"];
  if (ind == -1) {
    JreStrongAssignAndConsume(&self->sentByHostPort_, new_AndroidGovNistCoreHostPort_init());
    [self->sentByHostPort_ setHostWithAndroidGovNistCoreHost:create_AndroidGovNistCoreHost_initWithNSString_(sentBy)];
  }
  else {
    JreStrongAssignAndConsume(&self->sentByHostPort_, new_AndroidGovNistCoreHostPort_init());
    [self->sentByHostPort_ setHostWithAndroidGovNistCoreHost:create_AndroidGovNistCoreHost_initWithNSString_([sentBy java_substring:0 endIndex:ind])];
    NSString *portStr = [sentBy java_substring:ind + 1];
    @try {
      jint port = JavaLangInteger_parseIntWithNSString_(portStr);
      [((AndroidGovNistCoreHostPort *) nil_chk(self->sentByHostPort_)) setPortWithInt:port];
    }
    @catch (JavaLangNumberFormatException *ex) {
      @throw create_JavaTextParseException_initWithNSString_withInt_(@"Bad format encountered at ", ind);
    }
  }
  self->sentBySet_ = true;
  JreStrongAssign(&self->sentBy_, sentBy);
}

- (NSString *)getSentBy {
  if (self->sentBy_ == nil && self->sentByHostPort_ != nil) {
    JreStrongAssign(&self->sentBy_, [self->sentByHostPort_ description]);
  }
  return self->sentBy_;
}

- (AndroidGovNistJavaxSipStackSIPTransactionStack *)getSIPStack {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (AndroidGovNistJavaxSipStackMessageChannel *)createMessageChannelWithAndroidGovNistCoreHostPort:(AndroidGovNistCoreHostPort *)targetHostPort {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (AndroidGovNistJavaxSipStackMessageChannel *)createMessageChannelWithJavaNetInetAddress:(JavaNetInetAddress *)targetHost
                                                                                  withInt:(jint)port {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)start {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)stop {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)getDefaultTargetPort {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isSecure {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getMaximumMessageSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)inUse {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isSentBySet {
  return sentBySet_;
}

+ (jint)getDefaultPortWithNSString:(NSString *)transport {
  return AndroidGovNistJavaxSipStackMessageProcessor_getDefaultPortWithNSString_(transport);
}

- (void)dealloc {
  RELEASE_(sentBy_);
  RELEASE_(sentByHostPort_);
  RELEASE_(savedIpAddress_);
  RELEASE_(ipAddress_);
  RELEASE_(transport_);
  RELEASE_(listeningPoint_);
  RELEASE_(sipStack_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderVia;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipListeningPointImpl;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 0, 9, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPTransactionStack;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageChannel;", 0x401, 10, 11, 12, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageChannel;", 0x401, 10, 13, 12, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, 12, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 14, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithJavaNetInetAddress:withInt:withNSString:withAndroidGovNistJavaxSipStackSIPTransactionStack:);
  methods[2].selector = @selector(initialize__WithJavaNetInetAddress:withInt:withAndroidGovNistJavaxSipStackSIPTransactionStack:);
  methods[3].selector = @selector(getTransport);
  methods[4].selector = @selector(getPort);
  methods[5].selector = @selector(getViaHeader);
  methods[6].selector = @selector(getListeningPoint);
  methods[7].selector = @selector(setListeningPointWithAndroidGovNistJavaxSipListeningPointImpl:);
  methods[8].selector = @selector(getSavedIpAddress);
  methods[9].selector = @selector(getIpAddress);
  methods[10].selector = @selector(setIpAddressWithJavaNetInetAddress:);
  methods[11].selector = @selector(setSentByWithNSString:);
  methods[12].selector = @selector(getSentBy);
  methods[13].selector = @selector(getSIPStack);
  methods[14].selector = @selector(createMessageChannelWithAndroidGovNistCoreHostPort:);
  methods[15].selector = @selector(createMessageChannelWithJavaNetInetAddress:withInt:);
  methods[16].selector = @selector(start);
  methods[17].selector = @selector(stop);
  methods[18].selector = @selector(getDefaultTargetPort);
  methods[19].selector = @selector(isSecure);
  methods[20].selector = @selector(getMaximumMessageSize);
  methods[21].selector = @selector(inUse);
  methods[22].selector = @selector(isSentBySet);
  methods[23].selector = @selector(getDefaultPortWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 15, -1, -1 },
    { "IN_ADDR_ANY", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 16, -1, -1 },
    { "IN6_ADDR_ANY", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 17, -1, -1 },
    { "sentBy_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sentByHostPort_", "LAndroidGovNistCoreHostPort;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "savedIpAddress_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ipAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "transport_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "listeningPoint_", "LAndroidGovNistJavaxSipListeningPointImpl;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sentBySet_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sipStack_", "LAndroidGovNistJavaxSipStackSIPTransactionStack;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaNetInetAddress;ILNSString;LAndroidGovNistJavaxSipStackSIPTransactionStack;", "initialize", "LJavaNetInetAddress;ILAndroidGovNistJavaxSipStackSIPTransactionStack;", "setListeningPoint", "LAndroidGovNistJavaxSipListeningPointImpl;", "setIpAddress", "LJavaNetInetAddress;", "setSentBy", "LJavaTextParseException;", "createMessageChannel", "LAndroidGovNistCoreHostPort;", "LJavaIoIOException;", "LJavaNetInetAddress;I", "getDefaultPort", &AndroidGovNistJavaxSipStackMessageProcessor_logger, &AndroidGovNistJavaxSipStackMessageProcessor_IN_ADDR_ANY, &AndroidGovNistJavaxSipStackMessageProcessor_IN6_ADDR_ANY };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackMessageProcessor = { "MessageProcessor", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x401, 24, 12, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackMessageProcessor;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackMessageProcessor class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackMessageProcessor_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackMessageProcessor_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackMessageProcessor)
  }
}

@end

void AndroidGovNistJavaxSipStackMessageProcessor_initWithNSString_(AndroidGovNistJavaxSipStackMessageProcessor *self, NSString *transport) {
  NSObject_init(self);
  JreStrongAssign(&self->transport_, transport);
}

void AndroidGovNistJavaxSipStackMessageProcessor_initWithJavaNetInetAddress_withInt_withNSString_withAndroidGovNistJavaxSipStackSIPTransactionStack_(AndroidGovNistJavaxSipStackMessageProcessor *self, JavaNetInetAddress *ipAddress, jint port, NSString *transport, AndroidGovNistJavaxSipStackSIPTransactionStack *transactionStack) {
  AndroidGovNistJavaxSipStackMessageProcessor_initWithNSString_(self, transport);
  AndroidGovNistJavaxSipStackMessageProcessor_initialize__WithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_(self, ipAddress, port, transactionStack);
}

void AndroidGovNistJavaxSipStackMessageProcessor_initialize__WithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_(AndroidGovNistJavaxSipStackMessageProcessor *self, JavaNetInetAddress *ipAddress, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *transactionStack) {
  JreStrongAssign(&self->sipStack_, transactionStack);
  JreStrongAssign(&self->savedIpAddress_, [((JavaNetInetAddress *) nil_chk(ipAddress)) getHostAddress]);
  JreStrongAssign(&self->ipAddress_, ipAddress);
  self->port_ = port;
  JreStrongAssignAndConsume(&self->sentByHostPort_, new_AndroidGovNistCoreHostPort_init());
  [self->sentByHostPort_ setHostWithAndroidGovNistCoreHost:create_AndroidGovNistCoreHost_initWithNSString_([ipAddress getHostAddress])];
  [((AndroidGovNistCoreHostPort *) nil_chk(self->sentByHostPort_)) setPortWithInt:port];
}

jint AndroidGovNistJavaxSipStackMessageProcessor_getDefaultPortWithNSString_(NSString *transport) {
  AndroidGovNistJavaxSipStackMessageProcessor_initialize();
  return [((NSString *) nil_chk(transport)) java_equalsIgnoreCase:@"TLS"] ? 5061 : 5060;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackMessageProcessor)
