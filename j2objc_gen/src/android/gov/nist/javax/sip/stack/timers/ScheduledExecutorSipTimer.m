//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/timers/ScheduledExecutorSipTimer.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/NamingThreadFactory.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/stack/SIPStackTimerTask.h"
#include "android/gov/nist/javax/sip/stack/timers/ScheduledExecutorSipTimer.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/util/Properties.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/ScheduledThreadPoolExecutor.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer ()

- (void)schedulePurgeTaskIfNeeded;

@end

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer, logger, id<OrgSlf4jLogger>)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_schedulePurgeTaskIfNeeded(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *self);

@interface AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1 : NSObject < JavaLangRunnable > {
 @public
  AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *this$0_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer:(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1_initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1 *self, AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *outer$);

__attribute__((unused)) static AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1 *new_AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1_initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1 *create_AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1_initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *outer$);

@interface AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask : NSObject < JavaLangRunnable > {
 @public
  AndroidGovNistJavaxSipStackSIPStackTimerTask *task_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer:(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *)outer$
                                  withAndroidGovNistJavaxSipStackSIPStackTimerTask:(AndroidGovNistJavaxSipStackSIPStackTimerTask *)task;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask, task_, AndroidGovNistJavaxSipStackSIPStackTimerTask *)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask_initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask *self, AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *outer$, AndroidGovNistJavaxSipStackSIPStackTimerTask *task);

__attribute__((unused)) static AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask *new_AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask_initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *outer$, AndroidGovNistJavaxSipStackSIPStackTimerTask *task) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask *create_AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask_initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *outer$, AndroidGovNistJavaxSipStackSIPStackTimerTask *task);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer)

@implementation AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)schedulePurgeTaskIfNeeded {
  AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_schedulePurgeTaskIfNeeded(self);
}

- (void)stop {
  [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(threadPoolExecutor_)) shutdown];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_logger)) infoWithNSString:JreStrcat("$$$", @"the sip stack timer ", [[self java_getClass] getName], @" has been stopped")];
}

- (jboolean)scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:(AndroidGovNistJavaxSipStackSIPStackTimerTask *)task
                                                            withLong:(jlong)delay {
  if ([((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(threadPoolExecutor_)) isShutdown]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"The SIP Stack Timer has been stopped, no new tasks can be scheduled !");
  }
  id<JavaUtilConcurrentScheduledFuture> future = [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(threadPoolExecutor_)) scheduleWithJavaLangRunnable:create_AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask_initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(self, task) withLong:delay withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((AndroidGovNistJavaxSipStackSIPStackTimerTask *) nil_chk(task)) setSipTimerTaskWithId:future];
  return true;
}

- (jboolean)scheduleWithFixedDelayWithAndroidGovNistJavaxSipStackSIPStackTimerTask:(AndroidGovNistJavaxSipStackSIPStackTimerTask *)task
                                                                          withLong:(jlong)delay
                                                                          withLong:(jlong)period {
  if ([((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(threadPoolExecutor_)) isShutdown]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"The SIP Stack Timer has been stopped, no new tasks can be scheduled !");
  }
  id<JavaUtilConcurrentScheduledFuture> future = [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(threadPoolExecutor_)) scheduleWithFixedDelayWithJavaLangRunnable:create_AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask_initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(self, task) withLong:delay withLong:period withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((AndroidGovNistJavaxSipStackSIPStackTimerTask *) nil_chk(task)) setSipTimerTaskWithId:future];
  return true;
}

- (void)startWithAndroidGovNistJavaxSipSipStackImpl:(AndroidGovNistJavaxSipSipStackImpl *)sipStack
                             withJavaUtilProperties:(JavaUtilProperties *)configurationProperties {
  JreStrongAssign(&sipStackImpl_, sipStack);
  [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(threadPoolExecutor_)) prestartAllCoreThreads];
  AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_schedulePurgeTaskIfNeeded(self);
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_logger)) infoWithNSString:JreStrcat("$$$", @"the sip stack timer ", [[self java_getClass] getName], @" has been started")];
}

- (jboolean)cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:(AndroidGovNistJavaxSipStackSIPStackTimerTask *)task {
  jboolean cancelled = false;
  id<JavaUtilConcurrentScheduledFuture> sipTimerTask = (id<JavaUtilConcurrentScheduledFuture>) cast_check([((AndroidGovNistJavaxSipStackSIPStackTimerTask *) nil_chk(task)) getSipTimerTask], JavaUtilConcurrentScheduledFuture_class_());
  if (sipTimerTask != nil) {
    [task cleanUpBeforeCancel];
    [task setSipTimerTaskWithId:nil];
    [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(threadPoolExecutor_)) removeWithJavaLangRunnable:(id<JavaLangRunnable>) cast_check(sipTimerTask, JavaLangRunnable_class_())];
    cancelled = [sipTimerTask cancelWithBoolean:false];
  }
  return cancelled;
}

- (jboolean)isStarted {
  return [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(threadPoolExecutor_)) isTerminated];
}

- (void)dealloc {
  RELEASE_(sipStackImpl_);
  RELEASE_(threadPoolExecutor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(schedulePurgeTaskIfNeeded);
  methods[2].selector = @selector(stop);
  methods[3].selector = @selector(scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:withLong:);
  methods[4].selector = @selector(scheduleWithFixedDelayWithAndroidGovNistJavaxSipStackSIPStackTimerTask:withLong:withLong:);
  methods[5].selector = @selector(startWithAndroidGovNistJavaxSipSipStackImpl:withJavaUtilProperties:);
  methods[6].selector = @selector(cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:);
  methods[7].selector = @selector(isStarted);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
    { "sipStackImpl_", "LAndroidGovNistJavaxSipSipStackImpl;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "threadPoolExecutor_", "LJavaUtilConcurrentScheduledThreadPoolExecutor;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "schedule", "LAndroidGovNistJavaxSipStackSIPStackTimerTask;J", "scheduleWithFixedDelay", "LAndroidGovNistJavaxSipStackSIPStackTimerTask;JJ", "start", "LAndroidGovNistJavaxSipSipStackImpl;LJavaUtilProperties;", "cancel", "LAndroidGovNistJavaxSipStackSIPStackTimerTask;", &AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_logger, "LAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer = { "ScheduledExecutorSipTimer", "android.gov.nist.javax.sip.stack.timers", ptrTable, methods, fields, 7, 0x1, 8, 3, -1, 9, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer)
  }
}

@end

void AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_init(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->threadPoolExecutor_, new_JavaUtilConcurrentScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_(1, create_AndroidGovNistCoreNamingThreadFactory_initWithNSString_(@"jain_sip_timer_executor")));
}

AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *new_AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer, init)
}

AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *create_AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer, init)
}

void AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_schedulePurgeTaskIfNeeded(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *self) {
  jint purgePeriod = JavaLangInteger_parseIntWithNSString_([((JavaUtilProperties *) nil_chk([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(self->sipStackImpl_)) getConfigurationProperties])) getPropertyWithNSString:@"gov.nist.javax.sip.timers.SCHEDULED_EXECUTOR_PURGE_DELAY" withNSString:@"1"]);
  if (purgePeriod > 0) {
    id<JavaLangRunnable> r = create_AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1_initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_(self);
    [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(self->threadPoolExecutor_)) scheduleWithFixedDelayWithJavaLangRunnable:r withLong:purgePeriod withLong:purgePeriod withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MINUTES)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer)

@implementation AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1

- (instancetype)initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer:(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *)outer$ {
  AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1_initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_(self, outer$);
  return self;
}

- (void)run {
  @try {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer, logger))) debugWithNSString:@"Purging canceled timer tasks..."];
    [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(this$0_->threadPoolExecutor_)) purge];
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer, logger))) debugWithNSString:@"Purging canceled timer tasks completed."];
  }
  @catch (JavaLangException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer, logger))) errorWithNSString:@"failed to execute purge" withNSException:e];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer;", "schedulePurgeTaskIfNeeded" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1 = { "", "android.gov.nist.javax.sip.stack.timers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1;
}

@end

void AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1_initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1 *self, AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1 *new_AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1_initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1, initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_, outer$)
}

AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1 *create_AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1_initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_1, initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_, outer$)
}

@implementation AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask

- (instancetype)initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer:(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *)outer$
                                  withAndroidGovNistJavaxSipStackSIPStackTimerTask:(AndroidGovNistJavaxSipStackSIPStackTimerTask *)task {
  AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask_initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(self, outer$, task);
  return self;
}

- (void)run {
  @try {
    if (task_ != nil) {
      [task_ runTask];
    }
  }
  @catch (NSException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"SIP stack timer task failed due to exception:"];
    [((NSException *) nil_chk(e)) printStackTrace];
  }
}

- (void)dealloc {
  RELEASE_(task_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer:withAndroidGovNistJavaxSipStackSIPStackTimerTask:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "task_", "LAndroidGovNistJavaxSipStackSIPStackTimerTask;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPStackTimerTask;", "LAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask = { "ScheduledSipTimerTask", "android.gov.nist.javax.sip.stack.timers", ptrTable, methods, fields, 7, 0x2, 2, 1, 1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask;
}

@end

void AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask_initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask *self, AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *outer$, AndroidGovNistJavaxSipStackSIPStackTimerTask *task) {
  NSObject_init(self);
  JreStrongAssign(&self->task_, task);
}

AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask *new_AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask_initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *outer$, AndroidGovNistJavaxSipStackSIPStackTimerTask *task) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask, initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_, outer$, task)
}

AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask *create_AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask_initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer *outer$, AndroidGovNistJavaxSipStackSIPStackTimerTask *task) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask, initWithAndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_withAndroidGovNistJavaxSipStackSIPStackTimerTask_, outer$, task)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackTimersScheduledExecutorSipTimer_ScheduledSipTimerTask)
