//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/NioTcpMessageProcessor.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/javax/sip/stack/ConnectionOrientedMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/ConnectionOrientedMessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/MessageChannel.h"
#include "android/gov/nist/javax/sip/stack/NIOHandler.h"
#include "android/gov/nist/javax/sip/stack/NioTcpMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/NioTcpMessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/Thread.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/ServerSocket.h"
#include "java/net/Socket.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/channels/CancelledKeyException.h"
#include "java/nio/channels/ClosedChannelException.h"
#include "java/nio/channels/ClosedSelectorException.h"
#include "java/nio/channels/SelectableChannel.h"
#include "java/nio/channels/SelectionKey.h"
#include "java/nio/channels/Selector.h"
#include "java/nio/channels/ServerSocketChannel.h"
#include "java/nio/channels/SocketChannel.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/WeakHashMap.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface AndroidGovNistJavaxSipStackNioTcpMessageProcessor () {
 @public
  id<JavaUtilList> changeRequests_;
  id<JavaUtilMap> pendingData_;
}

- (JavaNioChannelsSocketChannel *)initiateConnectionWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)address
                                                          withJavaNetInetAddress:(JavaNetInetAddress *)myAddress
                                                                         withInt:(jint)timeout OBJC_METHOD_FAMILY_NONE;

- (AndroidGovNistJavaxSipStackMessageChannel *)createMessageChannelWithNSString:(NSString *)key
                                                         withJavaNetInetAddress:(JavaNetInetAddress *)targetHost
                                                                        withInt:(jint)port;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, changeRequests_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, pendingData_, id<JavaUtilMap>)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackNioTcpMessageProcessor_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackNioTcpMessageProcessor_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackNioTcpMessageProcessor_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger, id<OrgSlf4jLogger>)

__attribute__((unused)) static JavaNioChannelsSocketChannel *AndroidGovNistJavaxSipStackNioTcpMessageProcessor_initiateConnectionWithJavaNetInetSocketAddress_withJavaNetInetAddress_withInt_(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *self, JavaNetInetSocketAddress *address, JavaNetInetAddress *myAddress, jint timeout);

__attribute__((unused)) static AndroidGovNistJavaxSipStackMessageChannel *AndroidGovNistJavaxSipStackNioTcpMessageProcessor_createMessageChannelWithNSString_withJavaNetInetAddress_withInt_(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *self, NSString *key, JavaNetInetAddress *targetHost, jint port);

@interface AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask () {
 @public
  AndroidGovNistJavaxSipStackNioTcpMessageProcessor *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackNioTcpMessageProcessor)

@implementation AndroidGovNistJavaxSipStackNioTcpMessageProcessor

- (JavaNioChannelsSocketChannel *)initiateConnectionWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)address
                                                          withJavaNetInetAddress:(JavaNetInetAddress *)myAddress
                                                                         withInt:(jint)timeout {
  return AndroidGovNistJavaxSipStackNioTcpMessageProcessor_initiateConnectionWithJavaNetInetSocketAddress_withJavaNetInetAddress_withInt_(self, address, myAddress, timeout);
}

- (JavaNioChannelsSocketChannel *)blockingConnectWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)address
                                                       withJavaNetInetAddress:(JavaNetInetAddress *)localAddress
                                                                      withInt:(jint)timeout {
  return AndroidGovNistJavaxSipStackNioTcpMessageProcessor_initiateConnectionWithJavaNetInetSocketAddress_withJavaNetInetAddress_withInt_(self, address, localAddress, timeout);
}

- (void)sendWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socket
                               withByteArray:(IOSByteArray *)data {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_logger)) debugWithNSString:JreStrcat("$I$@", @"Sending data ", ((IOSByteArray *) nil_chk(data))->size_, @" bytes on socket ", socket)];
  @synchronized(self->changeRequests_) {
    [((id<JavaUtilList>) nil_chk(self->changeRequests_)) addWithId:create_AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest_initWithJavaNioChannelsSocketChannel_withInt_withInt_(socket, AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest_CHANGEOPS, JavaNioChannelsSelectionKey_OP_WRITE)];
    @synchronized(self->pendingData_) {
      id<JavaUtilList> queue = [((id<JavaUtilMap>) nil_chk(self->pendingData_)) getWithId:socket];
      if (queue == nil) {
        queue = create_JavaUtilArrayList_init();
        [self->pendingData_ putWithId:socket withId:queue];
      }
      [queue addWithId:JavaNioByteBuffer_wrapWithByteArray_(data)];
    }
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_logger)) debugWithNSString:@"Waking up selector thread"];
  [((JavaNioChannelsSelector *) nil_chk(self->selector_)) wakeup];
}

- (AndroidGovNistJavaxSipStackNioTcpMessageChannel *)createMessageChannelWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor:(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *)nioTcpMessageProcessor
                                                                                              withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)client {
  return AndroidGovNistJavaxSipStackNioTcpMessageChannel_createWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(self, client);
}

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)ipAddress
withAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
                                   withInt:(jint)port {
  AndroidGovNistJavaxSipStackNioTcpMessageProcessor_initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_(self, ipAddress, sipStack, port);
  return self;
}

- (AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *)constructMessageChannelWithJavaNetInetAddress:(JavaNetInetAddress *)targetHost
                                                                                                       withInt:(jint)port {
  return create_AndroidGovNistJavaxSipStackNioTcpMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(targetHost, port, sipStack_, self);
}

- (AndroidGovNistJavaxSipStackMessageChannel *)createMessageChannelWithNSString:(NSString *)key
                                                         withJavaNetInetAddress:(JavaNetInetAddress *)targetHost
                                                                        withInt:(jint)port {
  return AndroidGovNistJavaxSipStackNioTcpMessageProcessor_createMessageChannelWithNSString_withJavaNetInetAddress_withInt_(self, key, targetHost, port);
}

- (AndroidGovNistJavaxSipStackMessageChannel *)createMessageChannelWithAndroidGovNistCoreHostPort:(AndroidGovNistCoreHostPort *)targetHostPort {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_logger)) debugWithNSString:JreStrcat("$@", @"NioTcpMessageProcessor::createMessageChannel: ", targetHostPort)];
  AndroidGovNistJavaxSipStackMessageChannel *retval = nil;
  @try {
    NSString *key = AndroidGovNistJavaxSipStackMessageChannel_getKeyWithAndroidGovNistCoreHostPort_withNSString_(targetHostPort, transport_);
    retval = [((id<JavaUtilMap>) nil_chk(messageChannels_)) getWithId:key];
    if (retval == nil) {
      retval = AndroidGovNistJavaxSipStackNioTcpMessageProcessor_createMessageChannelWithNSString_withJavaNetInetAddress_withInt_(self, key, [((AndroidGovNistCoreHostPort *) nil_chk(targetHostPort)) getInetAddress], [targetHostPort getPort]);
    }
  }
  @finally {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_logger)) debugWithNSString:JreStrcat("$@", @"MessageChannel::createMessageChannel - exit ", retval)];
  }
  return retval;
}

- (AndroidGovNistJavaxSipStackMessageChannel *)createMessageChannelWithJavaNetInetAddress:(JavaNetInetAddress *)targetHost
                                                                                  withInt:(jint)port {
  NSString *key = AndroidGovNistJavaxSipStackMessageChannel_getKeyWithJavaNetInetAddress_withInt_withNSString_(targetHost, port, transport_);
  AndroidGovNistJavaxSipStackMessageChannel *retval = [((id<JavaUtilMap>) nil_chk(messageChannels_)) getWithId:key];
  if (retval == nil) {
    retval = AndroidGovNistJavaxSipStackNioTcpMessageProcessor_createMessageChannelWithNSString_withJavaNetInetAddress_withInt_(self, key, targetHost, port);
  }
  return retval;
}

- (void)removeWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel:(AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *)messageChannel {
  @synchronized(self) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_logger)) debugWithNSString:JreStrcat("@$@$@CIC$", JavaLangThread_currentThread(), @" removing ", [((AndroidGovNistJavaxSipStackNioTcpMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTcpMessageChannel *) cast_chk(messageChannel, [AndroidGovNistJavaxSipStackNioTcpMessageChannel class])))) getSocketChannel], @" from processor ", [self getIpAddress], ':', [self getPort], '/', [self getTransport])];
    [((id<JavaUtilMap>) nil_chk(pendingData_)) removeWithId:[((AndroidGovNistJavaxSipStackNioTcpMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTcpMessageChannel *) cast_chk(messageChannel, [AndroidGovNistJavaxSipStackNioTcpMessageChannel class])))) getSocketChannel]];
    [super removeWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel:messageChannel];
  }
}

- (jint)getDefaultTargetPort {
  return 5060;
}

- (jboolean)isSecure {
  return false;
}

- (void)start {
  JreStrongAssign(&selector_, JavaNioChannelsSelector_open());
  JreStrongAssign(&channel_, JavaNioChannelsServerSocketChannel_open());
  [((JavaNioChannelsServerSocketChannel *) nil_chk(channel_)) configureBlockingWithBoolean:false];
  JavaNetInetSocketAddress *isa_ = create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_([super getIpAddress], [super getPort]);
  [((JavaNetServerSocket *) nil_chk([((JavaNioChannelsServerSocketChannel *) nil_chk(channel_)) socket])) bindWithJavaNetSocketAddress:isa_];
  [((JavaNioChannelsServerSocketChannel *) nil_chk(channel_)) register__WithJavaNioChannelsSelector:selector_ withInt:JavaNioChannelsSelectionKey_OP_ACCEPT];
  JreStrongAssignAndConsume(&selectorThread_, new_JavaLangThread_initWithJavaLangRunnable_([self createProcessorTask]));
  [selectorThread_ start];
  [((JavaLangThread *) nil_chk(selectorThread_)) setNameWithNSString:JreStrcat("$$C$CI", @"NioSelector-", [self getTransport], '-', [((JavaNetInetAddress *) nil_chk([self getIpAddress])) getHostAddress], '/', [self getPort])];
}

- (AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask *)createProcessorTask {
  return create_AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask_initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(self);
}

- (void)stop {
  @try {
    if ([((JavaNioChannelsSelector *) nil_chk(selector_)) isOpen]) [((JavaNioChannelsSelector *) nil_chk(selector_)) close];
    [((AndroidGovNistJavaxSipStackNIOHandler *) nil_chk(nioHandler_)) stop];
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_logger)) errorWithNSString:@"Problem closing channel " withNSException:ex];
  }
  @try {
    [((JavaNioChannelsServerSocketChannel *) nil_chk(channel_)) close];
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_logger)) errorWithNSString:@"Problem closing channel " withNSException:ex];
  }
}

- (void)dealloc {
  RELEASE_(selector_);
  RELEASE_(selectorThread_);
  RELEASE_(nioHandler_);
  RELEASE_(channel_);
  RELEASE_(changeRequests_);
  RELEASE_(pendingData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaNioChannelsSocketChannel;", 0x2, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaNioChannelsSocketChannel;", 0x1, 3, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackNioTcpMessageChannel;", 0x1, 6, 7, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel;", 0x0, 9, 10, 2, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageChannel;", 0x22, 6, 11, 2, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageChannel;", 0x1, 6, 12, 2, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageChannel;", 0x1, 6, 10, 2, -1, -1, -1 },
    { NULL, "V", 0x24, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initiateConnectionWithJavaNetInetSocketAddress:withJavaNetInetAddress:withInt:);
  methods[1].selector = @selector(blockingConnectWithJavaNetInetSocketAddress:withJavaNetInetAddress:withInt:);
  methods[2].selector = @selector(sendWithJavaNioChannelsSocketChannel:withByteArray:);
  methods[3].selector = @selector(createMessageChannelWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor:withJavaNioChannelsSocketChannel:);
  methods[4].selector = @selector(initWithJavaNetInetAddress:withAndroidGovNistJavaxSipStackSIPTransactionStack:withInt:);
  methods[5].selector = @selector(constructMessageChannelWithJavaNetInetAddress:withInt:);
  methods[6].selector = @selector(createMessageChannelWithNSString:withJavaNetInetAddress:withInt:);
  methods[7].selector = @selector(createMessageChannelWithAndroidGovNistCoreHostPort:);
  methods[8].selector = @selector(createMessageChannelWithJavaNetInetAddress:withInt:);
  methods[9].selector = @selector(removeWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel:);
  methods[10].selector = @selector(getDefaultTargetPort);
  methods[11].selector = @selector(isSecure);
  methods[12].selector = @selector(start);
  methods[13].selector = @selector(createProcessorTask);
  methods[14].selector = @selector(stop);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "selector_", "LJavaNioChannelsSelector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 15, -1, -1 },
    { "selectorThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "nioHandler_", "LAndroidGovNistJavaxSipStackNIOHandler;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "channel_", "LJavaNioChannelsServerSocketChannel;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "changeRequests_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "pendingData_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
  };
  static const void *ptrTable[] = { "initiateConnection", "LJavaNetInetSocketAddress;LJavaNetInetAddress;I", "LJavaIoIOException;", "blockingConnect", "send", "LJavaNioChannelsSocketChannel;[B", "createMessageChannel", "LAndroidGovNistJavaxSipStackNioTcpMessageProcessor;LJavaNioChannelsSocketChannel;", "LJavaNetInetAddress;LAndroidGovNistJavaxSipStackSIPTransactionStack;I", "constructMessageChannel", "LJavaNetInetAddress;I", "LNSString;LJavaNetInetAddress;I", "LAndroidGovNistCoreHostPort;", "remove", "LAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel;", &AndroidGovNistJavaxSipStackNioTcpMessageProcessor_logger, "Ljava/util/List<Landroid/gov/nist/javax/sip/stack/NioTcpMessageProcessor$ChangeRequest;>;", "Ljava/util/Map<Ljava/nio/channels/SocketChannel;Ljava/util/List<Ljava/nio/ByteBuffer;>;>;", "LAndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest;LAndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackNioTcpMessageProcessor = { "NioTcpMessageProcessor", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 15, 7, -1, 18, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackNioTcpMessageProcessor;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackNioTcpMessageProcessor class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackNioTcpMessageProcessor_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackNioTcpMessageProcessor)
  }
}

@end

JavaNioChannelsSocketChannel *AndroidGovNistJavaxSipStackNioTcpMessageProcessor_initiateConnectionWithJavaNetInetSocketAddress_withJavaNetInetAddress_withInt_(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *self, JavaNetInetSocketAddress *address, JavaNetInetAddress *myAddress, jint timeout) {
  JavaNioChannelsSocketChannel *socketChannel = JavaNioChannelsSocketChannel_open();
  if (myAddress != nil) {
    [((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk(socketChannel)) socket])) bindWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(myAddress, 0)];
  }
  [((JavaNioChannelsSocketChannel *) nil_chk(socketChannel)) configureBlockingWithBoolean:true];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_logger)) debugWithNSString:JreStrcat("$@", @"Init connect ", address)];
  [((JavaNetSocket *) nil_chk([socketChannel socket])) connectWithJavaNetSocketAddress:address withInt:timeout];
  [socketChannel configureBlockingWithBoolean:false];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_logger)) debugWithNSString:JreStrcat("$@", @"Blocking set to false now ", address)];
  @synchronized(self->changeRequests_) {
    [((id<JavaUtilList>) nil_chk(self->changeRequests_)) addWithId:create_AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest_initWithJavaNioChannelsSocketChannel_withInt_withInt_(socketChannel, AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest_REGISTER, JavaNioChannelsSelectionKey_OP_READ)];
  }
  [((JavaNioChannelsSelector *) nil_chk(self->selector_)) wakeup];
  return socketChannel;
}

void AndroidGovNistJavaxSipStackNioTcpMessageProcessor_initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *self, JavaNetInetAddress *ipAddress, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, jint port) {
  AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor_initWithJavaNetInetAddress_withInt_withNSString_withAndroidGovNistJavaxSipStackSIPTransactionStack_(self, ipAddress, port, @"TCP", sipStack);
  JreStrongAssignAndConsume(&self->changeRequests_, new_JavaUtilLinkedList_init());
  JreStrongAssignAndConsume(&self->pendingData_, new_JavaUtilWeakHashMap_init());
  JreStrongAssignAndConsume(&self->nioHandler_, new_AndroidGovNistJavaxSipStackNIOHandler_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(sipStack, self));
}

AndroidGovNistJavaxSipStackNioTcpMessageProcessor *new_AndroidGovNistJavaxSipStackNioTcpMessageProcessor_initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_(JavaNetInetAddress *ipAddress, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, jint port) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_, ipAddress, sipStack, port)
}

AndroidGovNistJavaxSipStackNioTcpMessageProcessor *create_AndroidGovNistJavaxSipStackNioTcpMessageProcessor_initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_(JavaNetInetAddress *ipAddress, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, jint port) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, initWithJavaNetInetAddress_withAndroidGovNistJavaxSipStackSIPTransactionStack_withInt_, ipAddress, sipStack, port)
}

AndroidGovNistJavaxSipStackMessageChannel *AndroidGovNistJavaxSipStackNioTcpMessageProcessor_createMessageChannelWithNSString_withJavaNetInetAddress_withInt_(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *self, NSString *key, JavaNetInetAddress *targetHost, jint port) {
  @synchronized(self) {
    AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *retval = [((id<JavaUtilMap>) nil_chk(self->messageChannels_)) getWithId:key];
    if (retval == nil) {
      retval = [self constructMessageChannelWithJavaNetInetAddress:targetHost withInt:port];
      [self->messageChannels_ putWithId:key withId:retval];
      ((AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *) nil_chk(retval))->isCached_ = true;
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_logger)) debugWithNSString:JreStrcat("$$", @"key ", key)];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_logger)) debugWithNSString:JreStrcat("$@", @"Creating ", retval)];
      [((JavaNioChannelsSelector *) nil_chk(self->selector_)) wakeup];
    }
    return retval;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackNioTcpMessageProcessor)

@implementation AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest

- (instancetype)initWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socket
                                             withInt:(jint)type
                                             withInt:(jint)ops {
  AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest_initWithJavaNioChannelsSocketChannel_withInt_withInt_(self, socket, type, ops);
  return self;
}

- (NSString *)description {
  return JreStrcat("@$I$I", socket_, @" type = ", type_, @" ops = ", ops_);
}

- (void)dealloc {
  RELEASE_(socket_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaNioChannelsSocketChannel:withInt:withInt:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "REGISTER", "I", .constantValue.asInt = AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest_REGISTER, 0x19, -1, -1, -1, -1 },
    { "CHANGEOPS", "I", .constantValue.asInt = AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest_CHANGEOPS, 0x19, -1, -1, -1, -1 },
    { "socket_", "LJavaNioChannelsSocketChannel;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "ops_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNioChannelsSocketChannel;II", "toString", "LAndroidGovNistJavaxSipStackNioTcpMessageProcessor;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest = { "ChangeRequest", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x9, 2, 5, 2, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest;
}

@end

void AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest_initWithJavaNioChannelsSocketChannel_withInt_withInt_(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest *self, JavaNioChannelsSocketChannel *socket, jint type, jint ops) {
  NSObject_init(self);
  JreStrongAssign(&self->socket_, socket);
  self->type_ = type;
  self->ops_ = ops;
}

AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest *new_AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest_initWithJavaNioChannelsSocketChannel_withInt_withInt_(JavaNioChannelsSocketChannel *socket, jint type, jint ops) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest, initWithJavaNioChannelsSocketChannel_withInt_withInt_, socket, type, ops)
}

AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest *create_AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest_initWithJavaNioChannelsSocketChannel_withInt_withInt_(JavaNioChannelsSocketChannel *socket, jint type, jint ops) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest, initWithJavaNioChannelsSocketChannel_withInt_withInt_, socket, type, ops)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest)

@implementation AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor:(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *)outer$ {
  AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask_initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(self, outer$);
  return self;
}

- (void)readWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)selectionKey {
  JavaNioChannelsSocketChannel *socketChannel = (JavaNioChannelsSocketChannel *) cast_chk([((JavaNioChannelsSelectionKey *) nil_chk(selectionKey)) channel], [JavaNioChannelsSocketChannel class]);
  AndroidGovNistJavaxSipStackNioTcpMessageChannel *nioTcpMessageChannel = AndroidGovNistJavaxSipStackNioTcpMessageChannel_getMessageChannelWithJavaNioChannelsSocketChannel_(socketChannel);
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$@$@", @"Got something on nioTcpMessageChannel ", nioTcpMessageChannel, @" socket ", socketChannel)];
  if (nioTcpMessageChannel == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$@$@CI", @"Dead socketChannel", socketChannel, @" socket ", [((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk(socketChannel)) socket])) getInetAddress], ':', [((JavaNetSocket *) nil_chk([socketChannel socket])) getPort])];
    [selectionKey cancel];
    [((id<JavaUtilMap>) nil_chk(this$0_->pendingData_)) removeWithId:socketChannel];
    return;
  }
  [nioTcpMessageChannel readChannel];
}

- (void)writeWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)selectionKey {
  JavaNioChannelsSocketChannel *socketChannel = (JavaNioChannelsSocketChannel *) cast_chk([((JavaNioChannelsSelectionKey *) nil_chk(selectionKey)) channel], [JavaNioChannelsSocketChannel class]);
  AndroidGovNistJavaxSipStackNioTcpMessageChannel *nioTcpMessageChannel = AndroidGovNistJavaxSipStackNioTcpMessageChannel_getMessageChannelWithJavaNioChannelsSocketChannel_(socketChannel);
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$@$@", @"Need to write something on nioTcpMessageChannel ", nioTcpMessageChannel, @" socket ", socketChannel)];
  if (nioTcpMessageChannel == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$@$@CI", @"Dead socketChannel", socketChannel, @" socket ", [((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk(socketChannel)) socket])) getInetAddress], ':', [((JavaNetSocket *) nil_chk([socketChannel socket])) getPort])];
    [selectionKey cancel];
    [((id<JavaUtilMap>) nil_chk(this$0_->pendingData_)) removeWithId:socketChannel];
    return;
  }
  @synchronized(this$0_->pendingData_) {
    id<JavaUtilList> queue = [((id<JavaUtilMap>) nil_chk(this$0_->pendingData_)) getWithId:socketChannel];
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$I", @"Queued items for writing ", [((id<JavaUtilList>) nil_chk(queue)) size])];
    while (![queue isEmpty]) {
      JavaNioByteBuffer *buf = [queue getWithInt:0];
      @try {
        [((JavaNioChannelsSocketChannel *) nil_chk(socketChannel)) writeWithJavaNioByteBuffer:buf];
      }
      @catch (JavaIoIOException *e) {
        [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$@$@CI$$", @"Dead socketChannel", socketChannel, @" socket ", [((JavaNetSocket *) nil_chk([socketChannel socket])) getInetAddress], ':', [((JavaNetSocket *) nil_chk([socketChannel socket])) getPort], @" : error message ", [((JavaIoIOException *) nil_chk(e)) getMessage])];
        [nioTcpMessageChannel close];
        [queue removeWithInt:0];
        [this$0_->pendingData_ removeWithId:socketChannel];
        return;
      }
      jint remain = [((JavaNioByteBuffer *) nil_chk(buf)) remaining];
      if (remain > 0) {
        [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$I$I", @"Socket buffer filled and more is remaining", [queue size], @" remain = ", remain)];
        break;
      }
      [queue removeWithInt:0];
    }
    if ([queue isEmpty]) {
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$I", @"We wrote away all data. Setting READ interest. Queue is emtpy now size =", [queue size])];
      [selectionKey interestOpsWithInt:JavaNioChannelsSelectionKey_OP_READ];
    }
  }
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:@"Done writing"];
}

- (void)connectWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)selectionKey {
  @throw create_JavaIoIOException_initWithNSString_(@"We should use blocking connect, we must never reach here");
}

- (void)acceptWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)selectionKey {
  JavaNioChannelsServerSocketChannel *serverSocketChannel = (JavaNioChannelsServerSocketChannel *) cast_chk([((JavaNioChannelsSelectionKey *) nil_chk(selectionKey)) channel], [JavaNioChannelsServerSocketChannel class]);
  JavaNioChannelsSocketChannel *client;
  client = [((JavaNioChannelsServerSocketChannel *) nil_chk(serverSocketChannel)) accept];
  [((JavaNioChannelsSocketChannel *) nil_chk(client)) configureBlockingWithBoolean:false];
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$@", @"got a new connection! ", client)];
  [this$0_ createMessageChannelWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor:this$0_ withJavaNioChannelsSocketChannel:client];
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$@", @"Adding to selector ", client)];
  [client register__WithJavaNioChannelsSelector:this$0_->selector_ withInt:JavaNioChannelsSelectionKey_OP_READ];
}

- (void)run {
  while (true) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:@"Selector thread cycle begin..."];
    @synchronized(this$0_->changeRequests_) {
      for (AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest * __strong change in nil_chk(this$0_->changeRequests_)) {
        [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$@$@", @"ChangeRequest ", change, @" selector = ", this$0_->selector_)];
        @try {
          {
            JavaNioChannelsSelectionKey *key;
            switch (((AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest *) nil_chk(change))->type_) {
              case AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest_CHANGEOPS:
              key = [((JavaNioChannelsSocketChannel *) nil_chk(change->socket_)) keyForWithJavaNioChannelsSelector:this$0_->selector_];
              if (key == nil || ![key isValid]) continue;
              [((JavaNioChannelsSelectionKey *) nil_chk(key)) interestOpsWithInt:change->ops_];
              [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$@$@$@$Z", @"Change opts ", change, @" selector = ", this$0_->selector_, @" key = ", key, @" blocking=", [((JavaNioChannelsSocketChannel *) nil_chk(change->socket_)) isBlocking])];
              break;
              case AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ChangeRequest_REGISTER:
              @try {
                [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$@$@$Z", @"NIO register ", change, @" selector = ", this$0_->selector_, @" blocking=", [((JavaNioChannelsSocketChannel *) nil_chk(change->socket_)) isBlocking])];
                [((JavaNioChannelsSocketChannel *) nil_chk(change->socket_)) register__WithJavaNioChannelsSelector:this$0_->selector_ withInt:change->ops_];
              }
              @catch (JavaNioChannelsClosedChannelException *e) {
                [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) warnWithNSString:JreStrcat("$@", @"Socket closed before register ops ", change->socket_)];
              }
              break;
            }
          }
        }
        @catch (JavaLangException *e) {
          [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) errorWithNSString:@"Problem setting changes" withNSException:e];
        }
      }
      [this$0_->changeRequests_ clear];
    }
    @try {
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:@"Before select"];
      if (![((JavaNioChannelsSelector *) nil_chk(this$0_->selector_)) isOpen]) {
        [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) infoWithNSString:@"Selector is closed "];
        return;
      }
      else {
        [((JavaNioChannelsSelector *) nil_chk(this$0_->selector_)) select];
        [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:@"After select"];
      }
    }
    @catch (JavaIoIOException *e) {
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) errorWithNSString:@"problem in select" withNSException:e];
      break;
    }
    @catch (JavaNioChannelsCancelledKeyException *cke) {
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) infoWithNSString:@"Looks like remote side closed a connection"];
    }
    @try {
      if ([((JavaNioChannelsSelector *) nil_chk(this$0_->selector_)) selectedKeys] == nil) {
        [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:@"null selectedKeys "];
        continue;
      }
      id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaNioChannelsSelector *) nil_chk(this$0_->selector_)) selectedKeys])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        JavaNioChannelsSelectionKey *selectionKey = [it next];
        @try {
          [it remove];
          [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$@", @"We got selkey ", selectionKey)];
          if (![((JavaNioChannelsSelectionKey *) nil_chk(selectionKey)) isValid]) {
            [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$@", @"Invalid key found ", selectionKey)];
          }
          else if ([selectionKey isAcceptable]) {
            [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$@", @"Accept ", selectionKey)];
            [self acceptWithJavaNioChannelsSelectionKey:selectionKey];
          }
          else if ([selectionKey isReadable]) {
            [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$@", @"Read ", selectionKey)];
            [self readWithJavaNioChannelsSelectionKey:selectionKey];
          }
          else if ([selectionKey isWritable]) {
            [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$@", @"Write ", selectionKey)];
            [self writeWithJavaNioChannelsSelectionKey:selectionKey];
          }
          else if ([selectionKey isConnectable]) {
            [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) debugWithNSString:JreStrcat("$@", @"Connect ", selectionKey)];
            [self connectWithJavaNioChannelsSelectionKey:selectionKey];
          }
        }
        @catch (JavaLangException *e) {
          [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) errorWithNSString:@"Problem processing selection key event" withNSException:e];
        }
      }
    }
    @catch (JavaNioChannelsClosedSelectorException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) infoWithNSString:@"Selector is closed"];
      return;
    }
    @catch (JavaLangException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageProcessor, logger))) errorWithNSString:@"Problem in the selector loop" withNSException:ex];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor:);
  methods[1].selector = @selector(readWithJavaNioChannelsSelectionKey:);
  methods[2].selector = @selector(writeWithJavaNioChannelsSelectionKey:);
  methods[3].selector = @selector(connectWithJavaNioChannelsSelectionKey:);
  methods[4].selector = @selector(acceptWithJavaNioChannelsSelectionKey:);
  methods[5].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackNioTcpMessageProcessor;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "read", "LJavaNioChannelsSelectionKey;", "write", "connect", "LJavaIoIOException;", "accept", "LAndroidGovNistJavaxSipStackNioTcpMessageProcessor;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask = { "ProcessorTask", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 6, 1, 6, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask;
}

@end

void AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask_initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask *self, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask *new_AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask_initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask, initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_, outer$)
}

AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask *create_AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask_initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask, initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackNioTcpMessageProcessor_ProcessorTask)
