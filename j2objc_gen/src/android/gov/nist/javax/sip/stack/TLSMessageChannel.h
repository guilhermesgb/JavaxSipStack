//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/TLSMessageChannel.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidGovNistJavaxSipStackTLSMessageChannel")
#ifdef RESTRICT_AndroidGovNistJavaxSipStackTLSMessageChannel
#define INCLUDE_ALL_AndroidGovNistJavaxSipStackTLSMessageChannel 0
#else
#define INCLUDE_ALL_AndroidGovNistJavaxSipStackTLSMessageChannel 1
#endif
#undef RESTRICT_AndroidGovNistJavaxSipStackTLSMessageChannel

#if !defined (AndroidGovNistJavaxSipStackTLSMessageChannel_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackTLSMessageChannel || defined(INCLUDE_AndroidGovNistJavaxSipStackTLSMessageChannel))
#define AndroidGovNistJavaxSipStackTLSMessageChannel_

#define RESTRICT_AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel 1
#define INCLUDE_AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel 1
#include "android/gov/nist/javax/sip/stack/ConnectionOrientedMessageChannel.h"

@class AndroidGovNistJavaxSipMessageSIPMessage;
@class AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl;
@class AndroidGovNistJavaxSipStackSIPTransactionStack;
@class AndroidGovNistJavaxSipStackTLSMessageProcessor;
@class IOSByteArray;
@class IOSClass;
@class JavaNetInetAddress;
@class JavaNetSocket;
@class JavaTextParseException;
@protocol JavaxNetSslHandshakeCompletedListener;

@interface AndroidGovNistJavaxSipStackTLSMessageChannel : AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel

#pragma mark Public

- (void)closeWithBoolean:(jboolean)removeSocket
             withBoolean:(jboolean)stopKeepAliveTask;

- (jboolean)isEqual:(id)other;

- (AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *)getHandshakeCompletedListener;

- (NSString *)getTransport;

- (void)handleExceptionWithJavaTextParseException:(JavaTextParseException *)ex
      withAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage
                                     withIOSClass:(IOSClass *)hdrClass
                                     withNSString:(NSString *)header
                                     withNSString:(NSString *)message;

- (jboolean)isHandshakeCompleted;

- (jboolean)isSecure;

- (void)run;

- (void)sendMessageWithByteArray:(IOSByteArray *)message
          withJavaNetInetAddress:(JavaNetInetAddress *)receiverAddress
                         withInt:(jint)receiverPort
                     withBoolean:(jboolean)retry;

- (void)setHandshakeCompletedWithBoolean:(jboolean)handshakeCompleted;

- (void)setHandshakeCompletedListenerWithJavaxNetSslHandshakeCompletedListener:(id<JavaxNetSslHandshakeCompletedListener>)handshakeCompletedListenerImpl;

#pragma mark Protected

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)inetAddr
                                   withInt:(jint)port
withAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
withAndroidGovNistJavaxSipStackTLSMessageProcessor:(AndroidGovNistJavaxSipStackTLSMessageProcessor *)messageProcessor;

- (instancetype)initWithJavaNetSocket:(JavaNetSocket *)sock
withAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
withAndroidGovNistJavaxSipStackTLSMessageProcessor:(AndroidGovNistJavaxSipStackTLSMessageProcessor *)msgProcessor
                         withNSString:(NSString *)threadName;

- (void)sendMessageWithByteArray:(IOSByteArray *)msg
                     withBoolean:(jboolean)retry;

@end

J2OBJC_STATIC_INIT(AndroidGovNistJavaxSipStackTLSMessageChannel)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackTLSMessageChannel_initWithJavaNetSocket_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTLSMessageProcessor_withNSString_(AndroidGovNistJavaxSipStackTLSMessageChannel *self, JavaNetSocket *sock, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackTLSMessageProcessor *msgProcessor, NSString *threadName);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackTLSMessageChannel *new_AndroidGovNistJavaxSipStackTLSMessageChannel_initWithJavaNetSocket_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTLSMessageProcessor_withNSString_(JavaNetSocket *sock, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackTLSMessageProcessor *msgProcessor, NSString *threadName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackTLSMessageChannel *create_AndroidGovNistJavaxSipStackTLSMessageChannel_initWithJavaNetSocket_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTLSMessageProcessor_withNSString_(JavaNetSocket *sock, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackTLSMessageProcessor *msgProcessor, NSString *threadName);

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackTLSMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTLSMessageProcessor_(AndroidGovNistJavaxSipStackTLSMessageChannel *self, JavaNetInetAddress *inetAddr, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackTLSMessageProcessor *messageProcessor);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackTLSMessageChannel *new_AndroidGovNistJavaxSipStackTLSMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTLSMessageProcessor_(JavaNetInetAddress *inetAddr, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackTLSMessageProcessor *messageProcessor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackTLSMessageChannel *create_AndroidGovNistJavaxSipStackTLSMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTLSMessageProcessor_(JavaNetInetAddress *inetAddr, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackTLSMessageProcessor *messageProcessor);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackTLSMessageChannel)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidGovNistJavaxSipStackTLSMessageChannel")
