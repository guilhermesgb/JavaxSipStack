//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/UDPMessageChannel.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/core/ServerLogger.h"
#include "android/gov/nist/core/ThreadAuditor.h"
#include "android/gov/nist/core/net/AddressResolver.h"
#include "android/gov/nist/core/net/NetworkLayer.h"
#include "android/gov/nist/javax/sip/address/ParameterNames.h"
#include "android/gov/nist/javax/sip/header/CSeq.h"
#include "android/gov/nist/javax/sip/header/CallID.h"
#include "android/gov/nist/javax/sip/header/ContentLength.h"
#include "android/gov/nist/javax/sip/header/From.h"
#include "android/gov/nist/javax/sip/header/RequestLine.h"
#include "android/gov/nist/javax/sip/header/StatusLine.h"
#include "android/gov/nist/javax/sip/header/To.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/header/ViaList.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/message/SIPRequest.h"
#include "android/gov/nist/javax/sip/message/SIPResponse.h"
#include "android/gov/nist/javax/sip/parser/MessageParser.h"
#include "android/gov/nist/javax/sip/parser/MessageParserFactory.h"
#include "android/gov/nist/javax/sip/stack/DatagramQueuedMessageDispatch.h"
#include "android/gov/nist/javax/sip/stack/IOHandler.h"
#include "android/gov/nist/javax/sip/stack/MessageChannel.h"
#include "android/gov/nist/javax/sip/stack/MessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/RawMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/SIPClientTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPEventInterceptor.h"
#include "android/gov/nist/javax/sip/stack/SIPServerTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPStackTimerTask.h"
#include "android/gov/nist/javax/sip/stack/SIPTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/gov/nist/javax/sip/stack/ServerRequestInterface.h"
#include "android/gov/nist/javax/sip/stack/ServerResponseInterface.h"
#include "android/gov/nist/javax/sip/stack/UDPMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/UDPMessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/timers/SipTimer.h"
#include "android/javax/sip/address/Hop.h"
#include "android/javax/sip/header/CSeqHeader.h"
#include "android/javax/sip/header/CallIdHeader.h"
#include "android/javax/sip/header/FromHeader.h"
#include "android/javax/sip/header/ToHeader.h"
#include "android/javax/sip/message/Response.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/net/DatagramPacket.h"
#include "java/net/DatagramSocket.h"
#include "java/net/InetAddress.h"
#include "java/net/Socket.h"
#include "java/text/ParseException.h"
#include "java/util/Arrays.h"
#include "java/util/Hashtable.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface AndroidGovNistJavaxSipStackUDPMessageChannel () {
 @public
  JavaNetInetAddress *peerAddress_;
  NSString *myAddress_;
  jint peerPacketSourcePort_;
  JavaNetInetAddress *peerPacketSourceAddress_;
  jint peerPort_;
  NSString *peerProtocol_;
  JavaNetDatagramPacket *incomingPacket_;
  jlong receptionTime_;
  JavaLangThread *mythread_;
}

- (void)processIncomingDataPacketWithJavaNetDatagramPacket:(JavaNetDatagramPacket *)packet;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackUDPMessageChannel, peerAddress_, JavaNetInetAddress *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackUDPMessageChannel, myAddress_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackUDPMessageChannel, peerPacketSourceAddress_, JavaNetInetAddress *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackUDPMessageChannel, peerProtocol_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackUDPMessageChannel, incomingPacket_, JavaNetDatagramPacket *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackUDPMessageChannel, mythread_, JavaLangThread *)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackUDPMessageChannel_get_logger();
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackUDPMessageChannel_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipStackUDPMessageChannel, logger, id<OrgSlf4jLogger>)

inline JavaUtilHashtable *AndroidGovNistJavaxSipStackUDPMessageChannel_get_pingBackRecord();
inline JavaUtilHashtable *AndroidGovNistJavaxSipStackUDPMessageChannel_set_pingBackRecord(JavaUtilHashtable *value);
static JavaUtilHashtable *AndroidGovNistJavaxSipStackUDPMessageChannel_pingBackRecord;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackUDPMessageChannel, pingBackRecord, JavaUtilHashtable *)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackUDPMessageChannel_processIncomingDataPacketWithJavaNetDatagramPacket_(AndroidGovNistJavaxSipStackUDPMessageChannel *self, JavaNetDatagramPacket *packet);

@interface AndroidGovNistJavaxSipStackUDPMessageChannel_1 : NSObject < JavaLangRunnable > {
 @public
  id<AndroidGovNistJavaxSipStackRawMessageChannel> val$channel_;
  AndroidGovNistJavaxSipMessageSIPMessage *val$sipMessage_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackRawMessageChannel:(id<AndroidGovNistJavaxSipStackRawMessageChannel>)capture$0
                         withAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackUDPMessageChannel_1)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackUDPMessageChannel_1_initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackUDPMessageChannel_1 *self, id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1);

__attribute__((unused)) static AndroidGovNistJavaxSipStackUDPMessageChannel_1 *new_AndroidGovNistJavaxSipStackUDPMessageChannel_1_initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackUDPMessageChannel_1 *create_AndroidGovNistJavaxSipStackUDPMessageChannel_1_initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackUDPMessageChannel)

@implementation AndroidGovNistJavaxSipStackUDPMessageChannel

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)stack
                    withAndroidGovNistJavaxSipStackUDPMessageProcessor:(AndroidGovNistJavaxSipStackUDPMessageProcessor *)messageProcessor
                                                          withNSString:(NSString *)threadName {
  AndroidGovNistJavaxSipStackUDPMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_withNSString_(self, stack, messageProcessor, threadName);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)stack
                    withAndroidGovNistJavaxSipStackUDPMessageProcessor:(AndroidGovNistJavaxSipStackUDPMessageProcessor *)messageProcessor
                                             withJavaNetDatagramPacket:(JavaNetDatagramPacket *)packet {
  AndroidGovNistJavaxSipStackUDPMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_withJavaNetDatagramPacket_(self, stack, messageProcessor, packet);
  return self;
}

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)targetAddr
                                   withInt:(jint)port
withAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
withAndroidGovNistJavaxSipStackUDPMessageProcessor:(AndroidGovNistJavaxSipStackUDPMessageProcessor *)messageProcessor {
  AndroidGovNistJavaxSipStackUDPMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_(self, targetAddr, port, sipStack, messageProcessor);
  return self;
}

- (void)run {
  AndroidGovNistCoreThreadAuditor_ThreadHandle *threadHandle = nil;
  AndroidGovNistJavaxSipStackUDPMessageProcessor *udpMessageProcessor = (AndroidGovNistJavaxSipStackUDPMessageProcessor *) cast_chk(messageProcessor_, [AndroidGovNistJavaxSipStackUDPMessageProcessor class]);
  while (true) {
    JavaNetDatagramPacket *packet = nil;
    if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->threadPoolSize_ != -1) {
      if (threadHandle == nil && [sipStack_ getThreadAuditor] != nil) {
        threadHandle = [((AndroidGovNistCoreThreadAuditor *) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getThreadAuditor])) addCurrentThread];
      }
      if (threadHandle != nil) [threadHandle ping];
      @try {
        AndroidGovNistJavaxSipStackDatagramQueuedMessageDispatch *work = nil;
        if (threadHandle != nil && [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getThreadAuditor] != nil && [((AndroidGovNistCoreThreadAuditor *) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getThreadAuditor])) isEnabled]) {
          work = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(((AndroidGovNistJavaxSipStackUDPMessageProcessor *) nil_chk(udpMessageProcessor))->messageQueue_)) pollWithLong:[threadHandle getPingIntervalInMillisecs] withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
        }
        else {
          work = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(((AndroidGovNistJavaxSipStackUDPMessageProcessor *) nil_chk(udpMessageProcessor))->messageQueue_)) take];
        }
        if (!udpMessageProcessor->isRunning_) {
          return;
        }
        if (work == nil) {
          continue;
        }
        else {
          packet = work->packet_;
          JreStrongAssign(&self->incomingPacket_, work->packet_);
        }
      }
      @catch (JavaLangInterruptedException *ex) {
        if (!((AndroidGovNistJavaxSipStackUDPMessageProcessor *) nil_chk(udpMessageProcessor))->isRunning_) {
          return;
        }
      }
    }
    else {
      packet = self->incomingPacket_;
    }
    @try {
      AndroidGovNistJavaxSipStackUDPMessageChannel_processIncomingDataPacketWithJavaNetDatagramPacket_(self, packet);
    }
    @catch (JavaLangException *e) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackUDPMessageChannel_logger)) errorWithNSString:JreStrcat("$$", @"Error while processing incoming UDP packet", JavaUtilArrays_toStringWithByteArray_([((JavaNetDatagramPacket *) nil_chk(packet)) getData])) withNSException:e];
    }
    if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->threadPoolSize_ == -1) {
      return;
    }
  }
}

- (void)processIncomingDataPacketWithJavaNetDatagramPacket:(JavaNetDatagramPacket *)packet {
  AndroidGovNistJavaxSipStackUDPMessageChannel_processIncomingDataPacketWithJavaNetDatagramPacket_(self, packet);
}

- (void)processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage {
  [((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) setRemoteAddressWithJavaNetInetAddress:self->peerAddress_];
  [sipMessage setRemotePortWithInt:[self getPeerPort]];
  [sipMessage setLocalPortWithInt:[self getPort]];
  [sipMessage setLocalAddressWithJavaNetInetAddress:[((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk([self getMessageProcessor])) getIpAddress]];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackUDPMessageChannel_logger)) infoWithNSString:JreStrcat("$@CI", @"Setting SIPMessage peerPacketSource to: ", peerPacketSourceAddress_, ':', peerPacketSourcePort_)];
  [sipMessage setPeerPacketSourceAddressWithJavaNetInetAddress:self->peerPacketSourceAddress_];
  [sipMessage setPeerPacketSourcePortWithInt:self->peerPacketSourcePort_];
  if ([sipMessage isKindOfClass:[AndroidGovNistJavaxSipMessageSIPRequest class]]) {
    AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(sipMessage, [AndroidGovNistJavaxSipMessageSIPRequest class]);
    [((id<AndroidGovNistCoreServerLogger>) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_))->serverLogger_)) logMessageWithAndroidGovNistJavaxSipMessageSIPMessage:sipMessage withNSString:[((AndroidGovNistCoreHostPort *) nil_chk([self getPeerHostPort])) description] withNSString:JreStrcat("$CI", [self getHost], ':', self->myPort_) withBoolean:false withLong:receptionTime_];
    id<AndroidGovNistJavaxSipStackServerRequestInterface> sipServerRequest = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) newSIPServerRequestWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest withAndroidGovNistJavaxSipStackMessageChannel:self];
    if (sipServerRequest == nil) {
      [AndroidGovNistJavaxSipStackUDPMessageChannel_logger warnWithNSString:@"Null request interface returned -- dropping request"];
      return;
    }
    [AndroidGovNistJavaxSipStackUDPMessageChannel_logger debugWithNSString:JreStrcat("$$C@", @"About to process ", [sipRequest getFirstLine], '/', sipServerRequest)];
    @try {
      [sipServerRequest processRequestWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest withAndroidGovNistJavaxSipStackMessageChannel:self];
    }
    @finally {
      if ([AndroidGovNistJavaxSipStackSIPTransaction_class_() isInstance:sipServerRequest]) {
        id<AndroidGovNistJavaxSipStackSIPServerTransaction> sipServerTx = (id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check(sipServerRequest, AndroidGovNistJavaxSipStackSIPServerTransaction_class_());
        if (![sipServerTx passToListener]) {
          [((id<AndroidGovNistJavaxSipStackSIPTransaction>) cast_check(sipServerRequest, AndroidGovNistJavaxSipStackSIPTransaction_class_())) releaseSem];
        }
      }
    }
    [AndroidGovNistJavaxSipStackUDPMessageChannel_logger debugWithNSString:JreStrcat("$$C@", @"Done processing ", [sipRequest getFirstLine], '/', sipServerRequest)];
  }
  else {
    AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = (AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(sipMessage, [AndroidGovNistJavaxSipMessageSIPResponse class]);
    @try {
      [sipResponse checkHeaders];
    }
    @catch (JavaTextParseException *ex) {
      [AndroidGovNistJavaxSipStackUDPMessageChannel_logger errorWithNSString:JreStrcat("$@", @"Dropping Badly formatted response message >>> ", sipResponse)];
      return;
    }
    [((id<AndroidGovNistCoreServerLogger>) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_))->serverLogger_)) logMessageWithAndroidGovNistJavaxSipMessageSIPMessage:sipResponse withNSString:[((AndroidGovNistCoreHostPort *) nil_chk([self getPeerHostPort])) description] withNSString:JreStrcat("$CI", [self getHost], ':', self->myPort_) withBoolean:false withLong:receptionTime_];
    id<AndroidGovNistJavaxSipStackServerResponseInterface> sipServerResponse = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) newSIPServerResponseWithAndroidGovNistJavaxSipMessageSIPResponse:sipResponse withAndroidGovNistJavaxSipStackMessageChannel:self];
    if (sipServerResponse != nil) {
      @try {
        if ([AndroidGovNistJavaxSipStackSIPClientTransaction_class_() isInstance:sipServerResponse] && ![((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(sipServerResponse, AndroidGovNistJavaxSipStackSIPClientTransaction_class_())) checkFromTagWithAndroidGovNistJavaxSipMessageSIPResponse:sipResponse]) {
          [AndroidGovNistJavaxSipStackUDPMessageChannel_logger errorWithNSString:JreStrcat("$@", @"Dropping response message with invalid tag >>> ", sipResponse)];
          return;
        }
        [sipServerResponse processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:sipResponse withAndroidGovNistJavaxSipStackMessageChannel:self];
      }
      @finally {
        if ([AndroidGovNistJavaxSipStackSIPTransaction_class_() isInstance:sipServerResponse] && ![((id<AndroidGovNistJavaxSipStackSIPTransaction>) cast_check(sipServerResponse, AndroidGovNistJavaxSipStackSIPTransaction_class_())) passToListener]) [((id<AndroidGovNistJavaxSipStackSIPTransaction>) cast_check(sipServerResponse, AndroidGovNistJavaxSipStackSIPTransaction_class_())) releaseSem];
      }
    }
    else {
      [AndroidGovNistJavaxSipStackUDPMessageChannel_logger debugWithNSString:@"null sipServerResponse!"];
    }
  }
}

- (void)handleExceptionWithJavaTextParseException:(JavaTextParseException *)ex
      withAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage
                                     withIOSClass:(IOSClass *)hdrClass
                                     withNSString:(NSString *)header
                                     withNSString:(NSString *)message {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackUDPMessageChannel_logger)) errorWithNSString:@"ParseException" withNSException:ex];
  if ((hdrClass != nil) && ([((IOSClass *) nil_chk(hdrClass)) isEqual:AndroidGovNistJavaxSipHeaderFrom_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderTo_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderCSeq_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderVia_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderCallID_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderContentLength_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderRequestLine_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderStatusLine_class_()])) {
    [AndroidGovNistJavaxSipStackUDPMessageChannel_logger errorWithNSString:@"BAD MESSAGE!"];
    [AndroidGovNistJavaxSipStackUDPMessageChannel_logger errorWithNSString:message];
    @throw ex;
  }
  else {
    [((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) addUnparsedWithNSString:header];
  }
}

- (void)sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage {
  if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) isLogStackTraceOnMessageSend]) {
    if ([sipMessage isKindOfClass:[AndroidGovNistJavaxSipMessageSIPRequest class]] && [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(sipMessage, [AndroidGovNistJavaxSipMessageSIPRequest class])))) getRequestLine] != nil) {
    }
  }
  jlong time = JavaLangSystem_currentTimeMillis();
  @try {
    {
      IOSObjectArray *a__ = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMessageProcessors];
      AndroidGovNistJavaxSipStackMessageProcessor * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      AndroidGovNistJavaxSipStackMessageProcessor * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        AndroidGovNistJavaxSipStackMessageProcessor *messageProcessor = *b__++;
        if ([((JavaNetInetAddress *) nil_chk([((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(messageProcessor)) getIpAddress])) isEqual:self->peerAddress_] && [messageProcessor getPort] == self->peerPort_ && [((NSString *) nil_chk([messageProcessor getTransport])) java_equalsIgnoreCase:self->peerProtocol_]) {
          AndroidGovNistJavaxSipStackMessageChannel *messageChannel = [messageProcessor createMessageChannelWithJavaNetInetAddress:self->peerAddress_ withInt:self->peerPort_];
          if ([AndroidGovNistJavaxSipStackRawMessageChannel_class_() isInstance:messageChannel]) {
            id<AndroidGovNistJavaxSipStackRawMessageChannel> channel = (id<AndroidGovNistJavaxSipStackRawMessageChannel>) cast_check(messageChannel, AndroidGovNistJavaxSipStackRawMessageChannel_class_());
            id<JavaLangRunnable> processMessageTask = create_AndroidGovNistJavaxSipStackUDPMessageChannel_1_initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(channel, sipMessage);
            [((id<JavaUtilConcurrentExecutor>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([self getSIPStack])) getSelfRoutingThreadpoolExecutor])) executeWithJavaLangRunnable:processMessageTask];
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackUDPMessageChannel_logger)) debugWithNSString:@"Self routing message"];
            return;
          }
        }
      }
    }
    IOSByteArray *msg = [((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) encodeAsBytesWithNSString:[self getTransport]];
    [self sendMessageWithByteArray:msg withJavaNetInetAddress:peerAddress_ withInt:peerPort_ withNSString:peerProtocol_ withBoolean:[sipMessage isKindOfClass:[AndroidGovNistJavaxSipMessageSIPRequest class]]];
    [sipMessage setRemoteAddressWithJavaNetInetAddress:peerAddress_];
    [sipMessage setRemotePortWithInt:peerPort_];
    [sipMessage setLocalPortWithInt:[self getPort]];
    [sipMessage setLocalAddressWithJavaNetInetAddress:[((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk([self getMessageProcessor])) getIpAddress]];
  }
  @catch (JavaIoIOException *ex) {
    @throw ex;
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackUDPMessageChannel_logger)) errorWithNSString:@"An exception occured while sending message" withNSException:ex];
    @throw create_JavaIoIOException_initWithNSString_(@"An exception occured while sending message");
  }
  @finally {
    if (![((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) isNullRequest]) [self logMessageWithAndroidGovNistJavaxSipMessageSIPMessage:sipMessage withJavaNetInetAddress:peerAddress_ withInt:peerPort_ withLong:time];
    else {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackUDPMessageChannel_logger)) debugWithNSString:@"Sent EMPTY Message"];
    }
  }
}

- (void)sendMessageWithByteArray:(IOSByteArray *)msg
          withJavaNetInetAddress:(JavaNetInetAddress *)peerAddress
                         withInt:(jint)peerPort
                     withBoolean:(jboolean)reConnect {
  if (peerPort == -1) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackUDPMessageChannel_logger)) debugWithNSString:JreStrcat("$$", [[self java_getClass] getName], @":sendMessage: Dropping reply!")];
    @throw create_JavaIoIOException_initWithNSString_(@"Receiver port not set ");
  }
  else {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackUDPMessageChannel_logger)) debugWithNSString:JreStrcat("$$CI$I$$", @"sendMessage ", [((JavaNetInetAddress *) nil_chk(peerAddress)) getHostAddress], '/', peerPort, @"\nmessageSize =  ", ((IOSByteArray *) nil_chk(msg))->size_, @" message = ", [NSString java_stringWithBytes:msg])];
    [AndroidGovNistJavaxSipStackUDPMessageChannel_logger debugWithNSString:@"*******************\n"];
  }
  JavaNetDatagramPacket *reply = create_JavaNetDatagramPacket_initWithByteArray_withInt_withJavaNetInetAddress_withInt_(msg, msg->size_, peerAddress, peerPort);
  @try {
    JavaNetDatagramSocket *sock;
    jboolean created = false;
    if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->udpFlag_) {
      sock = ((AndroidGovNistJavaxSipStackUDPMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackUDPMessageProcessor *) cast_chk(messageProcessor_, [AndroidGovNistJavaxSipStackUDPMessageProcessor class]))))->sock_;
    }
    else {
      sock = create_JavaNetDatagramSocket_init();
      created = true;
    }
    [((JavaNetDatagramSocket *) nil_chk(sock)) sendWithJavaNetDatagramPacket:reply];
    if (created) [sock close];
  }
  @catch (JavaIoIOException *ex) {
    @throw ex;
  }
  @catch (JavaLangException *ex) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
  }
}

- (void)sendMessageWithByteArray:(IOSByteArray *)msg
          withJavaNetInetAddress:(JavaNetInetAddress *)peerAddress
                         withInt:(jint)peerPort
                    withNSString:(NSString *)peerProtocol
                     withBoolean:(jboolean)retry {
  if (peerPort == -1) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackUDPMessageChannel_logger)) debugWithNSString:JreStrcat("$$", [[self java_getClass] getName], @":sendMessage: Dropping reply!")];
    @throw create_JavaIoIOException_initWithNSString_(@"Receiver port not set ");
  }
  else {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackUDPMessageChannel_logger)) debugWithNSString:JreStrcat("$$CI$I", @":sendMessage ", [((JavaNetInetAddress *) nil_chk(peerAddress)) getHostAddress], '/', peerPort, @"\n messageSize = ", ((IOSByteArray *) nil_chk(msg))->size_)];
  }
  if ([((NSString *) nil_chk(peerProtocol)) java_compareToIgnoreCase:@"UDP"] == 0) {
    JavaNetDatagramPacket *reply = create_JavaNetDatagramPacket_initWithByteArray_withInt_withJavaNetInetAddress_withInt_(msg, msg->size_, peerAddress, peerPort);
    @try {
      JavaNetDatagramSocket *sock;
      if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->udpFlag_) {
        sock = ((AndroidGovNistJavaxSipStackUDPMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackUDPMessageProcessor *) cast_chk(messageProcessor_, [AndroidGovNistJavaxSipStackUDPMessageProcessor class]))))->sock_;
      }
      else {
        sock = [((id<AndroidGovNistCoreNetNetworkLayer>) nil_chk([sipStack_ getNetworkLayer])) createDatagramSocket];
      }
      [AndroidGovNistJavaxSipStackUDPMessageChannel_logger debugWithNSString:JreStrcat("$$CIC$", @"sendMessage ", [peerAddress getHostAddress], '/', peerPort, 0x000a, [NSString java_stringWithBytes:msg])];
      [((JavaNetDatagramSocket *) nil_chk(sock)) sendWithJavaNetDatagramPacket:reply];
      if (!((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->udpFlag_) [sock close];
    }
    @catch (JavaIoIOException *ex) {
      @throw ex;
    }
    @catch (JavaLangException *ex) {
      AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
    }
  }
  else {
    JavaNetSocket *outputSocket = [((AndroidGovNistJavaxSipStackIOHandler *) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->ioHandler_)) sendBytesWithJavaNetInetAddress:[((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(self->messageProcessor_)) getIpAddress] withJavaNetInetAddress:peerAddress withInt:peerPort withNSString:@"tcp" withByteArray:msg withBoolean:retry withAndroidGovNistJavaxSipStackMessageChannel:self];
    JavaIoOutputStream *myOutputStream = [((JavaNetSocket *) nil_chk(outputSocket)) getOutputStream];
    [((JavaIoOutputStream *) nil_chk(myOutputStream)) writeWithByteArray:msg withInt:0 withInt:msg->size_];
    [myOutputStream flush];
  }
}

- (AndroidGovNistJavaxSipStackSIPTransactionStack *)getSIPStack {
  return sipStack_;
}

- (NSString *)getTransport {
  return AndroidGovNistJavaxSipAddressParameterNames_UDP;
}

- (NSString *)getHost {
  return [((JavaNetInetAddress *) nil_chk([((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(messageProcessor_)) getIpAddress])) getHostAddress];
}

- (jint)getPort {
  return [((AndroidGovNistJavaxSipStackUDPMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackUDPMessageProcessor *) cast_chk(messageProcessor_, [AndroidGovNistJavaxSipStackUDPMessageProcessor class])))) getPort];
}

- (NSString *)getPeerName {
  return [((JavaNetInetAddress *) nil_chk(peerAddress_)) getHostName];
}

- (NSString *)getPeerAddress {
  return [((JavaNetInetAddress *) nil_chk(peerAddress_)) getHostAddress];
}

- (JavaNetInetAddress *)getPeerInetAddress {
  return peerAddress_;
}

- (jboolean)isEqual:(id)other {
  if (other == nil) return false;
  jboolean retval;
  if (![[self java_getClass] isEqual:[other java_getClass]]) {
    retval = false;
  }
  else {
    AndroidGovNistJavaxSipStackUDPMessageChannel *that = (AndroidGovNistJavaxSipStackUDPMessageChannel *) cast_chk(other, [AndroidGovNistJavaxSipStackUDPMessageChannel class]);
    retval = [((NSString *) nil_chk([self getKey])) isEqual:[that getKey]];
  }
  return retval;
}

- (NSString *)getKey {
  return AndroidGovNistJavaxSipStackMessageChannel_getKeyWithJavaNetInetAddress_withInt_withNSString_(peerAddress_, peerPort_, @"UDP");
}

- (jint)getPeerPacketSourcePort {
  return peerPacketSourcePort_;
}

- (JavaNetInetAddress *)getPeerPacketSourceAddress {
  return peerPacketSourceAddress_;
}

- (NSString *)getViaHost {
  return self->myAddress_;
}

- (jint)getViaPort {
  return self->myPort_;
}

- (jboolean)isReliable {
  return false;
}

- (jboolean)isSecure {
  return false;
}

- (jint)getPeerPort {
  return peerPort_;
}

- (NSString *)getPeerProtocol {
  return self->peerProtocol_;
}

- (void)close {
  if (mythread_ != nil) {
    [mythread_ interrupt];
    JreStrongAssign(&mythread_, nil);
  }
}

- (void)dealloc {
  RELEASE_(sipStack_);
  RELEASE_(myParser_);
  RELEASE_(peerAddress_);
  RELEASE_(myAddress_);
  RELEASE_(peerPacketSourceAddress_);
  RELEASE_(peerProtocol_);
  RELEASE_(incomingPacket_);
  RELEASE_(mythread_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 7, 12, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 13, 12, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 14, 12, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPTransactionStack;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistJavaxSipStackUDPMessageProcessor:withNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistJavaxSipStackUDPMessageProcessor:withJavaNetDatagramPacket:);
  methods[2].selector = @selector(initWithJavaNetInetAddress:withInt:withAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistJavaxSipStackUDPMessageProcessor:);
  methods[3].selector = @selector(run);
  methods[4].selector = @selector(processIncomingDataPacketWithJavaNetDatagramPacket:);
  methods[5].selector = @selector(processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[6].selector = @selector(handleExceptionWithJavaTextParseException:withAndroidGovNistJavaxSipMessageSIPMessage:withIOSClass:withNSString:withNSString:);
  methods[7].selector = @selector(sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[8].selector = @selector(sendMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:);
  methods[9].selector = @selector(sendMessageWithByteArray:withJavaNetInetAddress:withInt:withNSString:withBoolean:);
  methods[10].selector = @selector(getSIPStack);
  methods[11].selector = @selector(getTransport);
  methods[12].selector = @selector(getHost);
  methods[13].selector = @selector(getPort);
  methods[14].selector = @selector(getPeerName);
  methods[15].selector = @selector(getPeerAddress);
  methods[16].selector = @selector(getPeerInetAddress);
  methods[17].selector = @selector(isEqual:);
  methods[18].selector = @selector(getKey);
  methods[19].selector = @selector(getPeerPacketSourcePort);
  methods[20].selector = @selector(getPeerPacketSourceAddress);
  methods[21].selector = @selector(getViaHost);
  methods[22].selector = @selector(getViaPort);
  methods[23].selector = @selector(isReliable);
  methods[24].selector = @selector(isSecure);
  methods[25].selector = @selector(getPeerPort);
  methods[26].selector = @selector(getPeerProtocol);
  methods[27].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "sipStack_", "LAndroidGovNistJavaxSipStackSIPTransactionStack;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "myParser_", "LAndroidGovNistJavaxSipParserMessageParser;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "peerAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "myAddress_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "peerPacketSourcePort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "peerPacketSourceAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "peerPort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "peerProtocol_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "myPort_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "incomingPacket_", "LJavaNetDatagramPacket;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "receptionTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mythread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pingBackRecord", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0xa, -1, 18, 19, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPTransactionStack;LAndroidGovNistJavaxSipStackUDPMessageProcessor;LNSString;", "LAndroidGovNistJavaxSipStackSIPTransactionStack;LAndroidGovNistJavaxSipStackUDPMessageProcessor;LJavaNetDatagramPacket;", "LJavaNetInetAddress;ILAndroidGovNistJavaxSipStackSIPTransactionStack;LAndroidGovNistJavaxSipStackUDPMessageProcessor;", "processIncomingDataPacket", "LJavaNetDatagramPacket;", "LJavaLangException;", "processMessage", "LAndroidGovNistJavaxSipMessageSIPMessage;", "handleException", "LJavaTextParseException;LAndroidGovNistJavaxSipMessageSIPMessage;LIOSClass;LNSString;LNSString;", "LJavaTextParseException;", "sendMessage", "LJavaIoIOException;", "[BLJavaNetInetAddress;IZ", "[BLJavaNetInetAddress;ILNSString;Z", "equals", "LNSObject;", &AndroidGovNistJavaxSipStackUDPMessageChannel_logger, &AndroidGovNistJavaxSipStackUDPMessageChannel_pingBackRecord, "Ljava/util/Hashtable<Ljava/lang/String;Landroid/gov/nist/javax/sip/stack/UDPMessageChannel$PingBackTimerTask;>;", "LAndroidGovNistJavaxSipStackUDPMessageChannel_PingBackTimerTask;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackUDPMessageChannel = { "UDPMessageChannel", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 28, 14, -1, 20, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackUDPMessageChannel;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackUDPMessageChannel class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackUDPMessageChannel_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackUDPMessageChannel_class_()));
    JreStrongAssignAndConsume(&AndroidGovNistJavaxSipStackUDPMessageChannel_pingBackRecord, new_JavaUtilHashtable_init());
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackUDPMessageChannel)
  }
}

@end

void AndroidGovNistJavaxSipStackUDPMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_withNSString_(AndroidGovNistJavaxSipStackUDPMessageChannel *self, AndroidGovNistJavaxSipStackSIPTransactionStack *stack, AndroidGovNistJavaxSipStackUDPMessageProcessor *messageProcessor, NSString *threadName) {
  AndroidGovNistJavaxSipStackMessageChannel_init(self);
  JreStrongAssign(&self->mythread_, nil);
  JreStrongAssign(&self->messageProcessor_, messageProcessor);
  JreStrongAssign(&self->sipStack_, stack);
  JreStrongAssign(&self->myParser_, [((id<AndroidGovNistJavaxSipParserMessageParserFactory>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getMessageParserFactory])) createMessageParserWithAndroidGovNistJavaxSipStackSIPTransactionStack:self->sipStack_]);
  JreStrongAssignAndConsume(&self->mythread_, new_JavaLangThread_initWithJavaLangRunnable_(self));
  JreStrongAssign(&self->myAddress_, [((JavaNetInetAddress *) nil_chk([((AndroidGovNistJavaxSipStackUDPMessageProcessor *) nil_chk(messageProcessor)) getIpAddress])) getHostAddress]);
  self->myPort_ = [messageProcessor getPort];
  [((JavaLangThread *) nil_chk(self->mythread_)) setNameWithNSString:threadName];
  [((JavaLangThread *) nil_chk(self->mythread_)) setDaemonWithBoolean:true];
  [((JavaLangThread *) nil_chk(self->mythread_)) start];
}

AndroidGovNistJavaxSipStackUDPMessageChannel *new_AndroidGovNistJavaxSipStackUDPMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_withNSString_(AndroidGovNistJavaxSipStackSIPTransactionStack *stack, AndroidGovNistJavaxSipStackUDPMessageProcessor *messageProcessor, NSString *threadName) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackUDPMessageChannel, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_withNSString_, stack, messageProcessor, threadName)
}

AndroidGovNistJavaxSipStackUDPMessageChannel *create_AndroidGovNistJavaxSipStackUDPMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_withNSString_(AndroidGovNistJavaxSipStackSIPTransactionStack *stack, AndroidGovNistJavaxSipStackUDPMessageProcessor *messageProcessor, NSString *threadName) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackUDPMessageChannel, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_withNSString_, stack, messageProcessor, threadName)
}

void AndroidGovNistJavaxSipStackUDPMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_withJavaNetDatagramPacket_(AndroidGovNistJavaxSipStackUDPMessageChannel *self, AndroidGovNistJavaxSipStackSIPTransactionStack *stack, AndroidGovNistJavaxSipStackUDPMessageProcessor *messageProcessor, JavaNetDatagramPacket *packet) {
  AndroidGovNistJavaxSipStackMessageChannel_init(self);
  JreStrongAssign(&self->mythread_, nil);
  JreStrongAssign(&self->incomingPacket_, packet);
  JreStrongAssign(&self->messageProcessor_, messageProcessor);
  JreStrongAssign(&self->sipStack_, stack);
  JreStrongAssign(&self->myParser_, [((id<AndroidGovNistJavaxSipParserMessageParserFactory>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getMessageParserFactory])) createMessageParserWithAndroidGovNistJavaxSipStackSIPTransactionStack:self->sipStack_]);
  JreStrongAssign(&self->myAddress_, [((JavaNetInetAddress *) nil_chk([((AndroidGovNistJavaxSipStackUDPMessageProcessor *) nil_chk(messageProcessor)) getIpAddress])) getHostAddress]);
  self->myPort_ = [messageProcessor getPort];
  JreStrongAssignAndConsume(&self->mythread_, new_JavaLangThread_initWithJavaLangRunnable_(self));
  [self->mythread_ setDaemonWithBoolean:true];
  [((JavaLangThread *) nil_chk(self->mythread_)) start];
}

AndroidGovNistJavaxSipStackUDPMessageChannel *new_AndroidGovNistJavaxSipStackUDPMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_withJavaNetDatagramPacket_(AndroidGovNistJavaxSipStackSIPTransactionStack *stack, AndroidGovNistJavaxSipStackUDPMessageProcessor *messageProcessor, JavaNetDatagramPacket *packet) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackUDPMessageChannel, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_withJavaNetDatagramPacket_, stack, messageProcessor, packet)
}

AndroidGovNistJavaxSipStackUDPMessageChannel *create_AndroidGovNistJavaxSipStackUDPMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_withJavaNetDatagramPacket_(AndroidGovNistJavaxSipStackSIPTransactionStack *stack, AndroidGovNistJavaxSipStackUDPMessageProcessor *messageProcessor, JavaNetDatagramPacket *packet) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackUDPMessageChannel, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_withJavaNetDatagramPacket_, stack, messageProcessor, packet)
}

void AndroidGovNistJavaxSipStackUDPMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_(AndroidGovNistJavaxSipStackUDPMessageChannel *self, JavaNetInetAddress *targetAddr, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackUDPMessageProcessor *messageProcessor) {
  AndroidGovNistJavaxSipStackMessageChannel_init(self);
  JreStrongAssign(&self->mythread_, nil);
  JreStrongAssign(&self->peerAddress_, targetAddr);
  self->peerPort_ = port;
  JreStrongAssign(&self->peerProtocol_, @"UDP");
  JreStrongAssign(&self->messageProcessor_, messageProcessor);
  JreStrongAssign(&self->myAddress_, [((JavaNetInetAddress *) nil_chk([((AndroidGovNistJavaxSipStackUDPMessageProcessor *) nil_chk(messageProcessor)) getIpAddress])) getHostAddress]);
  self->myPort_ = [messageProcessor getPort];
  JreStrongAssign(&self->sipStack_, sipStack);
  JreStrongAssign(&self->myParser_, [((id<AndroidGovNistJavaxSipParserMessageParserFactory>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack)) getMessageParserFactory])) createMessageParserWithAndroidGovNistJavaxSipStackSIPTransactionStack:sipStack]);
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackUDPMessageChannel_logger)) debugWithNSString:JreStrcat("$$CI", @"Creating message channel ", [((JavaNetInetAddress *) nil_chk(targetAddr)) getHostAddress], '/', port)];
}

AndroidGovNistJavaxSipStackUDPMessageChannel *new_AndroidGovNistJavaxSipStackUDPMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_(JavaNetInetAddress *targetAddr, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackUDPMessageProcessor *messageProcessor) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackUDPMessageChannel, initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_, targetAddr, port, sipStack, messageProcessor)
}

AndroidGovNistJavaxSipStackUDPMessageChannel *create_AndroidGovNistJavaxSipStackUDPMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_(JavaNetInetAddress *targetAddr, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackUDPMessageProcessor *messageProcessor) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackUDPMessageChannel, initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackUDPMessageProcessor_, targetAddr, port, sipStack, messageProcessor)
}

void AndroidGovNistJavaxSipStackUDPMessageChannel_processIncomingDataPacketWithJavaNetDatagramPacket_(AndroidGovNistJavaxSipStackUDPMessageChannel *self, JavaNetDatagramPacket *packet) {
  JreStrongAssign(&self->peerAddress_, [((JavaNetDatagramPacket *) nil_chk(packet)) getAddress]);
  jint packetLength = [packet getLength];
  IOSByteArray *bytes = [packet getData];
  IOSByteArray *msgBytes = [IOSByteArray arrayWithLength:packetLength];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, 0, msgBytes, 0, packetLength);
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackUDPMessageChannel_logger)) debugWithNSString:JreStrcat("$$CI$I", @"UDPMessageChannel: processIncomingDataPacket : peerAddress = ", [((JavaNetInetAddress *) nil_chk(self->peerAddress_)) getHostAddress], '/', [packet getPort], @" Length = ", packetLength)];
  AndroidGovNistJavaxSipMessageSIPMessage *sipMessage = nil;
  @try {
    self->receptionTime_ = JavaLangSystem_currentTimeMillis();
    sipMessage = [((id<AndroidGovNistJavaxSipParserMessageParser>) nil_chk(self->myParser_)) parseSIPMessageWithByteArray:msgBytes withBoolean:true withBoolean:false withAndroidGovNistJavaxSipParserParseExceptionListener:self];
    if ([sipMessage isKindOfClass:[AndroidGovNistJavaxSipMessageSIPRequest class]]) {
      NSString *sipVersion = [((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(sipMessage, [AndroidGovNistJavaxSipMessageSIPRequest class])))) getRequestLine])) getSipVersion];
      if (![((NSString *) nil_chk(sipVersion)) isEqual:@"SIP/2.0"]) {
        id<AndroidJavaxSipMessageResponse> versionNotSupported = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(sipMessage, [AndroidGovNistJavaxSipMessageSIPRequest class])))) createResponseWithInt:AndroidJavaxSipMessageResponse_VERSION_NOT_SUPPORTED withNSString:JreStrcat("$$", @"Bad version ", sipVersion)];
        [self sendMessageWithByteArray:[((NSString *) nil_chk([((id<AndroidJavaxSipMessageResponse>) nil_chk(versionNotSupported)) description])) java_getBytes] withJavaNetInetAddress:self->peerAddress_ withInt:[packet getPort] withNSString:@"UDP" withBoolean:false];
        return;
      }
      NSString *method = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(sipMessage, [AndroidGovNistJavaxSipMessageSIPRequest class])))) getMethod];
      NSString *cseqMethod = [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(sipMessage, [AndroidGovNistJavaxSipMessageSIPRequest class])))) getCSeqHeader])) getMethod];
      if (![((NSString *) nil_chk(method)) java_equalsIgnoreCase:cseqMethod]) {
        AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(sipMessage, [AndroidGovNistJavaxSipMessageSIPRequest class])))) createResponseWithInt:AndroidJavaxSipMessageResponse_BAD_REQUEST];
        IOSByteArray *resp = [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) encodeAsBytesWithNSString:[self getTransport]];
        [self sendMessageWithByteArray:resp withJavaNetInetAddress:self->peerAddress_ withInt:[packet getPort] withNSString:@"UDP" withBoolean:false];
        return;
      }
    }
  }
  @catch (JavaTextParseException *ex) {
    [AndroidGovNistJavaxSipStackUDPMessageChannel_logger debugWithNSString:JreStrcat("$$", @"Rejecting message !  ", [NSString java_stringWithBytes:msgBytes])];
    [AndroidGovNistJavaxSipStackUDPMessageChannel_logger debugWithNSString:JreStrcat("$$", @"error message ", [((JavaTextParseException *) nil_chk(ex)) getMessage])];
    [AndroidGovNistJavaxSipStackUDPMessageChannel_logger errorWithNSString:@"ParseException" withNSException:ex];
    NSString *msgString = [NSString java_stringWithBytes:msgBytes offset:0 length:packetLength];
    if (![msgString hasPrefix:@"SIP/"] && ![msgString hasPrefix:@"ACK "]) {
      NSString *badReqRes = [self createBadReqResWithNSString:msgString withJavaTextParseException:ex];
      if (badReqRes != nil) {
        [AndroidGovNistJavaxSipStackUDPMessageChannel_logger debugWithNSString:@"Sending automatic 400 Bad Request:"];
        [AndroidGovNistJavaxSipStackUDPMessageChannel_logger debugWithNSString:badReqRes];
        @try {
          [self sendMessageWithByteArray:[badReqRes java_getBytes] withJavaNetInetAddress:self->peerAddress_ withInt:[packet getPort] withNSString:@"UDP" withBoolean:false];
        }
        @catch (JavaIoIOException *e) {
          [AndroidGovNistJavaxSipStackUDPMessageChannel_logger errorWithNSString:@"IOException" withNSException:e];
        }
      }
      else {
        [AndroidGovNistJavaxSipStackUDPMessageChannel_logger debugWithNSString:@"Could not formulate automatic 400 Bad Request"];
      }
    }
    return;
  }
  if (sipMessage == nil) {
    [AndroidGovNistJavaxSipStackUDPMessageChannel_logger debugWithNSString:@"Rejecting message !  + Null message parsed."];
    NSString *key = JreStrcat("$CI", [((JavaNetInetAddress *) nil_chk([packet getAddress])) getHostAddress], ':', [packet getPort]);
    if ([((JavaUtilHashtable *) nil_chk(AndroidGovNistJavaxSipStackUDPMessageChannel_pingBackRecord)) getWithId:key] == nil && [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getMinKeepAliveInterval] > 0) {
      IOSByteArray *retval = [@"\x0d\n\x0d\n" java_getBytes];
      JavaNetDatagramPacket *keepalive = create_JavaNetDatagramPacket_initWithByteArray_withInt_withInt_withJavaNetInetAddress_withInt_(retval, 0, ((IOSByteArray *) nil_chk(retval))->size_, [packet getAddress], [packet getPort]);
      AndroidGovNistJavaxSipStackUDPMessageChannel_PingBackTimerTask *task = create_AndroidGovNistJavaxSipStackUDPMessageChannel_PingBackTimerTask_initWithAndroidGovNistJavaxSipStackUDPMessageChannel_withNSString_withInt_(self, [((JavaNetInetAddress *) nil_chk([packet getAddress])) getHostAddress], [packet getPort]);
      [((JavaUtilHashtable *) nil_chk(AndroidGovNistJavaxSipStackUDPMessageChannel_pingBackRecord)) putWithId:key withId:task];
      [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:task withLong:[((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getMinKeepAliveInterval] * 1000];
      [((JavaNetDatagramSocket *) nil_chk(((AndroidGovNistJavaxSipStackUDPMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackUDPMessageProcessor *) cast_chk(self->messageProcessor_, [AndroidGovNistJavaxSipStackUDPMessageProcessor class]))))->sock_)) sendWithJavaNetDatagramPacket:keepalive];
    }
    else {
      [AndroidGovNistJavaxSipStackUDPMessageChannel_logger debugWithNSString:@"Not sending ping back"];
    }
    return;
  }
  AndroidGovNistJavaxSipHeaderVia *topMostVia = [sipMessage getTopmostVia];
  if ([sipMessage getFrom] == nil || [sipMessage getTo] == nil || [sipMessage getCallId] == nil || [sipMessage getCSeq] == nil || topMostVia == nil) {
    NSString *badmsg = [NSString java_stringWithBytes:msgBytes];
    [AndroidGovNistJavaxSipStackUDPMessageChannel_logger errorWithNSString:JreStrcat("$$", @"bad message ", badmsg)];
    [AndroidGovNistJavaxSipStackUDPMessageChannel_logger errorWithNSString:JreStrcat("$@$@$@$@$@", @">>> Dropped Bad Msg From = ", [sipMessage getFrom], @"To = ", [sipMessage getTo], @"CallId = ", [sipMessage getCallId], @"CSeq = ", [sipMessage getCSeq], @"Via = ", [sipMessage getViaHeaders])];
    return;
  }
  if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_))->sipEventInterceptor_ != nil) {
    [self->sipStack_->sipEventInterceptor_ beforeMessageWithAndroidJavaxSipMessageMessage:sipMessage];
  }
  if ([sipMessage isKindOfClass:[AndroidGovNistJavaxSipMessageSIPRequest class]]) {
    id<AndroidJavaxSipAddressHop> hop = [((id<AndroidGovNistCoreNetAddressResolver>) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_))->addressResolver_)) resolveAddressWithAndroidJavaxSipAddressHop:[topMostVia getHop]];
    self->peerPort_ = [((id<AndroidJavaxSipAddressHop>) nil_chk(hop)) getPort];
    JreStrongAssign(&self->peerProtocol_, [topMostVia getTransport]);
    JreStrongAssign(&self->peerPacketSourceAddress_, [packet getAddress]);
    self->peerPacketSourcePort_ = [packet getPort];
    @try {
      JreStrongAssign(&self->peerAddress_, [packet getAddress]);
      jboolean hasRPort = [topMostVia hasParameterWithNSString:AndroidGovNistJavaxSipHeaderVia_RPORT];
      if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) isPatchRport]) if (!hasRPort && [topMostVia getPort] != self->peerPacketSourcePort_) {
        [AndroidGovNistJavaxSipStackUDPMessageChannel_logger debugWithNSString:JreStrcat("$I$I$", @"setting rport since viaPort ", [topMostVia getPort], @" different than peerPacketSourcePort ", self->peerPacketSourcePort_, @" so that the response can be routed back")];
        hasRPort = true;
      }
      if (hasRPort || ![((NSString *) nil_chk([hop getHost])) isEqual:[((JavaNetInetAddress *) nil_chk(self->peerAddress_)) getHostAddress]]) {
        [topMostVia setParameterWithNSString:AndroidGovNistJavaxSipHeaderVia_RECEIVED withNSString:[((JavaNetInetAddress *) nil_chk(self->peerAddress_)) getHostAddress]];
      }
      if (hasRPort) {
        [topMostVia setParameterWithNSString:AndroidGovNistJavaxSipHeaderVia_RPORT withNSString:JavaLangInteger_toStringWithInt_(self->peerPacketSourcePort_)];
      }
    }
    @catch (JavaTextParseException *ex1) {
      AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex1);
    }
  }
  else {
    JreStrongAssign(&self->peerPacketSourceAddress_, [packet getAddress]);
    self->peerPacketSourcePort_ = [packet getPort];
    JreStrongAssign(&self->peerAddress_, [packet getAddress]);
    self->peerPort_ = [packet getPort];
    JreStrongAssign(&self->peerProtocol_, [topMostVia getTransport]);
  }
  [self processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:sipMessage];
  if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_))->sipEventInterceptor_ != nil) {
    [self->sipStack_->sipEventInterceptor_ afterMessageWithAndroidJavaxSipMessageMessage:sipMessage];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackUDPMessageChannel)

@implementation AndroidGovNistJavaxSipStackUDPMessageChannel_PingBackTimerTask

- (instancetype)initWithAndroidGovNistJavaxSipStackUDPMessageChannel:(AndroidGovNistJavaxSipStackUDPMessageChannel *)outer$
                                                        withNSString:(NSString *)ipAddress
                                                             withInt:(jint)port {
  AndroidGovNistJavaxSipStackUDPMessageChannel_PingBackTimerTask_initWithAndroidGovNistJavaxSipStackUDPMessageChannel_withNSString_withInt_(self, outer$, ipAddress, port);
  return self;
}

- (void)runTask {
  [((JavaUtilHashtable *) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackUDPMessageChannel, pingBackRecord))) removeWithId:JreStrcat("$CI", ipAddress_, ':', port_)];
}

- (NSUInteger)hash {
  return ((jint) [(JreStrcat("$CI", ipAddress_, ':', port_)) hash]);
}

- (void)dealloc {
  RELEASE_(ipAddress_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackUDPMessageChannel:withNSString:withInt:);
  methods[1].selector = @selector(runTask);
  methods[2].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ipAddress_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;I", "hashCode", "LAndroidGovNistJavaxSipStackUDPMessageChannel;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackUDPMessageChannel_PingBackTimerTask = { "PingBackTimerTask", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 3, 2, 2, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackUDPMessageChannel_PingBackTimerTask;
}

@end

void AndroidGovNistJavaxSipStackUDPMessageChannel_PingBackTimerTask_initWithAndroidGovNistJavaxSipStackUDPMessageChannel_withNSString_withInt_(AndroidGovNistJavaxSipStackUDPMessageChannel_PingBackTimerTask *self, AndroidGovNistJavaxSipStackUDPMessageChannel *outer$, NSString *ipAddress, jint port) {
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
  JreStrongAssign(&self->ipAddress_, ipAddress);
  self->port_ = port;
}

AndroidGovNistJavaxSipStackUDPMessageChannel_PingBackTimerTask *new_AndroidGovNistJavaxSipStackUDPMessageChannel_PingBackTimerTask_initWithAndroidGovNistJavaxSipStackUDPMessageChannel_withNSString_withInt_(AndroidGovNistJavaxSipStackUDPMessageChannel *outer$, NSString *ipAddress, jint port) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackUDPMessageChannel_PingBackTimerTask, initWithAndroidGovNistJavaxSipStackUDPMessageChannel_withNSString_withInt_, outer$, ipAddress, port)
}

AndroidGovNistJavaxSipStackUDPMessageChannel_PingBackTimerTask *create_AndroidGovNistJavaxSipStackUDPMessageChannel_PingBackTimerTask_initWithAndroidGovNistJavaxSipStackUDPMessageChannel_withNSString_withInt_(AndroidGovNistJavaxSipStackUDPMessageChannel *outer$, NSString *ipAddress, jint port) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackUDPMessageChannel_PingBackTimerTask, initWithAndroidGovNistJavaxSipStackUDPMessageChannel_withNSString_withInt_, outer$, ipAddress, port)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackUDPMessageChannel_PingBackTimerTask)

@implementation AndroidGovNistJavaxSipStackUDPMessageChannel_1

- (instancetype)initWithAndroidGovNistJavaxSipStackRawMessageChannel:(id<AndroidGovNistJavaxSipStackRawMessageChannel>)capture$0
                         withAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)capture$1 {
  AndroidGovNistJavaxSipStackUDPMessageChannel_1_initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(self, capture$0, capture$1);
  return self;
}

- (void)run {
  @try {
    [((id<AndroidGovNistJavaxSipStackRawMessageChannel>) nil_chk((val$channel_))) processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *) cast_chk([((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(val$sipMessage_)) java_clone], [AndroidGovNistJavaxSipMessageSIPMessage class])];
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackUDPMessageChannel, logger))) errorWithNSString:@"Error self routing message cause by: " withNSException:ex];
  }
}

- (void)dealloc {
  RELEASE_(val$channel_);
  RELEASE_(val$sipMessage_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackRawMessageChannel:withAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$channel_", "LAndroidGovNistJavaxSipStackRawMessageChannel;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$sipMessage_", "LAndroidGovNistJavaxSipMessageSIPMessage;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackUDPMessageChannel;", "sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackUDPMessageChannel_1 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8008, 2, 2, 0, -1, 1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackUDPMessageChannel_1;
}

@end

void AndroidGovNistJavaxSipStackUDPMessageChannel_1_initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackUDPMessageChannel_1 *self, id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1) {
  JreStrongAssign(&self->val$channel_, capture$0);
  JreStrongAssign(&self->val$sipMessage_, capture$1);
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackUDPMessageChannel_1 *new_AndroidGovNistJavaxSipStackUDPMessageChannel_1_initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackUDPMessageChannel_1, initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_, capture$0, capture$1)
}

AndroidGovNistJavaxSipStackUDPMessageChannel_1 *create_AndroidGovNistJavaxSipStackUDPMessageChannel_1_initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackUDPMessageChannel_1, initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_, capture$0, capture$1)
}
