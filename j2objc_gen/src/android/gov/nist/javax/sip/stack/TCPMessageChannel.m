//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/TCPMessageChannel.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/header/CSeq.h"
#include "android/gov/nist/javax/sip/header/CallID.h"
#include "android/gov/nist/javax/sip/header/ContentLength.h"
#include "android/gov/nist/javax/sip/header/From.h"
#include "android/gov/nist/javax/sip/header/RequestLine.h"
#include "android/gov/nist/javax/sip/header/StatusLine.h"
#include "android/gov/nist/javax/sip/header/To.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/parser/PipelinedMsgParser.h"
#include "android/gov/nist/javax/sip/stack/ConnectionOrientedMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/IOHandler.h"
#include "android/gov/nist/javax/sip/stack/MessageChannel.h"
#include "android/gov/nist/javax/sip/stack/MessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/gov/nist/javax/sip/stack/TCPMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/TCPMessageProcessor.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Thread.h"
#include "java/net/InetAddress.h"
#include "java/net/Socket.h"
#include "java/net/SocketAddress.h"
#include "java/text/ParseException.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackTCPMessageChannel_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackTCPMessageChannel_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackTCPMessageChannel_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackTCPMessageChannel, logger, id<OrgSlf4jLogger>)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackTCPMessageChannel)

@implementation AndroidGovNistJavaxSipStackTCPMessageChannel

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack {
  AndroidGovNistJavaxSipStackTCPMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(self, sipStack);
  return self;
}

- (instancetype)initWithJavaNetSocket:(JavaNetSocket *)sock
withAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
withAndroidGovNistJavaxSipStackTCPMessageProcessor:(AndroidGovNistJavaxSipStackTCPMessageProcessor *)msgProcessor
                         withNSString:(NSString *)threadName {
  AndroidGovNistJavaxSipStackTCPMessageChannel_initWithJavaNetSocket_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTCPMessageProcessor_withNSString_(self, sock, sipStack, msgProcessor, threadName);
  return self;
}

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)inetAddr
                                   withInt:(jint)port
withAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
withAndroidGovNistJavaxSipStackTCPMessageProcessor:(AndroidGovNistJavaxSipStackTCPMessageProcessor *)messageProcessor {
  AndroidGovNistJavaxSipStackTCPMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTCPMessageProcessor_(self, inetAddr, port, sipStack, messageProcessor);
  return self;
}

- (void)closeWithBoolean:(jboolean)removeSocket
             withBoolean:(jboolean)stopKeepAliveTask {
  isRunning_ = false;
  if (mySock_ != nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) debugWithNSString:JreStrcat("$$", @"Closing socket ", key_)];
    @try {
      [((JavaNetSocket *) nil_chk(mySock_)) close];
      JreStrongAssign(&mySock_, nil);
    }
    @catch (JavaIoIOException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) debugWithNSString:JreStrcat("$@", @"Error closing socket ", ex)];
    }
  }
  if (myParser_ != nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) debugWithNSString:JreStrcat("$@", @"Closing my parser ", myParser_)];
    [((AndroidGovNistJavaxSipParserPipelinedMsgParser *) nil_chk(myParser_)) close];
  }
  if (myClientOutputStream_ != nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) debugWithNSString:JreStrcat("$@", @"Closing client output stream ", myClientOutputStream_)];
    @try {
      [((JavaIoOutputStream *) nil_chk(myClientOutputStream_)) close];
    }
    @catch (JavaIoIOException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) debugWithNSString:JreStrcat("$@", @"Error closing client output stream", ex)];
    }
  }
  if (removeSocket) {
    NSString *ioHandlerKey = [((NSString *) nil_chk(key_)) java_substring:4];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) debugWithNSString:JreStrcat("$$", @"Closing TCP socket ", ioHandlerKey)];
    [((AndroidGovNistJavaxSipStackIOHandler *) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->ioHandler_)) removeSocketWithNSString:ioHandlerKey];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) debugWithNSString:JreStrcat("$$C@", @"Closing message Channel (key = ", key_, ')', self)];
  }
  else {
    NSString *ioHandlerKey = [((NSString *) nil_chk(key_)) java_substring:4];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) debugWithNSString:JreStrcat("$$", @"not removing socket key from the cached map since it has already been updated by the iohandler.sendBytes ", ioHandlerKey)];
  }
  if (stopKeepAliveTask) {
    [self cancelPingKeepAliveTimeoutTaskIfStarted];
  }
}

- (NSString *)getTransport {
  return @"TCP";
}

- (void)sendMessageWithByteArray:(IOSByteArray *)msg
                     withBoolean:(jboolean)isClient {
  @synchronized(self) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) debugWithNSString:JreStrcat("$Z", @"sendMessage isClient  = ", isClient)];
    JavaNetSocket *sock = nil;
    JavaIoIOException *problem = nil;
    @try {
      sock = [((AndroidGovNistJavaxSipStackIOHandler *) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_))->ioHandler_)) sendBytesWithJavaNetInetAddress:[((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(self->messageProcessor_)) getIpAddress] withJavaNetInetAddress:self->peerAddress_ withInt:self->peerPort_ withNSString:self->peerProtocol_ withByteArray:msg withBoolean:isClient withAndroidGovNistJavaxSipStackMessageChannel:self];
    }
    @catch (JavaIoIOException *any) {
      problem = any;
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$@CI$I$", @"Failed to connect ", self->peerAddress_, ':', self->peerPort_, @" but trying the advertised port=", self->peerPortAdvertisedInHeaders_, @" if it's different than the port we just failed on")];
    }
    if (sock == nil) {
      if (peerAddressAdvertisedInHeaders_ != nil && peerPortAdvertisedInHeaders_ > 0) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$@$I$$$I", @"Couldn't connect to peerAddress = ", peerAddress_, @" peerPort = ", peerPort_, @" key = ", key_, @" retrying on peerPortAdvertisedInHeaders ", peerPortAdvertisedInHeaders_)];
        JavaNetInetAddress *address = JavaNetInetAddress_getByNameWithNSString_(peerAddressAdvertisedInHeaders_);
        sock = [((AndroidGovNistJavaxSipStackIOHandler *) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_))->ioHandler_)) sendBytesWithJavaNetInetAddress:[((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(self->messageProcessor_)) getIpAddress] withJavaNetInetAddress:address withInt:self->peerPortAdvertisedInHeaders_ withNSString:self->peerProtocol_ withByteArray:msg withBoolean:isClient withAndroidGovNistJavaxSipStackMessageChannel:self];
        self->peerPort_ = self->peerPortAdvertisedInHeaders_;
        JreStrongAssign(&self->peerAddress_, address);
        JreStrongAssign(&self->key_, AndroidGovNistJavaxSipStackMessageChannel_getKeyWithJavaNetInetAddress_withInt_withNSString_(peerAddress_, peerPort_, @"TCP"));
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$@$I$$", @"retry suceeded to peerAddress = ", peerAddress_, @" peerPortAdvertisedInHeaders = ", peerPortAdvertisedInHeaders_, @" key = ", key_)];
      }
      else {
        @throw problem;
      }
    }
    if (sock != mySock_ && sock != nil) {
      if (mySock_ != nil) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$$", @"Old socket different than new socket on channel ", key_)];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$@", @"Old socket local ip address ", [((JavaNetSocket *) nil_chk(mySock_)) getLocalSocketAddress])];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$@", @"Old socket remote ip address ", [((JavaNetSocket *) nil_chk(mySock_)) getRemoteSocketAddress])];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$@", @"New socket local ip address ", [sock getLocalSocketAddress])];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$@", @"New socket remote ip address ", [sock getRemoteSocketAddress])];
        [self closeWithBoolean:false withBoolean:false];
      }
      if (problem == nil) {
        if (mySock_ != nil) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$$", @"There was no exception for the retry mechanism so creating a new thread based on the new socket for incoming ", key_)];
        }
        JreStrongAssign(&mySock_, sock);
        JreStrongAssign(&self->myClientInputStream_, [mySock_ getInputStream]);
        JreStrongAssign(&self->myClientOutputStream_, [((JavaNetSocket *) nil_chk(mySock_)) getOutputStream]);
        JavaLangThread *thread = create_JavaLangThread_initWithJavaLangRunnable_(self);
        [thread setDaemonWithBoolean:true];
        [thread setNameWithNSString:@"TCPMessageChannelThread"];
        [thread start];
      }
      else {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$$", @"There was an exception for the retry mechanism so not creating a new thread based on the new socket for incoming ", key_)];
        JreStrongAssign(&mySock_, sock);
      }
    }
  }
}

- (void)sendMessageWithByteArray:(IOSByteArray *)message
          withJavaNetInetAddress:(JavaNetInetAddress *)receiverAddress
                         withInt:(jint)receiverPort
                     withBoolean:(jboolean)retry {
  @synchronized(self) {
    if (message == nil || receiverAddress == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Null argument");
    if (peerPortAdvertisedInHeaders_ <= 0) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) debugWithNSString:JreStrcat("$I$@$$", @"receiver port = ", receiverPort, @" for this channel ", self, @" key ", key_)];
      if (receiverPort <= 0) {
        self->peerPortAdvertisedInHeaders_ = 5060;
      }
      else {
        self->peerPortAdvertisedInHeaders_ = receiverPort;
      }
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) debugWithNSString:JreStrcat("$I$@$$", @"2.Storing peerPortAdvertisedInHeaders = ", peerPortAdvertisedInHeaders_, @" for this channel ", self, @" key ", key_)];
    }
    JavaNetSocket *sock = nil;
    JavaIoIOException *problem = nil;
    @try {
      sock = [((AndroidGovNistJavaxSipStackIOHandler *) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_))->ioHandler_)) sendBytesWithJavaNetInetAddress:[((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(self->messageProcessor_)) getIpAddress] withJavaNetInetAddress:receiverAddress withInt:receiverPort withNSString:@"TCP" withByteArray:message withBoolean:retry withAndroidGovNistJavaxSipStackMessageChannel:self];
    }
    @catch (JavaIoIOException *any) {
      problem = any;
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$@CI$I$", @"Failed to connect ", self->peerAddress_, ':', receiverPort, @" but trying the advertised port=", self->peerPortAdvertisedInHeaders_, @" if it's different than the port we just failed on")];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) errorWithNSString:@"Error is " withNSException:any];
    }
    if (sock == nil) {
      if (peerAddressAdvertisedInHeaders_ != nil && peerPortAdvertisedInHeaders_ > 0) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$@$I$$$I", @"Couldn't connect to receiverAddress = ", receiverAddress, @" receiverPort = ", receiverPort, @" key = ", key_, @" retrying on peerPortAdvertisedInHeaders ", peerPortAdvertisedInHeaders_)];
        JavaNetInetAddress *address = JavaNetInetAddress_getByNameWithNSString_(peerAddressAdvertisedInHeaders_);
        sock = [((AndroidGovNistJavaxSipStackIOHandler *) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_))->ioHandler_)) sendBytesWithJavaNetInetAddress:[((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(self->messageProcessor_)) getIpAddress] withJavaNetInetAddress:address withInt:self->peerPortAdvertisedInHeaders_ withNSString:@"TCP" withByteArray:message withBoolean:retry withAndroidGovNistJavaxSipStackMessageChannel:self];
        self->peerPort_ = self->peerPortAdvertisedInHeaders_;
        JreStrongAssign(&self->peerAddress_, address);
        JreStrongAssign(&self->key_, AndroidGovNistJavaxSipStackMessageChannel_getKeyWithJavaNetInetAddress_withInt_withNSString_(peerAddress_, peerPort_, @"TCP"));
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$@$I$$", @"retry suceeded to peerAddress = ", peerAddress_, @" peerPort = ", peerPort_, @" key = ", key_)];
      }
      else {
        @throw problem;
      }
    }
    if (sock != mySock_ && sock != nil) {
      if (mySock_ != nil) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$$", @"Old socket different than new socket on channel ", key_)];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$@", @"Old socket local ip address ", [((JavaNetSocket *) nil_chk(mySock_)) getLocalSocketAddress])];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$@", @"Old socket remote ip address ", [((JavaNetSocket *) nil_chk(mySock_)) getRemoteSocketAddress])];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$@", @"New socket local ip address ", [sock getLocalSocketAddress])];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$@", @"New socket remote ip address ", [sock getRemoteSocketAddress])];
        [self closeWithBoolean:false withBoolean:false];
      }
      if (problem == nil) {
        if (mySock_ != nil) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$$", @"There was no exception for the retry mechanism so creating a new thread based on the new socket for incoming ", key_)];
        }
        JreStrongAssign(&mySock_, sock);
        JreStrongAssign(&self->myClientInputStream_, [mySock_ getInputStream]);
        JreStrongAssign(&self->myClientOutputStream_, [((JavaNetSocket *) nil_chk(mySock_)) getOutputStream]);
        JavaLangThread *mythread = create_JavaLangThread_initWithJavaLangRunnable_(self);
        [mythread setDaemonWithBoolean:true];
        [mythread setNameWithNSString:@"TCPMessageChannelThread"];
        [mythread start];
      }
      else {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) warnWithNSString:JreStrcat("$$", @"There was an exception for the retry mechanism so not creating a new thread based on the new socket for incoming ", key_)];
        JreStrongAssign(&mySock_, sock);
      }
    }
  }
}

- (void)handleExceptionWithJavaTextParseException:(JavaTextParseException *)ex
      withAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage
                                     withIOSClass:(IOSClass *)hdrClass
                                     withNSString:(NSString *)header
                                     withNSString:(NSString *)message {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) errorWithNSString:@"ParseException" withNSException:ex];
  if ((hdrClass != nil) && ([((IOSClass *) nil_chk(hdrClass)) isEqual:AndroidGovNistJavaxSipHeaderFrom_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderTo_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderCSeq_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderVia_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderCallID_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderContentLength_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderRequestLine_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderStatusLine_class_()])) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) debugWithNSString:JreStrcat("$$", @"Encountered Bad Message \n", [((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) description])];
    NSString *msgString = [sipMessage description];
    if (![((NSString *) nil_chk(msgString)) hasPrefix:@"SIP/"] && ![msgString hasPrefix:@"ACK "]) {
      if (mySock_ != nil) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) errorWithNSString:JreStrcat("$$", @"Malformed mandatory headers: closing socket! :", [mySock_ description])];
        @try {
          [((JavaNetSocket *) nil_chk(mySock_)) close];
        }
        @catch (JavaIoIOException *ie) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) errorWithNSString:JreStrcat("$$C$", @"Exception while closing socket! :", [((JavaNetSocket *) nil_chk(mySock_)) description], ':', [((JavaIoIOException *) nil_chk(ie)) description])];
        }
      }
    }
    @throw ex;
  }
  else {
    [((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) addUnparsedWithNSString:header];
  }
}

- (jboolean)isEqual:(id)other {
  if (![[self java_getClass] isEqual:[nil_chk(other) java_getClass]]) return false;
  else {
    AndroidGovNistJavaxSipStackTCPMessageChannel *that = (AndroidGovNistJavaxSipStackTCPMessageChannel *) cast_chk(other, [AndroidGovNistJavaxSipStackTCPMessageChannel class]);
    if (self->mySock_ != that->mySock_) return false;
    else return true;
  }
}

- (jboolean)isSecure {
  return false;
}

- (void)dealloc {
  RELEASE_(myClientOutputStream_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x24, 6, 7, 2, -1, -1, -1 },
    { NULL, "V", 0x21, 6, 8, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 11, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionStack:);
  methods[1].selector = @selector(initWithJavaNetSocket:withAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistJavaxSipStackTCPMessageProcessor:withNSString:);
  methods[2].selector = @selector(initWithJavaNetInetAddress:withInt:withAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistJavaxSipStackTCPMessageProcessor:);
  methods[3].selector = @selector(closeWithBoolean:withBoolean:);
  methods[4].selector = @selector(getTransport);
  methods[5].selector = @selector(sendMessageWithByteArray:withBoolean:);
  methods[6].selector = @selector(sendMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:);
  methods[7].selector = @selector(handleExceptionWithJavaTextParseException:withAndroidGovNistJavaxSipMessageSIPMessage:withIOSClass:withNSString:withNSString:);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(isSecure);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 14, -1, -1 },
    { "myClientOutputStream_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPTransactionStack;", "LJavaNetSocket;LAndroidGovNistJavaxSipStackSIPTransactionStack;LAndroidGovNistJavaxSipStackTCPMessageProcessor;LNSString;", "LJavaIoIOException;", "LJavaNetInetAddress;ILAndroidGovNistJavaxSipStackSIPTransactionStack;LAndroidGovNistJavaxSipStackTCPMessageProcessor;", "close", "ZZ", "sendMessage", "[BZ", "[BLJavaNetInetAddress;IZ", "handleException", "LJavaTextParseException;LAndroidGovNistJavaxSipMessageSIPMessage;LIOSClass;LNSString;LNSString;", "LJavaTextParseException;", "equals", "LNSObject;", &AndroidGovNistJavaxSipStackTCPMessageChannel_logger };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackTCPMessageChannel = { "TCPMessageChannel", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 10, 2, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackTCPMessageChannel;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackTCPMessageChannel class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackTCPMessageChannel_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackTCPMessageChannel_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackTCPMessageChannel)
  }
}

@end

void AndroidGovNistJavaxSipStackTCPMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(AndroidGovNistJavaxSipStackTCPMessageChannel *self, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack) {
  AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(self, sipStack);
}

AndroidGovNistJavaxSipStackTCPMessageChannel *new_AndroidGovNistJavaxSipStackTCPMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackTCPMessageChannel, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_, sipStack)
}

AndroidGovNistJavaxSipStackTCPMessageChannel *create_AndroidGovNistJavaxSipStackTCPMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackTCPMessageChannel, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_, sipStack)
}

void AndroidGovNistJavaxSipStackTCPMessageChannel_initWithJavaNetSocket_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTCPMessageProcessor_withNSString_(AndroidGovNistJavaxSipStackTCPMessageChannel *self, JavaNetSocket *sock, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackTCPMessageProcessor *msgProcessor, NSString *threadName) {
  AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(self, sipStack);
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) debugWithNSString:@"creating new TCPMessageChannel "];
  JreStrongAssign(&self->mySock_, sock);
  JreStrongAssign(&self->peerAddress_, [((JavaNetSocket *) nil_chk(self->mySock_)) getInetAddress]);
  JreStrongAssign(&self->myAddress_, [((JavaNetInetAddress *) nil_chk([((AndroidGovNistJavaxSipStackTCPMessageProcessor *) nil_chk(msgProcessor)) getIpAddress])) getHostAddress]);
  JreStrongAssign(&self->myClientInputStream_, [((JavaNetSocket *) nil_chk(self->mySock_)) getInputStream]);
  JreStrongAssign(&self->myClientOutputStream_, [((JavaNetSocket *) nil_chk(self->mySock_)) getOutputStream]);
  JreStrongAssignAndConsume(&self->mythread_, new_JavaLangThread_initWithJavaLangRunnable_(self));
  [self->mythread_ setDaemonWithBoolean:true];
  [((JavaLangThread *) nil_chk(self->mythread_)) setNameWithNSString:threadName];
  self->peerPort_ = [((JavaNetSocket *) nil_chk(self->mySock_)) getPort];
  JreStrongAssign(&self->key_, AndroidGovNistJavaxSipStackMessageChannel_getKeyWithJavaNetInetAddress_withInt_withNSString_(self->peerAddress_, self->peerPort_, @"TCP"));
  self->myPort_ = [msgProcessor getPort];
  JreStrongAssign(&self->messageProcessor_, msgProcessor);
  [((JavaLangThread *) nil_chk(self->mythread_)) start];
}

AndroidGovNistJavaxSipStackTCPMessageChannel *new_AndroidGovNistJavaxSipStackTCPMessageChannel_initWithJavaNetSocket_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTCPMessageProcessor_withNSString_(JavaNetSocket *sock, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackTCPMessageProcessor *msgProcessor, NSString *threadName) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackTCPMessageChannel, initWithJavaNetSocket_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTCPMessageProcessor_withNSString_, sock, sipStack, msgProcessor, threadName)
}

AndroidGovNistJavaxSipStackTCPMessageChannel *create_AndroidGovNistJavaxSipStackTCPMessageChannel_initWithJavaNetSocket_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTCPMessageProcessor_withNSString_(JavaNetSocket *sock, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackTCPMessageProcessor *msgProcessor, NSString *threadName) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackTCPMessageChannel, initWithJavaNetSocket_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTCPMessageProcessor_withNSString_, sock, sipStack, msgProcessor, threadName)
}

void AndroidGovNistJavaxSipStackTCPMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTCPMessageProcessor_(AndroidGovNistJavaxSipStackTCPMessageChannel *self, JavaNetInetAddress *inetAddr, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackTCPMessageProcessor *messageProcessor) {
  AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(self, sipStack);
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackTCPMessageChannel_logger)) debugWithNSString:@"creating new TCPMessageChannel "];
  JreStrongAssign(&self->peerAddress_, inetAddr);
  self->peerPort_ = port;
  self->myPort_ = [((AndroidGovNistJavaxSipStackTCPMessageProcessor *) nil_chk(messageProcessor)) getPort];
  JreStrongAssign(&self->peerProtocol_, @"TCP");
  JreStrongAssign(&self->myAddress_, [((JavaNetInetAddress *) nil_chk([messageProcessor getIpAddress])) getHostAddress]);
  JreStrongAssign(&self->key_, AndroidGovNistJavaxSipStackMessageChannel_getKeyWithJavaNetInetAddress_withInt_withNSString_(self->peerAddress_, self->peerPort_, @"TCP"));
  JreStrongAssign(&self->messageProcessor_, messageProcessor);
}

AndroidGovNistJavaxSipStackTCPMessageChannel *new_AndroidGovNistJavaxSipStackTCPMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTCPMessageProcessor_(JavaNetInetAddress *inetAddr, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackTCPMessageProcessor *messageProcessor) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackTCPMessageChannel, initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTCPMessageProcessor_, inetAddr, port, sipStack, messageProcessor)
}

AndroidGovNistJavaxSipStackTCPMessageChannel *create_AndroidGovNistJavaxSipStackTCPMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTCPMessageProcessor_(JavaNetInetAddress *inetAddr, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackTCPMessageProcessor *messageProcessor) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackTCPMessageChannel, initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackTCPMessageProcessor_, inetAddr, port, sipStack, messageProcessor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackTCPMessageChannel)
