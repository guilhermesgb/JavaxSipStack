//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/SIPTransactionImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/javax/sip/ListeningPointImpl.h"
#include "android/gov/nist/javax/sip/ReleaseReferencesStrategy.h"
#include "android/gov/nist/javax/sip/SIPConstants.h"
#include "android/gov/nist/javax/sip/SipProviderImpl.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/address/AddressFactoryImpl.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/message/SIPRequest.h"
#include "android/gov/nist/javax/sip/message/SIPResponse.h"
#include "android/gov/nist/javax/sip/parser/MessageParser.h"
#include "android/gov/nist/javax/sip/parser/MessageParserFactory.h"
#include "android/gov/nist/javax/sip/stack/HandshakeCompletedListenerImpl.h"
#include "android/gov/nist/javax/sip/stack/MessageChannel.h"
#include "android/gov/nist/javax/sip/stack/MessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/NioTlsMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/RawMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/SIPClientTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPClientTransactionImpl.h"
#include "android/gov/nist/javax/sip/stack/SIPDialog.h"
#include "android/gov/nist/javax/sip/stack/SIPServerTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPStackTimerTask.h"
#include "android/gov/nist/javax/sip/stack/SIPTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionErrorEvent.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionEventListener.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionImpl.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/gov/nist/javax/sip/stack/TCPMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/TLSMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/timers/SipTimer.h"
#include "android/javax/sip/Dialog.h"
#include "android/javax/sip/IOExceptionEvent.h"
#include "android/javax/sip/TransactionState.h"
#include "android/javax/sip/address/SipURI.h"
#include "android/javax/sip/address/URI.h"
#include "android/javax/sip/header/CSeqHeader.h"
#include "android/javax/sip/header/CallIdHeader.h"
#include "android/javax/sip/header/FromHeader.h"
#include "android/javax/sip/header/ToHeader.h"
#include "android/javax/sip/message/Request.h"
#include "android/javax/sip/message/Response.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/net/InetAddress.h"
#include "java/security/Principal.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateParsingException.h"
#include "java/security/cert/X509Certificate.h"
#include "java/text/ParseException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/concurrent/CopyOnWriteArraySet.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/Semaphore.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/locks/ReentrantLock.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "javax/net/ssl/HandshakeCompletedEvent.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface AndroidGovNistJavaxSipStackSIPTransactionImpl () {
 @public
  AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore *semaphore_;
  NSString *branch_;
  NSString *method_;
  jint currentState_;
  jint retransmissionTimerLastTickCount_;
  jint retransmissionTimerTicksLeft_;
  id<JavaUtilSet> eventListeners_;
  jboolean terminatedEventDelivered_;
  AndroidGovNistJavaxSipReleaseReferencesStrategy *releaseReferencesStrategy_;
  JavaLangBoolean *inviteTransaction_;
  JavaLangBoolean *dialogCreatingTransaction_;
  NSString *forkId_;
  AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener *maxTxLifeTimeListener_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, semaphore_, AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, branch_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, method_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, eventListeners_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, releaseReferencesStrategy_, AndroidGovNistJavaxSipReleaseReferencesStrategy *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, inviteTransaction_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, dialogCreatingTransaction_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, forkId_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionImpl, maxTxLifeTimeListener_, AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener *)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSIPTransactionImpl_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSIPTransactionImpl_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSIPTransactionImpl_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackSIPTransactionImpl, logger, id<OrgSlf4jLogger>)

inline JavaUtilRegexPattern *AndroidGovNistJavaxSipStackSIPTransactionImpl_get_EXTRACT_CN();
static JavaUtilRegexPattern *AndroidGovNistJavaxSipStackSIPTransactionImpl_EXTRACT_CN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipStackSIPTransactionImpl, EXTRACT_CN, JavaUtilRegexPattern *)

@interface AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore () {
 @public
  AndroidGovNistJavaxSipStackSIPTransactionImpl *this$0_;
}

@end

inline jlong AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore_get_serialVersionUID();
#define AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore_serialVersionUID -1634100711669020804LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore, serialVersionUID, jlong)

@interface AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer () {
 @public
  AndroidGovNistJavaxSipStackSIPTransactionImpl *this$0_;
}

@end

@interface AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener () {
 @public
  AndroidGovNistJavaxSipStackSIPTransactionImpl *this$0_;
}

@end

@interface AndroidGovNistJavaxSipStackSIPTransactionImpl_1 : NSObject < JavaLangRunnable > {
 @public
  AndroidGovNistJavaxSipStackSIPTransactionImpl *this$0_;
  id<AndroidGovNistJavaxSipStackRawMessageChannel> val$channel_;
  AndroidGovNistJavaxSipMessageSIPMessage *val$messageToSend_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionImpl:(AndroidGovNistJavaxSipStackSIPTransactionImpl *)outer$
                     withAndroidGovNistJavaxSipStackRawMessageChannel:(id<AndroidGovNistJavaxSipStackRawMessageChannel>)capture$0
                          withAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackSIPTransactionImpl_1)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackSIPTransactionImpl_1 *self, AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$, id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1);

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPTransactionImpl_1 *new_AndroidGovNistJavaxSipStackSIPTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$, id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPTransactionImpl_1 *create_AndroidGovNistJavaxSipStackSIPTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$, id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1);

@interface AndroidGovNistJavaxSipStackSIPTransactionImpl_2 : NSObject < JavaLangRunnable > {
 @public
  AndroidGovNistJavaxSipStackSIPTransactionImpl *this$0_;
  id<AndroidGovNistJavaxSipStackRawMessageChannel> val$channel_;
  AndroidGovNistJavaxSipMessageSIPMessage *val$messageToSend_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionImpl:(AndroidGovNistJavaxSipStackSIPTransactionImpl *)outer$
                     withAndroidGovNistJavaxSipStackRawMessageChannel:(id<AndroidGovNistJavaxSipStackRawMessageChannel>)capture$0
                          withAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackSIPTransactionImpl_2)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPTransactionImpl_2_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackSIPTransactionImpl_2 *self, AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$, id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1);

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPTransactionImpl_2 *new_AndroidGovNistJavaxSipStackSIPTransactionImpl_2_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$, id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPTransactionImpl_2 *create_AndroidGovNistJavaxSipStackSIPTransactionImpl_2_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$, id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1);

@interface AndroidGovNistJavaxSipStackSIPTransactionImpl_3 : NSObject < JavaLangRunnable > {
 @public
  id<AndroidGovNistJavaxSipStackRawMessageChannel> val$channel_;
  AndroidGovNistJavaxSipMessageSIPMessage *val$messageToSend_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackRawMessageChannel:(id<AndroidGovNistJavaxSipStackRawMessageChannel>)capture$0
                         withAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackSIPTransactionImpl_3)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPTransactionImpl_3_initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackSIPTransactionImpl_3 *self, id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1);

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPTransactionImpl_3 *new_AndroidGovNistJavaxSipStackSIPTransactionImpl_3_initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPTransactionImpl_3 *create_AndroidGovNistJavaxSipStackSIPTransactionImpl_3_initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackSIPTransactionImpl)

@implementation AndroidGovNistJavaxSipStackSIPTransactionImpl

- (NSString *)getBranchId {
  return self->branch_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)newParentStack
                         withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)newEncapsulatedChannel {
  AndroidGovNistJavaxSipStackSIPTransactionImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_(self, newParentStack, newEncapsulatedChannel);
  return self;
}

- (void)cleanUp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setOriginalRequestWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)newOriginalRequest {
  NSString *newBranch;
  NSString *newTransactionId = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(newOriginalRequest)) getTransactionId];
  if (self->originalRequest_ != nil && (![((NSString *) nil_chk([self->originalRequest_ getTransactionId])) isEqual:newTransactionId])) {
    [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) removeTransactionHashWithAndroidGovNistJavaxSipStackSIPTransaction:self];
  }
  JreStrongAssign(&self->originalRequest_, newOriginalRequest);
  self->originalRequestCSeqNumber_ = [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([newOriginalRequest getCSeq])) getSeqNumber];
  AndroidGovNistJavaxSipHeaderVia *topmostVia = [newOriginalRequest getTopmostVia];
  JreStrongAssign(&self->originalRequestBranch_, [((AndroidGovNistJavaxSipHeaderVia *) nil_chk(topmostVia)) getBranch]);
  self->originalRequestHasPort_ = [topmostVia hasPort];
  jint originalRequestViaPort = [topmostVia getPort];
  if (originalRequestViaPort == -1) {
    if ([((NSString *) nil_chk([topmostVia getTransport])) java_equalsIgnoreCase:@"TLS"]) {
      originalRequestViaPort = 5061;
    }
    else {
      originalRequestViaPort = 5060;
    }
  }
  JreStrongAssign(&self->method_, [newOriginalRequest getMethod]);
  JreStrongAssign(&self->transactionId_, newTransactionId);
  [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(originalRequest_)) setTransactionWithId:self];
  newBranch = [topmostVia getBranch];
  if (newBranch != nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$$", @"Setting Branch id : ", newBranch)];
    [self setBranchWithNSString:newBranch];
  }
  else {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$$", @"Branch id is null - compute TID!", [newOriginalRequest encode])];
    [self setBranchWithNSString:newTransactionId];
  }
}

- (AndroidGovNistJavaxSipMessageSIPRequest *)getOriginalRequest {
  return self->originalRequest_;
}

- (id<AndroidJavaxSipMessageRequest>)getRequest {
  if ([self getReleaseReferencesStrategy] != JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, None) && originalRequest_ == nil && originalRequestBytes_ != nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) warnWithNSString:JreStrcat("$@$", @"reparsing original request ", originalRequestBytes_, @" since it was eagerly cleaned up, but beware this is not efficient with the aggressive flag set !")];
    @try {
      JreStrongAssign(&originalRequest_, (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([((id<AndroidGovNistJavaxSipParserMessageParser>) nil_chk([((id<AndroidGovNistJavaxSipParserMessageParserFactory>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMessageParserFactory])) createMessageParserWithAndroidGovNistJavaxSipStackSIPTransactionStack:sipStack_])) parseSIPMessageWithByteArray:originalRequestBytes_ withBoolean:true withBoolean:false withAndroidGovNistJavaxSipParserParseExceptionListener:nil], [AndroidGovNistJavaxSipMessageSIPRequest class]));
    }
    @catch (JavaTextParseException *e) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) errorWithNSString:JreStrcat("$@$", @"message ", originalRequestBytes_, @" could not be reparsed !")];
    }
  }
  return originalRequest_;
}

- (jboolean)isDialogCreatingTransaction {
  if (dialogCreatingTransaction_ == nil) {
    JreStrongAssign(&dialogCreatingTransaction_, JavaLangBoolean_valueOfWithBoolean_([self isInviteTransaction] || [((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_SUBSCRIBE] || [((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_REFER]));
  }
  return [dialogCreatingTransaction_ booleanValue];
}

- (jboolean)isInviteTransaction {
  if (inviteTransaction_ == nil) {
    JreStrongAssign(&inviteTransaction_, JavaLangBoolean_valueOfWithBoolean_([((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_INVITE]));
  }
  return [inviteTransaction_ booleanValue];
}

- (jboolean)isCancelTransaction {
  return [((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_CANCEL];
}

- (jboolean)isByeTransaction {
  return [((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_BYE];
}

- (AndroidGovNistJavaxSipStackMessageChannel *)getMessageChannel {
  return encapsulatedChannel_;
}

- (void)setBranchWithNSString:(NSString *)newBranch {
  JreStrongAssign(&branch_, newBranch);
}

- (NSString *)getBranch {
  if (self->branch_ == nil) {
    JreStrongAssign(&self->branch_, originalRequestBranch_);
  }
  return branch_;
}

- (NSString *)getMethod {
  return self->method_;
}

- (jlong)getCSeq {
  return self->originalRequestCSeqNumber_;
}

- (void)setStateWithInt:(jint)newState {
  if (currentState_ == AndroidJavaxSipTransactionState__COMPLETED) {
    if (newState != AndroidJavaxSipTransactionState__TERMINATED && newState != AndroidJavaxSipTransactionState__CONFIRMED) newState = AndroidJavaxSipTransactionState__COMPLETED;
  }
  if (currentState_ == AndroidJavaxSipTransactionState__CONFIRMED) {
    if (newState != AndroidJavaxSipTransactionState__TERMINATED) newState = AndroidJavaxSipTransactionState__CONFIRMED;
  }
  if (currentState_ != AndroidJavaxSipTransactionState__TERMINATED) {
    currentState_ = newState;
  }
  else newState = currentState_;
  if (newState == AndroidJavaxSipTransactionState__COMPLETED) {
    [self enableTimeoutTimerWithInt:AndroidGovNistJavaxSipStackSIPTransaction_TIMER_H];
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$IC@$$$Z", @"Transaction:setState ", newState, ' ', self, @" branchID = ", [self getBranch], @" isClient = ", ([AndroidGovNistJavaxSipStackSIPClientTransaction_class_() isInstance:self]))];
}

- (jint)getInternalState {
  return self->currentState_;
}

- (AndroidJavaxSipTransactionState *)getState {
  if (currentState_ < 0) {
    return nil;
  }
  return AndroidJavaxSipTransactionState_getObjectWithInt_(self->currentState_);
}

- (void)enableRetransmissionTimer {
  [self enableRetransmissionTimerWithInt:1];
}

- (void)enableRetransmissionTimerWithInt:(jint)tickCount {
  if ([self isInviteTransaction] && ([AndroidGovNistJavaxSipStackSIPClientTransaction_class_() isInstance:self])) {
    retransmissionTimerTicksLeft_ = tickCount;
  }
  else {
    retransmissionTimerTicksLeft_ = JavaLangMath_minWithInt_withInt_(tickCount, [self getTimerT2]);
  }
  retransmissionTimerLastTickCount_ = retransmissionTimerTicksLeft_;
}

- (void)disableRetransmissionTimer {
  retransmissionTimerTicksLeft_ = -1;
}

- (void)enableTimeoutTimerWithInt:(jint)tickCount {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$@$I$I", @"enableTimeoutTimer ", self, @" tickCount ", tickCount, @" currentTickCount = ", timeoutTimerTicksLeft_)];
  timeoutTimerTicksLeft_ = tickCount;
}

- (void)disableTimeoutTimer {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @"disableTimeoutTimer ", self)];
  timeoutTimerTicksLeft_ = -1;
}

- (void)fireTimer {
  if (timeoutTimerTicksLeft_ != -1) {
    if (--timeoutTimerTicksLeft_ == 0) {
      [self fireTimeoutTimer];
    }
  }
  if (retransmissionTimerTicksLeft_ != -1) {
    if (--retransmissionTimerTicksLeft_ == 0) {
      [self enableRetransmissionTimerWithInt:retransmissionTimerLastTickCount_ * 2];
      [self fireRetransmissionTimer];
    }
  }
}

- (jboolean)isTerminated {
  return currentState_ == AndroidJavaxSipTransactionState__TERMINATED;
}

- (NSString *)getHost {
  return [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(encapsulatedChannel_)) getHost];
}

- (NSString *)getKey {
  return [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(encapsulatedChannel_)) getKey];
}

- (jint)getPort {
  return [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(encapsulatedChannel_)) getPort];
}

- (AndroidGovNistJavaxSipStackSIPTransactionStack *)getSIPStack {
  return sipStack_;
}

- (NSString *)getPeerAddress {
  return [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(self->encapsulatedChannel_)) getPeerAddress];
}

- (jint)getPeerPort {
  return [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(self->encapsulatedChannel_)) getPeerPort];
}

- (jint)getPeerPacketSourcePort {
  return [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(self->encapsulatedChannel_)) getPeerPacketSourcePort];
}

- (JavaNetInetAddress *)getPeerPacketSourceAddress {
  return [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(self->encapsulatedChannel_)) getPeerPacketSourceAddress];
}

- (JavaNetInetAddress *)getPeerInetAddress {
  return [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(self->encapsulatedChannel_)) getPeerInetAddress];
}

- (NSString *)getPeerProtocol {
  return [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(self->encapsulatedChannel_)) getPeerProtocol];
}

- (NSString *)getTransport {
  return [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(encapsulatedChannel_)) getTransport];
}

- (jboolean)isReliable {
  return [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(encapsulatedChannel_)) isReliable];
}

- (AndroidGovNistJavaxSipHeaderVia *)getViaHeader {
  AndroidGovNistJavaxSipHeaderVia *channelViaHeader;
  channelViaHeader = [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(encapsulatedChannel_)) getViaHeader];
  @try {
    [((AndroidGovNistJavaxSipHeaderVia *) nil_chk(channelViaHeader)) setBranchWithNSString:branch_];
  }
  @catch (JavaTextParseException *ex) {
  }
  return channelViaHeader;
}

- (void)sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)messageToSend {
  @try {
    id<AndroidGovNistJavaxSipStackRawMessageChannel> channel = (id<AndroidGovNistJavaxSipStackRawMessageChannel>) cast_check(encapsulatedChannel_, AndroidGovNistJavaxSipStackRawMessageChannel_class_());
    {
      IOSObjectArray *a__ = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMessageProcessors];
      AndroidGovNistJavaxSipStackMessageProcessor * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      AndroidGovNistJavaxSipStackMessageProcessor * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        AndroidGovNistJavaxSipStackMessageProcessor *messageProcessor = *b__++;
        jboolean addrmatch = [((NSString *) nil_chk([((NSString *) nil_chk([((JavaNetInetAddress *) nil_chk([((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(messageProcessor)) getIpAddress])) getHostAddress])) description])) isEqual:[self getPeerAddress]];
        if (addrmatch && [messageProcessor getPort] == [self getPeerPort] && [((NSString *) nil_chk([messageProcessor getTransport])) java_equalsIgnoreCase:[self getPeerProtocol]]) {
          if ([channel isKindOfClass:[AndroidGovNistJavaxSipStackTCPMessageChannel class]]) {
            @try {
              id<JavaLangRunnable> processMessageTask = create_AndroidGovNistJavaxSipStackSIPTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(self, channel, messageToSend);
              [((id<JavaUtilConcurrentExecutor>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([self getSIPStack])) getSelfRoutingThreadpoolExecutor])) executeWithJavaLangRunnable:processMessageTask];
            }
            @catch (JavaLangException *e) {
              [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) errorWithNSString:@"Error passing message in self routing TCP" withNSException:e];
            }
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:@"Self routing message TCP"];
            return;
          }
          if ([channel isKindOfClass:[AndroidGovNistJavaxSipStackTLSMessageChannel class]]) {
            @try {
              id<JavaLangRunnable> processMessageTask = create_AndroidGovNistJavaxSipStackSIPTransactionImpl_2_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(self, channel, messageToSend);
              [((id<JavaUtilConcurrentExecutor>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([self getSIPStack])) getSelfRoutingThreadpoolExecutor])) executeWithJavaLangRunnable:processMessageTask];
            }
            @catch (JavaLangException *e) {
              [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) errorWithNSString:@"Error passing message in TLS self routing" withNSException:e];
            }
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:@"Self routing message TLS"];
            return;
          }
          if ([AndroidGovNistJavaxSipStackRawMessageChannel_class_() isInstance:channel]) {
            @try {
              id<JavaLangRunnable> processMessageTask = create_AndroidGovNistJavaxSipStackSIPTransactionImpl_3_initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(channel, messageToSend);
              [((id<JavaUtilConcurrentExecutor>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([self getSIPStack])) getSelfRoutingThreadpoolExecutor])) executeWithJavaLangRunnable:processMessageTask];
            }
            @catch (JavaLangException *e) {
              [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) errorWithNSString:@"Error passing message in self routing" withNSException:e];
            }
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:@"Self routing message"];
            return;
          }
        }
      }
    }
    [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(encapsulatedChannel_)) sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:messageToSend withJavaNetInetAddress:[self getPeerInetAddress] withInt:[self getPeerPort]];
  }
  @finally {
    [self startTransactionTimer];
  }
}

- (void)sendMessageWithByteArray:(IOSByteArray *)messageBytes
          withJavaNetInetAddress:(JavaNetInetAddress *)receiverAddress
                         withInt:(jint)receiverPort
                     withBoolean:(jboolean)retry {
  @throw create_JavaIoIOException_initWithNSString_(@"Cannot send unparsed message through Transaction Channel!");
}

- (void)addEventListenerWithAndroidGovNistJavaxSipStackSIPTransactionEventListener:(id<AndroidGovNistJavaxSipStackSIPTransactionEventListener>)newListener {
  [((id<JavaUtilSet>) nil_chk(eventListeners_)) addWithId:newListener];
}

- (void)removeEventListenerWithAndroidGovNistJavaxSipStackSIPTransactionEventListener:(id<AndroidGovNistJavaxSipStackSIPTransactionEventListener>)oldListener {
  [((id<JavaUtilSet>) nil_chk(eventListeners_)) removeWithId:oldListener];
}

- (void)raiseErrorEventWithInt:(jint)errorEventID {
  AndroidGovNistJavaxSipStackSIPTransactionErrorEvent *newErrorEvent;
  id<JavaUtilIterator> listenerIterator;
  id<AndroidGovNistJavaxSipStackSIPTransactionEventListener> nextListener;
  newErrorEvent = create_AndroidGovNistJavaxSipStackSIPTransactionErrorEvent_initWithAndroidGovNistJavaxSipStackSIPTransaction_withInt_(self, errorEventID);
  @synchronized(eventListeners_) {
    listenerIterator = [((id<JavaUtilSet>) nil_chk(eventListeners_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(listenerIterator)) hasNext]) {
      nextListener = [listenerIterator next];
      [((id<AndroidGovNistJavaxSipStackSIPTransactionEventListener>) nil_chk(nextListener)) transactionErrorEventWithAndroidGovNistJavaxSipStackSIPTransactionErrorEvent:newErrorEvent];
    }
  }
  if (errorEventID != AndroidGovNistJavaxSipStackSIPTransactionErrorEvent_TIMEOUT_RETRANSMIT) {
    [((id<JavaUtilSet>) nil_chk(eventListeners_)) clear];
    [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
    if ([AndroidGovNistJavaxSipStackSIPServerTransaction_class_() isInstance:self] && [self isByeTransaction] && [self getDialog] != nil) [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(((AndroidGovNistJavaxSipStackSIPDialog *) cast_chk([self getDialog], [AndroidGovNistJavaxSipStackSIPDialog class])))) setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE];
  }
}

- (jboolean)isServerTransaction {
  return [AndroidGovNistJavaxSipStackSIPServerTransaction_class_() isInstance:self];
}

- (id<AndroidJavaxSipDialog>)getDialog {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setDialogWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)sipDialog
                                             withNSString:(NSString *)dialogId {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)getRetransmitTimer {
  return AndroidGovNistJavaxSipStackSIPTransactionStack_BASE_TIMER_INTERVAL;
}

- (NSString *)getViaHost {
  return [((AndroidGovNistJavaxSipHeaderVia *) nil_chk([self getViaHeader])) getHost];
}

- (AndroidGovNistJavaxSipMessageSIPResponse *)getLastResponse {
  return self->lastResponse_;
}

- (id<AndroidJavaxSipMessageResponse>)getResponse {
  return self->lastResponse_;
}

- (NSString *)getTransactionId {
  return self->transactionId_;
}

- (NSUInteger)hash {
  if (self->transactionId_ == nil) return -1;
  else return ((jint) [self->transactionId_ hash]);
}

- (jint)getViaPort {
  return [((AndroidGovNistJavaxSipHeaderVia *) nil_chk([self getViaHeader])) getPort];
}

- (jboolean)doesCancelMatchTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)requestToTest {
  AndroidGovNistJavaxSipHeaderVia *topViaHeader;
  NSString *messageBranch;
  jboolean transactionMatches;
  transactionMatches = false;
  AndroidGovNistJavaxSipMessageSIPRequest *origRequest = [self getOriginalRequest];
  if (origRequest == nil || [((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_CANCEL]) return false;
  topViaHeader = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(requestToTest)) getTopmostVia];
  if (topViaHeader != nil) {
    messageBranch = [topViaHeader getBranch];
    if (messageBranch != nil) {
      if (![((NSString *) nil_chk([messageBranch lowercaseString])) hasPrefix:AndroidGovNistJavaxSipSIPConstants_BRANCH_MAGIC_COOKIE_LOWER_CASE]) {
        messageBranch = nil;
      }
    }
    if (messageBranch != nil && [self getBranch] != nil) {
      if ([((NSString *) nil_chk([self getBranch])) java_equalsIgnoreCase:messageBranch] && [((AndroidGovNistCoreHostPort *) nil_chk([topViaHeader getSentBy])) isEqual:[((AndroidGovNistJavaxSipHeaderVia *) nil_chk([origRequest getTopmostVia])) getSentBy]]) {
        transactionMatches = true;
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:@"returning  true"];
      }
    }
    else {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @"testing against ", origRequest)];
      if ([((id<AndroidJavaxSipAddressURI>) nil_chk([origRequest getRequestURI])) isEqual:[requestToTest getRequestURI]] && [((id<AndroidJavaxSipHeaderToHeader>) nil_chk([origRequest getTo])) isEqual:[requestToTest getTo]] && [((id<AndroidJavaxSipHeaderFromHeader>) nil_chk([origRequest getFrom])) isEqual:[requestToTest getFrom]] && [((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([origRequest getCallId])) getCallId])) isEqual:[((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([requestToTest getCallId])) getCallId]] && [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([origRequest getCSeq])) getSeqNumber] == [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([requestToTest getCSeq])) getSeqNumber] && [topViaHeader isEqual:[origRequest getTopmostVia]]) {
        transactionMatches = true;
      }
    }
  }
  return transactionMatches;
}

- (void)setRetransmitTimerWithInt:(jint)retransmitTimer {
  if (retransmitTimer <= 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Retransmit timer must be positive!");
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(self->transactionTimerStarted_)) get]) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Transaction timer is already started");
  baseTimerInterval_ = retransmitTimer;
}

- (void)close {
  [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(self->encapsulatedChannel_)) close];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @"Closing ", self->encapsulatedChannel_)];
}

- (jboolean)isSecure {
  return [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(encapsulatedChannel_)) isSecure];
}

- (AndroidGovNistJavaxSipStackMessageProcessor *)getMessageProcessor {
  return [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(self->encapsulatedChannel_)) getMessageProcessor];
}

- (void)setApplicationDataWithId:(id)applicationData {
  JreStrongAssign(&self->applicationData_, applicationData);
}

- (id)getApplicationData {
  return self->applicationData_;
}

- (void)setEncapsulatedChannelWithAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)messageChannel {
  JreStrongAssign(&self->encapsulatedChannel_, messageChannel);
  if ([AndroidGovNistJavaxSipStackSIPClientTransaction_class_() isInstance:self]) {
    [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(self->encapsulatedChannel_)) setEncapsulatedClientTransactionWithAndroidGovNistJavaxSipStackSIPClientTransaction:(id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(self, AndroidGovNistJavaxSipStackSIPClientTransaction_class_())];
  }
}

- (AndroidGovNistJavaxSipSipProviderImpl *)getSipProvider {
  return [((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk([((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk([self getMessageProcessor])) getListeningPoint])) getProvider];
}

- (void)raiseIOExceptionEvent {
  [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
  NSString *host = [self getPeerAddress];
  jint port = [self getPeerPort];
  NSString *transport = [self getTransport];
  AndroidJavaxSipIOExceptionEvent *exceptionEvent = create_AndroidJavaxSipIOExceptionEvent_initWithId_withNSString_withInt_withNSString_(self, host, port, transport);
  [((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk([self getSipProvider])) handleEventWithJavaUtilEventObject:exceptionEvent withAndroidGovNistJavaxSipStackSIPTransaction:self];
}

- (jboolean)acquireSem {
  jboolean retval = false;
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @"acquireSem [[[[", self)];
  if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_))->maxListenerResponseTime_ == -1) {
    retval = [((AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore *) nil_chk(self->semaphore_)) acquire];
  }
  else {
    retval = [((AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore *) nil_chk(self->semaphore_)) tryAcquire];
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$Z", @"acquireSem() returning : ", retval)];
  return retval;
}

- (void)releaseSem {
  @try {
    self->toListener_ = false;
    [self semRelease];
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) errorWithNSString:@"Unexpected exception releasing sem" withNSException:ex];
  }
}

- (void)semRelease {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @"semRelease ]]]]", self)];
  [((AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore *) nil_chk(self->semaphore_)) release__];
}

- (jboolean)passToListener {
  return toListener_;
}

- (void)setPassToListener {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:@"setPassToListener()"];
  self->toListener_ = true;
}

- (jboolean)testAndSetTransactionTerminatedEvent {
  @synchronized(self) {
    jboolean retval = !self->terminatedEventDelivered_;
    self->terminatedEventDelivered_ = true;
    return retval;
  }
}

- (NSString *)getCipherSuite {
  if ([[self getMessageChannel] isKindOfClass:[AndroidGovNistJavaxSipStackTLSMessageChannel class]]) {
    if ([((AndroidGovNistJavaxSipStackTLSMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackTLSMessageChannel *) cast_chk([self getMessageChannel], [AndroidGovNistJavaxSipStackTLSMessageChannel class])))) getHandshakeCompletedListener] == nil) return nil;
    else if ([((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackTLSMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackTLSMessageChannel *) cast_chk([self getMessageChannel], [AndroidGovNistJavaxSipStackTLSMessageChannel class])))) getHandshakeCompletedListener])) getHandshakeCompletedEvent] == nil) return nil;
    else return [((JavaxNetSslHandshakeCompletedEvent *) nil_chk([((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackTLSMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackTLSMessageChannel *) cast_chk([self getMessageChannel], [AndroidGovNistJavaxSipStackTLSMessageChannel class])))) getHandshakeCompletedListener])) getHandshakeCompletedEvent])) getCipherSuite];
  }
  else if ([[self getMessageChannel] isKindOfClass:[AndroidGovNistJavaxSipStackNioTlsMessageChannel class]]) {
    if ([((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk([self getMessageChannel], [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) getHandshakeCompletedListener] == nil) return nil;
    else return [((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk([self getMessageChannel], [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) getHandshakeCompletedListener])) getCipherSuite];
  }
  else @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Not a TLS channel");
}

- (IOSObjectArray *)getLocalCertificates {
  if ([[self getMessageChannel] isKindOfClass:[AndroidGovNistJavaxSipStackTLSMessageChannel class]]) {
    if ([((AndroidGovNistJavaxSipStackTLSMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackTLSMessageChannel *) cast_chk([self getMessageChannel], [AndroidGovNistJavaxSipStackTLSMessageChannel class])))) getHandshakeCompletedListener] == nil) return nil;
    else if ([((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackTLSMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackTLSMessageChannel *) cast_chk([self getMessageChannel], [AndroidGovNistJavaxSipStackTLSMessageChannel class])))) getHandshakeCompletedListener])) getHandshakeCompletedEvent] == nil) return nil;
    else return [((JavaxNetSslHandshakeCompletedEvent *) nil_chk([((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackTLSMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackTLSMessageChannel *) cast_chk([self getMessageChannel], [AndroidGovNistJavaxSipStackTLSMessageChannel class])))) getHandshakeCompletedListener])) getHandshakeCompletedEvent])) getLocalCertificates];
  }
  else if ([[self getMessageChannel] isKindOfClass:[AndroidGovNistJavaxSipStackNioTlsMessageChannel class]]) {
    if ([((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk([self getMessageChannel], [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) getHandshakeCompletedListener] == nil) return nil;
    else return [((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk([self getMessageChannel], [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) getHandshakeCompletedListener])) getLocalCertificates];
  }
  else @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Not a TLS channel");
}

- (IOSObjectArray *)getPeerCertificates {
  if ([[self getMessageChannel] isKindOfClass:[AndroidGovNistJavaxSipStackTLSMessageChannel class]]) {
    if ([((AndroidGovNistJavaxSipStackTLSMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackTLSMessageChannel *) cast_chk([self getMessageChannel], [AndroidGovNistJavaxSipStackTLSMessageChannel class])))) getHandshakeCompletedListener] == nil) return nil;
    else if ([((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackTLSMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackTLSMessageChannel *) cast_chk([self getMessageChannel], [AndroidGovNistJavaxSipStackTLSMessageChannel class])))) getHandshakeCompletedListener])) getHandshakeCompletedEvent] == nil) return nil;
    else return [((JavaxNetSslHandshakeCompletedEvent *) nil_chk([((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackTLSMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackTLSMessageChannel *) cast_chk([self getMessageChannel], [AndroidGovNistJavaxSipStackTLSMessageChannel class])))) getHandshakeCompletedListener])) getHandshakeCompletedEvent])) getPeerCertificates];
  }
  else if ([[self getMessageChannel] isKindOfClass:[AndroidGovNistJavaxSipStackNioTlsMessageChannel class]]) {
    if ([((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk([self getMessageChannel], [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) getHandshakeCompletedListener] == nil) return nil;
    else return [((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk([self getMessageChannel], [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) getHandshakeCompletedListener])) getPeerCertificates];
  }
  else @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Not a TLS channel");
}

- (id<JavaUtilList>)extractCertIdentities {
  if ([[self getMessageChannel] isKindOfClass:[AndroidGovNistJavaxSipStackTLSMessageChannel class]] || [[self getMessageChannel] isKindOfClass:[AndroidGovNistJavaxSipStackNioTlsMessageChannel class]]) {
    id<JavaUtilList> certIdentities = create_JavaUtilArrayList_init();
    IOSObjectArray *certs = [self getPeerCertificates];
    if (certs == nil) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:@"No certificates available"];
      return certIdentities;
    }
    {
      IOSObjectArray *a__ = certs;
      JavaSecurityCertCertificate * const *b__ = a__->buffer_;
      JavaSecurityCertCertificate * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaSecurityCertCertificate *cert = *b__++;
        JavaSecurityCertX509Certificate *x509cert = (JavaSecurityCertX509Certificate *) cast_chk(cert, [JavaSecurityCertX509Certificate class]);
        id<JavaUtilCollection> subjAltNames = nil;
        @try {
          subjAltNames = [((JavaSecurityCertX509Certificate *) nil_chk(x509cert)) getSubjectAlternativeNames];
        }
        @catch (JavaSecurityCertCertificateParsingException *ex) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) errorWithNSString:@"Error parsing TLS certificate" withNSException:ex];
        }
        JavaLangInteger *dnsNameType = JavaLangInteger_valueOfWithInt_(2);
        JavaLangInteger *uriNameType = JavaLangInteger_valueOfWithInt_(6);
        if (subjAltNames != nil) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @"found subjAltNames: ", subjAltNames)];
          for (id<JavaUtilList> __strong altName in subjAltNames) {
            if ([nil_chk([((id<JavaUtilList>) nil_chk(altName)) getWithInt:0]) isEqual:uriNameType]) {
              id<AndroidJavaxSipAddressSipURI> altNameUri;
              @try {
                altNameUri = [create_AndroidGovNistJavaxSipAddressAddressFactoryImpl_init() createSipURIWithNSString:(NSString *) cast_chk([altName getWithInt:1], [NSString class])];
                if (![@"sip" isEqual:[((id<AndroidJavaxSipAddressSipURI>) nil_chk(altNameUri)) getScheme]]) continue;
                if ([altNameUri getUser] != nil) continue;
                NSString *altHostName = [altNameUri getHost];
                [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$@$$", @"found uri ", [altName getWithInt:1], @", hostName ", altHostName)];
                [certIdentities addWithId:altHostName];
              }
              @catch (JavaTextParseException *e) {
                [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) errorWithNSString:JreStrcat("$@", @"certificate contains invalid uri: ", [altName getWithInt:1])];
              }
            }
          }
          if ([certIdentities isEmpty]) {
            for (id<JavaUtilList> __strong altName in subjAltNames) {
              if ([nil_chk([((id<JavaUtilList>) nil_chk(altName)) getWithInt:0]) isEqual:dnsNameType]) {
                [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @"found dns ", [altName getWithInt:1])];
                [certIdentities addWithId:[nil_chk([altName getWithInt:1]) description]];
              }
            }
          }
        }
        else {
          NSString *dname = [((id<JavaSecurityPrincipal>) nil_chk([x509cert getSubjectDN])) getName];
          NSString *cname = @"";
          @try {
            JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_EXTRACT_CN)) matcherWithJavaLangCharSequence:dname];
            if ([((JavaUtilRegexMatcher *) nil_chk(matcher)) matches]) {
              cname = [matcher groupWithInt:1];
              [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$$$$", @"found CN: ", cname, @" from DN: ", dname)];
              [certIdentities addWithId:cname];
            }
          }
          @catch (JavaLangException *ex) {
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) errorWithNSString:@"exception while extracting CN" withNSException:ex];
          }
        }
      }
    }
    return certIdentities;
  }
  else @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Not a TLS channel");
}

- (jboolean)isMessagePartOfTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)messageToTest {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (AndroidGovNistJavaxSipReleaseReferencesStrategy *)getReleaseReferencesStrategy {
  return releaseReferencesStrategy_;
}

- (void)setReleaseReferencesStrategyWithAndroidGovNistJavaxSipReleaseReferencesStrategy:(AndroidGovNistJavaxSipReleaseReferencesStrategy *)releaseReferencesStrategy {
  JreStrongAssign(&self->releaseReferencesStrategy_, releaseReferencesStrategy);
}

- (jint)getTimerD {
  return timerD_;
}

- (jint)getTimerT2 {
  return T2_;
}

- (jint)getTimerT4 {
  return T4_;
}

- (void)setTimerDWithInt:(jint)interval {
  if (interval < 32000) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"To be RFC 3261 compliant, the value of Timer D should be at least 32s");
  }
  timerD_ = interval / baseTimerInterval_;
}

- (void)setTimerT2WithInt:(jint)interval {
  T2_ = interval / baseTimerInterval_;
}

- (void)setTimerT4WithInt:(jint)interval {
  T4_ = interval / baseTimerInterval_;
  timerI_ = T4_;
  timerK_ = T4_;
}

- (jint)getBaseTimerInterval {
  return self->baseTimerInterval_;
}

- (jint)getT4 {
  return self->T4_;
}

- (jint)getT2 {
  return self->T2_;
}

- (jint)getTimerI {
  return self->timerI_;
}

- (jint)getTimerK {
  return self->timerK_;
}

- (void)setForkIdWithNSString:(NSString *)forkId {
  JreStrongAssign(&self->forkId_, forkId);
}

- (NSString *)getForkId {
  return forkId_;
}

- (void)scheduleMaxTxLifeTimeTimer {
  if (maxTxLifeTimeListener_ == nil && [((NSString *) nil_chk([self getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_INVITE] && [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMaxTxLifetimeInvite] > 0) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$@$$$@", @"Scheduling MaxTxLifeTimeListener for tx ", self, @" , tx id ", [self getTransactionId], @" , state ", [self getState])];
    JreStrongAssignAndConsume(&maxTxLifeTimeListener_, new_AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(self));
    [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:maxTxLifeTimeListener_ withLong:[((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMaxTxLifetimeInvite] * 1000];
  }
  if (maxTxLifeTimeListener_ == nil && ![((NSString *) nil_chk([self getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_INVITE] && [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMaxTxLifetimeNonInvite] > 0) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$@$$$@", @"Scheduling MaxTxLifeTimeListener for tx ", self, @" , tx id ", [self getTransactionId], @" , state ", [self getState])];
    JreStrongAssignAndConsume(&maxTxLifeTimeListener_, new_AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(self));
    [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:maxTxLifeTimeListener_ withLong:[((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMaxTxLifetimeNonInvite] * 1000];
  }
}

- (void)cancelMaxTxLifeTimeTimer {
  if (maxTxLifeTimeListener_ != nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$@$$$@", @"Cancelling MaxTxLifeTimeListener for tx ", self, @" , tx id ", [self getTransactionId], @" , state ", [self getState])];
    [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:maxTxLifeTimeListener_];
    JreStrongAssign(&maxTxLifeTimeListener_, nil);
  }
}

- (NSString *)getMergeId {
  if (mergeId_ == nil) {
    return [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([self getRequest], [AndroidGovNistJavaxSipMessageSIPRequest class])))) getMergeId];
  }
  return mergeId_;
}

- (jlong)getAuditTag {
  return auditTag_;
}

- (void)setAuditTagWithLong:(jlong)auditTag {
  self->auditTag_ = auditTag;
}

- (jboolean)isTransactionMapped {
  return self->isMapped_;
}

- (void)setTransactionMappedWithBoolean:(jboolean)transactionMapped {
  isMapped_ = transactionMapped;
}

- (void)setCollectionTimeWithInt:(jint)collectionTime {
  self->collectionTime_ = collectionTime;
}

- (void)dealloc {
  RELEASE_(applicationData_);
  RELEASE_(lastResponse_);
  RELEASE_(semaphore_);
  RELEASE_(transactionId_);
  RELEASE_(sipStack_);
  RELEASE_(originalRequest_);
  RELEASE_(originalRequestBytes_);
  RELEASE_(originalRequestBranch_);
  RELEASE_(encapsulatedChannel_);
  RELEASE_(transactionTimerStarted_);
  RELEASE_(branch_);
  RELEASE_(method_);
  RELEASE_(eventListeners_);
  RELEASE_(releaseReferencesStrategy_);
  RELEASE_(inviteTransaction_);
  RELEASE_(dialogCreatingTransaction_);
  RELEASE_(forkId_);
  RELEASE_(mergeId_);
  RELEASE_(expiresTimerTask_);
  RELEASE_(maxTxLifeTimeListener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipMessageSIPRequest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageRequest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageChannel;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipTransactionState;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPTransactionStack;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderVia;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 11, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 12, 11, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipDialog;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipMessageSIPResponse;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageResponse;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 19, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageProcessor;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipSipProviderImpl;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 26, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertCertificate;", 0x1, -1, -1, 26, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertCertificate;", 0x1, -1, -1, 27, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, 27, 28, -1, -1 },
    { NULL, "Z", 0x401, 29, 10, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipReleaseReferencesStrategy;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 37, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getBranchId);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistJavaxSipStackMessageChannel:);
  methods[2].selector = @selector(cleanUp);
  methods[3].selector = @selector(setOriginalRequestWithAndroidGovNistJavaxSipMessageSIPRequest:);
  methods[4].selector = @selector(getOriginalRequest);
  methods[5].selector = @selector(getRequest);
  methods[6].selector = @selector(isDialogCreatingTransaction);
  methods[7].selector = @selector(isInviteTransaction);
  methods[8].selector = @selector(isCancelTransaction);
  methods[9].selector = @selector(isByeTransaction);
  methods[10].selector = @selector(getMessageChannel);
  methods[11].selector = @selector(setBranchWithNSString:);
  methods[12].selector = @selector(getBranch);
  methods[13].selector = @selector(getMethod);
  methods[14].selector = @selector(getCSeq);
  methods[15].selector = @selector(setStateWithInt:);
  methods[16].selector = @selector(getInternalState);
  methods[17].selector = @selector(getState);
  methods[18].selector = @selector(enableRetransmissionTimer);
  methods[19].selector = @selector(enableRetransmissionTimerWithInt:);
  methods[20].selector = @selector(disableRetransmissionTimer);
  methods[21].selector = @selector(enableTimeoutTimerWithInt:);
  methods[22].selector = @selector(disableTimeoutTimer);
  methods[23].selector = @selector(fireTimer);
  methods[24].selector = @selector(isTerminated);
  methods[25].selector = @selector(getHost);
  methods[26].selector = @selector(getKey);
  methods[27].selector = @selector(getPort);
  methods[28].selector = @selector(getSIPStack);
  methods[29].selector = @selector(getPeerAddress);
  methods[30].selector = @selector(getPeerPort);
  methods[31].selector = @selector(getPeerPacketSourcePort);
  methods[32].selector = @selector(getPeerPacketSourceAddress);
  methods[33].selector = @selector(getPeerInetAddress);
  methods[34].selector = @selector(getPeerProtocol);
  methods[35].selector = @selector(getTransport);
  methods[36].selector = @selector(isReliable);
  methods[37].selector = @selector(getViaHeader);
  methods[38].selector = @selector(sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[39].selector = @selector(sendMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:);
  methods[40].selector = @selector(addEventListenerWithAndroidGovNistJavaxSipStackSIPTransactionEventListener:);
  methods[41].selector = @selector(removeEventListenerWithAndroidGovNistJavaxSipStackSIPTransactionEventListener:);
  methods[42].selector = @selector(raiseErrorEventWithInt:);
  methods[43].selector = @selector(isServerTransaction);
  methods[44].selector = @selector(getDialog);
  methods[45].selector = @selector(setDialogWithAndroidGovNistJavaxSipStackSIPDialog:withNSString:);
  methods[46].selector = @selector(getRetransmitTimer);
  methods[47].selector = @selector(getViaHost);
  methods[48].selector = @selector(getLastResponse);
  methods[49].selector = @selector(getResponse);
  methods[50].selector = @selector(getTransactionId);
  methods[51].selector = @selector(hash);
  methods[52].selector = @selector(getViaPort);
  methods[53].selector = @selector(doesCancelMatchTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:);
  methods[54].selector = @selector(setRetransmitTimerWithInt:);
  methods[55].selector = @selector(close);
  methods[56].selector = @selector(isSecure);
  methods[57].selector = @selector(getMessageProcessor);
  methods[58].selector = @selector(setApplicationDataWithId:);
  methods[59].selector = @selector(getApplicationData);
  methods[60].selector = @selector(setEncapsulatedChannelWithAndroidGovNistJavaxSipStackMessageChannel:);
  methods[61].selector = @selector(getSipProvider);
  methods[62].selector = @selector(raiseIOExceptionEvent);
  methods[63].selector = @selector(acquireSem);
  methods[64].selector = @selector(releaseSem);
  methods[65].selector = @selector(semRelease);
  methods[66].selector = @selector(passToListener);
  methods[67].selector = @selector(setPassToListener);
  methods[68].selector = @selector(testAndSetTransactionTerminatedEvent);
  methods[69].selector = @selector(getCipherSuite);
  methods[70].selector = @selector(getLocalCertificates);
  methods[71].selector = @selector(getPeerCertificates);
  methods[72].selector = @selector(extractCertIdentities);
  methods[73].selector = @selector(isMessagePartOfTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[74].selector = @selector(getReleaseReferencesStrategy);
  methods[75].selector = @selector(setReleaseReferencesStrategyWithAndroidGovNistJavaxSipReleaseReferencesStrategy:);
  methods[76].selector = @selector(getTimerD);
  methods[77].selector = @selector(getTimerT2);
  methods[78].selector = @selector(getTimerT4);
  methods[79].selector = @selector(setTimerDWithInt:);
  methods[80].selector = @selector(setTimerT2WithInt:);
  methods[81].selector = @selector(setTimerT4WithInt:);
  methods[82].selector = @selector(getBaseTimerInterval);
  methods[83].selector = @selector(getT4);
  methods[84].selector = @selector(getT2);
  methods[85].selector = @selector(getTimerI);
  methods[86].selector = @selector(getTimerK);
  methods[87].selector = @selector(setForkIdWithNSString:);
  methods[88].selector = @selector(getForkId);
  methods[89].selector = @selector(scheduleMaxTxLifeTimeTimer);
  methods[90].selector = @selector(cancelMaxTxLifeTimeTimer);
  methods[91].selector = @selector(getMergeId);
  methods[92].selector = @selector(getAuditTag);
  methods[93].selector = @selector(setAuditTagWithLong:);
  methods[94].selector = @selector(isTransactionMapped);
  methods[95].selector = @selector(setTransactionMappedWithBoolean:);
  methods[96].selector = @selector(setCollectionTimeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 41, -1, -1 },
    { "EXTRACT_CN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 42, -1, -1 },
    { "toListener_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "baseTimerInterval_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "T4_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "T2_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "timerI_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "timerK_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "timerD_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "applicationData_", "LNSObject;", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "lastResponse_", "LAndroidGovNistJavaxSipMessageSIPResponse;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "isMapped_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "semaphore_", "LAndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "transactionId_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "auditTag_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sipStack_", "LAndroidGovNistJavaxSipStackSIPTransactionStack;", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "originalRequest_", "LAndroidGovNistJavaxSipMessageSIPRequest;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "originalRequestBytes_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "originalRequestCSeqNumber_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "originalRequestBranch_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "originalRequestHasPort_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "encapsulatedChannel_", "LAndroidGovNistJavaxSipStackMessageChannel;", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "transactionTimerStarted_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "branch_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "method_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "retransmissionTimerLastTickCount_", "I", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "retransmissionTimerTicksLeft_", "I", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "timeoutTimerTicksLeft_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "eventListeners_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x82, -1, -1, 43, -1 },
    { "collectionTime_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "terminatedEventDelivered_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "releaseReferencesStrategy_", "LAndroidGovNistJavaxSipReleaseReferencesStrategy;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inviteTransaction_", "LJavaLangBoolean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dialogCreatingTransaction_", "LJavaLangBoolean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forkId_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mergeId_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "expiresTimerTask_", "LAndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "maxTxLifeTimeListener_", "LAndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPTransactionStack;LAndroidGovNistJavaxSipStackMessageChannel;", "setOriginalRequest", "LAndroidGovNistJavaxSipMessageSIPRequest;", "setBranch", "LNSString;", "setState", "I", "enableRetransmissionTimer", "enableTimeoutTimer", "sendMessage", "LAndroidGovNistJavaxSipMessageSIPMessage;", "LJavaIoIOException;", "[BLJavaNetInetAddress;IZ", "addEventListener", "LAndroidGovNistJavaxSipStackSIPTransactionEventListener;", "removeEventListener", "raiseErrorEvent", "setDialog", "LAndroidGovNistJavaxSipStackSIPDialog;LNSString;", "hashCode", "doesCancelMatchTransaction", "setRetransmitTimer", "setApplicationData", "LNSObject;", "setEncapsulatedChannel", "LAndroidGovNistJavaxSipStackMessageChannel;", "LJavaLangUnsupportedOperationException;", "LJavaxNetSslSSLPeerUnverifiedException;", "()Ljava/util/List<Ljava/lang/String;>;", "isMessagePartOfTransaction", "setReleaseReferencesStrategy", "LAndroidGovNistJavaxSipReleaseReferencesStrategy;", "setTimerD", "setTimerT2", "setTimerT4", "setForkId", "setAuditTag", "J", "setTransactionMapped", "Z", "setCollectionTime", &AndroidGovNistJavaxSipStackSIPTransactionImpl_logger, &AndroidGovNistJavaxSipStackSIPTransactionImpl_EXTRACT_CN, "Ljava/util/Set<Landroid/gov/nist/javax/sip/stack/SIPTransactionEventListener;>;", "LAndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore;LAndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer;LAndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPTransactionImpl = { "SIPTransactionImpl", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x401, 97, 39, -1, 44, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPTransactionImpl;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackSIPTransactionImpl class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackSIPTransactionImpl_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackSIPTransaction_class_()));
    JreStrongAssign(&AndroidGovNistJavaxSipStackSIPTransactionImpl_EXTRACT_CN, JavaUtilRegexPattern_compileWithNSString_(@".*CN\\s*=\\s*([\\w*\\.\\-_]+).*"));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackSIPTransactionImpl)
  }
}

@end

void AndroidGovNistJavaxSipStackSIPTransactionImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_(AndroidGovNistJavaxSipStackSIPTransactionImpl *self, AndroidGovNistJavaxSipStackSIPTransactionStack *newParentStack, AndroidGovNistJavaxSipStackMessageChannel *newEncapsulatedChannel) {
  NSObject_init(self);
  self->baseTimerInterval_ = AndroidGovNistJavaxSipStackSIPTransactionStack_BASE_TIMER_INTERVAL;
  self->T4_ = 5000 / self->baseTimerInterval_;
  self->T2_ = 4000 / self->baseTimerInterval_;
  self->timerI_ = self->T4_;
  self->timerK_ = self->T4_;
  self->timerD_ = 32000 / self->baseTimerInterval_;
  self->auditTag_ = 0;
  JreStrongAssignAndConsume(&self->transactionTimerStarted_, new_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false));
  self->currentState_ = -1;
  JreStrongAssign(&self->inviteTransaction_, nil);
  JreStrongAssign(&self->dialogCreatingTransaction_, nil);
  JreStrongAssign(&self->forkId_, nil);
  JreStrongAssign(&self->mergeId_, nil);
  JreStrongAssign(&self->sipStack_, newParentStack);
  JreStrongAssignAndConsume(&self->semaphore_, new_AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(self));
  JreStrongAssign(&self->encapsulatedChannel_, newEncapsulatedChannel);
  if ([self isReliable]) {
    ((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(self->encapsulatedChannel_))->useCount_++;
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionImpl_logger)) debugWithNSString:JreStrcat("$@CI", @"use count for encapsulated channel", self, ' ', self->encapsulatedChannel_->useCount_)];
  }
  self->currentState_ = -1;
  [self disableRetransmissionTimer];
  [self disableTimeoutTimer];
  JreStrongAssignAndConsume(&self->eventListeners_, new_JavaUtilConcurrentCopyOnWriteArraySet_init());
  [self addEventListenerWithAndroidGovNistJavaxSipStackSIPTransactionEventListener:newParentStack];
  JreStrongAssign(&self->releaseReferencesStrategy_, [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getReleaseReferencesStrategy]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPTransactionImpl)

@implementation AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionImpl:(AndroidGovNistJavaxSipStackSIPTransactionImpl *)outer$ {
  AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(self, outer$);
  return self;
}

- (jboolean)acquire {
  @try {
    if ([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(((AndroidGovNistJavaxSipSipStackImpl *) cast_chk(this$0_->sipStack_, [AndroidGovNistJavaxSipSipStackImpl class])))) isReEntrantListener]) {
      [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
    }
    else {
      [((JavaUtilConcurrentSemaphore *) nil_chk(sem_)) acquire];
    }
    return true;
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPTransactionImpl, logger))) errorWithNSString:@"Unexpected exception acquiring sem" withNSException:ex];
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
    return false;
  }
}

- (jboolean)tryAcquire {
  @try {
    if ([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(((AndroidGovNistJavaxSipSipStackImpl *) cast_chk(this$0_->sipStack_, [AndroidGovNistJavaxSipSipStackImpl class])))) isReEntrantListener]) {
      return [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) tryLockWithLong:((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_))->maxListenerResponseTime_ withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    }
    else {
      return [((JavaUtilConcurrentSemaphore *) nil_chk(sem_)) tryAcquireWithLong:((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_))->maxListenerResponseTime_ withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    }
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPTransactionImpl, logger))) errorWithNSString:@"Unexpected exception trying acquiring sem" withNSException:ex];
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
    return false;
  }
}

- (void)release__ {
  @try {
    if ([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(((AndroidGovNistJavaxSipSipStackImpl *) cast_chk(this$0_->sipStack_, [AndroidGovNistJavaxSipSipStackImpl class])))) isReEntrantListener]) {
      if ([((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) isHeldByCurrentThread]) {
        [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) unlock];
      }
    }
    else {
      [((JavaUtilConcurrentSemaphore *) nil_chk(sem_)) release__];
    }
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPTransactionImpl, logger))) errorWithNSString:@"Unexpected exception releasing sem" withNSException:ex];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(sem_);
  RELEASE_(lock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionImpl:);
  methods[1].selector = @selector(acquire);
  methods[2].selector = @selector(tryAcquire);
  methods[3].selector = @selector(release__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPTransactionImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "sem_", "LJavaUtilConcurrentSemaphore;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lock_", "LJavaUtilConcurrentLocksReentrantLock;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "release", "LAndroidGovNistJavaxSipStackSIPTransactionImpl;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore = { "TransactionSemaphore", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 4, 4, 1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore;
}

@end

void AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore *self, AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->sem_, nil);
  JreStrongAssign(&self->lock_, nil);
  if ([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(((AndroidGovNistJavaxSipSipStackImpl *) cast_chk(outer$->sipStack_, [AndroidGovNistJavaxSipSipStackImpl class])))) isReEntrantListener]) {
    JreStrongAssignAndConsume(&self->lock_, new_JavaUtilConcurrentLocksReentrantLock_init());
  }
  else {
    JreStrongAssignAndConsume(&self->sem_, new_JavaUtilConcurrentSemaphore_initWithInt_withBoolean_(1, true));
  }
}

AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore *new_AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore, initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_, outer$)
}

AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore *create_AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore, initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPTransactionImpl_TransactionSemaphore)

@implementation AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionImpl:(AndroidGovNistJavaxSipStackSIPTransactionImpl *)outer$ {
  AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(self, outer$);
  return self;
}

- (void)runTask {
  [this$0_ cleanUp];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionImpl:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPTransactionImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPTransactionImpl;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer = { "LingerTimer", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 2, 1, 0, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer;
}

@end

void AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer *self, AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
  id<AndroidGovNistJavaxSipStackSIPTransaction> sipTransaction = outer$;
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPTransactionImpl, logger))) debugWithNSString:JreStrcat("$$", @"LingerTimer : ", [sipTransaction getTransactionId])];
}

AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer *new_AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer, initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_, outer$)
}

AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer *create_AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer, initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer)

@implementation AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionImpl:(AndroidGovNistJavaxSipStackSIPTransactionImpl *)outer$ {
  AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(self, outer$);
  return self;
}

- (void)runTask {
  @try {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPTransactionImpl, logger))) debugWithNSString:JreStrcat("$@$$$@", @"Fired MaxTxLifeTimeListener for tx ", sipTransaction_, @" , tx id ", [((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk(sipTransaction_)) getTransactionId], @" , state ", [((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk(sipTransaction_)) getState])];
    [this$0_ raiseErrorEventWithInt:AndroidGovNistJavaxSipStackSIPTransactionErrorEvent_TIMEOUT_ERROR];
    AndroidGovNistJavaxSipStackSIPStackTimerTask *myTimer = create_AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(this$0_);
    if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_)) getConnectionLingerTimer] != 0) {
      [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_)) getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:myTimer withLong:[((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_)) getConnectionLingerTimer] * 1000];
    }
    else {
      [myTimer runTask];
    }
    JreStrongAssign(&this$0_->maxTxLifeTimeListener_, nil);
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPTransactionImpl, logger))) errorWithNSString:@"unexpected exception" withNSException:ex];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(sipTransaction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionImpl:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPTransactionImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "sipTransaction_", "LAndroidGovNistJavaxSipStackSIPTransaction;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPTransactionImpl;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener = { "MaxTxLifeTimeListener", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 2, 2, 0, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener;
}

@end

void AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener *self, AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
  JreStrongAssign(&self->sipTransaction_, outer$);
}

AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener *new_AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener, initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_, outer$)
}

AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener *create_AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener, initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPTransactionImpl_MaxTxLifeTimeListener)

@implementation AndroidGovNistJavaxSipStackSIPTransactionImpl_1

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionImpl:(AndroidGovNistJavaxSipStackSIPTransactionImpl *)outer$
                     withAndroidGovNistJavaxSipStackRawMessageChannel:(id<AndroidGovNistJavaxSipStackRawMessageChannel>)capture$0
                          withAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)capture$1 {
  AndroidGovNistJavaxSipStackSIPTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)run {
  @try {
    [((AndroidGovNistJavaxSipStackTCPMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackTCPMessageChannel *) cast_chk(val$channel_, [AndroidGovNistJavaxSipStackTCPMessageChannel class])))) processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *) cast_chk([((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(val$messageToSend_)) java_clone], [AndroidGovNistJavaxSipMessageSIPMessage class]) withJavaNetInetAddress:[this$0_ getPeerInetAddress]];
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPTransactionImpl, logger))) errorWithNSString:@"Error self routing TCP message cause by: " withNSException:ex];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$channel_);
  RELEASE_(val$messageToSend_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionImpl:withAndroidGovNistJavaxSipStackRawMessageChannel:withAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPTransactionImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$channel_", "LAndroidGovNistJavaxSipStackRawMessageChannel;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$messageToSend_", "LAndroidGovNistJavaxSipMessageSIPMessage;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPTransactionImpl;", "sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPTransactionImpl_1 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8008, 2, 3, 0, -1, 1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPTransactionImpl_1;
}

@end

void AndroidGovNistJavaxSipStackSIPTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackSIPTransactionImpl_1 *self, AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$, id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$channel_, capture$0);
  JreStrongAssign(&self->val$messageToSend_, capture$1);
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackSIPTransactionImpl_1 *new_AndroidGovNistJavaxSipStackSIPTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$, id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPTransactionImpl_1, initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_, outer$, capture$0, capture$1)
}

AndroidGovNistJavaxSipStackSIPTransactionImpl_1 *create_AndroidGovNistJavaxSipStackSIPTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$, id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPTransactionImpl_1, initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_, outer$, capture$0, capture$1)
}

@implementation AndroidGovNistJavaxSipStackSIPTransactionImpl_2

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionImpl:(AndroidGovNistJavaxSipStackSIPTransactionImpl *)outer$
                     withAndroidGovNistJavaxSipStackRawMessageChannel:(id<AndroidGovNistJavaxSipStackRawMessageChannel>)capture$0
                          withAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)capture$1 {
  AndroidGovNistJavaxSipStackSIPTransactionImpl_2_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)run {
  @try {
    [((AndroidGovNistJavaxSipStackTLSMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackTLSMessageChannel *) cast_chk(val$channel_, [AndroidGovNistJavaxSipStackTLSMessageChannel class])))) processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *) cast_chk([((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(val$messageToSend_)) java_clone], [AndroidGovNistJavaxSipMessageSIPMessage class]) withJavaNetInetAddress:[this$0_ getPeerInetAddress]];
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPTransactionImpl, logger))) errorWithNSString:@"Error self routing TLS message cause by: " withNSException:ex];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$channel_);
  RELEASE_(val$messageToSend_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionImpl:withAndroidGovNistJavaxSipStackRawMessageChannel:withAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPTransactionImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$channel_", "LAndroidGovNistJavaxSipStackRawMessageChannel;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$messageToSend_", "LAndroidGovNistJavaxSipMessageSIPMessage;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPTransactionImpl;", "sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPTransactionImpl_2 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8008, 2, 3, 0, -1, 1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPTransactionImpl_2;
}

@end

void AndroidGovNistJavaxSipStackSIPTransactionImpl_2_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackSIPTransactionImpl_2 *self, AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$, id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$channel_, capture$0);
  JreStrongAssign(&self->val$messageToSend_, capture$1);
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackSIPTransactionImpl_2 *new_AndroidGovNistJavaxSipStackSIPTransactionImpl_2_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$, id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPTransactionImpl_2, initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_, outer$, capture$0, capture$1)
}

AndroidGovNistJavaxSipStackSIPTransactionImpl_2 *create_AndroidGovNistJavaxSipStackSIPTransactionImpl_2_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackSIPTransactionImpl *outer$, id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPTransactionImpl_2, initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_withAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_, outer$, capture$0, capture$1)
}

@implementation AndroidGovNistJavaxSipStackSIPTransactionImpl_3

- (instancetype)initWithAndroidGovNistJavaxSipStackRawMessageChannel:(id<AndroidGovNistJavaxSipStackRawMessageChannel>)capture$0
                         withAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)capture$1 {
  AndroidGovNistJavaxSipStackSIPTransactionImpl_3_initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(self, capture$0, capture$1);
  return self;
}

- (void)run {
  @try {
    [((id<AndroidGovNistJavaxSipStackRawMessageChannel>) nil_chk((val$channel_))) processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *) cast_chk([((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(val$messageToSend_)) java_clone], [AndroidGovNistJavaxSipMessageSIPMessage class])];
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPTransactionImpl, logger))) errorWithNSString:@"Error self routing message cause by: " withNSException:ex];
  }
}

- (void)dealloc {
  RELEASE_(val$channel_);
  RELEASE_(val$messageToSend_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackRawMessageChannel:withAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$channel_", "LAndroidGovNistJavaxSipStackRawMessageChannel;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$messageToSend_", "LAndroidGovNistJavaxSipMessageSIPMessage;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPTransactionImpl;", "sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPTransactionImpl_3 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8008, 2, 2, 0, -1, 1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPTransactionImpl_3;
}

@end

void AndroidGovNistJavaxSipStackSIPTransactionImpl_3_initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackSIPTransactionImpl_3 *self, id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1) {
  JreStrongAssign(&self->val$channel_, capture$0);
  JreStrongAssign(&self->val$messageToSend_, capture$1);
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackSIPTransactionImpl_3 *new_AndroidGovNistJavaxSipStackSIPTransactionImpl_3_initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPTransactionImpl_3, initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_, capture$0, capture$1)
}

AndroidGovNistJavaxSipStackSIPTransactionImpl_3 *create_AndroidGovNistJavaxSipStackSIPTransactionImpl_3_initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_(id<AndroidGovNistJavaxSipStackRawMessageChannel> capture$0, AndroidGovNistJavaxSipMessageSIPMessage *capture$1) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPTransactionImpl_3, initWithAndroidGovNistJavaxSipStackRawMessageChannel_withAndroidGovNistJavaxSipMessageSIPMessage_, capture$0, capture$1)
}
