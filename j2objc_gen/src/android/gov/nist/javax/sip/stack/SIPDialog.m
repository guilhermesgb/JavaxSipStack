//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/SIPDialog.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/core/NameValueList.h"
#include "android/gov/nist/javax/sip/ListeningPointImpl.h"
#include "android/gov/nist/javax/sip/ReleaseReferencesStrategy.h"
#include "android/gov/nist/javax/sip/SipListenerExt.h"
#include "android/gov/nist/javax/sip/SipProviderImpl.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/Utils.h"
#include "android/gov/nist/javax/sip/address/AddressImpl.h"
#include "android/gov/nist/javax/sip/address/SipUri.h"
#include "android/gov/nist/javax/sip/header/Authorization.h"
#include "android/gov/nist/javax/sip/header/CSeq.h"
#include "android/gov/nist/javax/sip/header/Contact.h"
#include "android/gov/nist/javax/sip/header/ContactList.h"
#include "android/gov/nist/javax/sip/header/Event.h"
#include "android/gov/nist/javax/sip/header/From.h"
#include "android/gov/nist/javax/sip/header/MaxForwards.h"
#include "android/gov/nist/javax/sip/header/RAck.h"
#include "android/gov/nist/javax/sip/header/RSeq.h"
#include "android/gov/nist/javax/sip/header/Reason.h"
#include "android/gov/nist/javax/sip/header/RecordRoute.h"
#include "android/gov/nist/javax/sip/header/RecordRouteList.h"
#include "android/gov/nist/javax/sip/header/Require.h"
#include "android/gov/nist/javax/sip/header/Route.h"
#include "android/gov/nist/javax/sip/header/RouteList.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/TimeStamp.h"
#include "android/gov/nist/javax/sip/header/To.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/message/MessageFactoryImpl.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/message/SIPRequest.h"
#include "android/gov/nist/javax/sip/message/SIPResponse.h"
#include "android/gov/nist/javax/sip/parser/AddressParser.h"
#include "android/gov/nist/javax/sip/parser/CallIDParser.h"
#include "android/gov/nist/javax/sip/parser/ContactParser.h"
#include "android/gov/nist/javax/sip/parser/RecordRouteParser.h"
#include "android/gov/nist/javax/sip/stack/AckSendingStrategy.h"
#include "android/gov/nist/javax/sip/stack/MessageChannel.h"
#include "android/gov/nist/javax/sip/stack/MessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/SIPClientTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPDialog.h"
#include "android/gov/nist/javax/sip/stack/SIPDialogErrorEvent.h"
#include "android/gov/nist/javax/sip/stack/SIPDialogEventListener.h"
#include "android/gov/nist/javax/sip/stack/SIPServerTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPStackTimerTask.h"
#include "android/gov/nist/javax/sip/stack/SIPTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionErrorEvent.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/gov/nist/javax/sip/stack/timers/SipTimer.h"
#include "android/javax/sip/ClientTransaction.h"
#include "android/javax/sip/Dialog.h"
#include "android/javax/sip/DialogDoesNotExistException.h"
#include "android/javax/sip/DialogState.h"
#include "android/javax/sip/IOExceptionEvent.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "android/javax/sip/ListeningPoint.h"
#include "android/javax/sip/ObjectInUseException.h"
#include "android/javax/sip/SipException.h"
#include "android/javax/sip/SipListener.h"
#include "android/javax/sip/SipStack.h"
#include "android/javax/sip/Transaction.h"
#include "android/javax/sip/TransactionState.h"
#include "android/javax/sip/address/Address.h"
#include "android/javax/sip/address/Hop.h"
#include "android/javax/sip/address/Router.h"
#include "android/javax/sip/address/SipURI.h"
#include "android/javax/sip/address/URI.h"
#include "android/javax/sip/header/CSeqHeader.h"
#include "android/javax/sip/header/CallIdHeader.h"
#include "android/javax/sip/header/ContactHeader.h"
#include "android/javax/sip/header/EventHeader.h"
#include "android/javax/sip/header/FromHeader.h"
#include "android/javax/sip/header/Header.h"
#include "android/javax/sip/header/OptionTag.h"
#include "android/javax/sip/header/ProxyAuthorizationHeader.h"
#include "android/javax/sip/header/RAckHeader.h"
#include "android/javax/sip/header/RSeqHeader.h"
#include "android/javax/sip/header/ReasonHeader.h"
#include "android/javax/sip/header/RequireHeader.h"
#include "android/javax/sip/header/RouteHeader.h"
#include "android/javax/sip/header/SupportedHeader.h"
#include "android/javax/sip/header/TimeStampHeader.h"
#include "android/javax/sip/header/ToHeader.h"
#include "android/javax/sip/header/UserAgentHeader.h"
#include "android/javax/sip/message/Request.h"
#include "android/javax/sip/message/Response.h"
#include "java/io/IOException.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/InetAddress.h"
#include "java/text/ParseException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/concurrent/CopyOnWriteArraySet.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Semaphore.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface AndroidGovNistJavaxSipStackSIPDialog () {
 @public
  jboolean dialogTerminatedEventDelivered_;
  NSString *stackTrace_;
  id applicationData_;
  AndroidGovNistJavaxSipMessageSIPRequest *originalRequest_;
  AndroidGovNistJavaxSipHeaderVia *lastResponseTopMostVia_;
  AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack_;
  jint dialogState_;
  jint retransmissionTicksLeft_;
  jint prevRetransmissionTicks_;
  AndroidGovNistJavaxSipSipProviderImpl *sipProvider_;
  JavaUtilConcurrentSemaphore *ackSem_;
  AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask *dialogDeleteTask_;
  AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask *dialogDeleteIfNoAckSentTask_;
  jlong highestSequenceNumberAcknowledged_;
  id<JavaUtilSet> eventListeners_;
  JavaUtilConcurrentSemaphore *timerTaskLock_;
  jboolean pendingRouteUpdateOn202Response_;
  AndroidGovNistJavaxSipReleaseReferencesStrategy *releaseReferencesStrategy_;
  AndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask *earlyStateTimerTask_;
  jint earlyDialogTimeout_;
  id<JavaUtilSet> responsesReceivedInForkingCase_;
  AndroidGovNistJavaxSipStackSIPDialog *originalDialog_;
  id<AndroidGovNistJavaxSipStackAckSendingStrategy> ackSendingStrategy_;
}

- (instancetype)initWithAndroidGovNistJavaxSipSipProviderImpl:(AndroidGovNistJavaxSipSipProviderImpl *)provider;

- (void)recordStackTrace;

- (void)printRouteList;

- (void)raiseIOExceptionWithNSString:(NSString *)host
                             withInt:(jint)port
                        withNSString:(NSString *)protocol;

- (void)raiseErrorEventWithInt:(jint)dialogTimeoutError
withAndroidGovNistJavaxSipStackSIPClientTransaction:(id<AndroidGovNistJavaxSipStackSIPClientTransaction>)clientTransaction;

- (void)raiseErrorEventWithInt:(jint)dialogTimeoutError;

- (void)addRouteWithAndroidGovNistJavaxSipHeaderRecordRouteList:(AndroidGovNistJavaxSipHeaderRecordRouteList *)recordRouteList;

- (void)addRouteWithAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)sipResponse;

- (AndroidGovNistJavaxSipHeaderRouteList *)getRouteList;

- (void)sendAckWithAndroidJavaxSipMessageRequest:(id<AndroidJavaxSipMessageRequest>)request
                                     withBoolean:(jboolean)throwIOExceptionAsSipException;

- (void)setLocalSequenceNumberWithLong:(jlong)lCseq;

- (void)setCallIdWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest;

- (AndroidGovNistJavaxSipMessageSIPRequest *)createRequestWithNSString:(NSString *)method
                                                          withNSString:(NSString *)topMostViaTransport;

- (void)setBranchWithAndroidGovNistJavaxSipHeaderVia:(AndroidGovNistJavaxSipHeaderVia *)via
                                        withNSString:(NSString *)method;

- (jboolean)toRetransmitFinalResponseWithInt:(jint)T2;

- (void)updateRequestWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest;

- (void)doTargetRefreshWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage;

+ (jboolean)optionPresentWithJavaUtilListIterator:(id<JavaUtilListIterator>)l
                                     withNSString:(NSString *)option;

- (void)setLastAckSentWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)lastAckSent;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPDialog, stackTrace_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPDialog, applicationData_, id)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPDialog, originalRequest_, AndroidGovNistJavaxSipMessageSIPRequest *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPDialog, lastResponseTopMostVia_, AndroidGovNistJavaxSipHeaderVia *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPDialog, sipStack_, AndroidGovNistJavaxSipStackSIPTransactionStack *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPDialog, sipProvider_, AndroidGovNistJavaxSipSipProviderImpl *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPDialog, ackSem_, JavaUtilConcurrentSemaphore *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPDialog, dialogDeleteTask_, AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPDialog, dialogDeleteIfNoAckSentTask_, AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPDialog, eventListeners_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPDialog, timerTaskLock_, JavaUtilConcurrentSemaphore *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPDialog, releaseReferencesStrategy_, AndroidGovNistJavaxSipReleaseReferencesStrategy *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPDialog, earlyStateTimerTask_, AndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPDialog, responsesReceivedInForkingCase_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPDialog, originalDialog_, AndroidGovNistJavaxSipStackSIPDialog *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPDialog, ackSendingStrategy_, id<AndroidGovNistJavaxSipStackAckSendingStrategy>)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSIPDialog_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSIPDialog_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSIPDialog_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackSIPDialog, logger, id<OrgSlf4jLogger>)

inline jlong AndroidGovNistJavaxSipStackSIPDialog_get_serialVersionUID();
#define AndroidGovNistJavaxSipStackSIPDialog_serialVersionUID -1429794423085204069LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackSIPDialog, serialVersionUID, jlong)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipSipProviderImpl_(AndroidGovNistJavaxSipStackSIPDialog *self, AndroidGovNistJavaxSipSipProviderImpl *provider);

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPDialog *new_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipSipProviderImpl_(AndroidGovNistJavaxSipSipProviderImpl *provider) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPDialog *create_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipSipProviderImpl_(AndroidGovNistJavaxSipSipProviderImpl *provider);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPDialog_recordStackTrace(AndroidGovNistJavaxSipStackSIPDialog *self);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPDialog_raiseIOExceptionWithNSString_withInt_withNSString_(AndroidGovNistJavaxSipStackSIPDialog *self, NSString *host, jint port, NSString *protocol);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPDialog_raiseErrorEventWithInt_withAndroidGovNistJavaxSipStackSIPClientTransaction_(AndroidGovNistJavaxSipStackSIPDialog *self, jint dialogTimeoutError, id<AndroidGovNistJavaxSipStackSIPClientTransaction> clientTransaction);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPDialog_raiseErrorEventWithInt_(AndroidGovNistJavaxSipStackSIPDialog *self, jint dialogTimeoutError);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPDialog_addRouteWithAndroidGovNistJavaxSipHeaderRecordRouteList_(AndroidGovNistJavaxSipStackSIPDialog *self, AndroidGovNistJavaxSipHeaderRecordRouteList *recordRouteList);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPDialog_addRouteWithAndroidGovNistJavaxSipMessageSIPResponse_(AndroidGovNistJavaxSipStackSIPDialog *self, AndroidGovNistJavaxSipMessageSIPResponse *sipResponse);

__attribute__((unused)) static AndroidGovNistJavaxSipHeaderRouteList *AndroidGovNistJavaxSipStackSIPDialog_getRouteList(AndroidGovNistJavaxSipStackSIPDialog *self);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPDialog_sendAckWithAndroidJavaxSipMessageRequest_withBoolean_(AndroidGovNistJavaxSipStackSIPDialog *self, id<AndroidJavaxSipMessageRequest> request, jboolean throwIOExceptionAsSipException);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPDialog_setLocalSequenceNumberWithLong_(AndroidGovNistJavaxSipStackSIPDialog *self, jlong lCseq);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPDialog_setCallIdWithAndroidGovNistJavaxSipMessageSIPRequest_(AndroidGovNistJavaxSipStackSIPDialog *self, AndroidGovNistJavaxSipMessageSIPRequest *sipRequest);

__attribute__((unused)) static AndroidGovNistJavaxSipMessageSIPRequest *AndroidGovNistJavaxSipStackSIPDialog_createRequestWithNSString_withNSString_(AndroidGovNistJavaxSipStackSIPDialog *self, NSString *method, NSString *topMostViaTransport);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPDialog_setBranchWithAndroidGovNistJavaxSipHeaderVia_withNSString_(AndroidGovNistJavaxSipStackSIPDialog *self, AndroidGovNistJavaxSipHeaderVia *via, NSString *method);

__attribute__((unused)) static jboolean AndroidGovNistJavaxSipStackSIPDialog_toRetransmitFinalResponseWithInt_(AndroidGovNistJavaxSipStackSIPDialog *self, jint T2);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPDialog_updateRequestWithAndroidGovNistJavaxSipMessageSIPRequest_(AndroidGovNistJavaxSipStackSIPDialog *self, AndroidGovNistJavaxSipMessageSIPRequest *sipRequest);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPDialog_doTargetRefreshWithAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackSIPDialog *self, AndroidGovNistJavaxSipMessageSIPMessage *sipMessage);

__attribute__((unused)) static jboolean AndroidGovNistJavaxSipStackSIPDialog_optionPresentWithJavaUtilListIterator_withNSString_(id<JavaUtilListIterator> l, NSString *option);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPDialog_setLastAckSentWithAndroidGovNistJavaxSipMessageSIPRequest_(AndroidGovNistJavaxSipStackSIPDialog *self, AndroidGovNistJavaxSipMessageSIPRequest *lastAckSent);

__attribute__((unused)) static IOSObjectArray *AndroidGovNistJavaxSipStackSIPDialog__Annotations$0();

@interface AndroidGovNistJavaxSipStackSIPDialog_AckSendingStrategyImpl () {
 @public
  AndroidGovNistJavaxSipStackSIPDialog *this$0_;
  id<AndroidJavaxSipAddressHop> hop_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPDialog_AckSendingStrategyImpl, hop_, id<AndroidJavaxSipAddressHop>)

@interface AndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask () {
 @public
  AndroidGovNistJavaxSipStackSIPDialog *this$0_;
}

@end

@interface AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender () {
 @public
  AndroidGovNistJavaxSipStackSIPDialog *this$0_;
}

@end

inline jlong AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender_get_serialVersionUID();
#define AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender_serialVersionUID 1019346148741070635LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender, serialVersionUID, jlong)

@interface AndroidGovNistJavaxSipStackSIPDialog_LingerTimer () {
 @public
  AndroidGovNistJavaxSipStackSIPDialog *this$0_;
}

@end

@interface AndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask () {
 @public
  AndroidGovNistJavaxSipStackSIPDialog *this$0_;
}

@end

@interface AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask () {
 @public
  AndroidGovNistJavaxSipStackSIPDialog *this$0_;
}

@end

@interface AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask () {
 @public
  AndroidGovNistJavaxSipStackSIPDialog *this$0_;
  jlong seqno_;
}

@end

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackSIPDialog)

@implementation AndroidGovNistJavaxSipStackSIPDialog

- (instancetype)initWithAndroidGovNistJavaxSipSipProviderImpl:(AndroidGovNistJavaxSipSipProviderImpl *)provider {
  AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipSipProviderImpl_(self, provider);
  return self;
}

- (void)recordStackTrace {
  AndroidGovNistJavaxSipStackSIPDialog_recordStackTrace(self);
}

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransaction:(id<AndroidGovNistJavaxSipStackSIPTransaction>)transaction {
  AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPTransaction_(self, transaction);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPClientTransaction:(id<AndroidGovNistJavaxSipStackSIPClientTransaction>)transaction
                           withAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)sipResponse {
  AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPClientTransaction_withAndroidGovNistJavaxSipMessageSIPResponse_(self, transaction, sipResponse);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipSipProviderImpl:(AndroidGovNistJavaxSipSipProviderImpl *)sipProvider
                 withAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)sipResponse {
  AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipSipProviderImpl_withAndroidGovNistJavaxSipMessageSIPResponse_(self, sipProvider, sipResponse);
  return self;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPClientTransaction:(id<AndroidGovNistJavaxSipStackSIPClientTransaction>)subscribeTx
                          withAndroidGovNistJavaxSipStackSIPTransaction:(id<AndroidGovNistJavaxSipStackSIPTransaction>)notifyST {
  AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPClientTransaction_withAndroidGovNistJavaxSipStackSIPTransaction_(self, subscribeTx, notifyST);
  return self;
}

- (void)printRouteList {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"this : ", self)];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"printRouteList : ", [((AndroidGovNistJavaxSipHeaderRouteList *) nil_chk(self->routeList_)) encode])];
}

- (void)raiseIOExceptionWithNSString:(NSString *)host
                             withInt:(jint)port
                        withNSString:(NSString *)protocol {
  AndroidGovNistJavaxSipStackSIPDialog_raiseIOExceptionWithNSString_withInt_withNSString_(self, host, port, protocol);
}

- (void)raiseErrorEventWithInt:(jint)dialogTimeoutError
withAndroidGovNistJavaxSipStackSIPClientTransaction:(id<AndroidGovNistJavaxSipStackSIPClientTransaction>)clientTransaction {
  AndroidGovNistJavaxSipStackSIPDialog_raiseErrorEventWithInt_withAndroidGovNistJavaxSipStackSIPClientTransaction_(self, dialogTimeoutError, clientTransaction);
}

- (void)raiseErrorEventWithInt:(jint)dialogTimeoutError {
  AndroidGovNistJavaxSipStackSIPDialog_raiseErrorEventWithInt_(self, dialogTimeoutError);
}

- (void)setRemotePartyWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage {
  if (![self isServer]) {
    JreStrongAssign(&self->remoteParty_, [((id<AndroidJavaxSipHeaderToHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) getTo])) getAddress]);
  }
  else {
    JreStrongAssign(&self->remoteParty_, [((id<AndroidJavaxSipHeaderFromHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) getFrom])) getAddress]);
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"settingRemoteParty ", self->remoteParty_)];
}

- (void)addRouteWithAndroidGovNistJavaxSipHeaderRecordRouteList:(AndroidGovNistJavaxSipHeaderRecordRouteList *)recordRouteList {
  AndroidGovNistJavaxSipStackSIPDialog_addRouteWithAndroidGovNistJavaxSipHeaderRecordRouteList_(self, recordRouteList);
}

- (void)setRemoteTargetWithAndroidJavaxSipHeaderContactHeader:(id<AndroidJavaxSipHeaderContactHeader>)contact {
  JreStrongAssign(&self->remoteTarget_, [((id<AndroidJavaxSipHeaderContactHeader>) nil_chk(contact)) getAddress]);
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"Dialog.setRemoteTarget: ", self->remoteTarget_)];
}

- (void)addRouteWithAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)sipResponse {
  AndroidGovNistJavaxSipStackSIPDialog_addRouteWithAndroidGovNistJavaxSipMessageSIPResponse_(self, sipResponse);
}

- (AndroidGovNistJavaxSipHeaderRouteList *)getRouteList {
  return AndroidGovNistJavaxSipStackSIPDialog_getRouteList(self);
}

- (void)setRouteListWithAndroidGovNistJavaxSipHeaderRouteList:(AndroidGovNistJavaxSipHeaderRouteList *)routeList {
  JreStrongAssign(&self->routeList_, routeList);
}

- (void)sendAckWithAndroidJavaxSipMessageRequest:(id<AndroidJavaxSipMessageRequest>)request
                                     withBoolean:(jboolean)throwIOExceptionAsSipException {
  AndroidGovNistJavaxSipStackSIPDialog_sendAckWithAndroidJavaxSipMessageRequest_withBoolean_(self, request, throwIOExceptionAsSipException);
}

- (void)setStackWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack {
  JreStrongAssign(&self->sipStack_, sipStack);
}

- (AndroidGovNistJavaxSipStackSIPTransactionStack *)getStack {
  return sipStack_;
}

- (jboolean)isTerminatedOnBye {
  return self->terminateOnBye_;
}

- (void)ackReceivedWithLong:(jlong)cseqNumber {
  if ([self isAckSeen]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"Ack already seen for response -- dropping"];
    return;
  }
  id<AndroidGovNistJavaxSipStackSIPServerTransaction> tr = [self getInviteTransaction];
  if (tr != nil) {
    if ([tr getCSeq] == cseqNumber) {
      [self acquireTimerTaskSem];
      @try {
        if (self->timerTask_ != nil) {
          [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([self getStack])) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:timerTask_];
          JreStrongAssign(&self->timerTask_, nil);
        }
      }
      @finally {
        [self releaseTimerTaskSem];
      }
      if (self->dialogDeleteTask_ != nil) {
        [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([self getStack])) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:dialogDeleteTask_];
        JreStrongAssign(&self->dialogDeleteTask_, nil);
      }
      JreStrongAssign(&lastAckReceivedCSeqNumber_, JavaLangLong_valueOfWithLong_(cseqNumber));
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"ackReceived for ", [(tr) getMethod])];
      [self printDebugInfo];
      if (self->isBackToBackUserAgent_) {
        [self releaseAckSem];
      }
      [self setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_CONFIRMED_STATE];
    }
  }
  else {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"tr is null -- not updating the ack state"];
  }
}

- (jboolean)testAndSetIsDialogTerminatedEventDelivered {
  @synchronized(self) {
    jboolean retval = self->dialogTerminatedEventDelivered_;
    self->dialogTerminatedEventDelivered_ = true;
    return retval;
  }
}

- (void)addEventListenerWithAndroidGovNistJavaxSipStackSIPDialogEventListener:(id<AndroidGovNistJavaxSipStackSIPDialogEventListener>)newListener {
  [((id<JavaUtilSet>) nil_chk(eventListeners_)) addWithId:newListener];
}

- (void)removeEventListenerWithAndroidGovNistJavaxSipStackSIPDialogEventListener:(id<AndroidGovNistJavaxSipStackSIPDialogEventListener>)oldListener {
  [((id<JavaUtilSet>) nil_chk(eventListeners_)) removeWithId:oldListener];
}

- (void)setApplicationDataWithId:(id)applicationData {
  JreStrongAssign(&self->applicationData_, applicationData);
}

- (id)getApplicationData {
  return self->applicationData_;
}

- (void)requestConsumed {
  @synchronized(self) {
    self->nextSeqno_ = [self getRemoteSeqNumber] + 1;
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$J", @"Request Consumed -- next consumable Request Seqno = ", self->nextSeqno_)];
  }
}

- (jboolean)isRequestConsumableWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)dialogRequest {
  @synchronized(self) {
    if ([((NSString *) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(dialogRequest)) getMethod])) isEqual:AndroidJavaxSipMessageRequest_ACK]) @throw create_JavaLangRuntimeException_initWithNSString_(@"Illegal method");
    if (![self isSequenceNumberValidation]) {
      return true;
    }
    return remoteSequenceNumber_ < [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([dialogRequest getCSeq])) getSeqNumber];
  }
}

- (void)doDeferredDelete {
  if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer] == nil) [self setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE];
  else {
    JreStrongAssignAndConsume(&self->dialogDeleteTask_, new_AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask_initWithAndroidGovNistJavaxSipStackSIPDialog_(self));
    if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer] != nil && [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) isStarted]) {
      jint delay = AndroidGovNistJavaxSipStackSIPTransactionStack_BASE_TIMER_INTERVAL;
      if (lastTransaction_ != nil) {
        delay = [lastTransaction_ getBaseTimerInterval];
      }
      [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:self->dialogDeleteTask_ withLong:AndroidGovNistJavaxSipStackSIPTransaction_TIMER_H * delay];
    }
    else {
      [self delete__];
    }
  }
}

- (void)setStateWithInt:(jint)state {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$I", @"SIPDialog::setState:Setting dialog state for ", self, @"newState = ", state)];
  if (state != AndroidGovNistJavaxSipStackSIPDialog_NULL_STATE && state != self->dialogState_) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$@", @"SIPDialog::setState:", self, @"  old dialog state is ", [self getState])];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$@", @"SIPDialog::setState:", self, @"  New dialog state is ", AndroidJavaxSipDialogState_getObjectWithInt_(state))];
  }
  if (state == AndroidGovNistJavaxSipStackSIPDialog_EARLY_STATE) {
    [self addEventListenerWithAndroidGovNistJavaxSipStackSIPDialogEventListener:[self getSipProvider]];
  }
  self->dialogState_ = state;
  if (state == AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE) {
    [self removeEventListenerWithAndroidGovNistJavaxSipStackSIPDialogEventListener:[self getSipProvider]];
    if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer] != nil && [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) isStarted]) {
      if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getConnectionLingerTimer] > 0) {
        [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:create_AndroidGovNistJavaxSipStackSIPDialog_LingerTimer_initWithAndroidGovNistJavaxSipStackSIPDialog_(self) withLong:[((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getConnectionLingerTimer] * 1000];
      }
      else {
        [create_AndroidGovNistJavaxSipStackSIPDialog_LingerTimer_initWithAndroidGovNistJavaxSipStackSIPDialog_(self) runTask];
      }
    }
    [self stopTimer];
  }
}

- (void)printDebugInfo {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$Z", @"isServer = ", [self isServer])];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"localTag = ", [self getLocalTag])];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"remoteTag = ", [self getRemoteTag])];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$J", @"localSequenceNumer = ", [self getLocalSeqNumber])];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$J", @"remoteSequenceNumer = ", [self getRemoteSeqNumber])];
}

- (jboolean)isAckSeen {
  if (lastAckReceivedCSeqNumber_ == nil && [((JavaLangInteger *) nil_chk(lastResponseStatusCode_)) intValue] == AndroidJavaxSipMessageResponse_OK) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$", @"SIPDialog::isAckSeen:", self, @"lastAckReceived is null -- returning false")];
    return false;
  }
  else if (lastResponseMethod_ == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$", @"SIPDialog::isAckSeen:", self, @"lastResponse is null -- returning false")];
    return false;
  }
  else if (lastAckReceivedCSeqNumber_ == nil && [((JavaLangInteger *) nil_chk(lastResponseStatusCode_)) intValue] / 100 > 2) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$@", @"SIPDialog::isAckSeen:", self, @"lastResponse statusCode ", lastResponseStatusCode_)];
    return true;
  }
  else {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$J", @"SIPDialog::isAckSeen:lastAckReceivedCSeqNumber = ", lastAckReceivedCSeqNumber_, @" remoteCSeqNumber = ", [self getRemoteSeqNumber])];
    return self->lastAckReceivedCSeqNumber_ != nil && [self->lastAckReceivedCSeqNumber_ longLongValue] >= [self getRemoteSeqNumber];
  }
}

- (AndroidGovNistJavaxSipMessageSIPRequest *)getLastAckSent {
  return self->lastAckSent_;
}

- (jboolean)isAckSentWithLong:(jlong)cseqNo {
  if ([self getLastTransaction] == nil) return true;
  if ([AndroidJavaxSipClientTransaction_class_() isInstance:[self getLastTransaction]]) {
    if ([self getLastAckSent] == nil) {
      return false;
    }
    else {
      return cseqNo <= [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(([self getLastAckSent]))) getCSeq])) getSeqNumber];
    }
  }
  else {
    return true;
  }
}

- (id<AndroidJavaxSipTransaction>)getFirstTransaction {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"This method has been deprecated and is no longer supported");
}

- (id<AndroidJavaxSipTransaction>)getFirstTransactionInt {
  if (firstTransaction_ != nil) {
    return firstTransaction_;
  }
  return [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) findTransactionWithNSString:firstTransactionId_ withBoolean:firstTransactionIsServerTransaction_];
}

- (id<JavaUtilIterator>)getRouteSet {
  if (self->routeList_ == nil) {
    return [create_JavaUtilLinkedList_init() listIterator];
  }
  else {
    return [((AndroidGovNistJavaxSipHeaderRouteList *) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_getRouteList(self))) listIterator];
  }
}

- (void)addRouteWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest {
  @synchronized(self) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$@", @"setContact: dialogState: ", self, @"state = ", [self getState])];
    if (self->dialogState_ == AndroidGovNistJavaxSipStackSIPDialog_CONFIRMED_STATE && AndroidGovNistJavaxSipMessageSIPRequest_isTargetRefreshWithNSString_([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getMethod])) {
      AndroidGovNistJavaxSipStackSIPDialog_doTargetRefreshWithAndroidGovNistJavaxSipMessageSIPMessage_(self, sipRequest);
    }
    if (self->dialogState_ == AndroidGovNistJavaxSipStackSIPDialog_CONFIRMED_STATE || self->dialogState_ == AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE) {
      return;
    }
    AndroidGovNistJavaxSipHeaderContactList *contactList = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getContactHeaders];
    if (contactList != nil) {
      [self setRemoteTargetWithAndroidJavaxSipHeaderContactHeader:(id<AndroidJavaxSipHeaderContactHeader>) cast_check([contactList getFirst], AndroidJavaxSipHeaderContactHeader_class_())];
    }
    if ([sipRequest getToTag] != nil) return;
    AndroidGovNistJavaxSipHeaderRecordRouteList *rrlist = [sipRequest getRecordRouteHeaders];
    if (rrlist != nil) {
      AndroidGovNistJavaxSipStackSIPDialog_addRouteWithAndroidGovNistJavaxSipHeaderRecordRouteList_(self, rrlist);
    }
    else {
      JreStrongAssignAndConsume(&self->routeList_, new_AndroidGovNistJavaxSipHeaderRouteList_init());
    }
  }
}

- (void)setDialogIdWithNSString:(NSString *)dialogId {
  if (firstTransaction_ != nil) {
    [firstTransaction_ setDialogWithAndroidGovNistJavaxSipStackSIPDialog:self withNSString:dialogId];
  }
  JreStrongAssign(&self->dialogId_, dialogId);
}

- (jboolean)isServer {
  if (self->firstTransactionSeen_ == false) return self->serverTransactionFlag_;
  else return self->firstTransactionIsServerTransaction_;
}

- (jboolean)isReInvite {
  return self->reInviteFlag_;
}

- (NSString *)getDialogId {
  if (self->dialogId_ == nil && self->lastResponseDialogId_ != nil) JreStrongAssign(&self->dialogId_, self->lastResponseDialogId_);
  return self->dialogId_;
}

- (void)storeFirstTransactionInfoWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)dialog
                            withAndroidGovNistJavaxSipStackSIPTransaction:(id<AndroidGovNistJavaxSipStackSIPTransaction>)transaction {
  ((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(dialog))->firstTransactionSeen_ = true;
  JreStrongAssign(&dialog->firstTransaction_, transaction);
  dialog->firstTransactionIsServerTransaction_ = [((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk(transaction)) isServerTransaction];
  if (dialog->firstTransactionIsServerTransaction_) {
    dialog->firstTransactionSecure_ = [((NSString *) nil_chk([((id<AndroidJavaxSipAddressURI>) nil_chk([((id<AndroidJavaxSipMessageRequest>) nil_chk([transaction getRequest])) getRequestURI])) getScheme])) java_equalsIgnoreCase:@"sips"];
  }
  else {
    dialog->firstTransactionSecure_ = [((NSString *) nil_chk([((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(transaction, AndroidGovNistJavaxSipStackSIPClientTransaction_class_())) getOriginalRequestScheme])) java_equalsIgnoreCase:@"sips"];
  }
  dialog->firstTransactionPort_ = [transaction getPort];
  JreStrongAssign(&dialog->firstTransactionId_, [transaction getBranchId]);
  JreStrongAssign(&dialog->firstTransactionMethod_, [transaction getMethod]);
  if ([AndroidGovNistJavaxSipStackSIPServerTransaction_class_() isInstance:transaction] && [((NSString *) nil_chk(dialog->firstTransactionMethod_)) isEqual:AndroidJavaxSipMessageRequest_INVITE]) {
    [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) removeMergeDialogWithNSString:firstTransactionMergeId_];
    JreStrongAssign(&dialog->firstTransactionMergeId_, [transaction getMergeId]);
    [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) putMergeDialogWithAndroidGovNistJavaxSipStackSIPDialog:self];
  }
  if ([transaction isServerTransaction]) {
    id<AndroidGovNistJavaxSipStackSIPServerTransaction> st = (id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check(transaction, AndroidGovNistJavaxSipStackSIPServerTransaction_class_());
    AndroidGovNistJavaxSipMessageSIPResponse *response = [st getLastResponse];
    JreStrongAssign(&dialog->contactHeader_, response != nil ? [response getContactHeader] : nil);
  }
  else {
    id<AndroidGovNistJavaxSipStackSIPClientTransaction> ct = (id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(transaction, AndroidGovNistJavaxSipStackSIPClientTransaction_class_());
    if (ct != nil) {
      JreStrongAssign(&dialog->contactHeader_, [ct getOriginalRequestContact]);
    }
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"firstTransaction = ", dialog->firstTransaction_)];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$Z", @"firstTransactionIsServerTransaction = ", firstTransactionIsServerTransaction_)];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$Z", @"firstTransactionSecure = ", firstTransactionSecure_)];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$I", @"firstTransactionPort = ", firstTransactionPort_)];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"firstTransactionId = ", firstTransactionId_)];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"firstTransactionMethod = ", firstTransactionMethod_)];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"firstTransactionMergeId = ", firstTransactionMergeId_)];
}

- (jboolean)addTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:(id<AndroidGovNistJavaxSipStackSIPTransaction>)transaction {
  AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = [((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk(transaction)) getOriginalRequest];
  if (firstTransactionSeen_ && ![((NSString *) nil_chk(firstTransactionId_)) isEqual:[transaction getBranchId]] && [((NSString *) nil_chk([transaction getMethod])) isEqual:firstTransactionMethod_]) {
    [self setReInviteFlagWithBoolean:true];
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$@", @"SipDialog.addTransaction() ", self, @" transaction = ", transaction)];
  if (firstTransactionSeen_ == false) {
    [self storeFirstTransactionInfoWithAndroidGovNistJavaxSipStackSIPDialog:self withAndroidGovNistJavaxSipStackSIPTransaction:transaction];
    if ([((NSString *) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getMethod])) isEqual:AndroidJavaxSipMessageRequest_SUBSCRIBE]) JreStrongAssign(&self->eventHeader_, (id<AndroidJavaxSipHeaderEventHeader>) cast_check([sipRequest getHeaderWithNSString:AndroidJavaxSipHeaderEventHeader_NAME], AndroidJavaxSipHeaderEventHeader_class_()));
    [self setLocalPartyWithAndroidGovNistJavaxSipMessageSIPMessage:sipRequest];
    [self setRemotePartyWithAndroidGovNistJavaxSipMessageSIPMessage:sipRequest];
    AndroidGovNistJavaxSipStackSIPDialog_setCallIdWithAndroidGovNistJavaxSipMessageSIPRequest_(self, sipRequest);
    if (self->originalRequest_ == nil && [transaction isInviteTransaction]) {
      JreStrongAssign(&self->originalRequest_, sipRequest);
    }
    else if (originalRequest_ != nil) {
      JreStrongAssign(&originalRequestRecordRouteHeaders_, [sipRequest getRecordRouteHeaders]);
    }
    if (self->method_ == nil) {
      JreStrongAssign(&self->method_, [sipRequest getMethod]);
    }
    if ([AndroidGovNistJavaxSipStackSIPServerTransaction_class_() isInstance:transaction]) {
      JreStrongAssign(&self->hisTag_, [((id<AndroidJavaxSipHeaderFromHeader>) nil_chk([sipRequest getFrom])) getTag]);
    }
    else {
      AndroidGovNistJavaxSipStackSIPDialog_setLocalSequenceNumberWithLong_(self, [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipRequest getCSeq])) getSeqNumber]);
      self->originalLocalSequenceNumber_ = [self getLocalSeqNumber];
      [self setLocalTagWithNSString:[((id<AndroidJavaxSipHeaderFromHeader>) nil_chk([sipRequest getFrom])) getTag]];
      if (myTag_ == nil) [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:@"The request's From header is missing the required Tag parameter."];
    }
  }
  else if ([((NSString *) nil_chk([transaction getMethod])) isEqual:firstTransactionMethod_] && firstTransactionIsServerTransaction_ != [transaction isServerTransaction]) {
    [self storeFirstTransactionInfoWithAndroidGovNistJavaxSipStackSIPDialog:self withAndroidGovNistJavaxSipStackSIPTransaction:transaction];
    [self setLocalPartyWithAndroidGovNistJavaxSipMessageSIPMessage:sipRequest];
    [self setRemotePartyWithAndroidGovNistJavaxSipMessageSIPMessage:sipRequest];
    AndroidGovNistJavaxSipStackSIPDialog_setCallIdWithAndroidGovNistJavaxSipMessageSIPRequest_(self, sipRequest);
    if ([transaction isInviteTransaction]) {
      JreStrongAssign(&self->originalRequest_, sipRequest);
    }
    else {
      JreStrongAssign(&originalRequestRecordRouteHeaders_, [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getRecordRouteHeaders]);
    }
    JreStrongAssign(&self->method_, [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getMethod]);
  }
  else if (firstTransaction_ == nil && [transaction isInviteTransaction]) {
    JreStrongAssign(&firstTransaction_, transaction);
  }
  if ([AndroidGovNistJavaxSipStackSIPServerTransaction_class_() isInstance:transaction]) {
    [self setRemoteSequenceNumberWithLong:[((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getCSeq])) getSeqNumber]];
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$Z", @"isBackToBackUserAgent = ", self->isBackToBackUserAgent_)];
  if ([transaction isInviteTransaction]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$@", @"SIPDialog::setLastTransaction:dialog= ", self, @" lastTransaction = ", transaction)];
    JreStrongAssign(&self->lastTransaction_, transaction);
  }
  @try {
    if ([((NSString *) nil_chk([((id<AndroidJavaxSipMessageRequest>) nil_chk([transaction getRequest])) getMethod])) isEqual:AndroidJavaxSipMessageRequest_REFER] && [AndroidGovNistJavaxSipStackSIPServerTransaction_class_() isInstance:transaction]) {
      jlong lastReferCSeq = [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([transaction getRequest], [AndroidGovNistJavaxSipMessageSIPRequest class])))) getCSeq])) getSeqNumber];
      JreStrongAssignAndConsume(&self->eventHeader_, new_AndroidGovNistJavaxSipHeaderEvent_init());
      [self->eventHeader_ setEventTypeWithNSString:@"refer"];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$J", @"SIPDialog::setLastTransaction:lastReferCSeq = ", lastReferCSeq)];
      [((id<AndroidJavaxSipHeaderEventHeader>) nil_chk(self->eventHeader_)) setEventIdWithNSString:JavaLangLong_toStringWithLong_(lastReferCSeq)];
    }
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:@"Unexpected exception in REFER processing"];
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$C$", @"Transaction Added ", self, myTag_, '/', hisTag_)];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$CZ", @"TID = ", [transaction getTransactionId], '/', [transaction isServerTransaction])];
  return true;
}

- (void)setRemoteTagWithNSString:(NSString *)hisTag {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$$$$", @"setRemoteTag(): ", self, @" remoteTag = ", self->hisTag_, @" new tag = ", hisTag)];
  if (self->hisTag_ != nil && hisTag != nil && ![hisTag isEqual:self->hisTag_]) {
    if ([self getState] != JreLoadStatic(AndroidJavaxSipDialogState, EARLY)) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"Dialog is already established -- ignoring remote tag re-assignment"];
      return;
    }
    else if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) isRemoteTagReassignmentAllowed]) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$$$$", @"UNSAFE OPERATION !  tag re-assignment ", self->hisTag_, @" trying to set to ", hisTag, @" can cause unexpected effects ")];
      jboolean removed = false;
      if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getDialogWithNSString:dialogId_] == self) {
        [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) removeDialogWithNSString:dialogId_];
        removed = true;
      }
      JreStrongAssign(&self->dialogId_, nil);
      JreStrongAssign(&self->hisTag_, hisTag);
      if (removed) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"ReInserting Dialog"];
        [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) putDialogWithAndroidGovNistJavaxSipStackSIPDialog:self];
      }
    }
  }
  else {
    if (hisTag != nil) {
      JreStrongAssign(&self->hisTag_, hisTag);
    }
    else {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) warnWithNSString:@"setRemoteTag : called with null argument "];
    }
  }
}

- (id<AndroidGovNistJavaxSipStackSIPTransaction>)getLastTransaction {
  return self->lastTransaction_;
}

- (id<AndroidGovNistJavaxSipStackSIPServerTransaction>)getInviteTransaction {
  AndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask *t = self->timerTask_;
  if (t != nil) return t->transaction_;
  else return nil;
}

- (void)setLocalSequenceNumberWithLong:(jlong)lCseq {
  AndroidGovNistJavaxSipStackSIPDialog_setLocalSequenceNumberWithLong_(self, lCseq);
}

- (void)setRemoteSequenceNumberWithLong:(jlong)rCseq {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@CJ", @"setRemoteSeqno ", self, '/', rCseq)];
  self->remoteSequenceNumber_ = rCseq;
}

- (void)incrementLocalSequenceNumber {
  ++self->localSequenceNumber_;
}

- (jint)getRemoteSequenceNumber {
  return (jint) self->remoteSequenceNumber_;
}

- (jint)getLocalSequenceNumber {
  return (jint) self->localSequenceNumber_;
}

- (jlong)getOriginalLocalSequenceNumber {
  return self->originalLocalSequenceNumber_;
}

- (jlong)getLocalSeqNumber {
  return self->localSequenceNumber_;
}

- (jlong)getRemoteSeqNumber {
  return self->remoteSequenceNumber_;
}

- (NSString *)getLocalTag {
  return self->myTag_;
}

- (NSString *)getRemoteTag {
  return hisTag_;
}

- (void)setLocalTagWithNSString:(NSString *)mytag {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$$@", @"set Local tag ", mytag, @" dialog = ", self)];
  JreStrongAssign(&self->myTag_, mytag);
}

- (void)delete__ {
  [self setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE];
}

- (id<AndroidJavaxSipHeaderCallIdHeader>)getCallId {
  if (callIdHeader_ == nil && callIdHeaderString_ != nil) {
    @try {
      JreStrongAssign(&self->callIdHeader_, (id<AndroidJavaxSipHeaderCallIdHeader>) cast_check([create_AndroidGovNistJavaxSipParserCallIDParser_initWithNSString_(callIdHeaderString_) parse], AndroidJavaxSipHeaderCallIdHeader_class_()));
    }
    @catch (JavaTextParseException *e) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:@"error reparsing the call id header" withNSException:e];
    }
  }
  return self->callIdHeader_;
}

- (void)setCallIdWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest {
  AndroidGovNistJavaxSipStackSIPDialog_setCallIdWithAndroidGovNistJavaxSipMessageSIPRequest_(self, sipRequest);
}

- (id<AndroidJavaxSipAddressAddress>)getLocalParty {
  if (localParty_ == nil && localPartyStringified_ != nil) {
    @try {
      JreStrongAssign(&self->localParty_, [create_AndroidGovNistJavaxSipParserAddressParser_initWithNSString_(localPartyStringified_) addressWithBoolean:true]);
    }
    @catch (JavaTextParseException *e) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:@"error reparsing the localParty" withNSException:e];
    }
  }
  return self->localParty_;
}

- (void)setLocalPartyWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage {
  if (![self isServer]) {
    JreStrongAssign(&self->localParty_, [((id<AndroidJavaxSipHeaderFromHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) getFrom])) getAddress]);
  }
  else {
    JreStrongAssign(&self->localParty_, [((id<AndroidJavaxSipHeaderToHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) getTo])) getAddress]);
  }
}

- (id<AndroidJavaxSipAddressAddress>)getRemoteParty {
  if (remoteParty_ == nil && remotePartyStringified_ != nil) {
    @try {
      JreStrongAssign(&self->remoteParty_, [create_AndroidGovNistJavaxSipParserAddressParser_initWithNSString_(remotePartyStringified_) addressWithBoolean:true]);
    }
    @catch (JavaTextParseException *e) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:@"error reparsing the remoteParty" withNSException:e];
    }
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"gettingRemoteParty ", self->remoteParty_)];
  return self->remoteParty_;
}

- (id<AndroidJavaxSipAddressAddress>)getRemoteTarget {
  if (remoteTarget_ == nil && remoteTargetStringified_ != nil) {
    @try {
      JreStrongAssign(&self->remoteTarget_, [create_AndroidGovNistJavaxSipParserAddressParser_initWithNSString_(remoteTargetStringified_) addressWithBoolean:true]);
    }
    @catch (JavaTextParseException *e) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:@"error reparsing the remoteTarget" withNSException:e];
    }
  }
  return self->remoteTarget_;
}

- (AndroidJavaxSipDialogState *)getState {
  if (self->dialogState_ == AndroidGovNistJavaxSipStackSIPDialog_NULL_STATE) return nil;
  return AndroidJavaxSipDialogState_getObjectWithInt_(self->dialogState_);
}

- (jboolean)isSecure {
  return self->firstTransactionSecure_;
}

- (void)sendAckWithAndroidJavaxSipMessageRequest:(id<AndroidJavaxSipMessageRequest>)request {
  AndroidGovNistJavaxSipStackSIPDialog_sendAckWithAndroidJavaxSipMessageRequest_withBoolean_(self, request, true);
}

- (id<AndroidJavaxSipMessageRequest>)createRequestWithNSString:(NSString *)method {
  if ([((NSString *) nil_chk(method)) isEqual:AndroidJavaxSipMessageRequest_ACK] || [method isEqual:AndroidJavaxSipMessageRequest_PRACK]) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$$", @"Invalid method specified for createRequest:", method));
  }
  if (lastResponseTopMostVia_ != nil) return AndroidGovNistJavaxSipStackSIPDialog_createRequestWithNSString_withNSString_(self, method, [self->lastResponseTopMostVia_ getTransport]);
  else @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Dialog not yet established -- no response!");
}

- (AndroidGovNistJavaxSipMessageSIPRequest *)createRequestWithNSString:(NSString *)method
                                                          withNSString:(NSString *)topMostViaTransport {
  return AndroidGovNistJavaxSipStackSIPDialog_createRequestWithNSString_withNSString_(self, method, topMostViaTransport);
}

- (AndroidGovNistJavaxSipMessageSIPRequest *)createRequestWithAndroidGovNistJavaxSipAddressSipUri:(AndroidGovNistJavaxSipAddressSipUri *)requestURI
                                                              withAndroidGovNistJavaxSipHeaderVia:(AndroidGovNistJavaxSipHeaderVia *)via
                                                             withAndroidGovNistJavaxSipHeaderCSeq:(AndroidGovNistJavaxSipHeaderCSeq *)cseq
                                                             withAndroidGovNistJavaxSipHeaderFrom:(AndroidGovNistJavaxSipHeaderFrom *)from
                                                               withAndroidGovNistJavaxSipHeaderTo:(AndroidGovNistJavaxSipHeaderTo *)to {
  AndroidGovNistJavaxSipMessageSIPRequest *newRequest = create_AndroidGovNistJavaxSipMessageSIPRequest_init();
  NSString *method = [((AndroidGovNistJavaxSipHeaderCSeq *) nil_chk(cseq)) getMethod];
  [newRequest setMethodWithNSString:method];
  [newRequest setRequestURIWithAndroidJavaxSipAddressURI:requestURI];
  AndroidGovNistJavaxSipStackSIPDialog_setBranchWithAndroidGovNistJavaxSipHeaderVia_withNSString_(self, via, method);
  [newRequest setHeaderWithAndroidJavaxSipHeaderHeader:via];
  [newRequest setHeaderWithAndroidJavaxSipHeaderHeader:cseq];
  [newRequest setHeaderWithAndroidJavaxSipHeaderHeader:from];
  [newRequest setHeaderWithAndroidJavaxSipHeaderHeader:to];
  [newRequest setHeaderWithAndroidJavaxSipHeaderHeader:[self getCallId]];
  @try {
    [newRequest attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:create_AndroidGovNistJavaxSipHeaderMaxForwards_initWithInt_(70) withBoolean:false];
  }
  @catch (JavaLangException *d) {
  }
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultUserAgentHeader() != nil) {
    [newRequest setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultUserAgentHeader()];
  }
  return newRequest;
}

- (void)setBranchWithAndroidGovNistJavaxSipHeaderVia:(AndroidGovNistJavaxSipHeaderVia *)via
                                        withNSString:(NSString *)method {
  AndroidGovNistJavaxSipStackSIPDialog_setBranchWithAndroidGovNistJavaxSipHeaderVia_withNSString_(self, via, method);
}

- (void)sendRequestWithAndroidJavaxSipClientTransaction:(id<AndroidJavaxSipClientTransaction>)clientTransactionId {
  [self sendRequestWithAndroidJavaxSipClientTransaction:clientTransactionId withBoolean:!self->isBackToBackUserAgent_];
}

- (void)sendRequestWithAndroidJavaxSipClientTransaction:(id<AndroidJavaxSipClientTransaction>)clientTransaction
                                            withBoolean:(jboolean)allowInterleaving {
  if (clientTransaction == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null parameter");
  if ((!allowInterleaving) && [((NSString *) nil_chk([((id<AndroidJavaxSipMessageRequest>) nil_chk([clientTransaction getRequest])) getMethod])) isEqual:AndroidJavaxSipMessageRequest_INVITE]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$@", @"SIPDialog::sendRequest ", self, @" clientTransaction = ", clientTransaction)];
    [((id<JavaUtilConcurrentExecutorService>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getReinviteExecutor])) executeWithJavaLangRunnable:(create_AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender_initWithAndroidGovNistJavaxSipStackSIPDialog_withAndroidJavaxSipClientTransaction_(self, clientTransaction))];
    return;
  }
  AndroidGovNistJavaxSipMessageSIPRequest *dialogRequest = [((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(clientTransaction, AndroidGovNistJavaxSipStackSIPClientTransaction_class_())) getOriginalRequest];
  JreStrongAssign(&self->proxyAuthorizationHeader_, (id<AndroidJavaxSipHeaderProxyAuthorizationHeader>) cast_check([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(dialogRequest)) getHeaderWithNSString:AndroidJavaxSipHeaderProxyAuthorizationHeader_NAME], AndroidJavaxSipHeaderProxyAuthorizationHeader_class_()));
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$@", @"SIPDialog::sendRequest:dialog.sendRequest  dialog = ", self, @"\ndialogRequest = \n", dialogRequest)];
  if ([((NSString *) nil_chk([dialogRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_ACK] || [((NSString *) nil_chk([dialogRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_CANCEL]) @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$$", @"Bad Request Method. ", [dialogRequest getMethod]));
  if (byeSent_ && [self isTerminatedOnBye] && ![((NSString *) nil_chk([dialogRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_BYE]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:JreStrcat("$@", @"BYE already sent for ", self)];
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Cannot send request; BYE already sent");
  }
  if ([dialogRequest getTopmostVia] == nil) {
    AndroidGovNistJavaxSipHeaderVia *via = [((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(clientTransaction, AndroidGovNistJavaxSipStackSIPClientTransaction_class_())) getOutgoingViaHeader];
    [dialogRequest addHeaderWithAndroidJavaxSipHeaderHeader:via];
  }
  if (![((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([self getCallId])) getCallId])) java_equalsIgnoreCase:[((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([dialogRequest getCallId])) getCallId]]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:JreStrcat("$@", @"CallID ", [self getCallId])];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:JreStrcat("$$", @"SIPDialog::sendRequest:RequestCallID = ", [((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([dialogRequest getCallId])) getCallId])];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:JreStrcat("$@", @"dialog =  ", self)];
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Bad call ID in request");
  }
  [((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(clientTransaction, AndroidGovNistJavaxSipStackSIPClientTransaction_class_())) setDialogWithAndroidGovNistJavaxSipStackSIPDialog:self withNSString:self->dialogId_];
  [self addTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:(id<AndroidGovNistJavaxSipStackSIPTransaction>) cast_check(clientTransaction, AndroidGovNistJavaxSipStackSIPTransaction_class_())];
  [((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(clientTransaction, AndroidGovNistJavaxSipStackSIPClientTransaction_class_())) setTransactionMappedWithBoolean:true];
  AndroidGovNistJavaxSipHeaderFrom *from = (AndroidGovNistJavaxSipHeaderFrom *) cast_chk([dialogRequest getFrom], [AndroidGovNistJavaxSipHeaderFrom class]);
  AndroidGovNistJavaxSipHeaderTo *to = (AndroidGovNistJavaxSipHeaderTo *) cast_chk([dialogRequest getTo], [AndroidGovNistJavaxSipHeaderTo class]);
  if ([self getLocalTag] != nil && [((AndroidGovNistJavaxSipHeaderFrom *) nil_chk(from)) getTag] != nil && ![((NSString *) nil_chk([from getTag])) isEqual:[self getLocalTag]]) @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$$", @"From tag mismatch expecting  ", [self getLocalTag]));
  if ([self getRemoteTag] != nil && [((AndroidGovNistJavaxSipHeaderTo *) nil_chk(to)) getTag] != nil && ![((NSString *) nil_chk([to getTag])) isEqual:[self getRemoteTag]]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) warnWithNSString:JreStrcat("$$", @"SIPDialog::sendRequest:To header tag mismatch expecting ", [self getRemoteTag])];
  }
  if ([self getLocalTag] == nil && [((NSString *) nil_chk([dialogRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_NOTIFY]) {
    if (![((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_SUBSCRIBE]) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Trying to send NOTIFY without SUBSCRIBE Dialog!");
    [self setLocalTagWithNSString:[((AndroidGovNistJavaxSipHeaderFrom *) nil_chk(from)) getTag]];
  }
  @try {
    if ([self getLocalTag] != nil) [((AndroidGovNistJavaxSipHeaderFrom *) nil_chk(from)) setTagWithNSString:[self getLocalTag]];
    if ([self getRemoteTag] != nil) [((AndroidGovNistJavaxSipHeaderTo *) nil_chk(to)) setTagWithNSString:[self getRemoteTag]];
  }
  @catch (JavaTextParseException *ex) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
  }
  id<AndroidJavaxSipAddressHop> hop = [((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(clientTransaction, AndroidGovNistJavaxSipStackSIPClientTransaction_class_())) getNextHop];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$$I", @"SIPDialog::sendRequest:Using hop = ", [((id<AndroidJavaxSipAddressHop>) nil_chk(hop)) getHost], @" : ", [hop getPort])];
  @try {
    AndroidGovNistJavaxSipStackMessageChannel *messageChannel = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) createRawMessageChannelWithNSString:[((id<AndroidJavaxSipListeningPoint>) nil_chk([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk([self getSipProvider])) getListeningPointWithNSString:[hop getTransport]])) getIPAddress] withInt:self->firstTransactionPort_ withAndroidJavaxSipAddressHop:hop];
    AndroidGovNistJavaxSipStackMessageChannel *oldChannel = [((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(clientTransaction, AndroidGovNistJavaxSipStackSIPClientTransaction_class_())) getMessageChannel];
    [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(oldChannel)) uncache];
    if (!((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->cacheClientConnections_) {
      oldChannel->useCount_--;
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$I", @"SIPDialog::sendRequest:oldChannel: useCount ", oldChannel->useCount_)];
    }
    if (messageChannel == nil) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"Null message channel using outbound proxy !"];
      id<AndroidJavaxSipAddressHop> outboundProxy = [((id<AndroidJavaxSipAddressRouter>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getRouterWithAndroidGovNistJavaxSipMessageSIPRequest:dialogRequest])) getOutboundProxy];
      if (outboundProxy == nil) @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$@", @"No route found! hop=", hop));
      messageChannel = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) createRawMessageChannelWithNSString:[((id<AndroidJavaxSipListeningPoint>) nil_chk([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk([self getSipProvider])) getListeningPointWithNSString:[outboundProxy getTransport]])) getIPAddress] withInt:self->firstTransactionPort_ withAndroidJavaxSipAddressHop:outboundProxy];
      if (messageChannel != nil) [((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(clientTransaction, AndroidGovNistJavaxSipStackSIPClientTransaction_class_())) setEncapsulatedChannelWithAndroidGovNistJavaxSipStackMessageChannel:messageChannel];
    }
    else {
      [((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(clientTransaction, AndroidGovNistJavaxSipStackSIPClientTransaction_class_())) setEncapsulatedChannelWithAndroidGovNistJavaxSipStackMessageChannel:messageChannel];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"SIPDialog::sendRequest:using message channel ", messageChannel)];
    }
    if (messageChannel != nil) messageChannel->useCount_++;
    if ((!((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->cacheClientConnections_) && oldChannel != nil && oldChannel->useCount_ <= 0) [oldChannel close];
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:@"Exception" withNSException:ex];
    @throw create_AndroidJavaxSipSipException_initWithNSString_withNSException_(@"Could not create message channel", ex);
  }
  @try {
    jlong cseqNumber = [dialogRequest getCSeq] == nil ? [self getLocalSeqNumber] : [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([dialogRequest getCSeq])) getSeqNumber];
    if (cseqNumber > [self getLocalSeqNumber]) {
      AndroidGovNistJavaxSipStackSIPDialog_setLocalSequenceNumberWithLong_(self, cseqNumber);
    }
    else {
      AndroidGovNistJavaxSipStackSIPDialog_setLocalSequenceNumberWithLong_(self, [self getLocalSeqNumber] + 1);
    }
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$J", @"SIPDialog::sendRequest:setting Seq Number to ", [self getLocalSeqNumber])];
    [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([dialogRequest getCSeq])) setSeqNumberWithLong:[self getLocalSeqNumber]];
  }
  @catch (AndroidJavaxSipInvalidArgumentException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:[((AndroidJavaxSipInvalidArgumentException *) nil_chk(ex)) getMessage]];
  }
  @try {
    [((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(clientTransaction, AndroidGovNistJavaxSipStackSIPClientTransaction_class_())) sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:dialogRequest];
    if ([((NSString *) nil_chk([dialogRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_BYE]) {
      self->byeSent_ = true;
      if ([self isTerminatedOnBye]) {
        [self setStateWithInt:AndroidJavaxSipDialogState__TERMINATED];
      }
    }
  }
  @catch (JavaIoIOException *ex) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_withNSException_(@"error sending message", ex);
  }
}

- (jboolean)toRetransmitFinalResponseWithInt:(jint)T2 {
  return AndroidGovNistJavaxSipStackSIPDialog_toRetransmitFinalResponseWithInt_(self, T2);
}

- (void)setRetransmissionTicks {
  self->retransmissionTicksLeft_ = 1;
  self->prevRetransmissionTicks_ = 1;
}

- (void)resendAck {
  if ([self getLastAckSent] != nil) {
    if ([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk([self getLastAckSent])) getHeaderWithNSString:AndroidJavaxSipHeaderTimeStampHeader_NAME] != nil && ((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->generateTimeStampHeader_) {
      AndroidGovNistJavaxSipHeaderTimeStamp *ts = create_AndroidGovNistJavaxSipHeaderTimeStamp_init();
      @try {
        [ts setTimeStampWithFloat:JavaLangSystem_currentTimeMillis()];
        [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk([self getLastAckSent])) setHeaderWithAndroidJavaxSipHeaderHeader:ts];
      }
      @catch (AndroidJavaxSipInvalidArgumentException *e) {
      }
    }
    AndroidGovNistJavaxSipStackSIPDialog_sendAckWithAndroidJavaxSipMessageRequest_withBoolean_(self, [self getLastAckSent], false);
  }
  else {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"SIPDialog::resendAck:lastAck sent is NULL hence not resending ACK"];
  }
}

- (NSString *)getMethod {
  return self->method_;
}

- (void)startTimerWithAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)transaction {
  if (self->timerTask_ != nil && timerTask_->transaction_ == transaction) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"Timer already running for ", [self getDialogId])];
    return;
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"Starting dialog timer for ", [self getDialogId])];
  [self acquireTimerTaskSem];
  @try {
    if (self->timerTask_ != nil) {
      JreStrongAssign(&self->timerTask_->transaction_, transaction);
    }
    else {
      JreStrongAssignAndConsume(&self->timerTask_, new_AndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask_initWithAndroidGovNistJavaxSipStackSIPDialog_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, transaction));
      if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer] != nil && [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) isStarted]) {
        [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) scheduleWithFixedDelayWithAndroidGovNistJavaxSipStackSIPStackTimerTask:timerTask_ withLong:[((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(transaction)) getBaseTimerInterval] withLong:[transaction getBaseTimerInterval]];
      }
    }
  }
  @finally {
    [self releaseTimerTaskSem];
  }
  [self setRetransmissionTicks];
}

- (void)stopTimer {
  @try {
    [self acquireTimerTaskSem];
    @try {
      if (self->timerTask_ != nil) {
        [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([self getStack])) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:timerTask_];
        JreStrongAssign(&self->timerTask_, nil);
      }
      if (self->earlyStateTimerTask_ != nil) {
        [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([self getStack])) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:self->earlyStateTimerTask_];
        JreStrongAssign(&self->earlyStateTimerTask_, nil);
      }
    }
    @finally {
      [self releaseTimerTaskSem];
    }
  }
  @catch (JavaLangException *ex) {
  }
}

- (id<AndroidJavaxSipMessageRequest>)createPrackWithAndroidJavaxSipMessageResponse:(id<AndroidJavaxSipMessageResponse>)relResponse {
  if ([self getState] == nil || [((AndroidJavaxSipDialogState *) nil_chk([self getState])) isEqual:JreLoadStatic(AndroidJavaxSipDialogState, TERMINATED)]) @throw create_AndroidJavaxSipDialogDoesNotExistException_initWithNSString_(@"Dialog not initialized or terminated");
  if ((AndroidGovNistJavaxSipHeaderRSeq *) cast_chk([((id<AndroidJavaxSipMessageResponse>) nil_chk(relResponse)) getHeaderWithNSString:AndroidJavaxSipHeaderRSeqHeader_NAME], [AndroidGovNistJavaxSipHeaderRSeq class]) == nil) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Missing RSeq Header");
  }
  @try {
    AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = (AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(relResponse, [AndroidGovNistJavaxSipMessageSIPResponse class]);
    AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = AndroidGovNistJavaxSipStackSIPDialog_createRequestWithNSString_withNSString_(self, AndroidJavaxSipMessageRequest_PRACK, [((AndroidGovNistJavaxSipHeaderVia *) nil_chk([sipResponse getTopmostVia])) getTransport]);
    NSString *toHeaderTag = [((id<AndroidJavaxSipHeaderToHeader>) nil_chk([sipResponse getTo])) getTag];
    [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) setToTagWithNSString:toHeaderTag];
    AndroidGovNistJavaxSipHeaderRAck *rack = create_AndroidGovNistJavaxSipHeaderRAck_init();
    AndroidGovNistJavaxSipHeaderRSeq *rseq = (AndroidGovNistJavaxSipHeaderRSeq *) cast_chk([relResponse getHeaderWithNSString:AndroidJavaxSipHeaderRSeqHeader_NAME], [AndroidGovNistJavaxSipHeaderRSeq class]);
    [rack setMethodWithNSString:[((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipResponse getCSeq])) getMethod]];
    [rack setCSequenceNumberWithLong:(jint) [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipResponse getCSeq])) getSeqNumber]];
    [rack setRSequenceNumberWithLong:[((AndroidGovNistJavaxSipHeaderRSeq *) nil_chk(rseq)) getSeqNumber]];
    [sipRequest setHeaderWithAndroidJavaxSipHeaderHeader:rack];
    if (self->proxyAuthorizationHeader_ != nil) {
      [sipRequest addHeaderWithAndroidJavaxSipHeaderHeader:proxyAuthorizationHeader_];
    }
    return sipRequest;
  }
  @catch (JavaLangException *ex) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
    return nil;
  }
}

- (void)updateRequestWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest {
  AndroidGovNistJavaxSipStackSIPDialog_updateRequestWithAndroidGovNistJavaxSipMessageSIPRequest_(self, sipRequest);
}

- (id<AndroidJavaxSipMessageRequest>)createAckWithLong:(jlong)cseqno {
  if (![((NSString *) nil_chk(method_)) isEqual:AndroidJavaxSipMessageRequest_INVITE]) @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$$", @"Dialog was not created with an INVITE", method_));
  if (cseqno <= 0) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(@"bad cseq <= 0 ");
  else if (cseqno > ((JreLShift64(((jlong) 1), 32)) - 1)) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(JreStrcat("$J", @"bad cseq > ", ((JreLShift64(((jlong) 1), 32)) - 1)));
  if ([self getRemoteTarget] == nil) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Cannot create ACK - no remote Target!");
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$J", @"createAck ", self, @" cseqno ", cseqno)];
  if (lastInviteOkReceived_ < cseqno) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"WARNING : Attempt to crete ACK without OK ", self)];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"LAST RESPONSE = ", [self getLastResponseStatusCode])];
    @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$J$J", @"Dialog not yet established -- no OK response! lastInviteOkReceived=", lastInviteOkReceived_, @" cseqno=", cseqno));
  }
  @try {
    id<AndroidJavaxSipAddressSipURI> uri4transport = nil;
    if (self->routeList_ != nil && ![self->routeList_ isEmpty]) {
      AndroidGovNistJavaxSipHeaderRoute *r = (AndroidGovNistJavaxSipHeaderRoute *) cast_chk([self->routeList_ getFirst], [AndroidGovNistJavaxSipHeaderRoute class]);
      uri4transport = ((id<AndroidJavaxSipAddressSipURI>) cast_check([((id<AndroidJavaxSipAddressAddress>) nil_chk([((AndroidGovNistJavaxSipHeaderRoute *) nil_chk(r)) getAddress])) getURI], AndroidJavaxSipAddressSipURI_class_()));
    }
    else {
      uri4transport = ((id<AndroidJavaxSipAddressSipURI>) cast_check([((id<AndroidJavaxSipAddressAddress>) nil_chk([self getRemoteTarget])) getURI], AndroidJavaxSipAddressSipURI_class_()));
    }
    NSString *transport = [((id<AndroidJavaxSipAddressSipURI>) nil_chk(uri4transport)) getTransportParam];
    AndroidGovNistJavaxSipListeningPointImpl *lp;
    if ([uri4transport isSecure]) {
      if (transport != nil && [transport java_equalsIgnoreCase:AndroidJavaxSipListeningPoint_UDP]) {
        @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$@", @"Cannot create ACK - impossible to use sips uri with transport UDP:", uri4transport));
      }
      transport = AndroidJavaxSipListeningPoint_TLS;
    }
    if (transport != nil) {
      lp = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(sipProvider_)) getListeningPointWithNSString:transport], [AndroidGovNistJavaxSipListeningPointImpl class]);
    }
    else {
      if ([uri4transport isSecure]) {
        lp = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(sipProvider_)) getListeningPointWithNSString:AndroidJavaxSipListeningPoint_TLS], [AndroidGovNistJavaxSipListeningPointImpl class]);
      }
      else {
        lp = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(sipProvider_)) getListeningPointWithNSString:AndroidJavaxSipListeningPoint_UDP], [AndroidGovNistJavaxSipListeningPointImpl class]);
        if (lp == nil) {
          lp = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(sipProvider_)) getListeningPointWithNSString:AndroidJavaxSipListeningPoint_TCP], [AndroidGovNistJavaxSipListeningPointImpl class]);
        }
      }
    }
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"uri4transport =  ", uri4transport)];
    if (lp == nil) {
      if (![uri4transport isSecure]) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$", @"No Listening point for ", uri4transport, @" Using last response topmost")];
        lp = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(sipProvider_)) getListeningPointWithNSString:[((AndroidGovNistJavaxSipHeaderVia *) nil_chk(self->lastResponseTopMostVia_)) getTransport]], [AndroidGovNistJavaxSipListeningPointImpl class]);
      }
      if (lp == nil) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:JreStrcat("$@", @"remoteTargetURI ", [((id<AndroidJavaxSipAddressAddress>) nil_chk([self getRemoteTarget])) getURI])];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:JreStrcat("$@", @"uri4transport = ", uri4transport)];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:JreStrcat("$$", @"No LP found for transport=", transport)];
        @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$$", @"Cannot create ACK - no ListeningPoint for transport towards next hop found:", transport));
      }
    }
    AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = create_AndroidGovNistJavaxSipMessageSIPRequest_init();
    [sipRequest setMethodWithNSString:AndroidJavaxSipMessageRequest_ACK];
    [sipRequest setRequestURIWithAndroidJavaxSipAddressURI:(AndroidGovNistJavaxSipAddressSipUri *) cast_chk([((id<AndroidJavaxSipAddressURI>) nil_chk([((id<AndroidJavaxSipAddressAddress>) nil_chk([self getRemoteTarget])) getURI])) java_clone], [AndroidGovNistJavaxSipAddressSipUri class])];
    [sipRequest setCallIdWithAndroidJavaxSipHeaderCallIdHeader:[self getCallId]];
    [sipRequest setCSeqWithAndroidJavaxSipHeaderCSeqHeader:create_AndroidGovNistJavaxSipHeaderCSeq_initWithLong_withNSString_(cseqno, AndroidJavaxSipMessageRequest_ACK)];
    id<JavaUtilList> vias = create_JavaUtilArrayList_init();
    AndroidGovNistJavaxSipHeaderVia *via = self->lastResponseTopMostVia_;
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"lastResponseTopMostVia ", lastResponseTopMostVia_)];
    [((AndroidGovNistJavaxSipHeaderVia *) nil_chk(via)) removeParameters];
    if (originalRequest_ != nil && [originalRequest_ getTopmostVia] != nil) {
      AndroidGovNistCoreNameValueList *originalRequestParameters = [((AndroidGovNistJavaxSipHeaderVia *) nil_chk([originalRequest_ getTopmostVia])) getParameters];
      if (originalRequestParameters != nil && [originalRequestParameters size] > 0) {
        [via setParametersWithAndroidGovNistCoreNameValueList:(AndroidGovNistCoreNameValueList *) cast_chk([originalRequestParameters java_clone], [AndroidGovNistCoreNameValueList class])];
      }
    }
    [via setBranchWithNSString:[((AndroidGovNistJavaxSipUtils *) nil_chk(AndroidGovNistJavaxSipUtils_getInstance())) generateBranchId]];
    [vias addWithId:via];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$@", @"Adding via to the ACK we are creating : ", via, @" lastResponseTopMostVia ", lastResponseTopMostVia_)];
    [sipRequest setViaWithJavaUtilList:vias];
    AndroidGovNistJavaxSipHeaderFrom *from = create_AndroidGovNistJavaxSipHeaderFrom_init();
    [from setAddressWithAndroidJavaxSipAddressAddress:[self getLocalParty]];
    [from setTagWithNSString:self->myTag_];
    [sipRequest setFromWithAndroidJavaxSipHeaderFromHeader:from];
    AndroidGovNistJavaxSipHeaderTo *to = create_AndroidGovNistJavaxSipHeaderTo_init();
    [to setAddressWithAndroidJavaxSipAddressAddress:[self getRemoteParty]];
    if (hisTag_ != nil) [to setTagWithNSString:self->hisTag_];
    [sipRequest setToWithAndroidJavaxSipHeaderToHeader:to];
    [sipRequest setMaxForwardsWithAndroidJavaxSipHeaderMaxForwardsHeader:create_AndroidGovNistJavaxSipHeaderMaxForwards_initWithInt_(70)];
    if (self->originalRequest_ != nil) {
      AndroidGovNistJavaxSipHeaderAuthorization *authorization = [self->originalRequest_ getAuthorization];
      if (authorization != nil) [sipRequest setHeaderWithAndroidJavaxSipHeaderHeader:authorization];
      JreStrongAssign(&originalRequestRecordRouteHeaders_, [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(originalRequest_)) getRecordRouteHeaders]);
      JreStrongAssign(&originalRequest_, nil);
    }
    AndroidGovNistJavaxSipStackSIPDialog_updateRequestWithAndroidGovNistJavaxSipMessageSIPRequest_(self, sipRequest);
    return sipRequest;
  }
  @catch (JavaLangException *ex) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
    @throw create_AndroidJavaxSipSipException_initWithNSString_withNSException_(@"unexpected exception ", ex);
  }
}

- (AndroidGovNistJavaxSipSipProviderImpl *)getSipProvider {
  return self->sipProvider_;
}

- (void)setSipProviderWithAndroidGovNistJavaxSipSipProviderImpl:(AndroidGovNistJavaxSipSipProviderImpl *)sipProvider {
  JreStrongAssign(&self->sipProvider_, sipProvider);
}

- (void)setResponseTagsWithAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)sipResponse {
  if ([self getLocalTag] != nil || [self getRemoteTag] != nil) {
    return;
  }
  NSString *responseFromTag = [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) getFromTag];
  if (responseFromTag != nil) {
    if ([responseFromTag isEqual:[self getLocalTag]]) {
      [sipResponse setToTagWithNSString:[self getRemoteTag]];
    }
    else if ([responseFromTag isEqual:[self getRemoteTag]]) {
      [sipResponse setToTagWithNSString:[self getLocalTag]];
    }
  }
  else {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) warnWithNSString:@"No from tag in response! Not RFC 3261 compatible."];
  }
}

- (void)setLastResponseWithAndroidGovNistJavaxSipStackSIPTransaction:(id<AndroidGovNistJavaxSipStackSIPTransaction>)transaction
                        withAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)sipResponse {
  JreStrongAssign(&self->callIdHeader_, [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) getCallId]);
  jint statusCode = [sipResponse getStatusCode];
  if (statusCode == 100) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"Invalid status code - 100 in setLastResponse - ignoring"];
    return;
  }
  @try {
    JreStrongAssign(&self->lastResponseStatusCode_, JavaLangInteger_valueOfWithInt_(statusCode));
    JreStrongAssign(&self->lastResponseTopMostVia_, (AndroidGovNistJavaxSipHeaderVia *) cast_chk([((AndroidGovNistJavaxSipHeaderVia *) nil_chk([sipResponse getTopmostVia])) java_clone], [AndroidGovNistJavaxSipHeaderVia class]));
    NSString *cseqMethod = [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipResponse getCSeqHeader])) getMethod];
    JreStrongAssign(&self->lastResponseMethod_, cseqMethod);
    jlong responseCSeqNumber = [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipResponse getCSeq])) getSeqNumber];
    jboolean is100ClassResponse = statusCode / 100 == 1;
    jboolean is200ClassResponse = statusCode / 100 == 2;
    self->lastResponseCSeqNumber_ = responseCSeqNumber;
    if ([((NSString *) nil_chk(AndroidJavaxSipMessageRequest_INVITE)) isEqual:cseqMethod]) {
      self->lastInviteResponseCSeqNumber_ = responseCSeqNumber;
      self->lastInviteResponseCode_ = statusCode;
    }
    if ([sipResponse getToTag] != nil) {
      JreStrongAssign(&self->lastResponseToTag_, [sipResponse getToTag]);
    }
    if ([sipResponse getFromTag] != nil) {
      JreStrongAssign(&self->lastResponseFromTag_, [sipResponse getFromTag]);
    }
    if (transaction != nil) {
      JreStrongAssign(&self->lastResponseDialogId_, [sipResponse getDialogIdWithBoolean:[transaction isServerTransaction]]);
    }
    [self setAssigned];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$@$$$@", @"sipDialog: setLastResponse:", self, @" lastResponse = ", self->lastResponseStatusCode_, @" response ", [sipResponse description], @" topMostViaHeader ", lastResponseTopMostVia_)];
    if ([self getState] == JreLoadStatic(AndroidJavaxSipDialogState, TERMINATED)) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"sipDialog: setLastResponse -- dialog is terminated - ignoring "];
      if ([((NSString *) nil_chk(cseqMethod)) isEqual:AndroidJavaxSipMessageRequest_INVITE] && statusCode == 200) {
        self->lastInviteOkReceived_ = JavaLangMath_maxWithLong_withLong_(responseCSeqNumber, self->lastInviteOkReceived_);
      }
      return;
    }
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"cseqMethod = ", cseqMethod)];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"dialogState = ", [self getState])];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"method = ", [self getMethod])];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$I", @"statusCode = ", statusCode)];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"transaction = ", transaction)];
    if (transaction == nil || [AndroidJavaxSipClientTransaction_class_() isInstance:transaction]) {
      if (AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_(cseqMethod)) {
        if ([self getState] == nil && is100ClassResponse) {
          [self setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_EARLY_STATE];
          if (([sipResponse getToTag] != nil || ((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->rfc2543Supported_) && [self getRemoteTag] == nil) {
            [self setRemoteTagWithNSString:[sipResponse getToTag]];
            [self setDialogIdWithNSString:[sipResponse getDialogIdWithBoolean:false]];
            [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) putDialogWithAndroidGovNistJavaxSipStackSIPDialog:self];
            AndroidGovNistJavaxSipStackSIPDialog_addRouteWithAndroidGovNistJavaxSipMessageSIPResponse_(self, sipResponse);
          }
        }
        else if ([self getState] != nil && [((AndroidJavaxSipDialogState *) nil_chk([self getState])) isEqual:JreLoadStatic(AndroidJavaxSipDialogState, EARLY)] && is100ClassResponse) {
          if ([((NSString *) nil_chk(cseqMethod)) isEqual:[self getMethod]] && transaction != nil && ([sipResponse getToTag] != nil || ((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->rfc2543Supported_)) {
            [self setRemoteTagWithNSString:[sipResponse getToTag]];
            [self setDialogIdWithNSString:[sipResponse getDialogIdWithBoolean:false]];
            [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) putDialogWithAndroidGovNistJavaxSipStackSIPDialog:self];
            AndroidGovNistJavaxSipStackSIPDialog_addRouteWithAndroidGovNistJavaxSipMessageSIPResponse_(self, sipResponse);
          }
        }
        else if (is200ClassResponse) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$Z", @"pendingRouteUpdateOn202Response : ", self->pendingRouteUpdateOn202Response_)];
          if ([((NSString *) nil_chk(cseqMethod)) isEqual:[self getMethod]] && ([sipResponse getToTag] != nil || ((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->rfc2543Supported_) && ([self getState] != JreLoadStatic(AndroidJavaxSipDialogState, CONFIRMED) || ([self getState] == JreLoadStatic(AndroidJavaxSipDialogState, CONFIRMED) && [cseqMethod isEqual:AndroidJavaxSipMessageRequest_SUBSCRIBE] && self->pendingRouteUpdateOn202Response_ && is200ClassResponse))) {
            if ([self getState] != JreLoadStatic(AndroidJavaxSipDialogState, CONFIRMED)) {
              [self setRemoteTagWithNSString:[sipResponse getToTag]];
              [self setDialogIdWithNSString:[sipResponse getDialogIdWithBoolean:false]];
              [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) putDialogWithAndroidGovNistJavaxSipStackSIPDialog:self];
              AndroidGovNistJavaxSipStackSIPDialog_addRouteWithAndroidGovNistJavaxSipMessageSIPResponse_(self, sipResponse);
              [self setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_CONFIRMED_STATE];
            }
            if ([cseqMethod isEqual:AndroidJavaxSipMessageRequest_SUBSCRIBE] && is200ClassResponse && self->pendingRouteUpdateOn202Response_) {
              [self setRemoteTagWithNSString:[sipResponse getToTag]];
              AndroidGovNistJavaxSipStackSIPDialog_addRouteWithAndroidGovNistJavaxSipMessageSIPResponse_(self, sipResponse);
              self->pendingRouteUpdateOn202Response_ = false;
            }
          }
          if ([cseqMethod isEqual:AndroidJavaxSipMessageRequest_INVITE]) {
            self->lastInviteOkReceived_ = JavaLangMath_maxWithLong_withLong_(responseCSeqNumber, self->lastInviteOkReceived_);
            if ([self getState] != nil && [((AndroidJavaxSipDialogState *) nil_chk([self getState])) getValue] == AndroidGovNistJavaxSipStackSIPDialog_CONFIRMED_STATE && transaction != nil) {
              AndroidGovNistJavaxSipStackSIPDialog_doTargetRefreshWithAndroidGovNistJavaxSipMessageSIPMessage_(self, sipResponse);
            }
          }
        }
        else if (statusCode >= 300 && statusCode <= 699 && ([self getState] == nil || ([((NSString *) nil_chk(cseqMethod)) isEqual:[self getMethod]] && [((AndroidJavaxSipDialogState *) nil_chk([self getState])) getValue] == AndroidGovNistJavaxSipStackSIPDialog_EARLY_STATE))) {
          [self setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE];
        }
        if ([self getState] != JreLoadStatic(AndroidJavaxSipDialogState, CONFIRMED) && [self getState] != JreLoadStatic(AndroidJavaxSipDialogState, TERMINATED)) {
          if ([self getOriginalRequestRecordRouteHeaders] != nil) {
            id<JavaUtilListIterator> it = [((AndroidGovNistJavaxSipHeaderRecordRouteList *) nil_chk([self getOriginalRequestRecordRouteHeaders])) listIteratorWithInt:[((AndroidGovNistJavaxSipHeaderRecordRouteList *) nil_chk([self getOriginalRequestRecordRouteHeaders])) size]];
            while ([((id<JavaUtilListIterator>) nil_chk(it)) hasPrevious]) {
              AndroidGovNistJavaxSipHeaderRecordRoute *rr = [it previous];
              AndroidGovNistJavaxSipHeaderRoute *route = (AndroidGovNistJavaxSipHeaderRoute *) cast_chk([((AndroidGovNistJavaxSipHeaderRouteList *) nil_chk(routeList_)) getFirst], [AndroidGovNistJavaxSipHeaderRoute class]);
              if (route != nil && [((id<AndroidJavaxSipAddressAddress>) nil_chk([((AndroidGovNistJavaxSipHeaderRecordRoute *) nil_chk(rr)) getAddress])) isEqual:[route getAddress]]) {
                [((AndroidGovNistJavaxSipHeaderRouteList *) nil_chk(routeList_)) removeFirst];
              }
              else break;
            }
          }
        }
      }
      else if ([((NSString *) nil_chk(cseqMethod)) isEqual:AndroidJavaxSipMessageRequest_NOTIFY] && ([((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_SUBSCRIBE] || [((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_REFER]) && is200ClassResponse && [self getState] == nil) {
        [self setDialogIdWithNSString:[sipResponse getDialogIdWithBoolean:true]];
        [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) putDialogWithAndroidGovNistJavaxSipStackSIPDialog:self];
        [self setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_CONFIRMED_STATE];
      }
      else if ([cseqMethod isEqual:AndroidJavaxSipMessageRequest_BYE] && is200ClassResponse && [self isTerminatedOnBye]) {
        [self setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE];
      }
    }
    else {
      if ([((NSString *) nil_chk(cseqMethod)) isEqual:AndroidJavaxSipMessageRequest_BYE] && is200ClassResponse && [self isTerminatedOnBye]) {
        [self setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE];
      }
      else {
        jboolean doPutDialog = false;
        if ([self getLocalTag] == nil && [((id<AndroidJavaxSipHeaderToHeader>) nil_chk([sipResponse getTo])) getTag] != nil && AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_(cseqMethod) && [cseqMethod isEqual:[self getMethod]]) {
          [self setLocalTagWithNSString:[((id<AndroidJavaxSipHeaderToHeader>) nil_chk([sipResponse getTo])) getTag]];
          doPutDialog = true;
        }
        if (!is200ClassResponse) {
          if (is100ClassResponse) {
            if (doPutDialog) {
              [self setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_EARLY_STATE];
              [self setDialogIdWithNSString:[sipResponse getDialogIdWithBoolean:true]];
              [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) putDialogWithAndroidGovNistJavaxSipStackSIPDialog:self];
            }
          }
          else {
            if (statusCode == 489 && ([cseqMethod isEqual:AndroidJavaxSipMessageRequest_NOTIFY] || [cseqMethod isEqual:AndroidJavaxSipMessageRequest_SUBSCRIBE])) {
              [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"RFC 3265 : Not setting dialog to TERMINATED for 489"];
            }
            else {
              if (![self isReInvite] && [self getState] != JreLoadStatic(AndroidJavaxSipDialogState, CONFIRMED)) {
                [self setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE];
              }
            }
          }
        }
        else {
          if (self->dialogState_ <= AndroidGovNistJavaxSipStackSIPDialog_EARLY_STATE && ([cseqMethod isEqual:AndroidJavaxSipMessageRequest_INVITE] || [cseqMethod isEqual:AndroidJavaxSipMessageRequest_SUBSCRIBE] || [cseqMethod isEqual:AndroidJavaxSipMessageRequest_REFER])) {
            [self setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_CONFIRMED_STATE];
          }
          if (doPutDialog) {
            [self setDialogIdWithNSString:[sipResponse getDialogIdWithBoolean:true]];
            [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) putDialogWithAndroidGovNistJavaxSipStackSIPDialog:self];
          }
        }
      }
    }
  }
  @finally {
    if ([((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipResponse getCSeq])) getMethod])) isEqual:AndroidJavaxSipMessageRequest_INVITE] && transaction != nil && [AndroidJavaxSipClientTransaction_class_() isInstance:transaction] && [self getState] != JreLoadStatic(AndroidJavaxSipDialogState, TERMINATED)) {
      [self acquireTimerTaskSem];
      @try {
        if ([self getState] == JreLoadStatic(AndroidJavaxSipDialogState, EARLY)) {
          if (self->earlyStateTimerTask_ != nil) {
            [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:self->earlyStateTimerTask_];
          }
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$I", @"EarlyStateTimerTask craeted ", self->earlyDialogTimeout_ * 1000)];
          JreStrongAssignAndConsume(&self->earlyStateTimerTask_, new_AndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask_initWithAndroidGovNistJavaxSipStackSIPDialog_(self));
          if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer] != nil && [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) isStarted]) {
            [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:self->earlyStateTimerTask_ withLong:self->earlyDialogTimeout_ * 1000];
          }
        }
        else {
          if (self->earlyStateTimerTask_ != nil) {
            [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:self->earlyStateTimerTask_];
            JreStrongAssign(&self->earlyStateTimerTask_, nil);
          }
        }
      }
      @finally {
        [self releaseTimerTaskSem];
      }
    }
  }
}

- (void)startRetransmitTimerWithAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)sipServerTx
                                             withAndroidJavaxSipMessageResponse:(id<AndroidJavaxSipMessageResponse>)response {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$I$$", @"startRetransmitTimer() ", [((id<AndroidJavaxSipMessageResponse>) nil_chk(response)) getStatusCode], @" method ", [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(sipServerTx)) getMethod])];
  if ([sipServerTx isInviteTransaction] && [response getStatusCode] / 100 == 2) {
    [self startTimerWithAndroidGovNistJavaxSipStackSIPServerTransaction:sipServerTx];
  }
}

- (void)doTargetRefreshWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage {
  AndroidGovNistJavaxSipStackSIPDialog_doTargetRefreshWithAndroidGovNistJavaxSipMessageSIPMessage_(self, sipMessage);
}

+ (jboolean)optionPresentWithJavaUtilListIterator:(id<JavaUtilListIterator>)l
                                     withNSString:(NSString *)option {
  return AndroidGovNistJavaxSipStackSIPDialog_optionPresentWithJavaUtilListIterator_withNSString_(l, option);
}

- (id<AndroidJavaxSipMessageResponse>)createReliableProvisionalResponseWithInt:(jint)statusCode {
  if (!(firstTransactionIsServerTransaction_)) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Not a Server Dialog!");
  }
  if (statusCode <= 100 || statusCode > 199) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(@"Bad status code ");
  AndroidGovNistJavaxSipMessageSIPRequest *request = self->originalRequest_;
  if (![((NSString *) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(request)) getMethod])) isEqual:AndroidJavaxSipMessageRequest_INVITE]) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Bad method");
  id<JavaUtilListIterator> list = [request getHeadersWithNSString:AndroidJavaxSipHeaderSupportedHeader_NAME];
  if (list == nil || !AndroidGovNistJavaxSipStackSIPDialog_optionPresentWithJavaUtilListIterator_withNSString_(list, @"100rel")) {
    list = [request getHeadersWithNSString:AndroidJavaxSipHeaderRequireHeader_NAME];
    if (list == nil || !AndroidGovNistJavaxSipStackSIPDialog_optionPresentWithJavaUtilListIterator_withNSString_(list, @"100rel")) {
      @throw create_AndroidJavaxSipSipException_initWithNSString_(@"No Supported/Require 100rel header in the request");
    }
  }
  AndroidGovNistJavaxSipMessageSIPResponse *response = [request createResponseWithInt:statusCode];
  AndroidGovNistJavaxSipHeaderRequire *require = create_AndroidGovNistJavaxSipHeaderRequire_init();
  @try {
    [require setOptionTagWithNSString:@"100rel"];
  }
  @catch (JavaLangException *ex) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
  }
  [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(response)) addHeaderWithAndroidJavaxSipHeaderHeader:require];
  AndroidGovNistJavaxSipHeaderRSeq *rseq = create_AndroidGovNistJavaxSipHeaderRSeq_init();
  [rseq setSeqNumberWithLong:1LL];
  AndroidGovNistJavaxSipHeaderRecordRouteList *rrl = [request getRecordRouteHeaders];
  if (rrl != nil) {
    AndroidGovNistJavaxSipHeaderRecordRouteList *rrlclone = (AndroidGovNistJavaxSipHeaderRecordRouteList *) cast_chk([rrl java_clone], [AndroidGovNistJavaxSipHeaderRecordRouteList class]);
    [response setHeaderWithAndroidJavaxSipHeaderHeader:rrlclone];
  }
  return response;
}

- (jboolean)handlePrackWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)prackRequest {
  if (![self isServer]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"Dropping Prack -- not a server Dialog"];
    return false;
  }
  id<AndroidGovNistJavaxSipStackSIPServerTransaction> sipServerTransaction = (id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check([self getFirstTransactionInt], AndroidGovNistJavaxSipStackSIPServerTransaction_class_());
  IOSByteArray *sipResponse = [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(sipServerTransaction)) getReliableProvisionalResponse];
  if (sipResponse == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"Dropping Prack -- ReliableResponse not found"];
    return false;
  }
  AndroidGovNistJavaxSipHeaderRAck *rack = (AndroidGovNistJavaxSipHeaderRAck *) cast_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(prackRequest)) getHeaderWithNSString:AndroidJavaxSipHeaderRAckHeader_NAME], [AndroidGovNistJavaxSipHeaderRAck class]);
  if (rack == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"Dropping Prack -- rack header not found"];
    return false;
  }
  if (![((NSString *) nil_chk([rack getMethod])) isEqual:[sipServerTransaction getPendingReliableResponseMethod]]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"Dropping Prack -- CSeq Header does not match PRACK"];
    return false;
  }
  if ([rack getCSeqNumberLong] != [sipServerTransaction getPendingReliableCSeqNumber]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"Dropping Prack -- CSeq Header does not match PRACK"];
    return false;
  }
  if ([rack getRSequenceNumber] != [sipServerTransaction getPendingReliableRSeqNumber]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"Dropping Prack -- RSeq Header does not match PRACK"];
    return false;
  }
  return [sipServerTransaction prackRecieved];
}

- (void)sendReliableProvisionalResponseWithAndroidJavaxSipMessageResponse:(id<AndroidJavaxSipMessageResponse>)relResponse {
  if (![self isServer]) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Not a Server Dialog");
  }
  AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = (AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(relResponse, [AndroidGovNistJavaxSipMessageSIPResponse class]);
  if ([((id<AndroidJavaxSipMessageResponse>) nil_chk(relResponse)) getStatusCode] == 100) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Cannot send 100 as a reliable provisional response");
  if ([relResponse getStatusCode] / 100 > 2) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Response code is not a 1xx response - should be in the range 101 to 199 ");
  if ([((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) getToTag] == nil) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Badly formatted response -- To tag mandatory for Reliable Provisional Response");
  }
  id<JavaUtilListIterator> requireList = [relResponse getHeadersWithNSString:AndroidJavaxSipHeaderRequireHeader_NAME];
  jboolean found = false;
  if (requireList != nil) {
    while ([requireList hasNext] && !found) {
      id<AndroidJavaxSipHeaderRequireHeader> rh = (id<AndroidJavaxSipHeaderRequireHeader>) cast_check([requireList next], AndroidJavaxSipHeaderRequireHeader_class_());
      if ([((NSString *) nil_chk([((id<AndroidJavaxSipHeaderRequireHeader>) nil_chk(rh)) getOptionTag])) java_equalsIgnoreCase:@"100rel"]) {
        found = true;
      }
    }
  }
  if (!found) {
    AndroidGovNistJavaxSipHeaderRequire *require = create_AndroidGovNistJavaxSipHeaderRequire_initWithNSString_(@"100rel");
    [relResponse addHeaderWithAndroidJavaxSipHeaderHeader:require];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"Require header with optionTag 100rel is needed -- adding one"];
  }
  id<AndroidGovNistJavaxSipStackSIPServerTransaction> serverTransaction = (id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check([self getFirstTransactionInt], AndroidGovNistJavaxSipStackSIPServerTransaction_class_());
  [self setLastResponseWithAndroidGovNistJavaxSipStackSIPTransaction:serverTransaction withAndroidGovNistJavaxSipMessageSIPResponse:sipResponse];
  [self setDialogIdWithNSString:[sipResponse getDialogIdWithBoolean:true]];
  [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(serverTransaction)) sendReliableProvisionalResponseWithAndroidJavaxSipMessageResponse:relResponse];
  [self startRetransmitTimerWithAndroidGovNistJavaxSipStackSIPServerTransaction:serverTransaction withAndroidJavaxSipMessageResponse:relResponse];
}

- (void)terminateOnByeWithBoolean:(jboolean)terminateFlag {
  self->terminateOnBye_ = terminateFlag;
}

- (void)setAssigned {
  self->isAssigned_ = true;
}

- (jboolean)isAssigned {
  return self->isAssigned_;
}

- (AndroidGovNistJavaxSipHeaderContact *)getMyContactHeader {
  if (contactHeader_ == nil && contactHeaderStringified_ != nil) {
    @try {
      JreStrongAssign(&self->contactHeader_, (AndroidGovNistJavaxSipHeaderContact *) cast_chk([create_AndroidGovNistJavaxSipParserContactParser_initWithNSString_(contactHeaderStringified_) parse], [AndroidGovNistJavaxSipHeaderContact class]));
    }
    @catch (JavaTextParseException *e) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:@"error reparsing the contact header" withNSException:e];
    }
  }
  return contactHeader_;
}

- (jboolean)handleAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)ackTransaction {
  if ([self isAckSeen] && [self getRemoteSeqNumber] == [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(ackTransaction)) getCSeq]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"SIPDialog::handleAck: ACK already seen by dialog -- dropping Ack retransmission"];
    [self acquireTimerTaskSem];
    @try {
      if (self->timerTask_ != nil) {
        [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([self getStack])) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:timerTask_];
        JreStrongAssign(&self->timerTask_, nil);
      }
    }
    @finally {
      [self releaseTimerTaskSem];
    }
    return false;
  }
  else if ([self getState] == JreLoadStatic(AndroidJavaxSipDialogState, TERMINATED)) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"SIPDialog::handleAck: Dialog is terminated -- dropping ACK"];
    return false;
  }
  else {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$J$J", @"SIPDialog::handleAck: lastResponseCSeqNumber = ", lastInviteOkReceived_, @" ackTxCSeq ", [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(ackTransaction)) getCSeq])];
    if (lastResponseStatusCode_ != nil && self->lastInviteResponseCode_ / 100 == 2 && lastInviteResponseCSeqNumber_ == [ackTransaction getCSeq]) {
      [ackTransaction setDialogWithAndroidGovNistJavaxSipStackSIPDialog:self withNSString:lastResponseDialogId_];
      [self ackReceivedWithLong:[ackTransaction getCSeq]];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"SIPDialog::handleACK: ACK for 2XX response --- sending to TU "];
      return true;
    }
    else {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@" INVITE transaction not found"];
      if ([self isBackToBackUserAgent]) {
        [self releaseAckSem];
      }
      return false;
    }
  }
}

- (NSString *)getEarlyDialogId {
  return earlyDialogId_;
}

- (void)releaseAckSem {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$@$Z", @"releaseAckSem-enter]]", self, @" sem=", self->ackSem_, @" b2bua=", self->isBackToBackUserAgent_)];
  if (self->isBackToBackUserAgent_) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$@", @"releaseAckSem]]", self, @" sem=", self->ackSem_)];
    if ([((JavaUtilConcurrentSemaphore *) nil_chk(self->ackSem_)) availablePermits] == 0) {
      [((JavaUtilConcurrentSemaphore *) nil_chk(self->ackSem_)) release__];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$@", @"releaseAckSem]]", self, @" sem=", self->ackSem_)];
    }
  }
}

- (jboolean)isBlockedForReInvite {
  return [((JavaUtilConcurrentSemaphore *) nil_chk(self->ackSem_)) availablePermits] == 0;
}

- (jboolean)takeAckSem {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$@", @"[takeAckSem ", self, @" sem=", self->ackSem_)];
  @try {
    if (![((JavaUtilConcurrentSemaphore *) nil_chk(self->ackSem_)) tryAcquireWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:@"Cannot aquire ACK semaphore "];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$$@", @"Semaphore previously acquired at ", self->stackTrace_, @" sem=", self->ackSem_)];
      return false;
    }
    AndroidGovNistJavaxSipStackSIPDialog_recordStackTrace(self);
  }
  @catch (JavaLangInterruptedException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:@"Cannot aquire ACK semaphore"];
    return false;
  }
  return true;
}

- (void)setLastAckSentWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)lastAckSent {
  AndroidGovNistJavaxSipStackSIPDialog_setLastAckSentWithAndroidGovNistJavaxSipMessageSIPRequest_(self, lastAckSent);
}

- (jboolean)isAtleastOneAckSent {
  return self->isAcknowledged_;
}

- (jboolean)isBackToBackUserAgent {
  return self->isBackToBackUserAgent_;
}

- (void)doDeferredDeleteIfNoAckSentWithLong:(jlong)seqno {
  @synchronized(self) {
    if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer] == nil) {
      [self setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE];
    }
    else if (dialogDeleteIfNoAckSentTask_ == nil) {
      JreStrongAssignAndConsume(&dialogDeleteIfNoAckSentTask_, new_AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask_initWithAndroidGovNistJavaxSipStackSIPDialog_withLong_(self, seqno));
      if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer] != nil && [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) isStarted]) {
        jint delay = AndroidGovNistJavaxSipStackSIPTransactionStack_BASE_TIMER_INTERVAL;
        if (lastTransaction_ != nil) {
          delay = [lastTransaction_ getBaseTimerInterval];
        }
        [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:dialogDeleteIfNoAckSentTask_ withLong:[((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getAckTimeoutFactor] * delay];
      }
    }
  }
}

- (void)setBackToBackUserAgent {
  self->isBackToBackUserAgent_ = true;
}

- (id<AndroidJavaxSipHeaderEventHeader>)getEventHeader {
  return eventHeader_;
}

- (void)setEventHeaderWithAndroidJavaxSipHeaderEventHeader:(id<AndroidJavaxSipHeaderEventHeader>)eventHeader {
  JreStrongAssign(&self->eventHeader_, eventHeader);
}

- (void)setServerTransactionFlagWithBoolean:(jboolean)serverTransactionFlag {
  self->serverTransactionFlag_ = serverTransactionFlag;
}

- (void)setReInviteFlagWithBoolean:(jboolean)reInviteFlag {
  self->reInviteFlag_ = reInviteFlag;
}

- (jboolean)isSequenceNumberValidation {
  return self->sequenceNumberValidation_;
}

- (void)disableSequenceNumberValidation {
  self->sequenceNumberValidation_ = false;
}

- (void)acquireTimerTaskSem {
  jboolean acquired = false;
  @try {
    acquired = [((JavaUtilConcurrentSemaphore *) nil_chk(self->timerTaskLock_)) tryAcquireWithLong:10 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  }
  @catch (JavaLangInterruptedException *ex) {
    acquired = false;
  }
  if (!acquired) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Impossible to acquire the dialog timer task lock");
  }
}

- (void)releaseTimerTaskSem {
  [((JavaUtilConcurrentSemaphore *) nil_chk(self->timerTaskLock_)) release__];
}

- (NSString *)getMergeId {
  return self->firstTransactionMergeId_;
}

- (void)setPendingRouteUpdateOn202ResponseWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest {
  self->pendingRouteUpdateOn202Response_ = true;
  NSString *fromTag = [((id<AndroidJavaxSipHeaderFromHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getFromHeader])) getTag];
  if (fromTag != nil) {
    [self setRemoteTagWithNSString:fromTag];
  }
}

- (NSString *)getLastResponseMethod {
  return lastResponseMethod_;
}

- (JavaLangInteger *)getLastResponseStatusCode {
  return lastResponseStatusCode_;
}

- (jlong)getLastResponseCSeqNumber {
  return lastResponseCSeqNumber_;
}

- (void)cleanUpOnAck {
  if ([self getReleaseReferencesStrategy] != JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, None)) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"cleanupOnAck : ", [self getDialogId])];
    if (originalRequest_ != nil) {
      if (originalRequestRecordRouteHeaders_ != nil) {
        JreStrongAssign(&originalRequestRecordRouteHeadersString_, [originalRequestRecordRouteHeaders_ description]);
      }
      JreStrongAssign(&originalRequestRecordRouteHeaders_, nil);
      JreStrongAssign(&originalRequest_, nil);
    }
    if (firstTransaction_ != nil) {
      if ([firstTransaction_ getOriginalRequest] != nil) {
        [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk([((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk(firstTransaction_)) getOriginalRequest])) cleanUp];
      }
      JreStrongAssign(&firstTransaction_, nil);
    }
    if (lastTransaction_ != nil) {
      if ([lastTransaction_ getOriginalRequest] != nil) {
        [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk([((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk(lastTransaction_)) getOriginalRequest])) cleanUp];
      }
      JreStrongAssign(&lastTransaction_, nil);
    }
    if (callIdHeader_ != nil) {
      JreStrongAssign(&callIdHeaderString_, [callIdHeader_ description]);
      JreStrongAssign(&callIdHeader_, nil);
    }
    if (contactHeader_ != nil) {
      JreStrongAssign(&contactHeaderStringified_, [contactHeader_ description]);
      JreStrongAssign(&contactHeader_, nil);
    }
    if (remoteTarget_ != nil) {
      JreStrongAssign(&remoteTargetStringified_, [remoteTarget_ description]);
      JreStrongAssign(&remoteTarget_, nil);
    }
    if (remoteParty_ != nil) {
      JreStrongAssign(&remotePartyStringified_, [remoteParty_ description]);
      JreStrongAssign(&remoteParty_, nil);
    }
    if (localParty_ != nil) {
      JreStrongAssign(&localPartyStringified_, [localParty_ description]);
      JreStrongAssign(&localParty_, nil);
    }
  }
}

- (void)cleanUp {
  if ([self getReleaseReferencesStrategy] != JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, None)) {
    [self cleanUpOnAck];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"dialog cleanup : ", [self getDialogId])];
    if (eventListeners_ != nil) {
      [eventListeners_ clear];
    }
    JreStrongAssign(&timerTaskLock_, nil);
    JreStrongAssign(&ackSem_, nil);
    JreStrongAssign(&contactHeader_, nil);
    JreStrongAssign(&eventHeader_, nil);
    JreStrongAssign(&firstTransactionId_, nil);
    JreStrongAssign(&firstTransactionMethod_, nil);
    JreStrongAssign(&lastResponseDialogId_, nil);
    JreStrongAssign(&lastResponseMethod_, nil);
    JreStrongAssign(&lastResponseTopMostVia_, nil);
    if (originalRequestRecordRouteHeaders_ != nil) {
      [originalRequestRecordRouteHeaders_ clear];
      JreStrongAssign(&originalRequestRecordRouteHeaders_, nil);
      JreStrongAssign(&originalRequestRecordRouteHeadersString_, nil);
    }
    if (routeList_ != nil) {
      [routeList_ clear];
      JreStrongAssign(&routeList_, nil);
    }
    [((id<JavaUtilSet>) nil_chk(responsesReceivedInForkingCase_)) clear];
  }
}

- (AndroidGovNistJavaxSipHeaderRecordRouteList *)getOriginalRequestRecordRouteHeaders {
  if (originalRequestRecordRouteHeaders_ == nil && originalRequestRecordRouteHeadersString_ != nil) {
    @try {
      JreStrongAssign(&originalRequestRecordRouteHeaders_, (AndroidGovNistJavaxSipHeaderRecordRouteList *) cast_chk([create_AndroidGovNistJavaxSipParserRecordRouteParser_initWithNSString_(originalRequestRecordRouteHeadersString_) parse], [AndroidGovNistJavaxSipHeaderRecordRouteList class]));
    }
    @catch (JavaTextParseException *e) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:@"error reparsing the originalRequest RecordRoute Headers" withNSException:e];
    }
    JreStrongAssign(&originalRequestRecordRouteHeadersString_, nil);
  }
  return originalRequestRecordRouteHeaders_;
}

- (AndroidGovNistJavaxSipHeaderVia *)getLastResponseTopMostVia {
  return lastResponseTopMostVia_;
}

- (AndroidGovNistJavaxSipReleaseReferencesStrategy *)getReleaseReferencesStrategy {
  return releaseReferencesStrategy_;
}

- (void)setReleaseReferencesStrategyWithAndroidGovNistJavaxSipReleaseReferencesStrategy:(AndroidGovNistJavaxSipReleaseReferencesStrategy *)releaseReferencesStrategy {
  JreStrongAssign(&self->releaseReferencesStrategy_, releaseReferencesStrategy);
}

- (void)setEarlyDialogTimeoutSecondsWithInt:(jint)seconds {
  if (seconds <= 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Invalid value ", seconds));
  }
  self->earlyDialogTimeout_ = seconds;
}

- (void)checkRetransmissionForForkingWithAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)response {
  jint statusCode = [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(response)) getStatusCode];
  NSString *responseMethod = [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([response getCSeqHeader])) getMethod];
  jlong responseCSeqNumber = [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([response getCSeq])) getSeqNumber];
  jboolean isRetransmission = ![((id<JavaUtilSet>) nil_chk(responsesReceivedInForkingCase_)) addWithId:JreStrcat("ICJC$", statusCode, '/', responseCSeqNumber, '/', responseMethod)];
  [response setRetransmissionWithBoolean:isRetransmission];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$Z$@", @"marking response as retransmission ", isRetransmission, @" for dialog ", self)];
}

- (NSUInteger)hash {
  if ((callIdHeader_ == nil) && (callIdHeaderString_ == nil)) {
    return 0;
  }
  else {
    return ((jint) [((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([self getCallId])) getCallId])) hash]);
  }
}

- (void)setOriginalDialogWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)originalDialog {
  JreStrongAssign(&self->originalDialog_, originalDialog);
}

- (jboolean)isForked {
  return originalDialog_ != nil;
}

- (id<AndroidJavaxSipDialog>)getOriginalDialog {
  return originalDialog_;
}

- (void)setAckSendingStrategyWithAndroidGovNistJavaxSipStackAckSendingStrategy:(id<AndroidGovNistJavaxSipStackAckSendingStrategy>)ackSendingStrategy {
  JreStrongAssign(&self->ackSendingStrategy_, ackSendingStrategy);
}

- (void)dealloc {
  RELEASE_(stackTrace_);
  RELEASE_(method_);
  RELEASE_(applicationData_);
  RELEASE_(originalRequest_);
  RELEASE_(originalRequestRecordRouteHeadersString_);
  RELEASE_(originalRequestRecordRouteHeaders_);
  RELEASE_(lastResponseDialogId_);
  RELEASE_(lastResponseTopMostVia_);
  RELEASE_(lastResponseStatusCode_);
  RELEASE_(lastResponseMethod_);
  RELEASE_(lastResponseFromTag_);
  RELEASE_(lastResponseToTag_);
  RELEASE_(firstTransaction_);
  RELEASE_(lastTransaction_);
  RELEASE_(dialogId_);
  RELEASE_(earlyDialogId_);
  RELEASE_(myTag_);
  RELEASE_(hisTag_);
  RELEASE_(routeList_);
  RELEASE_(sipStack_);
  RELEASE_(lastAckSent_);
  RELEASE_(lastAckReceivedCSeqNumber_);
  RELEASE_(timerTask_);
  RELEASE_(localParty_);
  RELEASE_(localPartyStringified_);
  RELEASE_(remoteParty_);
  RELEASE_(remotePartyStringified_);
  RELEASE_(callIdHeader_);
  RELEASE_(callIdHeaderString_);
  RELEASE_(sipProvider_);
  RELEASE_(remoteTarget_);
  RELEASE_(remoteTargetStringified_);
  RELEASE_(eventHeader_);
  RELEASE_(ackSem_);
  RELEASE_(dialogDeleteTask_);
  RELEASE_(dialogDeleteIfNoAckSentTask_);
  RELEASE_(eventListeners_);
  RELEASE_(timerTaskLock_);
  RELEASE_(firstTransactionMethod_);
  RELEASE_(firstTransactionId_);
  RELEASE_(firstTransactionMergeId_);
  RELEASE_(contactHeader_);
  RELEASE_(contactHeaderStringified_);
  RELEASE_(proxyAuthorizationHeader_);
  RELEASE_(releaseReferencesStrategy_);
  RELEASE_(earlyStateTimerTask_);
  RELEASE_(responsesReceivedInForkingCase_);
  RELEASE_(originalDialog_);
  RELEASE_(ackSendingStrategy_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 12, 16, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderRouteList;", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, 21, -1, -1, -1 },
    { NULL, "V", 0x0, 22, 23, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPTransactionStack;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipMessageSIPRequest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 34, 25, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipTransaction;", 0x1, -1, -1, -1, -1, 35, -1 },
    { NULL, "LAndroidJavaxSipTransaction;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 12, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 37, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 38, 39, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 40, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 41, 37, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPTransaction;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPServerTransaction;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 44, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderCallIdHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 32, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipAddressAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 47, 11, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipAddressAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipAddressAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipDialogState;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 48, 21, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageRequest;", 0x1, 49, 37, 21, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipMessageSIPRequest;", 0x2, 49, 50, 21, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipMessageSIPRequest;", 0x1, 49, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x12, 52, 53, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 55, 56, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 57, 56, -1, -1, -1 },
    { NULL, "Z", 0x2, 58, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 21, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 59, 60, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageRequest;", 0x1, 61, 62, 63, -1, -1, -1 },
    { NULL, "V", 0x2, 64, 32, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageRequest;", 0x1, 65, 25, 66, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipSipProviderImpl;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 67, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 69, 70, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 71, 72, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 73, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1a, 74, 75, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageResponse;", 0x1, 76, 9, 66, -1, -1, -1 },
    { NULL, "Z", 0x1, 77, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 78, 62, 21, -1, -1, -1 },
    { NULL, "V", 0x1, 79, 80, 21, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderContact;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 81, 60, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 82, 32, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 83, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderEventHeader;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 84, 85, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 86, 80, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 87, 80, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 88, 32, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderRecordRouteList;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderVia;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipReleaseReferencesStrategy;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 89, 90, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 91, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 92, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 93, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 94, 95, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipDialog;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 96, 97, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipSipProviderImpl:);
  methods[1].selector = @selector(recordStackTrace);
  methods[2].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransaction:);
  methods[3].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPClientTransaction:withAndroidGovNistJavaxSipMessageSIPResponse:);
  methods[4].selector = @selector(initWithAndroidGovNistJavaxSipSipProviderImpl:withAndroidGovNistJavaxSipMessageSIPResponse:);
  methods[5].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPClientTransaction:withAndroidGovNistJavaxSipStackSIPTransaction:);
  methods[6].selector = @selector(printRouteList);
  methods[7].selector = @selector(raiseIOExceptionWithNSString:withInt:withNSString:);
  methods[8].selector = @selector(raiseErrorEventWithInt:withAndroidGovNistJavaxSipStackSIPClientTransaction:);
  methods[9].selector = @selector(raiseErrorEventWithInt:);
  methods[10].selector = @selector(setRemotePartyWithAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[11].selector = @selector(addRouteWithAndroidGovNistJavaxSipHeaderRecordRouteList:);
  methods[12].selector = @selector(setRemoteTargetWithAndroidJavaxSipHeaderContactHeader:);
  methods[13].selector = @selector(addRouteWithAndroidGovNistJavaxSipMessageSIPResponse:);
  methods[14].selector = @selector(getRouteList);
  methods[15].selector = @selector(setRouteListWithAndroidGovNistJavaxSipHeaderRouteList:);
  methods[16].selector = @selector(sendAckWithAndroidJavaxSipMessageRequest:withBoolean:);
  methods[17].selector = @selector(setStackWithAndroidGovNistJavaxSipStackSIPTransactionStack:);
  methods[18].selector = @selector(getStack);
  methods[19].selector = @selector(isTerminatedOnBye);
  methods[20].selector = @selector(ackReceivedWithLong:);
  methods[21].selector = @selector(testAndSetIsDialogTerminatedEventDelivered);
  methods[22].selector = @selector(addEventListenerWithAndroidGovNistJavaxSipStackSIPDialogEventListener:);
  methods[23].selector = @selector(removeEventListenerWithAndroidGovNistJavaxSipStackSIPDialogEventListener:);
  methods[24].selector = @selector(setApplicationDataWithId:);
  methods[25].selector = @selector(getApplicationData);
  methods[26].selector = @selector(requestConsumed);
  methods[27].selector = @selector(isRequestConsumableWithAndroidGovNistJavaxSipMessageSIPRequest:);
  methods[28].selector = @selector(doDeferredDelete);
  methods[29].selector = @selector(setStateWithInt:);
  methods[30].selector = @selector(printDebugInfo);
  methods[31].selector = @selector(isAckSeen);
  methods[32].selector = @selector(getLastAckSent);
  methods[33].selector = @selector(isAckSentWithLong:);
  methods[34].selector = @selector(getFirstTransaction);
  methods[35].selector = @selector(getFirstTransactionInt);
  methods[36].selector = @selector(getRouteSet);
  methods[37].selector = @selector(addRouteWithAndroidGovNistJavaxSipMessageSIPRequest:);
  methods[38].selector = @selector(setDialogIdWithNSString:);
  methods[39].selector = @selector(isServer);
  methods[40].selector = @selector(isReInvite);
  methods[41].selector = @selector(getDialogId);
  methods[42].selector = @selector(storeFirstTransactionInfoWithAndroidGovNistJavaxSipStackSIPDialog:withAndroidGovNistJavaxSipStackSIPTransaction:);
  methods[43].selector = @selector(addTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:);
  methods[44].selector = @selector(setRemoteTagWithNSString:);
  methods[45].selector = @selector(getLastTransaction);
  methods[46].selector = @selector(getInviteTransaction);
  methods[47].selector = @selector(setLocalSequenceNumberWithLong:);
  methods[48].selector = @selector(setRemoteSequenceNumberWithLong:);
  methods[49].selector = @selector(incrementLocalSequenceNumber);
  methods[50].selector = @selector(getRemoteSequenceNumber);
  methods[51].selector = @selector(getLocalSequenceNumber);
  methods[52].selector = @selector(getOriginalLocalSequenceNumber);
  methods[53].selector = @selector(getLocalSeqNumber);
  methods[54].selector = @selector(getRemoteSeqNumber);
  methods[55].selector = @selector(getLocalTag);
  methods[56].selector = @selector(getRemoteTag);
  methods[57].selector = @selector(setLocalTagWithNSString:);
  methods[58].selector = @selector(delete__);
  methods[59].selector = @selector(getCallId);
  methods[60].selector = @selector(setCallIdWithAndroidGovNistJavaxSipMessageSIPRequest:);
  methods[61].selector = @selector(getLocalParty);
  methods[62].selector = @selector(setLocalPartyWithAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[63].selector = @selector(getRemoteParty);
  methods[64].selector = @selector(getRemoteTarget);
  methods[65].selector = @selector(getState);
  methods[66].selector = @selector(isSecure);
  methods[67].selector = @selector(sendAckWithAndroidJavaxSipMessageRequest:);
  methods[68].selector = @selector(createRequestWithNSString:);
  methods[69].selector = @selector(createRequestWithNSString:withNSString:);
  methods[70].selector = @selector(createRequestWithAndroidGovNistJavaxSipAddressSipUri:withAndroidGovNistJavaxSipHeaderVia:withAndroidGovNistJavaxSipHeaderCSeq:withAndroidGovNistJavaxSipHeaderFrom:withAndroidGovNistJavaxSipHeaderTo:);
  methods[71].selector = @selector(setBranchWithAndroidGovNistJavaxSipHeaderVia:withNSString:);
  methods[72].selector = @selector(sendRequestWithAndroidJavaxSipClientTransaction:);
  methods[73].selector = @selector(sendRequestWithAndroidJavaxSipClientTransaction:withBoolean:);
  methods[74].selector = @selector(toRetransmitFinalResponseWithInt:);
  methods[75].selector = @selector(setRetransmissionTicks);
  methods[76].selector = @selector(resendAck);
  methods[77].selector = @selector(getMethod);
  methods[78].selector = @selector(startTimerWithAndroidGovNistJavaxSipStackSIPServerTransaction:);
  methods[79].selector = @selector(stopTimer);
  methods[80].selector = @selector(createPrackWithAndroidJavaxSipMessageResponse:);
  methods[81].selector = @selector(updateRequestWithAndroidGovNistJavaxSipMessageSIPRequest:);
  methods[82].selector = @selector(createAckWithLong:);
  methods[83].selector = @selector(getSipProvider);
  methods[84].selector = @selector(setSipProviderWithAndroidGovNistJavaxSipSipProviderImpl:);
  methods[85].selector = @selector(setResponseTagsWithAndroidGovNistJavaxSipMessageSIPResponse:);
  methods[86].selector = @selector(setLastResponseWithAndroidGovNistJavaxSipStackSIPTransaction:withAndroidGovNistJavaxSipMessageSIPResponse:);
  methods[87].selector = @selector(startRetransmitTimerWithAndroidGovNistJavaxSipStackSIPServerTransaction:withAndroidJavaxSipMessageResponse:);
  methods[88].selector = @selector(doTargetRefreshWithAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[89].selector = @selector(optionPresentWithJavaUtilListIterator:withNSString:);
  methods[90].selector = @selector(createReliableProvisionalResponseWithInt:);
  methods[91].selector = @selector(handlePrackWithAndroidGovNistJavaxSipMessageSIPRequest:);
  methods[92].selector = @selector(sendReliableProvisionalResponseWithAndroidJavaxSipMessageResponse:);
  methods[93].selector = @selector(terminateOnByeWithBoolean:);
  methods[94].selector = @selector(setAssigned);
  methods[95].selector = @selector(isAssigned);
  methods[96].selector = @selector(getMyContactHeader);
  methods[97].selector = @selector(handleAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:);
  methods[98].selector = @selector(getEarlyDialogId);
  methods[99].selector = @selector(releaseAckSem);
  methods[100].selector = @selector(isBlockedForReInvite);
  methods[101].selector = @selector(takeAckSem);
  methods[102].selector = @selector(setLastAckSentWithAndroidGovNistJavaxSipMessageSIPRequest:);
  methods[103].selector = @selector(isAtleastOneAckSent);
  methods[104].selector = @selector(isBackToBackUserAgent);
  methods[105].selector = @selector(doDeferredDeleteIfNoAckSentWithLong:);
  methods[106].selector = @selector(setBackToBackUserAgent);
  methods[107].selector = @selector(getEventHeader);
  methods[108].selector = @selector(setEventHeaderWithAndroidJavaxSipHeaderEventHeader:);
  methods[109].selector = @selector(setServerTransactionFlagWithBoolean:);
  methods[110].selector = @selector(setReInviteFlagWithBoolean:);
  methods[111].selector = @selector(isSequenceNumberValidation);
  methods[112].selector = @selector(disableSequenceNumberValidation);
  methods[113].selector = @selector(acquireTimerTaskSem);
  methods[114].selector = @selector(releaseTimerTaskSem);
  methods[115].selector = @selector(getMergeId);
  methods[116].selector = @selector(setPendingRouteUpdateOn202ResponseWithAndroidGovNistJavaxSipMessageSIPRequest:);
  methods[117].selector = @selector(getLastResponseMethod);
  methods[118].selector = @selector(getLastResponseStatusCode);
  methods[119].selector = @selector(getLastResponseCSeqNumber);
  methods[120].selector = @selector(cleanUpOnAck);
  methods[121].selector = @selector(cleanUp);
  methods[122].selector = @selector(getOriginalRequestRecordRouteHeaders);
  methods[123].selector = @selector(getLastResponseTopMostVia);
  methods[124].selector = @selector(getReleaseReferencesStrategy);
  methods[125].selector = @selector(setReleaseReferencesStrategyWithAndroidGovNistJavaxSipReleaseReferencesStrategy:);
  methods[126].selector = @selector(setEarlyDialogTimeoutSecondsWithInt:);
  methods[127].selector = @selector(checkRetransmissionForForkingWithAndroidGovNistJavaxSipMessageSIPResponse:);
  methods[128].selector = @selector(hash);
  methods[129].selector = @selector(setOriginalDialogWithAndroidGovNistJavaxSipStackSIPDialog:);
  methods[130].selector = @selector(isForked);
  methods[131].selector = @selector(getOriginalDialog);
  methods[132].selector = @selector(setAckSendingStrategyWithAndroidGovNistJavaxSipStackAckSendingStrategy:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 98, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipStackSIPDialog_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "dialogTerminatedEventDelivered_", "Z", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "stackTrace_", "LNSString;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "method_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "isAssigned_", "Z", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "reInviteFlag_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "applicationData_", "LNSObject;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "originalRequest_", "LAndroidGovNistJavaxSipMessageSIPRequest;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "originalRequestRecordRouteHeadersString_", "LNSString;", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "originalRequestRecordRouteHeaders_", "LAndroidGovNistJavaxSipHeaderRecordRouteList;", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "lastResponseDialogId_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "lastResponseTopMostVia_", "LAndroidGovNistJavaxSipHeaderVia;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastResponseStatusCode_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "lastResponseCSeqNumber_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "lastInviteResponseCSeqNumber_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "lastInviteResponseCode_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "lastResponseMethod_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "lastResponseFromTag_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "lastResponseToTag_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "firstTransaction_", "LAndroidGovNistJavaxSipStackSIPTransaction;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "lastTransaction_", "LAndroidGovNistJavaxSipStackSIPTransaction;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "dialogId_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "earlyDialogId_", "LNSString;", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "localSequenceNumber_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "remoteSequenceNumber_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "myTag_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "hisTag_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "routeList_", "LAndroidGovNistJavaxSipHeaderRouteList;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sipStack_", "LAndroidGovNistJavaxSipStackSIPTransactionStack;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "dialogState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastAckSent_", "LAndroidGovNistJavaxSipMessageSIPRequest;", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "lastAckReceivedCSeqNumber_", "LJavaLangLong;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ackProcessed_", "Z", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "timerTask_", "LAndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask;", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "nextSeqno_", "J", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "retransmissionTicksLeft_", "I", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "prevRetransmissionTicks_", "I", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "originalLocalSequenceNumber_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "auditTag_", "J", .constantValue.asLong = 0, 0x81, -1, -1, -1, -1 },
    { "localParty_", "LAndroidJavaxSipAddressAddress;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "localPartyStringified_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "remoteParty_", "LAndroidJavaxSipAddressAddress;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "remotePartyStringified_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "callIdHeader_", "LAndroidJavaxSipHeaderCallIdHeader;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "callIdHeaderString_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "NULL_STATE", "I", .constantValue.asInt = AndroidGovNistJavaxSipStackSIPDialog_NULL_STATE, 0x19, -1, -1, -1, -1 },
    { "EARLY_STATE", "I", .constantValue.asInt = AndroidGovNistJavaxSipStackSIPDialog_EARLY_STATE, 0x19, -1, -1, -1, -1 },
    { "CONFIRMED_STATE", "I", .constantValue.asInt = AndroidGovNistJavaxSipStackSIPDialog_CONFIRMED_STATE, 0x19, -1, -1, -1, -1 },
    { "TERMINATED_STATE", "I", .constantValue.asInt = AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE, 0x19, -1, -1, -1, -1 },
    { "serverTransactionFlag_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sipProvider_", "LAndroidGovNistJavaxSipSipProviderImpl;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "terminateOnBye_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "byeSent_", "Z", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "remoteTarget_", "LAndroidJavaxSipAddressAddress;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "remoteTargetStringified_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "eventHeader_", "LAndroidJavaxSipHeaderEventHeader;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "lastInviteOkReceived_", "J", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "ackSem_", "LJavaUtilConcurrentSemaphore;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "reInviteWaitTime_", "I", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "dialogDeleteTask_", "LAndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "dialogDeleteIfNoAckSentTask_", "LAndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "isAcknowledged_", "Z", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "highestSequenceNumberAcknowledged_", "J", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "isBackToBackUserAgent_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sequenceNumberValidation_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "eventListeners_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x82, -1, -1, 99, -1 },
    { "timerTaskLock_", "LJavaUtilConcurrentSemaphore;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "firstTransactionSecure_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "firstTransactionSeen_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "firstTransactionMethod_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "firstTransactionId_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "firstTransactionIsServerTransaction_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "firstTransactionMergeId_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "firstTransactionPort_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "contactHeader_", "LAndroidGovNistJavaxSipHeaderContact;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "contactHeaderStringified_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "pendingRouteUpdateOn202Response_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "proxyAuthorizationHeader_", "LAndroidJavaxSipHeaderProxyAuthorizationHeader;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "releaseReferencesStrategy_", "LAndroidGovNistJavaxSipReleaseReferencesStrategy;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "earlyStateTimerTask_", "LAndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "earlyDialogTimeout_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "responsesReceivedInForkingCase_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 100, -1 },
    { "originalDialog_", "LAndroidGovNistJavaxSipStackSIPDialog;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ackSendingStrategy_", "LAndroidGovNistJavaxSipStackAckSendingStrategy;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipSipProviderImpl;", "LAndroidGovNistJavaxSipStackSIPTransaction;", "LAndroidGovNistJavaxSipStackSIPClientTransaction;LAndroidGovNistJavaxSipMessageSIPResponse;", "LAndroidGovNistJavaxSipSipProviderImpl;LAndroidGovNistJavaxSipMessageSIPResponse;", "LAndroidGovNistJavaxSipStackSIPClientTransaction;LAndroidGovNistJavaxSipStackSIPTransaction;", "raiseIOException", "LNSString;ILNSString;", "raiseErrorEvent", "ILAndroidGovNistJavaxSipStackSIPClientTransaction;", "I", "setRemoteParty", "LAndroidGovNistJavaxSipMessageSIPMessage;", "addRoute", "LAndroidGovNistJavaxSipHeaderRecordRouteList;", "setRemoteTarget", "LAndroidJavaxSipHeaderContactHeader;", "LAndroidGovNistJavaxSipMessageSIPResponse;", "setRouteList", "LAndroidGovNistJavaxSipHeaderRouteList;", "sendAck", "LAndroidJavaxSipMessageRequest;Z", "LAndroidJavaxSipSipException;", "setStack", "LAndroidGovNistJavaxSipStackSIPTransactionStack;", "ackReceived", "J", "addEventListener", "LAndroidGovNistJavaxSipStackSIPDialogEventListener;", "removeEventListener", "setApplicationData", "LNSObject;", "isRequestConsumable", "LAndroidGovNistJavaxSipMessageSIPRequest;", "setState", "isAckSent", (void *)&AndroidGovNistJavaxSipStackSIPDialog__Annotations$0, "setDialogId", "LNSString;", "storeFirstTransactionInfo", "LAndroidGovNistJavaxSipStackSIPDialog;LAndroidGovNistJavaxSipStackSIPTransaction;", "addTransaction", "setRemoteTag", "setLocalSequenceNumber", "setRemoteSequenceNumber", "setLocalTag", "delete", "setCallId", "setLocalParty", "LAndroidJavaxSipMessageRequest;", "createRequest", "LNSString;LNSString;", "LAndroidGovNistJavaxSipAddressSipUri;LAndroidGovNistJavaxSipHeaderVia;LAndroidGovNistJavaxSipHeaderCSeq;LAndroidGovNistJavaxSipHeaderFrom;LAndroidGovNistJavaxSipHeaderTo;", "setBranch", "LAndroidGovNistJavaxSipHeaderVia;LNSString;", "sendRequest", "LAndroidJavaxSipClientTransaction;", "LAndroidJavaxSipTransactionDoesNotExistException;LAndroidJavaxSipSipException;", "LAndroidJavaxSipClientTransaction;Z", "toRetransmitFinalResponse", "startTimer", "LAndroidGovNistJavaxSipStackSIPServerTransaction;", "createPrack", "LAndroidJavaxSipMessageResponse;", "LAndroidJavaxSipDialogDoesNotExistException;LAndroidJavaxSipSipException;", "updateRequest", "createAck", "LAndroidJavaxSipInvalidArgumentException;LAndroidJavaxSipSipException;", "setSipProvider", "setResponseTags", "setLastResponse", "LAndroidGovNistJavaxSipStackSIPTransaction;LAndroidGovNistJavaxSipMessageSIPResponse;", "startRetransmitTimer", "LAndroidGovNistJavaxSipStackSIPServerTransaction;LAndroidJavaxSipMessageResponse;", "doTargetRefresh", "optionPresent", "LJavaUtilListIterator;LNSString;", "createReliableProvisionalResponse", "handlePrack", "sendReliableProvisionalResponse", "terminateOnBye", "Z", "handleAck", "setLastAckSent", "doDeferredDeleteIfNoAckSent", "setEventHeader", "LAndroidJavaxSipHeaderEventHeader;", "setServerTransactionFlag", "setReInviteFlag", "setPendingRouteUpdateOn202Response", "setReleaseReferencesStrategy", "LAndroidGovNistJavaxSipReleaseReferencesStrategy;", "setEarlyDialogTimeoutSeconds", "checkRetransmissionForForking", "hashCode", "setOriginalDialog", "LAndroidGovNistJavaxSipStackSIPDialog;", "setAckSendingStrategy", "LAndroidGovNistJavaxSipStackAckSendingStrategy;", &AndroidGovNistJavaxSipStackSIPDialog_logger, "Ljava/util/Set<Landroid/gov/nist/javax/sip/stack/SIPDialogEventListener;>;", "Ljava/util/Set<Ljava/lang/String;>;", "LAndroidGovNistJavaxSipStackSIPDialog_AckSendingStrategyImpl;LAndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask;LAndroidGovNistJavaxSipStackSIPDialog_ReInviteSender;LAndroidGovNistJavaxSipStackSIPDialog_LingerTimer;LAndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask;LAndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask;LAndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPDialog = { "SIPDialog", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 133, 85, -1, 101, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPDialog;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackSIPDialog class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackSIPDialog_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackSIPDialog_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackSIPDialog)
  }
}

@end

void AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipSipProviderImpl_(AndroidGovNistJavaxSipStackSIPDialog *self, AndroidGovNistJavaxSipSipProviderImpl *provider) {
  NSObject_init(self);
  self->auditTag_ = 0;
  JreStrongAssignAndConsume(&self->ackSem_, new_JavaUtilConcurrentSemaphore_initWithInt_(1));
  self->reInviteWaitTime_ = 100;
  self->highestSequenceNumberAcknowledged_ = -1;
  self->sequenceNumberValidation_ = true;
  JreStrongAssignAndConsume(&self->timerTaskLock_, new_JavaUtilConcurrentSemaphore_initWithInt_(1));
  self->firstTransactionPort_ = 5060;
  self->earlyDialogTimeout_ = 180;
  JreStrongAssignAndConsume(&self->responsesReceivedInForkingCase_, new_JavaUtilHashSet_initWithInt_(0));
  JreStrongAssignAndConsume(&self->ackSendingStrategy_, new_AndroidGovNistJavaxSipStackSIPDialog_AckSendingStrategyImpl_initWithAndroidGovNistJavaxSipStackSIPDialog_(self));
  self->terminateOnBye_ = true;
  JreStrongAssignAndConsume(&self->routeList_, new_AndroidGovNistJavaxSipHeaderRouteList_init());
  self->dialogState_ = AndroidGovNistJavaxSipStackSIPDialog_NULL_STATE;
  self->localSequenceNumber_ = 0;
  self->remoteSequenceNumber_ = -1;
  JreStrongAssign(&self->sipProvider_, provider);
  JreStrongAssignAndConsume(&self->eventListeners_, new_JavaUtilConcurrentCopyOnWriteArraySet_init());
  self->earlyDialogTimeout_ = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) cast_chk([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(provider)) getSipStack], [AndroidGovNistJavaxSipStackSIPTransactionStack class])))) getEarlyDialogTimeout];
}

AndroidGovNistJavaxSipStackSIPDialog *new_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipSipProviderImpl_(AndroidGovNistJavaxSipSipProviderImpl *provider) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPDialog, initWithAndroidGovNistJavaxSipSipProviderImpl_, provider)
}

AndroidGovNistJavaxSipStackSIPDialog *create_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipSipProviderImpl_(AndroidGovNistJavaxSipSipProviderImpl *provider) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPDialog, initWithAndroidGovNistJavaxSipSipProviderImpl_, provider)
}

void AndroidGovNistJavaxSipStackSIPDialog_recordStackTrace(AndroidGovNistJavaxSipStackSIPDialog *self) {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  JavaIoPrintWriter *writer = create_JavaIoPrintWriter_initWithJavaIoWriter_(stringWriter);
  [create_JavaLangException_init() printStackTraceWithJavaIoPrintWriter:writer];
  NSString *stackTraceSignature = JavaLangInteger_toStringWithInt_(JavaLangMath_absWithInt_([create_JavaUtilRandom_init() nextInt]));
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"TraceRecord = ", stackTraceSignature)];
  JreStrongAssign(&self->stackTrace_, JreStrcat("$$C$", @"TraceRecord = ", stackTraceSignature, ':', [((JavaLangStringBuffer *) nil_chk([stringWriter getBuffer])) description]));
}

void AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPTransaction_(AndroidGovNistJavaxSipStackSIPDialog *self, id<AndroidGovNistJavaxSipStackSIPTransaction> transaction) {
  AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipSipProviderImpl_(self, [((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk(transaction)) getSipProvider]);
  AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([transaction getRequest], [AndroidGovNistJavaxSipMessageSIPRequest class]);
  JreStrongAssign(&self->callIdHeader_, [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getCallId]);
  JreStrongAssign(&self->earlyDialogId_, [sipRequest getDialogIdWithBoolean:false]);
  if (transaction == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Null tx");
  JreStrongAssign(&self->sipStack_, [transaction getSIPStack]);
  JreStrongAssign(&self->sipProvider_, [transaction getSipProvider]);
  if (self->sipProvider_ == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Null Provider!");
  self->isBackToBackUserAgent_ = ((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_))->isBackToBackUserAgent_;
  [self addTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"Creating a dialog : ", self)];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$I", @"provider port = ", [((id<AndroidJavaxSipListeningPoint>) nil_chk([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(self->sipProvider_)) getListeningPoint])) getPort])];
  [self addEventListenerWithAndroidGovNistJavaxSipStackSIPDialogEventListener:self->sipStack_];
  JreStrongAssign(&self->releaseReferencesStrategy_, [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getReleaseReferencesStrategy]);
}

AndroidGovNistJavaxSipStackSIPDialog *new_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPTransaction_(id<AndroidGovNistJavaxSipStackSIPTransaction> transaction) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPDialog, initWithAndroidGovNistJavaxSipStackSIPTransaction_, transaction)
}

AndroidGovNistJavaxSipStackSIPDialog *create_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPTransaction_(id<AndroidGovNistJavaxSipStackSIPTransaction> transaction) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPDialog, initWithAndroidGovNistJavaxSipStackSIPTransaction_, transaction)
}

void AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPClientTransaction_withAndroidGovNistJavaxSipMessageSIPResponse_(AndroidGovNistJavaxSipStackSIPDialog *self, id<AndroidGovNistJavaxSipStackSIPClientTransaction> transaction, AndroidGovNistJavaxSipMessageSIPResponse *sipResponse) {
  AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPTransaction_(self, transaction);
  if (sipResponse == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Null SipResponse");
  [self setLastResponseWithAndroidGovNistJavaxSipStackSIPTransaction:transaction withAndroidGovNistJavaxSipMessageSIPResponse:sipResponse];
  self->isBackToBackUserAgent_ = ((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_))->isBackToBackUserAgent_;
}

AndroidGovNistJavaxSipStackSIPDialog *new_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPClientTransaction_withAndroidGovNistJavaxSipMessageSIPResponse_(id<AndroidGovNistJavaxSipStackSIPClientTransaction> transaction, AndroidGovNistJavaxSipMessageSIPResponse *sipResponse) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPDialog, initWithAndroidGovNistJavaxSipStackSIPClientTransaction_withAndroidGovNistJavaxSipMessageSIPResponse_, transaction, sipResponse)
}

AndroidGovNistJavaxSipStackSIPDialog *create_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPClientTransaction_withAndroidGovNistJavaxSipMessageSIPResponse_(id<AndroidGovNistJavaxSipStackSIPClientTransaction> transaction, AndroidGovNistJavaxSipMessageSIPResponse *sipResponse) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPDialog, initWithAndroidGovNistJavaxSipStackSIPClientTransaction_withAndroidGovNistJavaxSipMessageSIPResponse_, transaction, sipResponse)
}

void AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipSipProviderImpl_withAndroidGovNistJavaxSipMessageSIPResponse_(AndroidGovNistJavaxSipStackSIPDialog *self, AndroidGovNistJavaxSipSipProviderImpl *sipProvider, AndroidGovNistJavaxSipMessageSIPResponse *sipResponse) {
  AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipSipProviderImpl_(self, sipProvider);
  JreStrongAssign(&self->sipStack_, (AndroidGovNistJavaxSipStackSIPTransactionStack *) cast_chk([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(sipProvider)) getSipStack], [AndroidGovNistJavaxSipStackSIPTransactionStack class]));
  [self setLastResponseWithAndroidGovNistJavaxSipStackSIPTransaction:nil withAndroidGovNistJavaxSipMessageSIPResponse:sipResponse];
  self->localSequenceNumber_ = [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) getCSeq])) getSeqNumber];
  self->originalLocalSequenceNumber_ = self->localSequenceNumber_;
  JreStrongAssign(&self->localParty_, [((id<AndroidJavaxSipHeaderFromHeader>) nil_chk([sipResponse getFrom])) getAddress]);
  JreStrongAssign(&self->remoteParty_, [((id<AndroidJavaxSipHeaderToHeader>) nil_chk([sipResponse getTo])) getAddress]);
  JreStrongAssign(&self->method_, [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipResponse getCSeq])) getMethod]);
  JreStrongAssign(&self->callIdHeader_, [sipResponse getCallId]);
  self->serverTransactionFlag_ = false;
  [self setLocalTagWithNSString:[((id<AndroidJavaxSipHeaderFromHeader>) nil_chk([sipResponse getFrom])) getTag]];
  [self setRemoteTagWithNSString:[((id<AndroidJavaxSipHeaderToHeader>) nil_chk([sipResponse getTo])) getTag]];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"Creating a dialog : ", self)];
  self->isBackToBackUserAgent_ = ((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_))->isBackToBackUserAgent_;
  [self addEventListenerWithAndroidGovNistJavaxSipStackSIPDialogEventListener:self->sipStack_];
  JreStrongAssign(&self->releaseReferencesStrategy_, [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getReleaseReferencesStrategy]);
}

AndroidGovNistJavaxSipStackSIPDialog *new_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipSipProviderImpl_withAndroidGovNistJavaxSipMessageSIPResponse_(AndroidGovNistJavaxSipSipProviderImpl *sipProvider, AndroidGovNistJavaxSipMessageSIPResponse *sipResponse) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPDialog, initWithAndroidGovNistJavaxSipSipProviderImpl_withAndroidGovNistJavaxSipMessageSIPResponse_, sipProvider, sipResponse)
}

AndroidGovNistJavaxSipStackSIPDialog *create_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipSipProviderImpl_withAndroidGovNistJavaxSipMessageSIPResponse_(AndroidGovNistJavaxSipSipProviderImpl *sipProvider, AndroidGovNistJavaxSipMessageSIPResponse *sipResponse) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPDialog, initWithAndroidGovNistJavaxSipSipProviderImpl_withAndroidGovNistJavaxSipMessageSIPResponse_, sipProvider, sipResponse)
}

void AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPClientTransaction_withAndroidGovNistJavaxSipStackSIPTransaction_(AndroidGovNistJavaxSipStackSIPDialog *self, id<AndroidGovNistJavaxSipStackSIPClientTransaction> subscribeTx, id<AndroidGovNistJavaxSipStackSIPTransaction> notifyST) {
  AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPTransaction_(self, notifyST);
  self->serverTransactionFlag_ = false;
  JreStrongAssign(&self->lastTransaction_, subscribeTx);
  [self storeFirstTransactionInfoWithAndroidGovNistJavaxSipStackSIPDialog:self withAndroidGovNistJavaxSipStackSIPTransaction:subscribeTx];
  self->terminateOnBye_ = false;
  self->localSequenceNumber_ = [((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) nil_chk(subscribeTx)) getCSeq];
  AndroidGovNistJavaxSipMessageSIPRequest *not_ = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk(notifyST)) getRequest], [AndroidGovNistJavaxSipMessageSIPRequest class]);
  self->remoteSequenceNumber_ = [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(not_)) getCSeq])) getSeqNumber];
  [self setDialogIdWithNSString:[not_ getDialogIdWithBoolean:true]];
  [self setLocalTagWithNSString:[not_ getToTag]];
  [self setRemoteTagWithNSString:[not_ getFromTag]];
  [self setLastResponseWithAndroidGovNistJavaxSipStackSIPTransaction:subscribeTx withAndroidGovNistJavaxSipMessageSIPResponse:[subscribeTx getLastResponse]];
  JreStrongAssign(&self->localParty_, [((id<AndroidJavaxSipHeaderToHeader>) nil_chk([not_ getTo])) getAddress]);
  JreStrongAssign(&self->remoteParty_, [((id<AndroidJavaxSipHeaderFromHeader>) nil_chk([not_ getFrom])) getAddress]);
  [self addRouteWithAndroidGovNistJavaxSipMessageSIPRequest:not_];
  [self setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_CONFIRMED_STATE];
}

AndroidGovNistJavaxSipStackSIPDialog *new_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPClientTransaction_withAndroidGovNistJavaxSipStackSIPTransaction_(id<AndroidGovNistJavaxSipStackSIPClientTransaction> subscribeTx, id<AndroidGovNistJavaxSipStackSIPTransaction> notifyST) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPDialog, initWithAndroidGovNistJavaxSipStackSIPClientTransaction_withAndroidGovNistJavaxSipStackSIPTransaction_, subscribeTx, notifyST)
}

AndroidGovNistJavaxSipStackSIPDialog *create_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPClientTransaction_withAndroidGovNistJavaxSipStackSIPTransaction_(id<AndroidGovNistJavaxSipStackSIPClientTransaction> subscribeTx, id<AndroidGovNistJavaxSipStackSIPTransaction> notifyST) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPDialog, initWithAndroidGovNistJavaxSipStackSIPClientTransaction_withAndroidGovNistJavaxSipStackSIPTransaction_, subscribeTx, notifyST)
}

void AndroidGovNistJavaxSipStackSIPDialog_raiseIOExceptionWithNSString_withInt_withNSString_(AndroidGovNistJavaxSipStackSIPDialog *self, NSString *host, jint port, NSString *protocol) {
  AndroidJavaxSipIOExceptionEvent *ioError = create_AndroidJavaxSipIOExceptionEvent_initWithId_withNSString_withInt_withNSString_(self, host, port, protocol);
  [((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(self->sipProvider_)) handleEventWithJavaUtilEventObject:ioError withAndroidGovNistJavaxSipStackSIPTransaction:nil];
  [self setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE];
}

void AndroidGovNistJavaxSipStackSIPDialog_raiseErrorEventWithInt_withAndroidGovNistJavaxSipStackSIPClientTransaction_(AndroidGovNistJavaxSipStackSIPDialog *self, jint dialogTimeoutError, id<AndroidGovNistJavaxSipStackSIPClientTransaction> clientTransaction) {
  AndroidGovNistJavaxSipStackSIPDialogErrorEvent *newErrorEvent;
  id<JavaUtilIterator> listenerIterator;
  id<AndroidGovNistJavaxSipStackSIPDialogEventListener> nextListener;
  newErrorEvent = create_AndroidGovNistJavaxSipStackSIPDialogErrorEvent_initWithAndroidGovNistJavaxSipStackSIPDialog_withInt_(self, dialogTimeoutError);
  [newErrorEvent setClientTransactionWithAndroidGovNistJavaxSipStackSIPClientTransaction:clientTransaction];
  @synchronized(self->eventListeners_) {
    listenerIterator = [((id<JavaUtilSet>) nil_chk(self->eventListeners_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(listenerIterator)) hasNext]) {
      nextListener = [listenerIterator next];
      [((id<AndroidGovNistJavaxSipStackSIPDialogEventListener>) nil_chk(nextListener)) dialogErrorEventWithAndroidGovNistJavaxSipStackSIPDialogErrorEvent:newErrorEvent];
    }
  }
  [((id<JavaUtilSet>) nil_chk(self->eventListeners_)) clear];
  if (dialogTimeoutError != AndroidGovNistJavaxSipStackSIPDialogErrorEvent_DIALOG_ACK_NOT_SENT_TIMEOUT && dialogTimeoutError != AndroidGovNistJavaxSipStackSIPDialogErrorEvent_DIALOG_ACK_NOT_RECEIVED_TIMEOUT && dialogTimeoutError != AndroidGovNistJavaxSipStackSIPDialogErrorEvent_EARLY_STATE_TIMEOUT && dialogTimeoutError != AndroidGovNistJavaxSipStackSIPDialogErrorEvent_DIALOG_REINVITE_TIMEOUT) {
    [self delete__];
  }
  [self stopTimer];
}

void AndroidGovNistJavaxSipStackSIPDialog_raiseErrorEventWithInt_(AndroidGovNistJavaxSipStackSIPDialog *self, jint dialogTimeoutError) {
  AndroidGovNistJavaxSipStackSIPDialog_raiseErrorEventWithInt_withAndroidGovNistJavaxSipStackSIPClientTransaction_(self, dialogTimeoutError, nil);
}

void AndroidGovNistJavaxSipStackSIPDialog_addRouteWithAndroidGovNistJavaxSipHeaderRecordRouteList_(AndroidGovNistJavaxSipStackSIPDialog *self, AndroidGovNistJavaxSipHeaderRecordRouteList *recordRouteList) {
  @try {
    if (![self isServer]) {
      JreStrongAssignAndConsume(&self->routeList_, new_AndroidGovNistJavaxSipHeaderRouteList_init());
      id<JavaUtilListIterator> li = [((AndroidGovNistJavaxSipHeaderRecordRouteList *) nil_chk(recordRouteList)) listIteratorWithInt:[recordRouteList size]];
      while ([((id<JavaUtilListIterator>) nil_chk(li)) hasPrevious]) {
        AndroidGovNistJavaxSipHeaderRecordRoute *rr = (AndroidGovNistJavaxSipHeaderRecordRoute *) cast_chk([li previous], [AndroidGovNistJavaxSipHeaderRecordRoute class]);
        AndroidGovNistJavaxSipHeaderRoute *route = create_AndroidGovNistJavaxSipHeaderRoute_init();
        AndroidGovNistJavaxSipAddressAddressImpl *address = ((AndroidGovNistJavaxSipAddressAddressImpl *) cast_chk([((AndroidGovNistJavaxSipAddressAddressImpl *) nil_chk(((AndroidGovNistJavaxSipAddressAddressImpl *) cast_chk([((AndroidGovNistJavaxSipHeaderRecordRoute *) nil_chk(rr)) getAddress], [AndroidGovNistJavaxSipAddressAddressImpl class])))) java_clone], [AndroidGovNistJavaxSipAddressAddressImpl class]));
        [route setAddressWithAndroidJavaxSipAddressAddress:address];
        [route setParametersWithAndroidGovNistCoreNameValueList:(AndroidGovNistCoreNameValueList *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk([rr getParameters])) java_clone], [AndroidGovNistCoreNameValueList class])];
        [((AndroidGovNistJavaxSipHeaderRouteList *) nil_chk(self->routeList_)) addWithId:route];
      }
    }
    else {
      JreStrongAssignAndConsume(&self->routeList_, new_AndroidGovNistJavaxSipHeaderRouteList_init());
      id<JavaUtilListIterator> li = [((AndroidGovNistJavaxSipHeaderRecordRouteList *) nil_chk(recordRouteList)) listIterator];
      while ([((id<JavaUtilListIterator>) nil_chk(li)) hasNext]) {
        AndroidGovNistJavaxSipHeaderRecordRoute *rr = (AndroidGovNistJavaxSipHeaderRecordRoute *) cast_chk([li next], [AndroidGovNistJavaxSipHeaderRecordRoute class]);
        AndroidGovNistJavaxSipHeaderRoute *route = create_AndroidGovNistJavaxSipHeaderRoute_init();
        AndroidGovNistJavaxSipAddressAddressImpl *address = ((AndroidGovNistJavaxSipAddressAddressImpl *) cast_chk([((AndroidGovNistJavaxSipAddressAddressImpl *) nil_chk(((AndroidGovNistJavaxSipAddressAddressImpl *) cast_chk([((AndroidGovNistJavaxSipHeaderRecordRoute *) nil_chk(rr)) getAddress], [AndroidGovNistJavaxSipAddressAddressImpl class])))) java_clone], [AndroidGovNistJavaxSipAddressAddressImpl class]));
        [route setAddressWithAndroidJavaxSipAddressAddress:address];
        [route setParametersWithAndroidGovNistCoreNameValueList:(AndroidGovNistCoreNameValueList *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk([rr getParameters])) java_clone], [AndroidGovNistCoreNameValueList class])];
        [((AndroidGovNistJavaxSipHeaderRouteList *) nil_chk(self->routeList_)) addWithId:route];
      }
    }
  }
  @finally {
    id<JavaUtilIterator> it = [((AndroidGovNistJavaxSipHeaderRouteList *) nil_chk(self->routeList_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      id<AndroidJavaxSipAddressSipURI> sipUri = (id<AndroidJavaxSipAddressSipURI>) cast_check(([((id<AndroidJavaxSipAddressAddress>) nil_chk([((AndroidGovNistJavaxSipHeaderRoute *) nil_chk(((AndroidGovNistJavaxSipHeaderRoute *) cast_chk([it next], [AndroidGovNistJavaxSipHeaderRoute class])))) getAddress])) getURI]), AndroidJavaxSipAddressSipURI_class_());
      if (![((id<AndroidJavaxSipAddressSipURI>) nil_chk(sipUri)) hasLrParam]) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) warnWithNSString:JreStrcat("$@", @"NON LR route in Route set detected for dialog : ", self)];
      }
      else {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"route = ", sipUri)];
      }
    }
  }
}

void AndroidGovNistJavaxSipStackSIPDialog_addRouteWithAndroidGovNistJavaxSipMessageSIPResponse_(AndroidGovNistJavaxSipStackSIPDialog *self, AndroidGovNistJavaxSipMessageSIPResponse *sipResponse) {
  @synchronized(self) {
    @try {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$@", @"setContact: dialogState: ", self, @"state = ", [self getState])];
      if ([((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) getStatusCode] == 100) {
        return;
      }
      else if (self->dialogState_ == AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE) {
        return;
      }
      else if (self->dialogState_ == AndroidGovNistJavaxSipStackSIPDialog_CONFIRMED_STATE) {
        if ([sipResponse getStatusCode] / 100 == 2 && ![self isServer]) {
          AndroidGovNistJavaxSipHeaderContactList *contactList = [sipResponse getContactHeaders];
          if (contactList != nil && AndroidGovNistJavaxSipMessageSIPRequest_isTargetRefreshWithNSString_([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipResponse getCSeq])) getMethod])) {
            [self setRemoteTargetWithAndroidJavaxSipHeaderContactHeader:(id<AndroidJavaxSipHeaderContactHeader>) cast_check([contactList getFirst], AndroidJavaxSipHeaderContactHeader_class_())];
          }
        }
        if (!self->pendingRouteUpdateOn202Response_) return;
      }
      if (![self isServer] || self->pendingRouteUpdateOn202Response_) {
        if (([self getState] != JreLoadStatic(AndroidJavaxSipDialogState, CONFIRMED) && [self getState] != JreLoadStatic(AndroidJavaxSipDialogState, TERMINATED)) || self->pendingRouteUpdateOn202Response_) {
          AndroidGovNistJavaxSipHeaderRecordRouteList *rrlist = [sipResponse getRecordRouteHeaders];
          if (rrlist != nil) {
            AndroidGovNistJavaxSipStackSIPDialog_addRouteWithAndroidGovNistJavaxSipHeaderRecordRouteList_(self, rrlist);
          }
          else {
            JreStrongAssignAndConsume(&self->routeList_, new_AndroidGovNistJavaxSipHeaderRouteList_init());
          }
        }
        AndroidGovNistJavaxSipHeaderContactList *contactList = [sipResponse getContactHeaders];
        if (contactList != nil) {
          [self setRemoteTargetWithAndroidJavaxSipHeaderContactHeader:(id<AndroidJavaxSipHeaderContactHeader>) cast_check([contactList getFirst], AndroidJavaxSipHeaderContactHeader_class_())];
        }
      }
    }
    @finally {
    }
  }
}

AndroidGovNistJavaxSipHeaderRouteList *AndroidGovNistJavaxSipStackSIPDialog_getRouteList(AndroidGovNistJavaxSipStackSIPDialog *self) {
  @synchronized(self) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"getRouteList ", self)];
    id<JavaUtilListIterator> li;
    AndroidGovNistJavaxSipHeaderRouteList *retval = create_AndroidGovNistJavaxSipHeaderRouteList_init();
    retval = create_AndroidGovNistJavaxSipHeaderRouteList_init();
    if (self->routeList_ != nil) {
      li = [self->routeList_ listIterator];
      while ([((id<JavaUtilListIterator>) nil_chk(li)) hasNext]) {
        AndroidGovNistJavaxSipHeaderRoute *route = (AndroidGovNistJavaxSipHeaderRoute *) cast_chk([li next], [AndroidGovNistJavaxSipHeaderRoute class]);
        [retval addWithId:(AndroidGovNistJavaxSipHeaderRoute *) cast_chk([((AndroidGovNistJavaxSipHeaderRoute *) nil_chk(route)) java_clone], [AndroidGovNistJavaxSipHeaderRoute class])];
      }
    }
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"----- "];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"getRouteList for ", self)];
    if (retval != nil) [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"RouteList = ", [retval encode])];
    if (self->routeList_ != nil) [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"myRouteList = ", [self->routeList_ encode])];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:@"----- "];
    return retval;
  }
}

void AndroidGovNistJavaxSipStackSIPDialog_sendAckWithAndroidJavaxSipMessageRequest_withBoolean_(AndroidGovNistJavaxSipStackSIPDialog *self, id<AndroidJavaxSipMessageRequest> request, jboolean throwIOExceptionAsSipException) {
  AndroidGovNistJavaxSipMessageSIPRequest *ackRequest = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class]);
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"sendAck", self)];
  if (![((NSString *) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(ackRequest)) getMethod])) isEqual:AndroidJavaxSipMessageRequest_ACK]) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Bad request method -- should be ACK");
  if ([self getState] == nil || [((AndroidJavaxSipDialogState *) nil_chk([self getState])) getValue] == AndroidGovNistJavaxSipStackSIPDialog_EARLY_STATE) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:JreStrcat("$@$$", @"Bad Dialog State for ", self, @" dialogID = ", [self getDialogId])];
    @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$@", @"Bad dialog state ", [self getState]));
  }
  if (![((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([self getCallId])) getCallId])) isEqual:[((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class])))) getCallId])) getCallId]]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:JreStrcat("$@", @"CallID ", [self getCallId])];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:JreStrcat("$$", @"RequestCallID = ", [((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([ackRequest getCallId])) getCallId])];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:JreStrcat("$@", @"dialog =  ", self)];
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Bad call ID in request");
  }
  @try {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"setting from tag For outgoing ACK= ", [self getLocalTag])];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$$", @"setting To tag for outgoing ACK = ", [self getRemoteTag])];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@", @"ack = ", ackRequest)];
    if ([self getLocalTag] != nil) [((id<AndroidJavaxSipHeaderFromHeader>) nil_chk([ackRequest getFrom])) setTagWithNSString:[self getLocalTag]];
    if ([self getRemoteTag] != nil) [((id<AndroidJavaxSipHeaderToHeader>) nil_chk([ackRequest getTo])) setTagWithNSString:[self getRemoteTag]];
  }
  @catch (JavaTextParseException *ex) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_([((JavaTextParseException *) nil_chk(ex)) getMessage]);
  }
  jboolean releaseAckSem = false;
  jlong cseqNo = [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class])))) getCSeq])) getSeqNumber];
  if (![self isAckSentWithLong:cseqNo]) {
    releaseAckSem = true;
  }
  AndroidGovNistJavaxSipStackSIPDialog_setLastAckSentWithAndroidGovNistJavaxSipMessageSIPRequest_(self, (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([ackRequest java_clone], [AndroidGovNistJavaxSipMessageSIPRequest class]));
  @try {
    [((id<AndroidGovNistJavaxSipStackAckSendingStrategy>) nil_chk(self->ackSendingStrategy_)) sendWithAndroidGovNistJavaxSipMessageSIPRequest:ackRequest];
    self->isAcknowledged_ = true;
    self->highestSequenceNumberAcknowledged_ = JavaLangMath_maxWithLong_withLong_(self->highestSequenceNumberAcknowledged_, [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([(ackRequest) getCSeq])) getSeqNumber]);
    if (releaseAckSem && self->isBackToBackUserAgent_) {
      [self releaseAckSem];
    }
    else {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$@$Z", @"Not releasing ack sem for ", self, @" isAckSent ", releaseAckSem)];
    }
  }
  @catch (JavaIoIOException *ex) {
    if (throwIOExceptionAsSipException) @throw create_AndroidJavaxSipSipException_initWithNSString_withNSException_(@"Could not send ack", ex);
    id<AndroidJavaxSipAddressHop> hop = [((id<AndroidGovNistJavaxSipStackAckSendingStrategy>) nil_chk(self->ackSendingStrategy_)) getLastHop];
    if (hop == nil) {
      hop = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getNextHopWithAndroidGovNistJavaxSipMessageSIPRequest:ackRequest];
    }
    AndroidGovNistJavaxSipStackSIPDialog_raiseIOExceptionWithNSString_withInt_withNSString_(self, [((id<AndroidJavaxSipAddressHop>) nil_chk(hop)) getHost], [hop getPort], [hop getTransport]);
  }
  @catch (AndroidJavaxSipSipException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:@"SipException" withNSException:ex];
    @throw ex;
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:@"Exception" withNSException:ex];
    @throw create_AndroidJavaxSipSipException_initWithNSString_withNSException_(@"Could not create message channel", ex);
  }
  if (self->dialogDeleteTask_ != nil) {
    [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([self getStack])) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:self->dialogDeleteTask_];
    JreStrongAssign(&self->dialogDeleteTask_, nil);
  }
}

void AndroidGovNistJavaxSipStackSIPDialog_setLocalSequenceNumberWithLong_(AndroidGovNistJavaxSipStackSIPDialog *self, jlong lCseq) {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$J$J", @"setLocalSequenceNumber: original ", self->localSequenceNumber_, @" new  = ", lCseq)];
  if (lCseq <= self->localSequenceNumber_) @throw create_JavaLangRuntimeException_initWithNSString_(@"Sequence number should not decrease !");
  self->localSequenceNumber_ = lCseq;
}

void AndroidGovNistJavaxSipStackSIPDialog_setCallIdWithAndroidGovNistJavaxSipMessageSIPRequest_(AndroidGovNistJavaxSipStackSIPDialog *self, AndroidGovNistJavaxSipMessageSIPRequest *sipRequest) {
  JreStrongAssign(&self->callIdHeader_, [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getCallId]);
}

AndroidGovNistJavaxSipMessageSIPRequest *AndroidGovNistJavaxSipStackSIPDialog_createRequestWithNSString_withNSString_(AndroidGovNistJavaxSipStackSIPDialog *self, NSString *method, NSString *topMostViaTransport) {
  if (method == nil || topMostViaTransport == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null argument");
  if ([method isEqual:AndroidJavaxSipMessageRequest_CANCEL]) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Dialog.createRequest(): Invalid request");
  if ([self getState] == nil || ([((AndroidJavaxSipDialogState *) nil_chk([self getState])) getValue] == AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE && ![method java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_BYE]) || ([self isServer] && [((AndroidJavaxSipDialogState *) nil_chk([self getState])) getValue] == AndroidGovNistJavaxSipStackSIPDialog_EARLY_STATE && [method java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_BYE])) @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$$$@", @"Dialog  ", [self getDialogId], @" not yet established or terminated ", [self getState]));
  AndroidGovNistJavaxSipAddressSipUri *sipUri = nil;
  if ([self getRemoteTarget] != nil) sipUri = (AndroidGovNistJavaxSipAddressSipUri *) cast_chk([((id<AndroidJavaxSipAddressURI>) nil_chk([((id<AndroidJavaxSipAddressAddress>) nil_chk([self getRemoteTarget])) getURI])) java_clone], [AndroidGovNistJavaxSipAddressSipUri class]);
  else {
    sipUri = (AndroidGovNistJavaxSipAddressSipUri *) cast_chk([((id<AndroidJavaxSipAddressURI>) nil_chk([((id<AndroidJavaxSipAddressAddress>) nil_chk([self getRemoteParty])) getURI])) java_clone], [AndroidGovNistJavaxSipAddressSipUri class]);
    [((AndroidGovNistJavaxSipAddressSipUri *) nil_chk(sipUri)) clearUriParms];
  }
  AndroidGovNistJavaxSipHeaderCSeq *cseq = create_AndroidGovNistJavaxSipHeaderCSeq_init();
  @try {
    [cseq setMethodWithNSString:method];
    [cseq setSeqNumberWithLong:[self getLocalSeqNumber]];
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:@"Unexpected error"];
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
  }
  AndroidGovNistJavaxSipListeningPointImpl *lp = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(self->sipProvider_)) getListeningPointWithNSString:topMostViaTransport], [AndroidGovNistJavaxSipListeningPointImpl class]);
  if (lp == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) errorWithNSString:JreStrcat("$$", @"Cannot find listening point for transport ", topMostViaTransport)];
    @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$$", @"Cannot find listening point for transport ", topMostViaTransport));
  }
  AndroidGovNistJavaxSipHeaderVia *via = [lp getViaHeader];
  AndroidGovNistJavaxSipHeaderFrom *from = create_AndroidGovNistJavaxSipHeaderFrom_init();
  [from setAddressWithAndroidJavaxSipAddressAddress:[self getLocalParty]];
  AndroidGovNistJavaxSipHeaderTo *to = create_AndroidGovNistJavaxSipHeaderTo_init();
  [to setAddressWithAndroidJavaxSipAddressAddress:[self getRemoteParty]];
  AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = [self createRequestWithAndroidGovNistJavaxSipAddressSipUri:sipUri withAndroidGovNistJavaxSipHeaderVia:via withAndroidGovNistJavaxSipHeaderCSeq:cseq withAndroidGovNistJavaxSipHeaderFrom:from withAndroidGovNistJavaxSipHeaderTo:to];
  if (AndroidGovNistJavaxSipMessageSIPRequest_isTargetRefreshWithNSString_(method)) {
    id<AndroidJavaxSipHeaderContactHeader> contactHeader = [((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(((AndroidGovNistJavaxSipListeningPointImpl *) cast_chk([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(self->sipProvider_)) getListeningPointWithNSString:[lp getTransport]], [AndroidGovNistJavaxSipListeningPointImpl class])))) createContactHeader];
    [((id<AndroidJavaxSipAddressSipURI>) nil_chk(((id<AndroidJavaxSipAddressSipURI>) cast_check([((id<AndroidJavaxSipAddressAddress>) nil_chk([((id<AndroidJavaxSipHeaderContactHeader>) nil_chk(contactHeader)) getAddress])) getURI], AndroidJavaxSipAddressSipURI_class_())))) setSecureWithBoolean:[self isSecure]];
    [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) setHeaderWithAndroidJavaxSipHeaderHeader:contactHeader];
  }
  @try {
    cseq = (AndroidGovNistJavaxSipHeaderCSeq *) cast_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getCSeq], [AndroidGovNistJavaxSipHeaderCSeq class]);
    [((AndroidGovNistJavaxSipHeaderCSeq *) nil_chk(cseq)) setSeqNumberWithLong:[self getLocalSeqNumber] + 1];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPDialog_logger)) debugWithNSString:JreStrcat("$J", @"SIPDialog::createRequest:setting Request Seq Number to ", [cseq getSeqNumber])];
  }
  @catch (AndroidJavaxSipInvalidArgumentException *ex) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
  }
  if ([method isEqual:AndroidJavaxSipMessageRequest_SUBSCRIBE]) {
    if (self->eventHeader_ != nil) [sipRequest addHeaderWithAndroidJavaxSipHeaderHeader:self->eventHeader_];
  }
  if ([method isEqual:AndroidJavaxSipMessageRequest_NOTIFY]) {
    if (self->eventHeader_ != nil) {
      [sipRequest addHeaderWithAndroidJavaxSipHeaderHeader:self->eventHeader_];
    }
  }
  @try {
    if ([self getLocalTag] != nil) {
      [from setTagWithNSString:[self getLocalTag]];
    }
    else {
      [from removeTag];
    }
    if ([self getRemoteTag] != nil) {
      [to setTagWithNSString:[self getRemoteTag]];
    }
    else {
      [to removeTag];
    }
  }
  @catch (JavaTextParseException *ex) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
  }
  AndroidGovNistJavaxSipStackSIPDialog_updateRequestWithAndroidGovNistJavaxSipMessageSIPRequest_(self, sipRequest);
  return sipRequest;
}

void AndroidGovNistJavaxSipStackSIPDialog_setBranchWithAndroidGovNistJavaxSipHeaderVia_withNSString_(AndroidGovNistJavaxSipStackSIPDialog *self, AndroidGovNistJavaxSipHeaderVia *via, NSString *method) {
  NSString *branch;
  if ([((NSString *) nil_chk(method)) isEqual:AndroidJavaxSipMessageRequest_ACK]) {
    if ([((JavaLangInteger *) nil_chk([self getLastResponseStatusCode])) intValue] >= 300) {
      branch = [((AndroidGovNistJavaxSipHeaderVia *) nil_chk(self->lastResponseTopMostVia_)) getBranch];
    }
    else {
      branch = [((AndroidGovNistJavaxSipUtils *) nil_chk(AndroidGovNistJavaxSipUtils_getInstance())) generateBranchId];
    }
  }
  else if ([method isEqual:AndroidJavaxSipMessageRequest_CANCEL]) {
    branch = [((AndroidGovNistJavaxSipHeaderVia *) nil_chk(self->lastResponseTopMostVia_)) getBranch];
  }
  else return;
  @try {
    [((AndroidGovNistJavaxSipHeaderVia *) nil_chk(via)) setBranchWithNSString:branch];
  }
  @catch (JavaTextParseException *e) {
    [((JavaTextParseException *) nil_chk(e)) printStackTrace];
  }
}

jboolean AndroidGovNistJavaxSipStackSIPDialog_toRetransmitFinalResponseWithInt_(AndroidGovNistJavaxSipStackSIPDialog *self, jint T2) {
  if (--self->retransmissionTicksLeft_ == 0) {
    if (2 * self->prevRetransmissionTicks_ <= T2) self->retransmissionTicksLeft_ = 2 * self->prevRetransmissionTicks_;
    else self->retransmissionTicksLeft_ = self->prevRetransmissionTicks_;
    self->prevRetransmissionTicks_ = self->retransmissionTicksLeft_;
    return true;
  }
  else return false;
}

void AndroidGovNistJavaxSipStackSIPDialog_updateRequestWithAndroidGovNistJavaxSipMessageSIPRequest_(AndroidGovNistJavaxSipStackSIPDialog *self, AndroidGovNistJavaxSipMessageSIPRequest *sipRequest) {
  AndroidGovNistJavaxSipHeaderRouteList *rl = AndroidGovNistJavaxSipStackSIPDialog_getRouteList(self);
  if ([((AndroidGovNistJavaxSipHeaderRouteList *) nil_chk(rl)) size] > 0) {
    [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) setHeaderWithAndroidJavaxSipHeaderHeader:rl];
  }
  else {
    [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) removeHeaderWithNSString:AndroidJavaxSipHeaderRouteHeader_NAME];
  }
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultUserAgentHeader() != nil) {
    [sipRequest setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultUserAgentHeader()];
  }
  if (self->proxyAuthorizationHeader_ != nil && [sipRequest getHeaderWithNSString:AndroidJavaxSipHeaderProxyAuthorizationHeader_NAME] == nil) {
    [sipRequest setHeaderWithAndroidJavaxSipHeaderHeader:self->proxyAuthorizationHeader_];
  }
}

void AndroidGovNistJavaxSipStackSIPDialog_doTargetRefreshWithAndroidGovNistJavaxSipMessageSIPMessage_(AndroidGovNistJavaxSipStackSIPDialog *self, AndroidGovNistJavaxSipMessageSIPMessage *sipMessage) {
  AndroidGovNistJavaxSipHeaderContactList *contactList = [((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) getContactHeaders];
  if (contactList != nil) {
    AndroidGovNistJavaxSipHeaderContact *contact = (AndroidGovNistJavaxSipHeaderContact *) cast_chk([contactList getFirst], [AndroidGovNistJavaxSipHeaderContact class]);
    [self setRemoteTargetWithAndroidJavaxSipHeaderContactHeader:contact];
  }
}

jboolean AndroidGovNistJavaxSipStackSIPDialog_optionPresentWithJavaUtilListIterator_withNSString_(id<JavaUtilListIterator> l, NSString *option) {
  AndroidGovNistJavaxSipStackSIPDialog_initialize();
  while ([((id<JavaUtilListIterator>) nil_chk(l)) hasNext]) {
    id<AndroidJavaxSipHeaderOptionTag> opt = (id<AndroidJavaxSipHeaderOptionTag>) cast_check([l next], AndroidJavaxSipHeaderOptionTag_class_());
    if (opt != nil && [((NSString *) nil_chk(option)) java_equalsIgnoreCase:[opt getOptionTag]]) return true;
  }
  return false;
}

void AndroidGovNistJavaxSipStackSIPDialog_setLastAckSentWithAndroidGovNistJavaxSipMessageSIPRequest_(AndroidGovNistJavaxSipStackSIPDialog *self, AndroidGovNistJavaxSipMessageSIPRequest *lastAckSent) {
  JreStrongAssign(&self->lastAckSent_, lastAckSent);
  [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(self->lastAckSent_)) setTransactionWithId:nil];
}

IOSObjectArray *AndroidGovNistJavaxSipStackSIPDialog__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPDialog)

@implementation AndroidGovNistJavaxSipStackSIPDialog_AckSendingStrategyImpl

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)outer$ {
  AndroidGovNistJavaxSipStackSIPDialog_AckSendingStrategyImpl_initWithAndroidGovNistJavaxSipStackSIPDialog_(self, outer$);
  return self;
}

- (void)sendWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)ackRequest {
  JreStrongAssign(&hop_, [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_)) getNextHopWithAndroidGovNistJavaxSipMessageSIPRequest:ackRequest]);
  if (hop_ == nil) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"No route!");
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPDialog, logger))) debugWithNSString:JreStrcat("$@", @"hop = ", hop_)];
  AndroidGovNistJavaxSipListeningPointImpl *lp = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(this$0_->sipProvider_)) getListeningPointWithNSString:[((id<AndroidJavaxSipAddressHop>) nil_chk(hop_)) getTransport]], [AndroidGovNistJavaxSipListeningPointImpl class]);
  if (lp == nil) @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$@", @"No listening point for this provider registered at ", hop_));
  JavaNetInetAddress *inetAddress = JavaNetInetAddress_getByNameWithNSString_([((id<AndroidJavaxSipAddressHop>) nil_chk(hop_)) getHost]);
  AndroidGovNistJavaxSipStackMessageChannel *messageChannel = [((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk([lp getMessageProcessor])) createMessageChannelWithJavaNetInetAddress:inetAddress withInt:[((id<AndroidJavaxSipAddressHop>) nil_chk(hop_)) getPort]];
  [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(messageChannel)) sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:ackRequest];
}

- (id<AndroidJavaxSipAddressHop>)getLastHop {
  return hop_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(hop_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipAddressHop;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPDialog:);
  methods[1].selector = @selector(sendWithAndroidGovNistJavaxSipMessageSIPRequest:);
  methods[2].selector = @selector(getLastHop);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPDialog;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "hop_", "LAndroidJavaxSipAddressHop;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "send", "LAndroidGovNistJavaxSipMessageSIPRequest;", "LAndroidJavaxSipSipException;LJavaIoIOException;", "LAndroidGovNistJavaxSipStackSIPDialog;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPDialog_AckSendingStrategyImpl = { "AckSendingStrategyImpl", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 3, 2, 3, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPDialog_AckSendingStrategyImpl;
}

@end

void AndroidGovNistJavaxSipStackSIPDialog_AckSendingStrategyImpl_initWithAndroidGovNistJavaxSipStackSIPDialog_(AndroidGovNistJavaxSipStackSIPDialog_AckSendingStrategyImpl *self, AndroidGovNistJavaxSipStackSIPDialog *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->hop_, nil);
}

AndroidGovNistJavaxSipStackSIPDialog_AckSendingStrategyImpl *new_AndroidGovNistJavaxSipStackSIPDialog_AckSendingStrategyImpl_initWithAndroidGovNistJavaxSipStackSIPDialog_(AndroidGovNistJavaxSipStackSIPDialog *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPDialog_AckSendingStrategyImpl, initWithAndroidGovNistJavaxSipStackSIPDialog_, outer$)
}

AndroidGovNistJavaxSipStackSIPDialog_AckSendingStrategyImpl *create_AndroidGovNistJavaxSipStackSIPDialog_AckSendingStrategyImpl_initWithAndroidGovNistJavaxSipStackSIPDialog_(AndroidGovNistJavaxSipStackSIPDialog *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPDialog_AckSendingStrategyImpl, initWithAndroidGovNistJavaxSipStackSIPDialog_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPDialog_AckSendingStrategyImpl)

@implementation AndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)outer$ {
  AndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask_initWithAndroidGovNistJavaxSipStackSIPDialog_(self, outer$);
  return self;
}

- (void)runTask {
  @try {
    if ([((AndroidJavaxSipDialogState *) nil_chk([this$0_ getState])) isEqual:JreLoadStatic(AndroidJavaxSipDialogState, EARLY)]) {
      AndroidGovNistJavaxSipStackSIPDialog_raiseErrorEventWithInt_(this$0_, AndroidGovNistJavaxSipStackSIPDialogErrorEvent_EARLY_STATE_TIMEOUT);
    }
    else {
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPDialog, logger))) debugWithNSString:JreStrcat("$@", @"EarlyStateTimerTask : Dialog state is ", [this$0_ getState])];
    }
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPDialog, logger))) errorWithNSString:@"Unexpected exception delivering event" withNSException:ex];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPDialog:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPDialog;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPDialog;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask = { "EarlyStateTimerTask", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 2, 1, 0, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask;
}

@end

void AndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask_initWithAndroidGovNistJavaxSipStackSIPDialog_(AndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask *self, AndroidGovNistJavaxSipStackSIPDialog *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
}

AndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask *new_AndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask_initWithAndroidGovNistJavaxSipStackSIPDialog_(AndroidGovNistJavaxSipStackSIPDialog *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask, initWithAndroidGovNistJavaxSipStackSIPDialog_, outer$)
}

AndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask *create_AndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask_initWithAndroidGovNistJavaxSipStackSIPDialog_(AndroidGovNistJavaxSipStackSIPDialog *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask, initWithAndroidGovNistJavaxSipStackSIPDialog_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPDialog_EarlyStateTimerTask)

@implementation AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender

- (void)terminate {
  @try {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPDialog, logger))) debugWithNSString:JreStrcat("$@", @"ReInviteSender::terminate: ctx = ", ctx_)];
    [((id<AndroidJavaxSipClientTransaction>) nil_chk(ctx_)) terminate];
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
  }
  @catch (AndroidJavaxSipObjectInUseException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPDialog, logger))) errorWithNSString:@"unexpected error" withNSException:e];
  }
}

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)outer$
                        withAndroidJavaxSipClientTransaction:(id<AndroidJavaxSipClientTransaction>)ctx {
  AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender_initWithAndroidGovNistJavaxSipStackSIPDialog_withAndroidJavaxSipClientTransaction_(self, outer$, ctx);
  return self;
}

- (void)run {
  @try {
    jlong timeToWait = 0;
    jlong startTime = JavaLangSystem_currentTimeMillis();
    jboolean dialogTimedOut = false;
    jboolean busyWait = false;
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPDialog, logger))) debugWithNSString:JreStrcat("$@$@$@", @"SIPDialog::reInviteSender: dialog = ", [((id<AndroidJavaxSipClientTransaction>) nil_chk(ctx_)) getDialog], @" lastTransaction = ", this$0_->lastTransaction_, @" lastTransactionState ", [((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk(this$0_->lastTransaction_)) getState])];
    if (this$0_->lastTransaction_ != nil && [AndroidGovNistJavaxSipStackSIPServerTransaction_class_() isInstance:this$0_->lastTransaction_] && [this$0_->lastTransaction_ isInviteTransaction] && [((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk(this$0_->lastTransaction_)) getState] != JreLoadStatic(AndroidJavaxSipTransactionState, TERMINATED)) {
      [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check(this$0_->lastTransaction_, AndroidGovNistJavaxSipStackSIPServerTransaction_class_())) waitForTermination];
      JavaLangThread_sleepWithLong_(50);
    }
    if (![this$0_ takeAckSem]) {
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPDialog, logger))) errorWithNSString:@"Could not send re-INVITE time out ClientTransaction"];
      [((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) nil_chk(((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(ctx_, AndroidGovNistJavaxSipStackSIPClientTransaction_class_())))) fireTimeoutTimer];
      if ([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(this$0_->sipProvider_)) getSipListener] != nil && [AndroidGovNistJavaxSipSipListenerExt_class_() isInstance:[((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(this$0_->sipProvider_)) getSipListener]]) {
        dialogTimedOut = true;
        AndroidGovNistJavaxSipStackSIPDialog_raiseErrorEventWithInt_withAndroidGovNistJavaxSipStackSIPClientTransaction_(this$0_, AndroidGovNistJavaxSipStackSIPDialogErrorEvent_DIALOG_REINVITE_TIMEOUT, (id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(ctx_, AndroidGovNistJavaxSipStackSIPClientTransaction_class_()));
      }
      else {
        id<AndroidJavaxSipMessageRequest> byeRequest = [this$0_ createRequestWithNSString:AndroidJavaxSipMessageRequest_BYE];
        if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultUserAgentHeader() != nil) {
          [((id<AndroidJavaxSipMessageRequest>) nil_chk(byeRequest)) addHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultUserAgentHeader()];
        }
        id<AndroidJavaxSipHeaderReasonHeader> reasonHeader = create_AndroidGovNistJavaxSipHeaderReason_init();
        [reasonHeader setCauseWithInt:1024];
        [reasonHeader setTextWithNSString:@"Timed out waiting to re-INVITE"];
        [((id<AndroidJavaxSipMessageRequest>) nil_chk(byeRequest)) addHeaderWithAndroidJavaxSipHeaderHeader:reasonHeader];
        id<AndroidJavaxSipClientTransaction> byeCtx = [((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk([this$0_ getSipProvider])) getNewClientTransactionWithAndroidJavaxSipMessageRequest:byeRequest];
        [this$0_ sendRequestWithAndroidJavaxSipClientTransaction:byeCtx];
        return;
      }
    }
    if ([this$0_ getState] != JreLoadStatic(AndroidJavaxSipDialogState, TERMINATED)) {
      timeToWait = JavaLangSystem_currentTimeMillis() - startTime;
    }
    @try {
      if (timeToWait != 0) {
        JavaLangThread_sleepWithLong_(this$0_->reInviteWaitTime_);
      }
    }
    @catch (JavaLangInterruptedException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPDialog, logger))) debugWithNSString:@"Interrupted sleep"];
      return;
    }
    if ([this$0_ getState] != JreLoadStatic(AndroidJavaxSipDialogState, TERMINATED) && !dialogTimedOut && [((id<AndroidJavaxSipClientTransaction>) nil_chk(ctx_)) getState] != JreLoadStatic(AndroidJavaxSipTransactionState, TERMINATED)) {
      [this$0_ sendRequestWithAndroidJavaxSipClientTransaction:ctx_ withBoolean:true];
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPDialog, logger))) debugWithNSString:@"re-INVITE successfully sent"];
    }
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPDialog, logger))) errorWithNSString:@"Error sending re-INVITE" withNSException:ex];
  }
  @finally {
    JreStrongAssign(&self->ctx_, nil);
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(ctx_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(terminate);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPDialog:withAndroidJavaxSipClientTransaction:);
  methods[2].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPDialog;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "ctx_", "LAndroidJavaxSipClientTransaction;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidJavaxSipClientTransaction;", "LAndroidGovNistJavaxSipStackSIPDialog;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender = { "ReInviteSender", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 3, 3, 1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender;
}

@end

void AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender_initWithAndroidGovNistJavaxSipStackSIPDialog_withAndroidJavaxSipClientTransaction_(AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender *self, AndroidGovNistJavaxSipStackSIPDialog *outer$, id<AndroidJavaxSipClientTransaction> ctx) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->ctx_, ctx);
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPDialog, logger))) debugWithNSString:JreStrcat("$@", @"ReInviteSender::ReInviteSender: ctx = ", ctx)];
}

AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender *new_AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender_initWithAndroidGovNistJavaxSipStackSIPDialog_withAndroidJavaxSipClientTransaction_(AndroidGovNistJavaxSipStackSIPDialog *outer$, id<AndroidJavaxSipClientTransaction> ctx) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender, initWithAndroidGovNistJavaxSipStackSIPDialog_withAndroidJavaxSipClientTransaction_, outer$, ctx)
}

AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender *create_AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender_initWithAndroidGovNistJavaxSipStackSIPDialog_withAndroidJavaxSipClientTransaction_(AndroidGovNistJavaxSipStackSIPDialog *outer$, id<AndroidJavaxSipClientTransaction> ctx) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender, initWithAndroidGovNistJavaxSipStackSIPDialog_withAndroidJavaxSipClientTransaction_, outer$, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPDialog_ReInviteSender)

@implementation AndroidGovNistJavaxSipStackSIPDialog_LingerTimer

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)outer$ {
  AndroidGovNistJavaxSipStackSIPDialog_LingerTimer_initWithAndroidGovNistJavaxSipStackSIPDialog_(self, outer$);
  return self;
}

- (void)runTask {
  AndroidGovNistJavaxSipStackSIPDialog *dialog = this$0_;
  [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_)) removeDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog];
  if ([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(((AndroidGovNistJavaxSipSipStackImpl *) cast_chk([this$0_ getStack], [AndroidGovNistJavaxSipSipStackImpl class])))) isReEntrantListener]) {
    [this$0_ cleanUp];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPDialog:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPDialog;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPDialog;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPDialog_LingerTimer = { "LingerTimer", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 2, 1, 0, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPDialog_LingerTimer;
}

@end

void AndroidGovNistJavaxSipStackSIPDialog_LingerTimer_initWithAndroidGovNistJavaxSipStackSIPDialog_(AndroidGovNistJavaxSipStackSIPDialog_LingerTimer *self, AndroidGovNistJavaxSipStackSIPDialog *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
}

AndroidGovNistJavaxSipStackSIPDialog_LingerTimer *new_AndroidGovNistJavaxSipStackSIPDialog_LingerTimer_initWithAndroidGovNistJavaxSipStackSIPDialog_(AndroidGovNistJavaxSipStackSIPDialog *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPDialog_LingerTimer, initWithAndroidGovNistJavaxSipStackSIPDialog_, outer$)
}

AndroidGovNistJavaxSipStackSIPDialog_LingerTimer *create_AndroidGovNistJavaxSipStackSIPDialog_LingerTimer_initWithAndroidGovNistJavaxSipStackSIPDialog_(AndroidGovNistJavaxSipStackSIPDialog *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPDialog_LingerTimer, initWithAndroidGovNistJavaxSipStackSIPDialog_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPDialog_LingerTimer)

@implementation AndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)outer$
         withAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)transaction {
  AndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask_initWithAndroidGovNistJavaxSipStackSIPDialog_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, outer$, transaction);
  return self;
}

- (void)runTask {
  AndroidGovNistJavaxSipStackSIPDialog *dialog = this$0_;
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPDialog, logger))) debugWithNSString:@"Running dialog timer"];
  nRetransmissions_++;
  id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction = self->transaction_;
  if (nRetransmissions_ > [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_)) getAckTimeoutFactor] * AndroidGovNistJavaxSipStackSIPTransaction_T1) {
    if ([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk([this$0_ getSipProvider])) getSipListener] != nil && [AndroidGovNistJavaxSipSipListenerExt_class_() isInstance:[((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk([this$0_ getSipProvider])) getSipListener]]) {
      AndroidGovNistJavaxSipStackSIPDialog_raiseErrorEventWithInt_(this$0_, AndroidGovNistJavaxSipStackSIPDialogErrorEvent_DIALOG_ACK_NOT_RECEIVED_TIMEOUT);
    }
    else {
      [this$0_ delete__];
    }
    if (transaction != nil && [transaction getState] != JreLoadStatic(AndroidJavaxSipTransactionState, TERMINATED)) {
      [transaction raiseErrorEventWithInt:AndroidGovNistJavaxSipStackSIPTransactionErrorEvent_TIMEOUT_ERROR];
    }
  }
  else if ((transaction != nil) && (![dialog isAckSeen])) {
    if ([((JavaLangInteger *) nil_chk(this$0_->lastResponseStatusCode_)) intValue] / 100 == 2) {
      @try {
        if (AndroidGovNistJavaxSipStackSIPDialog_toRetransmitFinalResponseWithInt_(dialog, [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(transaction)) getTimerT2])) {
          [transaction resendLastResponseAsBytes];
        }
      }
      @catch (JavaIoIOException *ex) {
        AndroidGovNistJavaxSipStackSIPDialog_raiseIOExceptionWithNSString_withInt_withNSString_(this$0_, [transaction getPeerAddress], [transaction getPeerPort], [transaction getPeerProtocol]);
      }
      @finally {
        AndroidGovNistJavaxSipStackSIPTransactionStack *stack = dialog->sipStack_;
        [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPDialog, logger))) debugWithNSString:JreStrcat("$@", @"resend 200 response from ", dialog)];
        [transaction fireTimer];
      }
    }
  }
  if ([dialog isAckSeen] || dialog->dialogState_ == AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE) {
    JreStrongAssign(&self->transaction_, nil);
    [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([this$0_ getStack])) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:self];
  }
}

- (void)cleanUpBeforeCancel {
  JreStrongAssign(&transaction_, nil);
  [this$0_ cleanUpOnAck];
  [super cleanUpBeforeCancel];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(transaction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPDialog:withAndroidGovNistJavaxSipStackSIPServerTransaction:);
  methods[1].selector = @selector(runTask);
  methods[2].selector = @selector(cleanUpBeforeCancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPDialog;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "nRetransmissions_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "transaction_", "LAndroidGovNistJavaxSipStackSIPServerTransaction;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPServerTransaction;", "LAndroidGovNistJavaxSipStackSIPDialog;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask = { "DialogTimerTask", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 3, 3, 1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask;
}

@end

void AndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask_initWithAndroidGovNistJavaxSipStackSIPDialog_withAndroidGovNistJavaxSipStackSIPServerTransaction_(AndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask *self, AndroidGovNistJavaxSipStackSIPDialog *outer$, id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
  JreStrongAssign(&self->transaction_, transaction);
  self->nRetransmissions_ = 0;
}

AndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask *new_AndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask_initWithAndroidGovNistJavaxSipStackSIPDialog_withAndroidGovNistJavaxSipStackSIPServerTransaction_(AndroidGovNistJavaxSipStackSIPDialog *outer$, id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask, initWithAndroidGovNistJavaxSipStackSIPDialog_withAndroidGovNistJavaxSipStackSIPServerTransaction_, outer$, transaction)
}

AndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask *create_AndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask_initWithAndroidGovNistJavaxSipStackSIPDialog_withAndroidGovNistJavaxSipStackSIPServerTransaction_(AndroidGovNistJavaxSipStackSIPDialog *outer$, id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask, initWithAndroidGovNistJavaxSipStackSIPDialog_withAndroidGovNistJavaxSipStackSIPServerTransaction_, outer$, transaction)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPDialog_DialogTimerTask)

@implementation AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)outer$ {
  AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask_initWithAndroidGovNistJavaxSipStackSIPDialog_(self, outer$);
  return self;
}

- (void)runTask {
  [this$0_ delete__];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPDialog:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPDialog;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPDialog;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask = { "DialogDeleteTask", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 2, 1, 0, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask;
}

@end

void AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask_initWithAndroidGovNistJavaxSipStackSIPDialog_(AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask *self, AndroidGovNistJavaxSipStackSIPDialog *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
}

AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask *new_AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask_initWithAndroidGovNistJavaxSipStackSIPDialog_(AndroidGovNistJavaxSipStackSIPDialog *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask, initWithAndroidGovNistJavaxSipStackSIPDialog_, outer$)
}

AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask *create_AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask_initWithAndroidGovNistJavaxSipStackSIPDialog_(AndroidGovNistJavaxSipStackSIPDialog *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask, initWithAndroidGovNistJavaxSipStackSIPDialog_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteTask)

@implementation AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)outer$
                                                    withLong:(jlong)seqno {
  AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask_initWithAndroidGovNistJavaxSipStackSIPDialog_withLong_(self, outer$, seqno);
  return self;
}

- (void)runTask {
  if (this$0_->highestSequenceNumberAcknowledged_ < seqno_) {
    JreStrongAssign(&this$0_->dialogDeleteIfNoAckSentTask_, nil);
    if (!this$0_->isBackToBackUserAgent_) {
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPDialog, logger))) errorWithNSString:JreStrcat("$$", @"ACK Was not sent. killing dialog ", this$0_->dialogId_)];
      if ([AndroidGovNistJavaxSipSipListenerExt_class_() isInstance:[((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk((this$0_->sipProvider_))) getSipListener]]) {
        AndroidGovNistJavaxSipStackSIPDialog_raiseErrorEventWithInt_(this$0_, AndroidGovNistJavaxSipStackSIPDialogErrorEvent_DIALOG_ACK_NOT_SENT_TIMEOUT);
      }
      else {
        [this$0_ delete__];
      }
    }
    else {
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPDialog, logger))) errorWithNSString:JreStrcat("$$", @"ACK Was not sent. Sending BYE ", this$0_->dialogId_)];
      if ([AndroidGovNistJavaxSipSipListenerExt_class_() isInstance:[((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk((this$0_->sipProvider_))) getSipListener]]) {
        AndroidGovNistJavaxSipStackSIPDialog_raiseErrorEventWithInt_(this$0_, AndroidGovNistJavaxSipStackSIPDialogErrorEvent_DIALOG_ACK_NOT_SENT_TIMEOUT);
      }
      else {
        @try {
          id<AndroidJavaxSipMessageRequest> byeRequest = [this$0_ createRequestWithNSString:AndroidJavaxSipMessageRequest_BYE];
          if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultUserAgentHeader() != nil) {
            [((id<AndroidJavaxSipMessageRequest>) nil_chk(byeRequest)) addHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultUserAgentHeader()];
          }
          id<AndroidJavaxSipHeaderReasonHeader> reasonHeader = create_AndroidGovNistJavaxSipHeaderReason_init();
          [reasonHeader setProtocolWithNSString:@"SIP"];
          [reasonHeader setCauseWithInt:1025];
          [reasonHeader setTextWithNSString:JreStrcat("$$", @"Timed out waiting to send ACK ", this$0_->dialogId_)];
          [((id<AndroidJavaxSipMessageRequest>) nil_chk(byeRequest)) addHeaderWithAndroidJavaxSipHeaderHeader:reasonHeader];
          id<AndroidJavaxSipClientTransaction> byeCtx = [((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk([this$0_ getSipProvider])) getNewClientTransactionWithAndroidJavaxSipMessageRequest:byeRequest];
          [this$0_ sendRequestWithAndroidJavaxSipClientTransaction:byeCtx];
          return;
        }
        @catch (JavaLangException *ex) {
          [this$0_ delete__];
        }
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPDialog:withLong:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPDialog;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "seqno_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "LAndroidGovNistJavaxSipStackSIPDialog;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask = { "DialogDeleteIfNoAckSentTask", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 2, 2, 1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask;
}

@end

void AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask_initWithAndroidGovNistJavaxSipStackSIPDialog_withLong_(AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask *self, AndroidGovNistJavaxSipStackSIPDialog *outer$, jlong seqno) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
  self->seqno_ = seqno;
}

AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask *new_AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask_initWithAndroidGovNistJavaxSipStackSIPDialog_withLong_(AndroidGovNistJavaxSipStackSIPDialog *outer$, jlong seqno) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask, initWithAndroidGovNistJavaxSipStackSIPDialog_withLong_, outer$, seqno)
}

AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask *create_AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask_initWithAndroidGovNistJavaxSipStackSIPDialog_withLong_(AndroidGovNistJavaxSipStackSIPDialog *outer$, jlong seqno) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask, initWithAndroidGovNistJavaxSipStackSIPDialog_withLong_, outer$, seqno)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPDialog_DialogDeleteIfNoAckSentTask)
