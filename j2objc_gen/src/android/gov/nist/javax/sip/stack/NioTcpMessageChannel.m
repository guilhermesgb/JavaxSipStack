//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/NioTcpMessageChannel.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/header/CSeq.h"
#include "android/gov/nist/javax/sip/header/CallID.h"
#include "android/gov/nist/javax/sip/header/ContentLength.h"
#include "android/gov/nist/javax/sip/header/From.h"
#include "android/gov/nist/javax/sip/header/RequestLine.h"
#include "android/gov/nist/javax/sip/header/StatusLine.h"
#include "android/gov/nist/javax/sip/header/To.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/parser/NioPipelineParser.h"
#include "android/gov/nist/javax/sip/stack/ConnectionOrientedMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/ConnectionOrientedMessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/MessageChannel.h"
#include "android/gov/nist/javax/sip/stack/MessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/NIOHandler.h"
#include "android/gov/nist/javax/sip/stack/NioTcpMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/NioTcpMessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/net/InetAddress.h"
#include "java/net/Socket.h"
#include "java/net/SocketAddress.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/channels/SocketChannel.h"
#include "java/text/ParseException.h"
#include "java/util/HashMap.h"
#include "javax/net/ssl/SSLException.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackNioTcpMessageChannel_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackNioTcpMessageChannel_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackNioTcpMessageChannel, logger, id<OrgSlf4jLogger>)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackNioTcpMessageChannel)

JavaUtilHashMap *AndroidGovNistJavaxSipStackNioTcpMessageChannel_channelMap;

@implementation AndroidGovNistJavaxSipStackNioTcpMessageChannel

+ (AndroidGovNistJavaxSipStackNioTcpMessageChannel *)createWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor:(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *)nioTcpMessageProcessor
                                                                                withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel {
  return AndroidGovNistJavaxSipStackNioTcpMessageChannel_createWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(nioTcpMessageProcessor, socketChannel);
}

+ (AndroidGovNistJavaxSipStackNioTcpMessageChannel *)getMessageChannelWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel {
  return AndroidGovNistJavaxSipStackNioTcpMessageChannel_getMessageChannelWithJavaNioChannelsSocketChannel_(socketChannel);
}

+ (void)putMessageChannelWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel
      withAndroidGovNistJavaxSipStackNioTcpMessageChannel:(AndroidGovNistJavaxSipStackNioTcpMessageChannel *)nioTcpMessageChannel {
  AndroidGovNistJavaxSipStackNioTcpMessageChannel_putMessageChannelWithJavaNioChannelsSocketChannel_withAndroidGovNistJavaxSipStackNioTcpMessageChannel_(socketChannel, nioTcpMessageChannel);
}

+ (void)removeMessageChannelWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel {
  AndroidGovNistJavaxSipStackNioTcpMessageChannel_removeMessageChannelWithJavaNioChannelsSocketChannel_(socketChannel);
}

- (void)readChannel {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) debugWithNSString:@"NioTcpMessageChannel::readChannel"];
  jint bufferSize = 4096;
  IOSByteArray *msg = [IOSByteArray arrayWithLength:bufferSize];
  self->isRunning_ = true;
  @try {
    JavaNioByteBuffer *byteBuffer = JavaNioByteBuffer_wrapWithByteArray_(msg);
    jint nbytes = [((JavaNioChannelsSocketChannel *) nil_chk(self->socketChannel_)) readWithJavaNioByteBuffer:byteBuffer];
    [((JavaNioByteBuffer *) nil_chk(byteBuffer)) flip];
    msg = [IOSByteArray arrayWithLength:[byteBuffer remaining]];
    [byteBuffer getWithByteArray:msg];
    jboolean streamError = nbytes == -1;
    nbytes = msg->size_;
    [byteBuffer clear];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) debugWithNSString:JreStrcat("$I$", @"Read ", nbytes, @" from socketChannel")];
    if (streamError) @throw create_JavaIoIOException_initWithNSString_(@"End-of-stream read (-1). This is usually an indication we are stuck and it is better to disconnect.");
    if (nbytes == 0) @throw create_JavaIoIOException_initWithNSString_(@"The socket is giving us empty TCP packets. This is usually an indication we are stuck and it is better to disconnect.");
    IOSByteArray *bytes = [IOSByteArray arrayWithLength:nbytes];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(msg, 0, bytes, 0, nbytes);
    [self addBytesWithByteArray:bytes];
    lastActivityTimeStamp_ = JavaLangSystem_currentTimeMillis();
  }
  @catch (JavaLangException *ex) {
    if ([ex isKindOfClass:[JavaIoIOException class]] && !([ex isKindOfClass:[JavaxNetSslSSLException class]])) {
      @try {
        [((AndroidGovNistJavaxSipParserNioPipelineParser *) nil_chk(nioParser_)) addBytesWithByteArray:[@"\x0d\n\x0d\n" java_getBytesWithCharsetName:@"UTF-8"]];
      }
      @catch (JavaLangException *e) {
      }
    }
    @try {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) debugWithNSString:JreStrcat("$@$$CI$@CI", @"IOException  closing sock ", ex, @"myAddress:myport ", myAddress_, ':', myPort_, @", remoteAddress:remotePort ", peerAddress_, ':', peerPort_)];
      [self closeWithBoolean:true withBoolean:false];
    }
    @catch (JavaLangException *ex1) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) debugWithNSString:JreStrcat("$@", @"Exception closing the socket ", ex1)];
    }
  }
}

- (void)addBytesWithByteArray:(IOSByteArray *)bytes {
  [((AndroidGovNistJavaxSipParserNioPipelineParser *) nil_chk(nioParser_)) addBytesWithByteArray:bytes];
}

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor:(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *)nioTcpMessageProcessor
                                         withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel {
  AndroidGovNistJavaxSipStackNioTcpMessageChannel_initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(self, nioTcpMessageProcessor, socketChannel);
  return self;
}

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)inetAddress
                                   withInt:(jint)port
withAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
withAndroidGovNistJavaxSipStackNioTcpMessageProcessor:(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *)nioTcpMessageProcessor {
  AndroidGovNistJavaxSipStackNioTcpMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(self, inetAddress, port, sipStack, nioTcpMessageProcessor);
  return self;
}

- (JavaNioChannelsSocketChannel *)getSocketChannel {
  return socketChannel_;
}

- (void)closeWithBoolean:(jboolean)removeSocket
             withBoolean:(jboolean)stopKeepAliveTask {
  @try {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) debugWithNSString:JreStrcat("$@$@", @"Closing NioTcpMessageChannel ", self, @" socketChannel = ", socketChannel_)];
    AndroidGovNistJavaxSipStackNioTcpMessageChannel_removeMessageChannelWithJavaNioChannelsSocketChannel_(socketChannel_);
    if (socketChannel_ != nil) {
      [socketChannel_ close];
    }
    if (nioParser_ != nil) {
      [nioParser_ close];
    }
    self->isRunning_ = false;
    if (removeSocket) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) debugWithNSString:JreStrcat("$@$@", @"Removing NioTcpMessageChannel ", self, @" socketChannel = ", socketChannel_)];
      [((AndroidGovNistJavaxSipStackNIOHandler *) nil_chk(((AndroidGovNistJavaxSipStackNioTcpMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackNioTcpMessageProcessor *) cast_chk(self->messageProcessor_, [AndroidGovNistJavaxSipStackNioTcpMessageProcessor class]))))->nioHandler_)) removeSocketWithJavaNioChannelsSocketChannel:socketChannel_];
      [((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) cast_chk(self->messageProcessor_, [AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor class])))) removeWithAndroidGovNistJavaxSipStackConnectionOrientedMessageChannel:self];
    }
    if (stopKeepAliveTask) {
      [self cancelPingKeepAliveTimeoutTaskIfStarted];
    }
  }
  @catch (JavaIoIOException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) errorWithNSString:@"Problem occured while closing" withNSException:e];
  }
}

- (NSString *)getTransport {
  return ((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(self->messageProcessor_))->transport_;
}

- (void)sendMessageWithByteArray:(IOSByteArray *)msg
                     withBoolean:(jboolean)isClient {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) debugWithNSString:JreStrcat("$Z$@", @"sendMessage isClient  = ", isClient, @" this = ", self)];
  lastActivityTimeStamp_ = JavaLangSystem_currentTimeMillis();
  AndroidGovNistJavaxSipStackNIOHandler *nioHandler = ((AndroidGovNistJavaxSipStackNioTcpMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackNioTcpMessageProcessor *) cast_chk(messageProcessor_, [AndroidGovNistJavaxSipStackNioTcpMessageProcessor class]))))->nioHandler_;
  if (self->socketChannel_ != nil && [self->socketChannel_ isConnected] && [((JavaNioChannelsSocketChannel *) nil_chk(self->socketChannel_)) isOpen]) {
    [((AndroidGovNistJavaxSipStackNIOHandler *) nil_chk(nioHandler)) putSocketWithNSString:AndroidGovNistJavaxSipStackNIOHandler_makeKeyWithJavaNetInetAddress_withInt_(self->peerAddress_, self->peerPort_) withJavaNioChannelsSocketChannel:self->socketChannel_];
  }
  [self sendTCPMessageWithByteArray:msg withJavaNetInetAddress:self->peerAddress_ withInt:self->peerPort_ withBoolean:isClient];
}

- (void)sendMessageWithByteArray:(IOSByteArray *)message
          withJavaNetInetAddress:(JavaNetInetAddress *)receiverAddress
                         withInt:(jint)receiverPort
                     withBoolean:(jboolean)retry {
  [self sendTCPMessageWithByteArray:message withJavaNetInetAddress:receiverAddress withInt:receiverPort withBoolean:retry];
}

- (void)sendTCPMessageWithByteArray:(IOSByteArray *)message
             withJavaNetInetAddress:(JavaNetInetAddress *)receiverAddress
                            withInt:(jint)receiverPort
                        withBoolean:(jboolean)retry {
  if (message == nil || receiverAddress == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) errorWithNSString:JreStrcat("$@", @"receiverAddress = ", receiverAddress)];
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Null argument");
  }
  lastActivityTimeStamp_ = JavaLangSystem_currentTimeMillis();
  if (peerPortAdvertisedInHeaders_ <= 0) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) debugWithNSString:JreStrcat("$I$@$$", @"receiver port = ", receiverPort, @" for this channel ", self, @" key ", key_)];
    if (receiverPort <= 0) {
      self->peerPortAdvertisedInHeaders_ = 5060;
    }
    else {
      self->peerPortAdvertisedInHeaders_ = receiverPort;
    }
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) debugWithNSString:JreStrcat("$I$@$$", @"2.Storing peerPortAdvertisedInHeaders = ", peerPortAdvertisedInHeaders_, @" for this channel ", self, @" key ", key_)];
  }
  AndroidGovNistJavaxSipStackNIOHandler *nioHandler = ((AndroidGovNistJavaxSipStackNioTcpMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackNioTcpMessageProcessor *) cast_chk(messageProcessor_, [AndroidGovNistJavaxSipStackNioTcpMessageProcessor class]))))->nioHandler_;
  JavaNioChannelsSocketChannel *sock = [((AndroidGovNistJavaxSipStackNIOHandler *) nil_chk(nioHandler)) sendBytesWithJavaNetInetAddress:[((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(self->messageProcessor_)) getIpAddress] withJavaNetInetAddress:receiverAddress withInt:receiverPort withNSString:((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(self->messageProcessor_))->transport_ withByteArray:message withBoolean:retry withAndroidGovNistJavaxSipStackNioTcpMessageChannel:self];
  if (sock != socketChannel_ && sock != nil) {
    if (socketChannel_ != nil) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) warnWithNSString:JreStrcat("$$@C@", @"[2] Old socket different than new socket on channel ", key_, socketChannel_, ' ', sock)];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) warnWithNSString:JreStrcat("$@", @"Old socket local ip address ", [((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk(socketChannel_)) socket])) getLocalSocketAddress])];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) warnWithNSString:JreStrcat("$@", @"Old socket remote ip address ", [((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk(socketChannel_)) socket])) getRemoteSocketAddress])];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) warnWithNSString:JreStrcat("$@", @"New socket local ip address ", [((JavaNetSocket *) nil_chk([sock socket])) getLocalSocketAddress])];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) warnWithNSString:JreStrcat("$@", @"New socket remote ip address ", [((JavaNetSocket *) nil_chk([sock socket])) getRemoteSocketAddress])];
      [self closeWithBoolean:false withBoolean:false];
      JreStrongAssign(&socketChannel_, sock);
      AndroidGovNistJavaxSipStackNioTcpMessageChannel_putMessageChannelWithJavaNioChannelsSocketChannel_withAndroidGovNistJavaxSipStackNioTcpMessageChannel_(socketChannel_, self);
      [self onNewSocketWithByteArray:message];
    }
    if (socketChannel_ != nil) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) warnWithNSString:JreStrcat("$$", @"There was no exception for the retry mechanism so we keep going ", key_)];
    }
    JreStrongAssign(&socketChannel_, sock);
  }
}

- (void)onNewSocketWithByteArray:(IOSByteArray *)message {
}

- (void)handleExceptionWithJavaTextParseException:(JavaTextParseException *)ex
      withAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage
                                     withIOSClass:(IOSClass *)hdrClass
                                     withNSString:(NSString *)header
                                     withNSString:(NSString *)message {
  if ((hdrClass != nil) && ([((IOSClass *) nil_chk(hdrClass)) isEqual:AndroidGovNistJavaxSipHeaderFrom_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderTo_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderCSeq_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderVia_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderCallID_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderContentLength_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderRequestLine_class_()] || [hdrClass isEqual:AndroidGovNistJavaxSipHeaderStatusLine_class_()])) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) debugWithNSString:JreStrcat("$$", @"Encountered Bad Message \n", [((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) description])];
    NSString *msgString = [sipMessage description];
    if (![((NSString *) nil_chk(msgString)) hasPrefix:@"SIP/"] && ![msgString hasPrefix:@"ACK "]) {
      if (socketChannel_ != nil) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) errorWithNSString:JreStrcat("$$", @"Malformed mandatory headers: closing socket! :", [socketChannel_ description])];
        @try {
          [((JavaNioChannelsSocketChannel *) nil_chk(socketChannel_)) close];
        }
        @catch (JavaIoIOException *ie) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) errorWithNSString:JreStrcat("$$C$", @"Exception while closing socket! :", [((JavaNioChannelsSocketChannel *) nil_chk(socketChannel_)) description], ':', [((JavaIoIOException *) nil_chk(ie)) description])];
        }
      }
    }
    @throw ex;
  }
  else {
    [((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) addUnparsedWithNSString:header];
  }
}

- (jboolean)isEqual:(id)other {
  if (![[self java_getClass] isEqual:[nil_chk(other) java_getClass]]) return false;
  else {
    AndroidGovNistJavaxSipStackNioTcpMessageChannel *that = (AndroidGovNistJavaxSipStackNioTcpMessageChannel *) cast_chk(other, [AndroidGovNistJavaxSipStackNioTcpMessageChannel class]);
    if (self->socketChannel_ != that->socketChannel_) return false;
    else return true;
  }
}

- (jboolean)isSecure {
  return false;
}

- (jlong)getLastActivityTimestamp {
  return lastActivityTimeStamp_;
}

- (void)dealloc {
  RELEASE_(socketChannel_);
  RELEASE_(nioParser_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidGovNistJavaxSipStackNioTcpMessageChannel;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackNioTcpMessageChannel;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 9, 10, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, 2, -1, -1, -1 },
    { NULL, "LJavaNioChannelsSocketChannel;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 15, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 16, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 16, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, 21, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor:withJavaNioChannelsSocketChannel:);
  methods[1].selector = @selector(getMessageChannelWithJavaNioChannelsSocketChannel:);
  methods[2].selector = @selector(putMessageChannelWithJavaNioChannelsSocketChannel:withAndroidGovNistJavaxSipStackNioTcpMessageChannel:);
  methods[3].selector = @selector(removeMessageChannelWithJavaNioChannelsSocketChannel:);
  methods[4].selector = @selector(readChannel);
  methods[5].selector = @selector(addBytesWithByteArray:);
  methods[6].selector = @selector(initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor:withJavaNioChannelsSocketChannel:);
  methods[7].selector = @selector(initWithJavaNetInetAddress:withInt:withAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistJavaxSipStackNioTcpMessageProcessor:);
  methods[8].selector = @selector(getSocketChannel);
  methods[9].selector = @selector(closeWithBoolean:withBoolean:);
  methods[10].selector = @selector(getTransport);
  methods[11].selector = @selector(sendMessageWithByteArray:withBoolean:);
  methods[12].selector = @selector(sendMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:);
  methods[13].selector = @selector(sendTCPMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:);
  methods[14].selector = @selector(onNewSocketWithByteArray:);
  methods[15].selector = @selector(handleExceptionWithJavaTextParseException:withAndroidGovNistJavaxSipMessageSIPMessage:withIOSClass:withNSString:withNSString:);
  methods[16].selector = @selector(isEqual:);
  methods[17].selector = @selector(isSecure);
  methods[18].selector = @selector(getLastActivityTimestamp);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 24, -1, -1 },
    { "channelMap", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0xc, -1, 25, 26, -1 },
    { "socketChannel_", "LJavaNioChannelsSocketChannel;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "lastActivityTimeStamp_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "nioParser_", "LAndroidGovNistJavaxSipParserNioPipelineParser;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "create", "LAndroidGovNistJavaxSipStackNioTcpMessageProcessor;LJavaNioChannelsSocketChannel;", "LJavaIoIOException;", "getMessageChannel", "LJavaNioChannelsSocketChannel;", "putMessageChannel", "LJavaNioChannelsSocketChannel;LAndroidGovNistJavaxSipStackNioTcpMessageChannel;", "removeMessageChannel", "addBytes", "[B", "LJavaLangException;", "LJavaNetInetAddress;ILAndroidGovNistJavaxSipStackSIPTransactionStack;LAndroidGovNistJavaxSipStackNioTcpMessageProcessor;", "close", "ZZ", "sendMessage", "[BZ", "[BLJavaNetInetAddress;IZ", "sendTCPMessage", "onNewSocket", "handleException", "LJavaTextParseException;LAndroidGovNistJavaxSipMessageSIPMessage;LIOSClass;LNSString;LNSString;", "LJavaTextParseException;", "equals", "LNSObject;", &AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger, &AndroidGovNistJavaxSipStackNioTcpMessageChannel_channelMap, "Ljava/util/HashMap<Ljava/nio/channels/SocketChannel;Landroid/gov/nist/javax/sip/stack/NioTcpMessageChannel;>;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackNioTcpMessageChannel = { "NioTcpMessageChannel", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 19, 5, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackNioTcpMessageChannel;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackNioTcpMessageChannel class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackNioTcpMessageChannel_class_()));
    JreStrongAssignAndConsume(&AndroidGovNistJavaxSipStackNioTcpMessageChannel_channelMap, new_JavaUtilHashMap_init());
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackNioTcpMessageChannel)
  }
}

@end

AndroidGovNistJavaxSipStackNioTcpMessageChannel *AndroidGovNistJavaxSipStackNioTcpMessageChannel_createWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor, JavaNioChannelsSocketChannel *socketChannel) {
  AndroidGovNistJavaxSipStackNioTcpMessageChannel_initialize();
  AndroidGovNistJavaxSipStackNioTcpMessageChannel *retval = [((JavaUtilHashMap *) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_channelMap)) getWithId:socketChannel];
  if (retval == nil) {
    retval = create_AndroidGovNistJavaxSipStackNioTcpMessageChannel_initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(nioTcpMessageProcessor, socketChannel);
    [((JavaUtilHashMap *) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_channelMap)) putWithId:socketChannel withId:retval];
  }
  JreStrongAssign(&retval->messageProcessor_, nioTcpMessageProcessor);
  JreStrongAssign(&retval->myClientInputStream_, [((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk(socketChannel)) socket])) getInputStream]);
  return retval;
}

AndroidGovNistJavaxSipStackNioTcpMessageChannel *AndroidGovNistJavaxSipStackNioTcpMessageChannel_getMessageChannelWithJavaNioChannelsSocketChannel_(JavaNioChannelsSocketChannel *socketChannel) {
  AndroidGovNistJavaxSipStackNioTcpMessageChannel_initialize();
  return [((JavaUtilHashMap *) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_channelMap)) getWithId:socketChannel];
}

void AndroidGovNistJavaxSipStackNioTcpMessageChannel_putMessageChannelWithJavaNioChannelsSocketChannel_withAndroidGovNistJavaxSipStackNioTcpMessageChannel_(JavaNioChannelsSocketChannel *socketChannel, AndroidGovNistJavaxSipStackNioTcpMessageChannel *nioTcpMessageChannel) {
  AndroidGovNistJavaxSipStackNioTcpMessageChannel_initialize();
  [((JavaUtilHashMap *) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_channelMap)) putWithId:socketChannel withId:nioTcpMessageChannel];
}

void AndroidGovNistJavaxSipStackNioTcpMessageChannel_removeMessageChannelWithJavaNioChannelsSocketChannel_(JavaNioChannelsSocketChannel *socketChannel) {
  AndroidGovNistJavaxSipStackNioTcpMessageChannel_initialize();
  [((JavaUtilHashMap *) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_channelMap)) removeWithId:socketChannel];
}

void AndroidGovNistJavaxSipStackNioTcpMessageChannel_initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackNioTcpMessageChannel *self, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor, JavaNioChannelsSocketChannel *socketChannel) {
  AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(self, [((AndroidGovNistJavaxSipStackNioTcpMessageProcessor *) nil_chk(nioTcpMessageProcessor)) getSIPStack]);
  JreStrongAssign(&self->nioParser_, nil);
  JreStrongAssign(&self->myClientInputStream_, [((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk(socketChannel)) socket])) getInputStream]);
  @try {
    JreStrongAssign(&self->peerAddress_, [((JavaNetSocket *) nil_chk([socketChannel socket])) getInetAddress]);
    self->peerPort_ = [((JavaNetSocket *) nil_chk([socketChannel socket])) getPort];
    JreStrongAssign(&self->socketChannel_, socketChannel);
    JreStrongAssign(&self->mySock_, [socketChannel socket]);
    JreStrongAssignAndConsume(&self->nioParser_, new_AndroidGovNistJavaxSipParserNioPipelineParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withInt_(self->sipStack_, self, [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getMaxMessageSize]));
    JreStrongAssign(&self->peerProtocol_, nioTcpMessageProcessor->transport_);
    self->lastActivityTimeStamp_ = JavaLangSystem_currentTimeMillis();
    JreStrongAssign(&self->key_, AndroidGovNistJavaxSipStackMessageChannel_getKeyWithJavaNetInetAddress_withInt_withNSString_(self->peerAddress_, self->peerPort_, nioTcpMessageProcessor->transport_));
    JreStrongAssign(&self->myAddress_, [((JavaNetInetAddress *) nil_chk([nioTcpMessageProcessor getIpAddress])) getHostAddress]);
    self->myPort_ = [nioTcpMessageProcessor getPort];
  }
  @finally {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) debugWithNSString:JreStrcat("$@$@", @"Done creating NioTcpMessageChannel ", self, @" socketChannel = ", socketChannel)];
  }
}

AndroidGovNistJavaxSipStackNioTcpMessageChannel *new_AndroidGovNistJavaxSipStackNioTcpMessageChannel_initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor, JavaNioChannelsSocketChannel *socketChannel) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTcpMessageChannel, initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_, nioTcpMessageProcessor, socketChannel)
}

AndroidGovNistJavaxSipStackNioTcpMessageChannel *create_AndroidGovNistJavaxSipStackNioTcpMessageChannel_initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor, JavaNioChannelsSocketChannel *socketChannel) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTcpMessageChannel, initWithAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_, nioTcpMessageProcessor, socketChannel)
}

void AndroidGovNistJavaxSipStackNioTcpMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(AndroidGovNistJavaxSipStackNioTcpMessageChannel *self, JavaNetInetAddress *inetAddress, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor) {
  AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(self, sipStack);
  JreStrongAssign(&self->nioParser_, nil);
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) debugWithNSString:JreStrcat("$$CI", @"NioTcpMessageChannel::NioTcpMessageChannel: ", [((JavaNetInetAddress *) nil_chk(inetAddress)) getHostAddress], ':', port)];
  @try {
    JreStrongAssign(&self->messageProcessor_, nioTcpMessageProcessor);
    JreStrongAssign(&self->socketChannel_, [((AndroidGovNistJavaxSipStackNIOHandler *) nil_chk(((AndroidGovNistJavaxSipStackNioTcpMessageProcessor *) nil_chk(nioTcpMessageProcessor))->nioHandler_)) createOrReuseSocketWithJavaNetInetAddress:inetAddress withInt:port]);
    JreStrongAssign(&self->peerAddress_, [((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk(self->socketChannel_)) socket])) getInetAddress]);
    self->peerPort_ = [((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk(self->socketChannel_)) socket])) getPort];
    JreStrongAssign(&self->mySock_, [((JavaNioChannelsSocketChannel *) nil_chk(self->socketChannel_)) socket]);
    JreStrongAssign(&self->peerProtocol_, [self getTransport]);
    JreStrongAssignAndConsume(&self->nioParser_, new_AndroidGovNistJavaxSipParserNioPipelineParser_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipParserSIPMessageListener_withInt_(sipStack, self, [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getMaxMessageSize]));
    AndroidGovNistJavaxSipStackNioTcpMessageChannel_putMessageChannelWithJavaNioChannelsSocketChannel_withAndroidGovNistJavaxSipStackNioTcpMessageChannel_(self->socketChannel_, self);
    self->lastActivityTimeStamp_ = JavaLangSystem_currentTimeMillis();
    JreStrongAssign(&self->key_, AndroidGovNistJavaxSipStackMessageChannel_getKeyWithJavaNetInetAddress_withInt_withNSString_(self->peerAddress_, self->peerPort_, [self getTransport]));
    JreStrongAssign(&self->myAddress_, [((JavaNetInetAddress *) nil_chk([nioTcpMessageProcessor getIpAddress])) getHostAddress]);
    self->myPort_ = [nioTcpMessageProcessor getPort];
  }
  @finally {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTcpMessageChannel_logger)) debugWithNSString:JreStrcat("$@$@", @"NioTcpMessageChannel::NioTcpMessageChannel: Done creating NioTcpMessageChannel ", self, @" socketChannel = ", self->socketChannel_)];
  }
}

AndroidGovNistJavaxSipStackNioTcpMessageChannel *new_AndroidGovNistJavaxSipStackNioTcpMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(JavaNetInetAddress *inetAddress, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTcpMessageChannel, initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_, inetAddress, port, sipStack, nioTcpMessageProcessor)
}

AndroidGovNistJavaxSipStackNioTcpMessageChannel *create_AndroidGovNistJavaxSipStackNioTcpMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(JavaNetInetAddress *inetAddress, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTcpMessageChannel, initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_, inetAddress, port, sipStack, nioTcpMessageProcessor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackNioTcpMessageChannel)
