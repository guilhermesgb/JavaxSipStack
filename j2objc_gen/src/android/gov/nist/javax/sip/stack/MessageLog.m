//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/MessageLog.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/stack/MessageLog.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"

@interface AndroidGovNistJavaxSipStackMessageLog () {
 @public
  NSString *message_;
  NSString *source_;
  NSString *destination_;
  jlong timeStamp_;
  jboolean isSender_;
  NSString *firstLine_;
  NSString *tid_;
  NSString *callId_;
  jlong timeStampHeaderValue_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackMessageLog, message_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackMessageLog, source_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackMessageLog, destination_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackMessageLog, firstLine_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackMessageLog, tid_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackMessageLog, callId_, NSString *)

@implementation AndroidGovNistJavaxSipStackMessageLog

- (jboolean)isEqual:(id)other {
  if (!([other isKindOfClass:[AndroidGovNistJavaxSipStackMessageLog class]])) {
    return false;
  }
  else {
    AndroidGovNistJavaxSipStackMessageLog *otherLog = (AndroidGovNistJavaxSipStackMessageLog *) cast_chk(other, [AndroidGovNistJavaxSipStackMessageLog class]);
    return [((NSString *) nil_chk(((AndroidGovNistJavaxSipStackMessageLog *) nil_chk(otherLog))->message_)) isEqual:message_] && otherLog->timeStamp_ == timeStamp_;
  }
}

- (instancetype)initWithNSString:(NSString *)message
                    withNSString:(NSString *)source
                    withNSString:(NSString *)destination
                    withNSString:(NSString *)timeStamp
                     withBoolean:(jboolean)isSender
                    withNSString:(NSString *)firstLine
                    withNSString:(NSString *)tid
                    withNSString:(NSString *)callId
                        withLong:(jlong)timeStampHeaderValue {
  AndroidGovNistJavaxSipStackMessageLog_initWithNSString_withNSString_withNSString_withNSString_withBoolean_withNSString_withNSString_withNSString_withLong_(self, message, source, destination, timeStamp, isSender, firstLine, tid, callId, timeStampHeaderValue);
  return self;
}

- (instancetype)initWithNSString:(NSString *)message
                    withNSString:(NSString *)source
                    withNSString:(NSString *)destination
                        withLong:(jlong)timeStamp
                     withBoolean:(jboolean)isSender
                    withNSString:(NSString *)firstLine
                    withNSString:(NSString *)tid
                    withNSString:(NSString *)callId
                        withLong:(jlong)timestampVal {
  AndroidGovNistJavaxSipStackMessageLog_initWithNSString_withNSString_withNSString_withLong_withBoolean_withNSString_withNSString_withNSString_withLong_(self, message, source, destination, timeStamp, isSender, firstLine, tid, callId, timestampVal);
  return self;
}

- (NSString *)description {
  NSString *log;
  log = JreStrcat("$$$$$JC$$Z$$$$$$$", @"<message\nfrom=\"", source_, @"\" \nto=\"", destination_, @"\" \ntime=\"", timeStamp_, '"', (self->timeStampHeaderValue_ != 0 ? JreStrcat("$JC", @"\ntimeStamp = \"", timeStampHeaderValue_, '"') : @""), @"\nisSender=\"", isSender_, @"\" \ntransactionId=\"", tid_, @"\" \ncallId=\"", callId_, @"\" \nfirstLine=\"", [((NSString *) nil_chk(firstLine_)) java_trim], @"\" \n>\n");
  JreStrAppend(&log, "$", @"<![CDATA[");
  JreStrAppend(&log, "$", message_);
  JreStrAppend(&log, "$", @"]]>\n");
  JreStrAppend(&log, "$", @"</message>\n");
  return log;
}

- (void)dealloc {
  RELEASE_(message_);
  RELEASE_(source_);
  RELEASE_(destination_);
  RELEASE_(firstLine_);
  RELEASE_(tid_);
  RELEASE_(callId_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(isEqual:);
  methods[1].selector = @selector(initWithNSString:withNSString:withNSString:withNSString:withBoolean:withNSString:withNSString:withNSString:withLong:);
  methods[2].selector = @selector(initWithNSString:withNSString:withNSString:withLong:withBoolean:withNSString:withNSString:withNSString:withLong:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "message_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "source_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "destination_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timeStamp_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isSender_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "firstLine_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tid_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "callId_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timeStampHeaderValue_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "equals", "LNSObject;", "LNSString;LNSString;LNSString;LNSString;ZLNSString;LNSString;LNSString;J", "LNSString;LNSString;LNSString;JZLNSString;LNSString;LNSString;J", "toString" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackMessageLog = { "MessageLog", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 4, 9, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackMessageLog;
}

@end

void AndroidGovNistJavaxSipStackMessageLog_initWithNSString_withNSString_withNSString_withNSString_withBoolean_withNSString_withNSString_withNSString_withLong_(AndroidGovNistJavaxSipStackMessageLog *self, NSString *message, NSString *source, NSString *destination, NSString *timeStamp, jboolean isSender, NSString *firstLine, NSString *tid, NSString *callId, jlong timeStampHeaderValue) {
  NSObject_init(self);
  if (message == nil || [message isEqual:@""]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"null msg");
  JreStrongAssign(&self->message_, message);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->destination_, destination);
  @try {
    jlong ts = JavaLangLong_parseLongWithNSString_(timeStamp);
    if (ts < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Bad time stamp ");
    self->timeStamp_ = ts;
  }
  @catch (JavaLangNumberFormatException *ex) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Bad number format ", timeStamp));
  }
  self->isSender_ = isSender;
  JreStrongAssign(&self->firstLine_, firstLine);
  JreStrongAssign(&self->tid_, tid);
  JreStrongAssign(&self->callId_, callId);
  self->timeStampHeaderValue_ = timeStampHeaderValue;
}

AndroidGovNistJavaxSipStackMessageLog *new_AndroidGovNistJavaxSipStackMessageLog_initWithNSString_withNSString_withNSString_withNSString_withBoolean_withNSString_withNSString_withNSString_withLong_(NSString *message, NSString *source, NSString *destination, NSString *timeStamp, jboolean isSender, NSString *firstLine, NSString *tid, NSString *callId, jlong timeStampHeaderValue) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackMessageLog, initWithNSString_withNSString_withNSString_withNSString_withBoolean_withNSString_withNSString_withNSString_withLong_, message, source, destination, timeStamp, isSender, firstLine, tid, callId, timeStampHeaderValue)
}

AndroidGovNistJavaxSipStackMessageLog *create_AndroidGovNistJavaxSipStackMessageLog_initWithNSString_withNSString_withNSString_withNSString_withBoolean_withNSString_withNSString_withNSString_withLong_(NSString *message, NSString *source, NSString *destination, NSString *timeStamp, jboolean isSender, NSString *firstLine, NSString *tid, NSString *callId, jlong timeStampHeaderValue) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackMessageLog, initWithNSString_withNSString_withNSString_withNSString_withBoolean_withNSString_withNSString_withNSString_withLong_, message, source, destination, timeStamp, isSender, firstLine, tid, callId, timeStampHeaderValue)
}

void AndroidGovNistJavaxSipStackMessageLog_initWithNSString_withNSString_withNSString_withLong_withBoolean_withNSString_withNSString_withNSString_withLong_(AndroidGovNistJavaxSipStackMessageLog *self, NSString *message, NSString *source, NSString *destination, jlong timeStamp, jboolean isSender, NSString *firstLine, NSString *tid, NSString *callId, jlong timestampVal) {
  NSObject_init(self);
  if (message == nil || [message isEqual:@""]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"null msg");
  JreStrongAssign(&self->message_, message);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->destination_, destination);
  if (timeStamp < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"negative ts");
  self->timeStamp_ = timeStamp;
  self->isSender_ = isSender;
  JreStrongAssign(&self->firstLine_, firstLine);
  JreStrongAssign(&self->tid_, tid);
  JreStrongAssign(&self->callId_, callId);
  self->timeStampHeaderValue_ = timestampVal;
}

AndroidGovNistJavaxSipStackMessageLog *new_AndroidGovNistJavaxSipStackMessageLog_initWithNSString_withNSString_withNSString_withLong_withBoolean_withNSString_withNSString_withNSString_withLong_(NSString *message, NSString *source, NSString *destination, jlong timeStamp, jboolean isSender, NSString *firstLine, NSString *tid, NSString *callId, jlong timestampVal) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackMessageLog, initWithNSString_withNSString_withNSString_withLong_withBoolean_withNSString_withNSString_withNSString_withLong_, message, source, destination, timeStamp, isSender, firstLine, tid, callId, timestampVal)
}

AndroidGovNistJavaxSipStackMessageLog *create_AndroidGovNistJavaxSipStackMessageLog_initWithNSString_withNSString_withNSString_withLong_withBoolean_withNSString_withNSString_withNSString_withLong_(NSString *message, NSString *source, NSString *destination, jlong timeStamp, jboolean isSender, NSString *firstLine, NSString *tid, NSString *callId, jlong timestampVal) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackMessageLog, initWithNSString_withNSString_withNSString_withLong_withBoolean_withNSString_withNSString_withNSString_withLong_, message, source, destination, timeStamp, isSender, firstLine, tid, callId, timestampVal)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackMessageLog)
