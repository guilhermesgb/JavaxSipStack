//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/IllegalTransactionStateException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidGovNistJavaxSipStackIllegalTransactionStateException")
#ifdef RESTRICT_AndroidGovNistJavaxSipStackIllegalTransactionStateException
#define INCLUDE_ALL_AndroidGovNistJavaxSipStackIllegalTransactionStateException 0
#else
#define INCLUDE_ALL_AndroidGovNistJavaxSipStackIllegalTransactionStateException 1
#endif
#undef RESTRICT_AndroidGovNistJavaxSipStackIllegalTransactionStateException

#if !defined (AndroidGovNistJavaxSipStackIllegalTransactionStateException_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackIllegalTransactionStateException || defined(INCLUDE_AndroidGovNistJavaxSipStackIllegalTransactionStateException))
#define AndroidGovNistJavaxSipStackIllegalTransactionStateException_

#define RESTRICT_AndroidJavaxSipSipException 1
#define INCLUDE_AndroidJavaxSipSipException 1
#include "android/javax/sip/SipException.h"

@class AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason;

@interface AndroidGovNistJavaxSipStackIllegalTransactionStateException : AndroidJavaxSipSipException {
 @public
  AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason_;
}

#pragma mark Public

- (instancetype)initWithAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason:(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *)reason;

- (instancetype)initWithNSString:(NSString *)message
withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason:(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *)reason;

- (instancetype)initWithNSString:(NSString *)message
                 withNSException:(NSException *)cause
withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason:(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *)reason;

- (AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *)getReason;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackIllegalTransactionStateException)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackIllegalTransactionStateException, reason_, AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *)

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(AndroidGovNistJavaxSipStackIllegalTransactionStateException *self, AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackIllegalTransactionStateException *new_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackIllegalTransactionStateException *create_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason);

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(AndroidGovNistJavaxSipStackIllegalTransactionStateException *self, NSString *message, AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackIllegalTransactionStateException *new_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(NSString *message, AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackIllegalTransactionStateException *create_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(NSString *message, AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason);

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withNSException_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(AndroidGovNistJavaxSipStackIllegalTransactionStateException *self, NSString *message, NSException *cause, AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackIllegalTransactionStateException *new_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withNSException_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(NSString *message, NSException *cause, AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackIllegalTransactionStateException *create_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withNSException_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(NSString *message, NSException *cause, AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *reason);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackIllegalTransactionStateException)

#endif

#if !defined (AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackIllegalTransactionStateException || defined(INCLUDE_AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason))
#define AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_Enum) {
  AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_Enum_RequestAlreadySent = 0,
  AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_Enum_MissingRequiredHeader = 1,
  AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_Enum_UnmatchingCSeq = 2,
  AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_Enum_ExpiresHeaderMandatory = 3,
  AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_Enum_ContactHeaderMandatory = 4,
  AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_Enum_GenericReason = 5,
};

@interface AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason : JavaLangEnum < NSCopying >

#pragma mark Public

+ (AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_values_[];

inline AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_get_RequestAlreadySent();
J2OBJC_ENUM_CONSTANT(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, RequestAlreadySent)

inline AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_get_MissingRequiredHeader();
J2OBJC_ENUM_CONSTANT(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, MissingRequiredHeader)

inline AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_get_UnmatchingCSeq();
J2OBJC_ENUM_CONSTANT(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, UnmatchingCSeq)

inline AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_get_ExpiresHeaderMandatory();
J2OBJC_ENUM_CONSTANT(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, ExpiresHeaderMandatory)

inline AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_get_ContactHeaderMandatory();
J2OBJC_ENUM_CONSTANT(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, ContactHeaderMandatory)

inline AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_get_GenericReason();
J2OBJC_ENUM_CONSTANT(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, GenericReason)

FOUNDATION_EXPORT IOSObjectArray *AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_values();

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason *AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidGovNistJavaxSipStackIllegalTransactionStateException")
