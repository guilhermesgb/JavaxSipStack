//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/NioTlsWebSocketMessageChannel.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/stack/ByteBufferFactory.h"
#include "android/gov/nist/javax/sip/stack/MessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/NIOHandler.h"
#include "android/gov/nist/javax/sip/stack/NioTcpMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/NioTcpMessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/NioTlsWebSocketMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/NioTlsWebSocketMessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/NioWebSocketMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/gov/nist/javax/sip/stack/SSLStateMachine.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/net/InetAddress.h"
#include "java/net/Socket.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/channels/SocketChannel.h"
#include "java/util/HashMap.h"
#include "java/util/Properties.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "javax/net/ssl/SSLContext.h"
#include "javax/net/ssl/SSLEngine.h"
#include "javax/net/ssl/SSLSession.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

static void (*AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_super$_sendTCPMessageWithByteArray_withJavaNetInetAddress_withInt_withBoolean_)(id, SEL, id, id, jint, jboolean);

static void (*AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_super$_sendNonWebSocketMessageWithByteArray_withBoolean_)(id, SEL, id, jboolean);

static void (*AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_super$_sendMessageWithByteArray_withJavaNetInetAddress_withInt_withBoolean_)(id, SEL, id, id, jint, jboolean);

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel () {
 @public
  jint appBufferMax_;
  jint netBufferMax_;
}

- (void)createBuffers;

- (void)checkSocketState;

@end

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel, logger, id<OrgSlf4jLogger>)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_createBuffers(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *self);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_checkSocketState(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *self);

inline jlong AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException_get_serialVersionUID();
#define AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException, serialVersionUID, jlong)

@interface AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1 : NSObject < AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback > {
 @public
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *this$0_;
  JavaNioByteBuffer *val$b1_;
  jboolean val$isClient_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *)outer$
                                                           withJavaNioByteBuffer:(JavaNioByteBuffer *)capture$0
                                                                     withBoolean:(jboolean)capture$1;

- (void)doSendWithByteArray:(IOSByteArray *)bytes;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNioByteBuffer_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1 *self, AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNioByteBuffer *capture$0, jboolean capture$1);

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1 *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNioByteBuffer_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNioByteBuffer *capture$0, jboolean capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1 *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNioByteBuffer_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNioByteBuffer *capture$0, jboolean capture$1);

@interface AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1 : NSObject < AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback > {
 @public
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1 *this$0_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1:(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1 *)outer$;

- (void)doSendWithByteArray:(IOSByteArray *)bytes;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1 *self, AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1 *outer$);

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1 *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1 *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1 *outer$);

@interface AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2 : NSObject < AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback > {
 @public
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *this$0_;
  jboolean val$isClient_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *)outer$
                                                                     withBoolean:(jboolean)capture$0;

- (void)doSendWithByteArray:(IOSByteArray *)bytes;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2 *self, AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, jboolean capture$0);

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2 *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, jboolean capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2 *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, jboolean capture$0);

@interface AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3 : NSObject < AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback > {
 @public
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *this$0_;
  JavaNetInetAddress *val$receiverAddress_;
  jint val$receiverPort_;
  JavaNioByteBuffer *val$b1_;
  jboolean val$retry_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *)outer$
                                                          withJavaNetInetAddress:(JavaNetInetAddress *)capture$0
                                                                         withInt:(jint)capture$1
                                                           withJavaNioByteBuffer:(JavaNioByteBuffer *)capture$2
                                                                     withBoolean:(jboolean)capture$3;

- (void)doSendWithByteArray:(IOSByteArray *)bytes;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withJavaNioByteBuffer_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3 *self, AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, JavaNioByteBuffer *capture$2, jboolean capture$3);

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3 *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withJavaNioByteBuffer_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, JavaNioByteBuffer *capture$2, jboolean capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3 *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withJavaNioByteBuffer_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, JavaNioByteBuffer *capture$2, jboolean capture$3);

@interface AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1 : NSObject < AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback > {
 @public
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3 *this$0_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3:(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3 *)outer$;

- (void)doSendWithByteArray:(IOSByteArray *)bytes;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1 *self, AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3 *outer$);

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1 *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1 *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3 *outer$);

@interface AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4 : NSObject < AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback > {
 @public
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *this$0_;
  JavaNetInetAddress *val$receiverAddress_;
  jint val$receiverPort_;
  jboolean val$retry_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *)outer$
                                                          withJavaNetInetAddress:(JavaNetInetAddress *)capture$0
                                                                         withInt:(jint)capture$1
                                                                     withBoolean:(jboolean)capture$2;

- (void)doSendWithByteArray:(IOSByteArray *)bytes;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4 *self, AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, jboolean capture$2);

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4 *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, jboolean capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4 *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, jboolean capture$2);

@interface AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5 : NSObject < AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback > {
 @public
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *this$0_;
  JavaNetInetAddress *val$receiverAddress_;
  jint val$receiverPort_;
  jboolean val$retry_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *)outer$
                                                          withJavaNetInetAddress:(JavaNetInetAddress *)capture$0
                                                                         withInt:(jint)capture$1
                                                                     withBoolean:(jboolean)capture$2;

- (void)doSendWithByteArray:(IOSByteArray *)bytes;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5 *self, AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, jboolean capture$2);

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5 *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, jboolean capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5 *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, jboolean capture$2);

@interface AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6 : NSObject < AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback > {
 @public
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *this$0_;
  jboolean val$isClient_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *)outer$
                                                                     withBoolean:(jboolean)capture$0;

- (void)doSendWithByteArray:(IOSByteArray *)bytes;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6 *self, AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, jboolean capture$0);

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6 *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, jboolean capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6 *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, jboolean capture$0);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel)

@implementation AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel

+ (AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *)createWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)stack
                                                        withAndroidGovNistJavaxSipStackNioTlsWebSocketMessageProcessor:(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageProcessor *)nioTcpMessageProcessor
                                                                                      withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel {
  return AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_createWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTlsWebSocketMessageProcessor_withJavaNioChannelsSocketChannel_(stack, nioTcpMessageProcessor, socketChannel);
}

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)stack
                 withAndroidGovNistJavaxSipStackNioTcpMessageProcessor:(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *)nioTcpMessageProcessor
                                      withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(self, stack, nioTcpMessageProcessor, socketChannel);
  return self;
}

- (void)init__WithBoolean:(jboolean)clientMode {
  JavaxNetSslSSLContext *ctx = clientMode ? ((AndroidGovNistJavaxSipStackNioTlsWebSocketMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsWebSocketMessageProcessor *) cast_chk(messageProcessor_, [AndroidGovNistJavaxSipStackNioTlsWebSocketMessageProcessor class]))))->sslClientCtx_ : ((AndroidGovNistJavaxSipStackNioTlsWebSocketMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsWebSocketMessageProcessor *) cast_chk(messageProcessor_, [AndroidGovNistJavaxSipStackNioTlsWebSocketMessageProcessor class]))))->sslServerCtx_;
  JreStrongAssignAndConsume(&sslStateMachine_, new_AndroidGovNistJavaxSipStackSSLStateMachine_initWithJavaxNetSslSSLEngine_withAndroidGovNistJavaxSipStackNioTlsChannelInterface_([ctx createSSLEngine], self));
  [((JavaxNetSslSSLEngine *) nil_chk(sslStateMachine_->sslEngine_)) setUseClientModeWithBoolean:clientMode];
  NSString *auth = [((JavaUtilProperties *) nil_chk([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(((AndroidGovNistJavaxSipSipStackImpl *) cast_chk(sipStack_, [AndroidGovNistJavaxSipSipStackImpl class])))) getConfigurationProperties])) getPropertyWithNSString:@"android.gov.nist.javax.sip.TLS_CLIENT_AUTH_TYPE"];
  [((JavaxNetSslSSLEngine *) nil_chk(((AndroidGovNistJavaxSipStackSSLStateMachine *) nil_chk(sslStateMachine_))->sslEngine_)) setNeedClientAuthWithBoolean:false];
  [((JavaxNetSslSSLEngine *) nil_chk(((AndroidGovNistJavaxSipStackSSLStateMachine *) nil_chk(sslStateMachine_))->sslEngine_)) setWantClientAuthWithBoolean:false];
  NSString *clientProtocols = [((JavaUtilProperties *) nil_chk([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(((AndroidGovNistJavaxSipSipStackImpl *) cast_chk(sipStack_, [AndroidGovNistJavaxSipSipStackImpl class])))) getConfigurationProperties])) getPropertyWithNSString:@"android.gov.nist.javax.sip.TLS_CLIENT_PROTOCOLS"];
  if (clientProtocols != nil) {
    [((JavaxNetSslSSLEngine *) nil_chk(((AndroidGovNistJavaxSipStackSSLStateMachine *) nil_chk(sslStateMachine_))->sslEngine_)) setEnabledProtocolsWithNSStringArray:[clientProtocols java_split:@","]];
  }
}

- (JavaNioByteBuffer *)prepareEncryptedDataBuffer {
  return [((AndroidGovNistJavaxSipStackByteBufferFactory *) nil_chk(AndroidGovNistJavaxSipStackByteBufferFactory_getInstance())) allocateDirectWithInt:netBufferMax_];
}

- (JavaNioByteBuffer *)prepareAppDataBuffer {
  return [((AndroidGovNistJavaxSipStackByteBufferFactory *) nil_chk(AndroidGovNistJavaxSipStackByteBufferFactory_getInstance())) allocateDirectWithInt:appBufferMax_];
}

- (JavaNioByteBuffer *)prepareAppDataBufferWithInt:(jint)capacity {
  return [((AndroidGovNistJavaxSipStackByteBufferFactory *) nil_chk(AndroidGovNistJavaxSipStackByteBufferFactory_getInstance())) allocateDirectWithInt:capacity];
}

- (void)sendMessageWithByteArray:(IOSByteArray *)msg
                     withBoolean:(jboolean)isClient {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_checkSocketState(self);
  if (client_ && readingHttp_ && [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(httpClientRequestSent_)) compareAndSetWithBoolean:false withBoolean:true]) {
    NSString *http = @"null null HTTP/1.1\x0d\nHost: null\x0d\nUpgrade: websocket\x0d\nConnection: Upgrade\x0d\nSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\x0d\nSec-WebSocket-Protocol: sip\x0d\nSec-WebSocket-Version: 13\x0d\n\x0d\n";
    JavaNioByteBuffer *b1 = JavaNioByteBuffer_wrapWithByteArray_(AndroidGovNistJavaxSipStackNioWebSocketMessageChannel_wrapBufferIntoWebSocketFrameWithByteArray_withBoolean_(msg, client_));
    JavaNioByteBuffer *b = JavaNioByteBuffer_wrapWithByteArray_([http java_getBytes]);
    @try {
      [((AndroidGovNistJavaxSipStackSSLStateMachine *) nil_chk(sslStateMachine_)) wrapWithJavaNioByteBuffer:b withJavaNioByteBuffer:[((AndroidGovNistJavaxSipStackByteBufferFactory *) nil_chk(AndroidGovNistJavaxSipStackByteBufferFactory_getInstance())) allocateDirectWithInt:netBufferMax_] withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback:create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNioByteBuffer_withBoolean_(self, b1, isClient)];
    }
    @catch (JavaIoIOException *e) {
      @throw e;
    }
  }
  else {
    JavaNioByteBuffer *b = JavaNioByteBuffer_wrapWithByteArray_(AndroidGovNistJavaxSipStackNioWebSocketMessageChannel_wrapBufferIntoWebSocketFrameWithByteArray_withBoolean_(msg, client_));
    @try {
      [((AndroidGovNistJavaxSipStackSSLStateMachine *) nil_chk(sslStateMachine_)) wrapWithJavaNioByteBuffer:b withJavaNioByteBuffer:[((AndroidGovNistJavaxSipStackByteBufferFactory *) nil_chk(AndroidGovNistJavaxSipStackByteBufferFactory_getInstance())) allocateDirectWithInt:netBufferMax_] withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback:create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_(self, isClient)];
    }
    @catch (JavaLangException *e) {
      @throw create_JavaIoIOException_initWithNSString_withNSException_(@"Can't send message", e);
    }
  }
}

- (void)sendEncryptedDataWithByteArray:(IOSByteArray *)msg {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_logger)) debugWithNSString:JreStrcat("$@$I$@", @"sendEncryptedData  this = ", self, @" peerPort = ", peerPort_, @" addr = ", peerAddress_)];
  lastActivityTimeStamp_ = JavaLangSystem_currentTimeMillis();
  AndroidGovNistJavaxSipStackNIOHandler *nioHandler = ((AndroidGovNistJavaxSipStackNioTcpMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackNioTcpMessageProcessor *) cast_chk(messageProcessor_, [AndroidGovNistJavaxSipStackNioTcpMessageProcessor class]))))->nioHandler_;
  if (self->socketChannel_ != nil && [self->socketChannel_ isConnected] && [((JavaNioChannelsSocketChannel *) nil_chk(self->socketChannel_)) isOpen]) {
    [((AndroidGovNistJavaxSipStackNIOHandler *) nil_chk(nioHandler)) putSocketWithNSString:AndroidGovNistJavaxSipStackNIOHandler_makeKeyWithJavaNetInetAddress_withInt_(self->peerAddress_, self->peerPort_) withJavaNioChannelsSocketChannel:self->socketChannel_];
  }
  [super sendNonWebSocketMessageWithByteArray:msg withBoolean:false];
}

- (void)sendMessageWithByteArray:(IOSByteArray *)message
          withJavaNetInetAddress:(JavaNetInetAddress *)receiverAddress
                         withInt:(jint)receiverPort
                     withBoolean:(jboolean)retry {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_checkSocketState(self);
  if (client_ && readingHttp_ && [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(httpClientRequestSent_)) compareAndSetWithBoolean:false withBoolean:true]) {
    NSString *http = @"null null HTTP/1.1\x0d\nHost: null\x0d\nUpgrade: websocket\x0d\nConnection: Upgrade\x0d\nSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\x0d\nSec-WebSocket-Protocol: sip\x0d\nSec-WebSocket-Version: 13\x0d\n\x0d\n";
    JavaNioByteBuffer *b1 = JavaNioByteBuffer_wrapWithByteArray_(AndroidGovNistJavaxSipStackNioWebSocketMessageChannel_wrapBufferIntoWebSocketFrameWithByteArray_withBoolean_(message, client_));
    JavaNioByteBuffer *b = JavaNioByteBuffer_wrapWithByteArray_([http java_getBytes]);
    @try {
      [((AndroidGovNistJavaxSipStackSSLStateMachine *) nil_chk(sslStateMachine_)) wrapWithJavaNioByteBuffer:b withJavaNioByteBuffer:[((AndroidGovNistJavaxSipStackByteBufferFactory *) nil_chk(AndroidGovNistJavaxSipStackByteBufferFactory_getInstance())) allocateDirectWithInt:netBufferMax_] withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback:create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withJavaNioByteBuffer_withBoolean_(self, receiverAddress, receiverPort, b1, retry)];
    }
    @catch (JavaIoIOException *e) {
      @throw e;
    }
  }
  else {
    JavaNioByteBuffer *b = JavaNioByteBuffer_wrapWithByteArray_(AndroidGovNistJavaxSipStackNioWebSocketMessageChannel_wrapBufferIntoWebSocketFrameWithByteArray_withBoolean_(message, client_));
    @try {
      [((AndroidGovNistJavaxSipStackSSLStateMachine *) nil_chk(sslStateMachine_)) wrapWithJavaNioByteBuffer:b withJavaNioByteBuffer:[((AndroidGovNistJavaxSipStackByteBufferFactory *) nil_chk(AndroidGovNistJavaxSipStackByteBufferFactory_getInstance())) allocateDirectWithInt:netBufferMax_] withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback:create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_(self, receiverAddress, receiverPort, retry)];
    }
    @catch (JavaIoIOException *e) {
      @throw e;
    }
  }
}

- (void)sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage
                                        withJavaNetInetAddress:(JavaNetInetAddress *)receiverAddress
                                                       withInt:(jint)receiverPort {
  IOSByteArray *msg = [((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) encodeAsBytesWithNSString:[self getTransport]];
  [self sendMessageWithByteArray:msg withJavaNetInetAddress:receiverAddress withInt:receiverPort withBoolean:self->client_];
}

- (void)sendHttpMessageWithByteArray:(IOSByteArray *)message
              withJavaNetInetAddress:(JavaNetInetAddress *)receiverAddress
                             withInt:(jint)receiverPort
                         withBoolean:(jboolean)retry {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_checkSocketState(self);
  JavaNioByteBuffer *b = JavaNioByteBuffer_wrapWithByteArray_(message);
  @try {
    [((AndroidGovNistJavaxSipStackSSLStateMachine *) nil_chk(sslStateMachine_)) wrapWithJavaNioByteBuffer:b withJavaNioByteBuffer:[((AndroidGovNistJavaxSipStackByteBufferFactory *) nil_chk(AndroidGovNistJavaxSipStackByteBufferFactory_getInstance())) allocateDirectWithInt:netBufferMax_] withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback:create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_(self, receiverAddress, receiverPort, retry)];
  }
  @catch (JavaIoIOException *e) {
    @throw e;
  }
}

- (void)createBuffers {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_createBuffers(self);
}

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)inetAddress
                                   withInt:(jint)port
withAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
withAndroidGovNistJavaxSipStackNioTcpMessageProcessor:(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *)nioTcpMessageProcessor {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(self, inetAddress, port, sipStack, nioTcpMessageProcessor);
  return self;
}

- (void)addBytesWithByteArray:(IOSByteArray *)bytes {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_logger)) debugWithNSString:JreStrcat("$I", @"Adding WSS bytes for decryption ", ((IOSByteArray *) nil_chk(bytes))->size_)];
  if (bytes->size_ <= 0) return;
  JavaNioByteBuffer *buffer = JavaNioByteBuffer_wrapWithByteArray_(bytes);
  [((AndroidGovNistJavaxSipStackSSLStateMachine *) nil_chk(sslStateMachine_)) unwrapWithJavaNioByteBuffer:buffer];
}

- (void)sendNonWebSocketMessageWithByteArray:(IOSByteArray *)msg
                                 withBoolean:(jboolean)isClient {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_logger)) debugWithNSString:JreStrcat("$Z$@", @"sendMessage isClient  = ", isClient, @" this = ", self)];
  lastActivityTimeStamp_ = JavaLangSystem_currentTimeMillis();
  AndroidGovNistJavaxSipStackNIOHandler *nioHandler = ((AndroidGovNistJavaxSipStackNioTcpMessageProcessor *) nil_chk(((AndroidGovNistJavaxSipStackNioTcpMessageProcessor *) cast_chk(messageProcessor_, [AndroidGovNistJavaxSipStackNioTcpMessageProcessor class]))))->nioHandler_;
  if (self->socketChannel_ != nil && [self->socketChannel_ isConnected] && [((JavaNioChannelsSocketChannel *) nil_chk(self->socketChannel_)) isOpen]) {
    [((AndroidGovNistJavaxSipStackNIOHandler *) nil_chk(nioHandler)) putSocketWithNSString:AndroidGovNistJavaxSipStackNIOHandler_makeKeyWithJavaNetInetAddress_withInt_(self->peerAddress_, self->peerPort_) withJavaNioChannelsSocketChannel:self->socketChannel_];
  }
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_checkSocketState(self);
  JavaNioByteBuffer *b = JavaNioByteBuffer_wrapWithByteArray_(msg);
  @try {
    [((AndroidGovNistJavaxSipStackSSLStateMachine *) nil_chk(sslStateMachine_)) wrapWithJavaNioByteBuffer:b withJavaNioByteBuffer:[((AndroidGovNistJavaxSipStackByteBufferFactory *) nil_chk(AndroidGovNistJavaxSipStackByteBufferFactory_getInstance())) allocateDirectWithInt:netBufferMax_] withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback:create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_(self, isClient)];
  }
  @catch (JavaIoIOException *e) {
    @throw e;
  }
}

- (NSString *)getTransport {
  return ((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(self->messageProcessor_))->transport_;
}

- (void)onNewSocketWithByteArray:(IOSByteArray *)message {
  [super onNewSocketWithByteArray:message];
  @try {
    NSString *last = nil;
    if (message != nil) {
      last = [NSString java_stringWithBytes:message charsetName:@"UTF-8"];
    }
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_logger)) debugWithNSString:JreStrcat("$@$$", @"New socket for ", self, @" last message = ", last)];
    [self init__WithBoolean:true];
    AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_createBuffers(self);
    [self sendMessageWithByteArray:message withBoolean:false];
  }
  @catch (JavaLangException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_logger)) errorWithNSString:@"Cant reinit" withNSException:e];
  }
}

- (void)checkSocketState {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_checkSocketState(self);
}

- (jboolean)isSecure {
  return true;
}

- (void)addPlaintextBytesWithByteArray:(IOSByteArray *)bytes {
  [super addBytesWithByteArray:bytes];
}

- (AndroidGovNistJavaxSipSipStackImpl *)getSIPStack {
  return (AndroidGovNistJavaxSipSipStackImpl *) cast_chk([super getSIPStack], [AndroidGovNistJavaxSipSipStackImpl class]);
}

- (void)dealloc {
  RELEASE_(sslStateMachine_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "LJavaNioByteBuffer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNioByteBuffer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNioByteBuffer;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 13, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 14, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 13, 2, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 16, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 17, 12, 18, -1, -1, -1 },
    { NULL, "V", 0x4, 19, 10, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 12, 18, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipSipStackImpl;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistJavaxSipStackNioTlsWebSocketMessageProcessor:withJavaNioChannelsSocketChannel:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistJavaxSipStackNioTcpMessageProcessor:withJavaNioChannelsSocketChannel:);
  methods[2].selector = @selector(init__WithBoolean:);
  methods[3].selector = @selector(prepareEncryptedDataBuffer);
  methods[4].selector = @selector(prepareAppDataBuffer);
  methods[5].selector = @selector(prepareAppDataBufferWithInt:);
  methods[6].selector = @selector(sendMessageWithByteArray:withBoolean:);
  methods[7].selector = @selector(sendEncryptedDataWithByteArray:);
  methods[8].selector = @selector(sendMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:);
  methods[9].selector = @selector(sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:withJavaNetInetAddress:withInt:);
  methods[10].selector = @selector(sendHttpMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:);
  methods[11].selector = @selector(createBuffers);
  methods[12].selector = @selector(initWithJavaNetInetAddress:withInt:withAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistJavaxSipStackNioTcpMessageProcessor:);
  methods[13].selector = @selector(addBytesWithByteArray:);
  methods[14].selector = @selector(sendNonWebSocketMessageWithByteArray:withBoolean:);
  methods[15].selector = @selector(getTransport);
  methods[16].selector = @selector(onNewSocketWithByteArray:);
  methods[17].selector = @selector(checkSocketState);
  methods[18].selector = @selector(isSecure);
  methods[19].selector = @selector(addPlaintextBytesWithByteArray:);
  methods[20].selector = @selector(getSIPStack);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 22, -1, -1 },
    { "sslStateMachine_", "LAndroidGovNistJavaxSipStackSSLStateMachine;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "appBufferMax_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "netBufferMax_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "create", "LAndroidGovNistJavaxSipStackSIPTransactionStack;LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageProcessor;LJavaNioChannelsSocketChannel;", "LJavaIoIOException;", "LAndroidGovNistJavaxSipStackSIPTransactionStack;LAndroidGovNistJavaxSipStackNioTcpMessageProcessor;LJavaNioChannelsSocketChannel;", "init", "Z", "LJavaLangException;LJavaSecurityCertCertificateException;LJavaIoFileNotFoundException;LJavaIoIOException;", "prepareAppDataBuffer", "I", "sendMessage", "[BZ", "sendEncryptedData", "[B", "[BLJavaNetInetAddress;IZ", "LAndroidGovNistJavaxSipMessageSIPMessage;LJavaNetInetAddress;I", "sendHttpMessage", "LJavaNetInetAddress;ILAndroidGovNistJavaxSipStackSIPTransactionStack;LAndroidGovNistJavaxSipStackNioTcpMessageProcessor;", "addBytes", "LJavaLangException;", "sendNonWebSocketMessage", "onNewSocket", "addPlaintextBytes", &AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_logger, "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel = { "NioTlsWebSocketMessageChannel", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 21, 4, -1, 23, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel class]) {
    AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_super$_sendMessageWithByteArray_withJavaNetInetAddress_withInt_withBoolean_ = (void (*)(id, SEL, id, id, jint, jboolean))[AndroidGovNistJavaxSipStackNioWebSocketMessageChannel instanceMethodForSelector:@selector(sendMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:)];
    AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_super$_sendNonWebSocketMessageWithByteArray_withBoolean_ = (void (*)(id, SEL, id, jboolean))[AndroidGovNistJavaxSipStackNioWebSocketMessageChannel instanceMethodForSelector:@selector(sendNonWebSocketMessageWithByteArray:withBoolean:)];
    AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_super$_sendTCPMessageWithByteArray_withJavaNetInetAddress_withInt_withBoolean_ = (void (*)(id, SEL, id, id, jint, jboolean))[AndroidGovNistJavaxSipStackNioWebSocketMessageChannel instanceMethodForSelector:@selector(sendTCPMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:)];
    JreStrongAssign(&AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel)
  }
}

@end

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_createWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTlsWebSocketMessageProcessor_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackSIPTransactionStack *stack, AndroidGovNistJavaxSipStackNioTlsWebSocketMessageProcessor *nioTcpMessageProcessor, JavaNioChannelsSocketChannel *socketChannel) {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_initialize();
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *retval = (AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *) cast_chk([((JavaUtilHashMap *) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageChannel, channelMap))) getWithId:socketChannel], [AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel class]);
  if (retval == nil) {
    retval = create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(stack, nioTcpMessageProcessor, socketChannel);
    [((JavaUtilHashMap *) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackNioTcpMessageChannel, channelMap))) putWithId:socketChannel withId:retval];
  }
  return retval;
}

void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *self, AndroidGovNistJavaxSipStackSIPTransactionStack *stack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor, JavaNioChannelsSocketChannel *socketChannel) {
  AndroidGovNistJavaxSipStackNioWebSocketMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(self, stack, nioTcpMessageProcessor, socketChannel);
  JreStrongAssign(&self->messageProcessor_, nioTcpMessageProcessor);
  JreStrongAssign(&self->myClientInputStream_, [((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk(socketChannel)) socket])) getInputStream]);
  @try {
    [self init__WithBoolean:false];
    AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_createBuffers(self);
  }
  @catch (JavaLangException *e) {
    @throw create_JavaIoIOException_initWithNSString_withNSException_(@"Can't do TLS init", e);
  }
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackSIPTransactionStack *stack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor, JavaNioChannelsSocketChannel *socketChannel) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_, stack, nioTcpMessageProcessor, socketChannel)
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackSIPTransactionStack *stack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor, JavaNioChannelsSocketChannel *socketChannel) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_, stack, nioTcpMessageProcessor, socketChannel)
}

void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_createBuffers(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *self) {
  id<JavaxNetSslSSLSession> session = [((JavaxNetSslSSLEngine *) nil_chk(((AndroidGovNistJavaxSipStackSSLStateMachine *) nil_chk(self->sslStateMachine_))->sslEngine_)) getSession];
  self->appBufferMax_ = [((id<JavaxNetSslSSLSession>) nil_chk(session)) getApplicationBufferSize];
  self->netBufferMax_ = [session getPacketBufferSize];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_logger)) debugWithNSString:JreStrcat("$I$I", @"appBufferMax=", self->appBufferMax_, @" netBufferMax=", self->netBufferMax_)];
}

void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *self, JavaNetInetAddress *inetAddress, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor) {
  AndroidGovNistJavaxSipStackNioWebSocketMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(self, inetAddress, port, sipStack, nioTcpMessageProcessor);
  @try {
    [self init__WithBoolean:true];
    AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_createBuffers(self);
  }
  @catch (JavaLangException *e) {
    @throw create_JavaIoIOException_initWithNSString_withNSException_(@"Can't init the TLS channel", e);
  }
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(JavaNetInetAddress *inetAddress, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel, initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_, inetAddress, port, sipStack, nioTcpMessageProcessor)
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(JavaNetInetAddress *inetAddress, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel, initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_, inetAddress, port, sipStack, nioTcpMessageProcessor)
}

void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_checkSocketState(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *self) {
  if (self->socketChannel_ != nil && (![self->socketChannel_ isConnected] || ![((JavaNioChannelsSocketChannel *) nil_chk(self->socketChannel_)) isOpen])) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_logger)) debugWithNSString:JreStrcat("$@", @"Need to reset SSL engine for socket ", self->socketChannel_)];
    @try {
      [self init__WithBoolean:[((JavaxNetSslSSLEngine *) nil_chk(((AndroidGovNistJavaxSipStackSSLStateMachine *) nil_chk(self->sslStateMachine_))->sslEngine_)) getUseClientMode]];
    }
    @catch (JavaLangException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_logger)) errorWithNSString:@"Cannot reset SSL engine" withNSException:ex];
      @throw create_JavaIoIOException_initWithNSException_(ex);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel)

@implementation AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException = { "SSLReconnectedException", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x9, 1, 1, 0, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException;
}

@end

void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException_init(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException *self) {
  JavaIoIOException_init(self);
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException, init)
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_SSLReconnectedException)

@implementation AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *)outer$
                                                           withJavaNioByteBuffer:(JavaNioByteBuffer *)capture$0
                                                                     withBoolean:(jboolean)capture$1 {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNioByteBuffer_withBoolean_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)doSendWithByteArray:(IOSByteArray *)bytes {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_super$_sendTCPMessageWithByteArray_withJavaNetInetAddress_withInt_withBoolean_(this$0_, @selector(sendTCPMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:), bytes, this$0_->peerAddress_, this$0_->peerPort_, false);
  JavaLangBoolean *sent = JavaLangBoolean_valueOfWithBoolean_(false);
  @try {
    [((AndroidGovNistJavaxSipStackSSLStateMachine *) nil_chk(this$0_->sslStateMachine_)) wrapWithJavaNioByteBuffer:val$b1_ withJavaNioByteBuffer:[((AndroidGovNistJavaxSipStackByteBufferFactory *) nil_chk(AndroidGovNistJavaxSipStackByteBufferFactory_getInstance())) allocateDirectWithInt:this$0_->netBufferMax_] withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback:create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_(self)];
  }
  @catch (JavaLangException *e) {
    @throw create_JavaIoIOException_initWithNSString_withNSException_(@"Can't send message", e);
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$b1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:withJavaNioByteBuffer:withBoolean:);
  methods[1].selector = @selector(doSendWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$b1_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$isClient_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "doSend", "[B", "LJavaIoIOException;", "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel;", "sendMessageWithByteArray:withBoolean:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8018, 2, 3, 3, -1, 4, -1, -1 };
  return &_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1;
}

@end

void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNioByteBuffer_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1 *self, AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNioByteBuffer *capture$0, jboolean capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$b1_, capture$0);
  self->val$isClient_ = capture$1;
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1 *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNioByteBuffer_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNioByteBuffer *capture$0, jboolean capture$1) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1, initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNioByteBuffer_withBoolean_, outer$, capture$0, capture$1)
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1 *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNioByteBuffer_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNioByteBuffer *capture$0, jboolean capture$1) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1, initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNioByteBuffer_withBoolean_, outer$, capture$0, capture$1)
}

@implementation AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1:(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1 *)outer$ {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_(self, outer$);
  return self;
}

- (void)doSendWithByteArray:(IOSByteArray *)bytes {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_super$_sendNonWebSocketMessageWithByteArray_withBoolean_(this$0_->this$0_, @selector(sendNonWebSocketMessageWithByteArray:withBoolean:), bytes, this$0_->val$isClient_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1:);
  methods[1].selector = @selector(doSendWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "doSend", "[B", "LJavaIoIOException;", "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1;", "doSendWithByteArray:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8018, 2, 1, 3, -1, 4, -1, -1 };
  return &_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1;
}

@end

void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1 *self, AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1 *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1 *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1, initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_, outer$)
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1 *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1 *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_1, initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_1_, outer$)
}

@implementation AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *)outer$
                                                                     withBoolean:(jboolean)capture$0 {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_(self, outer$, capture$0);
  return self;
}

- (void)doSendWithByteArray:(IOSByteArray *)bytes {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_super$_sendNonWebSocketMessageWithByteArray_withBoolean_(this$0_, @selector(sendNonWebSocketMessageWithByteArray:withBoolean:), bytes, val$isClient_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:withBoolean:);
  methods[1].selector = @selector(doSendWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$isClient_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "doSend", "[B", "LJavaIoIOException;", "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel;", "sendMessageWithByteArray:withBoolean:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8018, 2, 2, 3, -1, 4, -1, -1 };
  return &_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2;
}

@end

void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2 *self, AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, jboolean capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$isClient_ = capture$0;
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2 *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, jboolean capture$0) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2, initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_, outer$, capture$0)
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2 *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, jboolean capture$0) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_2, initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_, outer$, capture$0)
}

@implementation AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *)outer$
                                                          withJavaNetInetAddress:(JavaNetInetAddress *)capture$0
                                                                         withInt:(jint)capture$1
                                                           withJavaNioByteBuffer:(JavaNioByteBuffer *)capture$2
                                                                     withBoolean:(jboolean)capture$3 {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withJavaNioByteBuffer_withBoolean_(self, outer$, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)doSendWithByteArray:(IOSByteArray *)bytes {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_super$_sendTCPMessageWithByteArray_withJavaNetInetAddress_withInt_withBoolean_(this$0_, @selector(sendTCPMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:), bytes, val$receiverAddress_, val$receiverPort_, false);
  @try {
    [((AndroidGovNistJavaxSipStackSSLStateMachine *) nil_chk(this$0_->sslStateMachine_)) wrapWithJavaNioByteBuffer:val$b1_ withJavaNioByteBuffer:[((AndroidGovNistJavaxSipStackByteBufferFactory *) nil_chk(AndroidGovNistJavaxSipStackByteBufferFactory_getInstance())) allocateDirectWithInt:this$0_->netBufferMax_] withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback:create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_(self)];
  }
  @catch (JavaIoIOException *e) {
    @throw e;
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$receiverAddress_);
  RELEASE_(val$b1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:withJavaNetInetAddress:withInt:withJavaNioByteBuffer:withBoolean:);
  methods[1].selector = @selector(doSendWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$receiverAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$receiverPort_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$b1_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$retry_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "doSend", "[B", "LJavaIoIOException;", "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel;", "sendMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8018, 2, 5, 3, -1, 4, -1, -1 };
  return &_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3;
}

@end

void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withJavaNioByteBuffer_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3 *self, AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, JavaNioByteBuffer *capture$2, jboolean capture$3) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$receiverAddress_, capture$0);
  self->val$receiverPort_ = capture$1;
  JreStrongAssign(&self->val$b1_, capture$2);
  self->val$retry_ = capture$3;
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3 *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withJavaNioByteBuffer_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, JavaNioByteBuffer *capture$2, jboolean capture$3) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3, initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withJavaNioByteBuffer_withBoolean_, outer$, capture$0, capture$1, capture$2, capture$3)
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3 *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withJavaNioByteBuffer_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, JavaNioByteBuffer *capture$2, jboolean capture$3) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3, initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withJavaNioByteBuffer_withBoolean_, outer$, capture$0, capture$1, capture$2, capture$3)
}

@implementation AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3:(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3 *)outer$ {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_(self, outer$);
  return self;
}

- (void)doSendWithByteArray:(IOSByteArray *)bytes {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_super$_sendTCPMessageWithByteArray_withJavaNetInetAddress_withInt_withBoolean_(this$0_->this$0_, @selector(sendTCPMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:), bytes, this$0_->val$receiverAddress_, this$0_->val$receiverPort_, this$0_->val$retry_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3:);
  methods[1].selector = @selector(doSendWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "doSend", "[B", "LJavaIoIOException;", "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3;", "doSendWithByteArray:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8018, 2, 1, 3, -1, 4, -1, -1 };
  return &_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1;
}

@end

void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1 *self, AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1 *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3 *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1, initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_, outer$)
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1 *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3 *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_1, initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_3_, outer$)
}

@implementation AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *)outer$
                                                          withJavaNetInetAddress:(JavaNetInetAddress *)capture$0
                                                                         withInt:(jint)capture$1
                                                                     withBoolean:(jboolean)capture$2 {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}

- (void)doSendWithByteArray:(IOSByteArray *)bytes {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_super$_sendTCPMessageWithByteArray_withJavaNetInetAddress_withInt_withBoolean_(this$0_, @selector(sendTCPMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:), bytes, val$receiverAddress_, val$receiverPort_, val$retry_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$receiverAddress_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:withJavaNetInetAddress:withInt:withBoolean:);
  methods[1].selector = @selector(doSendWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$receiverAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$receiverPort_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$retry_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "doSend", "[B", "LJavaIoIOException;", "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel;", "sendMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8018, 2, 4, 3, -1, 4, -1, -1 };
  return &_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4;
}

@end

void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4 *self, AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, jboolean capture$2) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$receiverAddress_, capture$0);
  self->val$receiverPort_ = capture$1;
  self->val$retry_ = capture$2;
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4 *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, jboolean capture$2) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4, initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_, outer$, capture$0, capture$1, capture$2)
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4 *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, jboolean capture$2) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_4, initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_, outer$, capture$0, capture$1, capture$2)
}

@implementation AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *)outer$
                                                          withJavaNetInetAddress:(JavaNetInetAddress *)capture$0
                                                                         withInt:(jint)capture$1
                                                                     withBoolean:(jboolean)capture$2 {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}

- (void)doSendWithByteArray:(IOSByteArray *)bytes {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_super$_sendMessageWithByteArray_withJavaNetInetAddress_withInt_withBoolean_(this$0_, @selector(sendMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:), bytes, val$receiverAddress_, val$receiverPort_, val$retry_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$receiverAddress_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:withJavaNetInetAddress:withInt:withBoolean:);
  methods[1].selector = @selector(doSendWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$receiverAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$receiverPort_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$retry_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "doSend", "[B", "LJavaIoIOException;", "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel;", "sendHttpMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8018, 2, 4, 3, -1, 4, -1, -1 };
  return &_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5;
}

@end

void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5 *self, AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, jboolean capture$2) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$receiverAddress_, capture$0);
  self->val$receiverPort_ = capture$1;
  self->val$retry_ = capture$2;
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5 *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, jboolean capture$2) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5, initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_, outer$, capture$0, capture$1, capture$2)
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5 *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, JavaNetInetAddress *capture$0, jint capture$1, jboolean capture$2) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_5, initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withJavaNetInetAddress_withInt_withBoolean_, outer$, capture$0, capture$1, capture$2)
}

@implementation AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6

- (instancetype)initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *)outer$
                                                                     withBoolean:(jboolean)capture$0 {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_(self, outer$, capture$0);
  return self;
}

- (void)doSendWithByteArray:(IOSByteArray *)bytes {
  AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_super$_sendTCPMessageWithByteArray_withJavaNetInetAddress_withInt_withBoolean_(this$0_, @selector(sendTCPMessageWithByteArray:withJavaNetInetAddress:withInt:withBoolean:), bytes, this$0_->peerAddress_, this$0_->peerPort_, val$isClient_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel:withBoolean:);
  methods[1].selector = @selector(doSendWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$isClient_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "doSend", "[B", "LJavaIoIOException;", "LAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel;", "sendNonWebSocketMessageWithByteArray:withBoolean:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8018, 2, 2, 3, -1, 4, -1, -1 };
  return &_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6;
}

@end

void AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6 *self, AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, jboolean capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$isClient_ = capture$0;
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6 *new_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, jboolean capture$0) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6, initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_, outer$, capture$0)
}

AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6 *create_AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6_initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel *outer$, jboolean capture$0) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_6, initWithAndroidGovNistJavaxSipStackNioTlsWebSocketMessageChannel_withBoolean_, outer$, capture$0)
}
