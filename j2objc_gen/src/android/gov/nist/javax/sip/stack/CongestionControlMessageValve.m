//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/CongestionControlMessageValve.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/message/SIPRequest.h"
#include "android/gov/nist/javax/sip/message/SIPResponse.h"
#include "android/gov/nist/javax/sip/stack/CongestionControlMessageValve.h"
#include "android/gov/nist/javax/sip/stack/MessageChannel.h"
#include "android/javax/sip/SipStack.h"
#include "android/javax/sip/message/Request.h"
#include "android/javax/sip/message/Response.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/util/Properties.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackCongestionControlMessageValve_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackCongestionControlMessageValve_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackCongestionControlMessageValve_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackCongestionControlMessageValve, logger, id<OrgSlf4jLogger>)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackCongestionControlMessageValve)

@implementation AndroidGovNistJavaxSipStackCongestionControlMessageValve

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackCongestionControlMessageValve_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)processRequestWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)request
                        withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)messageChannel {
  NSString *requestMethod = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(request)) getMethod];
  jboolean undropableMethod = [((NSString *) nil_chk(requestMethod)) isEqual:AndroidJavaxSipMessageRequest_BYE] || [requestMethod isEqual:AndroidJavaxSipMessageRequest_ACK] || [requestMethod isEqual:AndroidJavaxSipMessageRequest_PRACK] || [requestMethod isEqual:AndroidJavaxSipMessageRequest_CANCEL];
  if (!undropableMethod) {
    if (serverTransactionTableHighwaterMark_ <= [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getServerTransactionTableSize]) {
      if ([request getToTag] != nil) {
        return true;
      }
      if (dropResponseStatus_ > 0) {
        AndroidGovNistJavaxSipMessageSIPResponse *response = [request createResponseWithInt:dropResponseStatus_];
        @try {
          [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(messageChannel)) sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:response];
        }
        @catch (JavaIoIOException *e) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackCongestionControlMessageValve_logger)) errorWithNSString:JreStrcat("$@", @"Failed to send congestion control error response", response) withNSException:e];
        }
      }
      return false;
    }
  }
  return true;
}

- (jboolean)processResponseWithAndroidJavaxSipMessageResponse:(id<AndroidJavaxSipMessageResponse>)response
                withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)messageChannel {
  return true;
}

- (void)destroy {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackCongestionControlMessageValve_logger)) infoWithNSString:JreStrcat("$@", @"Destorying the congestion control valve ", self)];
}

- (void)init__WithAndroidJavaxSipSipStack:(id<AndroidJavaxSipSipStack>)stack {
  JreStrongAssign(&sipStack_, (AndroidGovNistJavaxSipSipStackImpl *) cast_chk(stack, [AndroidGovNistJavaxSipSipStackImpl class]));
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackCongestionControlMessageValve_logger)) infoWithNSString:@"Initializing congestion control valve"];
  NSString *serverTransactionsString = [((JavaUtilProperties *) nil_chk([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getConfigurationProperties])) getPropertyWithNSString:@"gov.nist.javax.sip.MAX_SERVER_TRANSACTIONS" withNSString:@"10000"];
  serverTransactionTableHighwaterMark_ = [create_JavaLangInteger_initWithNSString_(serverTransactionsString) intValue];
  NSString *dropResponseStatusString = [((JavaUtilProperties *) nil_chk([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) getConfigurationProperties])) getPropertyWithNSString:@"DROP_RESPONSE_STATUS" withNSString:@"503"];
  dropResponseStatus_ = [create_JavaLangInteger_initWithNSString_(dropResponseStatusString) intValue];
}

- (void)dealloc {
  RELEASE_(sipStack_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(processRequestWithAndroidGovNistJavaxSipMessageSIPRequest:withAndroidGovNistJavaxSipStackMessageChannel:);
  methods[2].selector = @selector(processResponseWithAndroidJavaxSipMessageResponse:withAndroidGovNistJavaxSipStackMessageChannel:);
  methods[3].selector = @selector(destroy);
  methods[4].selector = @selector(init__WithAndroidJavaxSipSipStack:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 6, -1, -1 },
    { "sipStack_", "LAndroidGovNistJavaxSipSipStackImpl;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serverTransactionTableHighwaterMark_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "dropResponseStatus_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "processRequest", "LAndroidGovNistJavaxSipMessageSIPRequest;LAndroidGovNistJavaxSipStackMessageChannel;", "processResponse", "LAndroidJavaxSipMessageResponse;LAndroidGovNistJavaxSipStackMessageChannel;", "init", "LAndroidJavaxSipSipStack;", &AndroidGovNistJavaxSipStackCongestionControlMessageValve_logger };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackCongestionControlMessageValve = { "CongestionControlMessageValve", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 5, 4, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackCongestionControlMessageValve;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackCongestionControlMessageValve class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackCongestionControlMessageValve_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackCongestionControlMessageValve_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackCongestionControlMessageValve)
  }
}

@end

void AndroidGovNistJavaxSipStackCongestionControlMessageValve_init(AndroidGovNistJavaxSipStackCongestionControlMessageValve *self) {
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackCongestionControlMessageValve *new_AndroidGovNistJavaxSipStackCongestionControlMessageValve_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackCongestionControlMessageValve, init)
}

AndroidGovNistJavaxSipStackCongestionControlMessageValve *create_AndroidGovNistJavaxSipStackCongestionControlMessageValve_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackCongestionControlMessageValve, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackCongestionControlMessageValve)
