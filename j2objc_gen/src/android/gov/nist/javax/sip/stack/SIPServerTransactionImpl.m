//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/SIPServerTransactionImpl.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/core/net/AddressResolver.h"
#include "android/gov/nist/javax/sip/ReleaseReferencesStrategy.h"
#include "android/gov/nist/javax/sip/SIPConstants.h"
#include "android/gov/nist/javax/sip/SipProviderImpl.h"
#include "android/gov/nist/javax/sip/Utils.h"
#include "android/gov/nist/javax/sip/header/ContentType.h"
#include "android/gov/nist/javax/sip/header/Expires.h"
#include "android/gov/nist/javax/sip/header/ParameterNames.h"
#include "android/gov/nist/javax/sip/header/RSeq.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/message/SIPRequest.h"
#include "android/gov/nist/javax/sip/message/SIPResponse.h"
#include "android/gov/nist/javax/sip/parser/MessageParser.h"
#include "android/gov/nist/javax/sip/parser/MessageParserFactory.h"
#include "android/gov/nist/javax/sip/stack/HopImpl.h"
#include "android/gov/nist/javax/sip/stack/IllegalTransactionStateException.h"
#include "android/gov/nist/javax/sip/stack/MessageChannel.h"
#include "android/gov/nist/javax/sip/stack/MessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/SIPClientTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPDialog.h"
#include "android/gov/nist/javax/sip/stack/SIPServerTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPServerTransactionImpl.h"
#include "android/gov/nist/javax/sip/stack/SIPStackTimerTask.h"
#include "android/gov/nist/javax/sip/stack/SIPTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionErrorEvent.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionImpl.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/gov/nist/javax/sip/stack/ServerRequestInterface.h"
#include "android/gov/nist/javax/sip/stack/timers/SipTimer.h"
#include "android/javax/sip/Dialog.h"
#include "android/javax/sip/DialogState.h"
#include "android/javax/sip/DialogTerminatedEvent.h"
#include "android/javax/sip/ListeningPoint.h"
#include "android/javax/sip/SipException.h"
#include "android/javax/sip/Timeout.h"
#include "android/javax/sip/TimeoutEvent.h"
#include "android/javax/sip/TransactionState.h"
#include "android/javax/sip/address/Hop.h"
#include "android/javax/sip/address/URI.h"
#include "android/javax/sip/header/CSeqHeader.h"
#include "android/javax/sip/header/CallIdHeader.h"
#include "android/javax/sip/header/ContactHeader.h"
#include "android/javax/sip/header/ContentTypeHeader.h"
#include "android/javax/sip/header/ExpiresHeader.h"
#include "android/javax/sip/header/FromHeader.h"
#include "android/javax/sip/header/Header.h"
#include "android/javax/sip/header/RSeqHeader.h"
#include "android/javax/sip/header/ToHeader.h"
#include "android/javax/sip/message/Request.h"
#include "android/javax/sip/message/Response.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/net/InetAddress.h"
#include "java/text/ParseException.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/Semaphore.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface AndroidGovNistJavaxSipStackSIPServerTransactionImpl () {
 @public
  jint rseqNumber_;
  id<AndroidGovNistJavaxSipStackServerRequestInterface> requestOf_;
  AndroidGovNistJavaxSipStackSIPDialog *dialog_;
  IOSByteArray *pendingReliableResponseAsBytes_;
  NSString *pendingReliableResponseMethod_;
  jlong pendingReliableCSeqNumber_;
  jlong pendingReliableRSeqNumber_;
  AndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask *provisionalResponseTask_;
  jboolean retransmissionAlertEnabled_;
  AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask *retransmissionAlertTimerTask_;
  id<AndroidGovNistJavaxSipStackSIPClientTransaction> pendingSubscribeTransaction_;
  id<AndroidGovNistJavaxSipStackSIPServerTransaction> inviteTransaction_SIPServerTransactionImpl_;
  JavaUtilConcurrentSemaphore *provisionalResponseSem_;
  JavaUtilConcurrentSemaphore *terminationSemaphore_;
  IOSByteArray *lastResponseAsBytes_;
  NSString *lastResponseHost_;
  jint lastResponsePort_;
  NSString *lastResponseTransport_;
  jint lastResponseStatusCode_;
  AndroidGovNistCoreHostPort *originalRequestSentBy_;
  NSString *originalRequestFromTag_;
}

- (jboolean)checkStateTimersWithInt:(jint)statusCode;

- (void)fireReliableResponseRetransmissionTimer;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, requestOf_, id<AndroidGovNistJavaxSipStackServerRequestInterface>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, dialog_, AndroidGovNistJavaxSipStackSIPDialog *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, pendingReliableResponseAsBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, pendingReliableResponseMethod_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, provisionalResponseTask_, AndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, retransmissionAlertTimerTask_, AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, pendingSubscribeTransaction_, id<AndroidGovNistJavaxSipStackSIPClientTransaction>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, inviteTransaction_SIPServerTransactionImpl_, id<AndroidGovNistJavaxSipStackSIPServerTransaction>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, provisionalResponseSem_, JavaUtilConcurrentSemaphore *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, terminationSemaphore_, JavaUtilConcurrentSemaphore *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, lastResponseAsBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, lastResponseHost_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, lastResponseTransport_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, originalRequestSentBy_, AndroidGovNistCoreHostPort *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, originalRequestFromTag_, NSString *)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSIPServerTransactionImpl_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSIPServerTransactionImpl_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, logger, id<OrgSlf4jLogger>)

inline jboolean AndroidGovNistJavaxSipStackSIPServerTransactionImpl_get_interlockProvisionalResponses();
inline jboolean AndroidGovNistJavaxSipStackSIPServerTransactionImpl_set_interlockProvisionalResponses(jboolean value);
inline jboolean *AndroidGovNistJavaxSipStackSIPServerTransactionImpl_getRef_interlockProvisionalResponses();
static jboolean AndroidGovNistJavaxSipStackSIPServerTransactionImpl_interlockProvisionalResponses = true;
J2OBJC_STATIC_FIELD_PRIMITIVE(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, interlockProvisionalResponses, jboolean)

__attribute__((unused)) static jboolean AndroidGovNistJavaxSipStackSIPServerTransactionImpl_checkStateTimersWithInt_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *self, jint statusCode);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPServerTransactionImpl_fireReliableResponseRetransmissionTimer(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *self);

@interface AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask () {
 @public
  AndroidGovNistJavaxSipStackSIPServerTransactionImpl *this$0_;
}

@end

@interface AndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask () {
 @public
  AndroidGovNistJavaxSipStackSIPServerTransactionImpl *this$0_;
}

@end

@interface AndroidGovNistJavaxSipStackSIPServerTransactionImpl_SendTrying () {
 @public
  AndroidGovNistJavaxSipStackSIPServerTransactionImpl *this$0_;
}

@end

@interface AndroidGovNistJavaxSipStackSIPServerTransactionImpl_TransactionTimer () {
 @public
  AndroidGovNistJavaxSipStackSIPServerTransactionImpl *this$0_;
}

@end

@interface AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1 : AndroidGovNistJavaxSipStackSIPStackTimerTask {
 @public
  AndroidGovNistJavaxSipStackSIPServerTransactionImpl *this$0_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl:(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *)outer$;

- (void)runTask;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1 *self, AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$);

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1 *new_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1 *create_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackSIPServerTransactionImpl)

@implementation AndroidGovNistJavaxSipStackSIPServerTransactionImpl

- (void)sendResponseWithAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)transactionResponse {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$$", @"sipServerTransaction::sendResponse ", [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(transactionResponse)) getFirstLine])];
  @try {
    if ([self isReliable]) {
      [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk([self getMessageChannel])) sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:transactionResponse];
    }
    else {
      AndroidGovNistJavaxSipHeaderVia *via = [transactionResponse getTopmostVia];
      NSString *transport = [((AndroidGovNistJavaxSipHeaderVia *) nil_chk(via)) getTransport];
      if (transport == nil) @throw create_JavaIoIOException_initWithNSString_(@"missing transport!");
      jint port = [via getRPort];
      if (port == -1) port = [via getPort];
      if (port == -1) {
        if ([transport java_equalsIgnoreCase:@"TLS"]) port = 5061;
        else port = 5060;
      }
      NSString *host = nil;
      if ([via getMAddr] != nil) {
        host = [via getMAddr];
      }
      else {
        host = [via getParameterWithNSString:AndroidGovNistJavaxSipHeaderVia_RECEIVED];
        if (host == nil) {
          host = [via getHost];
        }
      }
      id<AndroidJavaxSipAddressHop> hop = [((id<AndroidGovNistCoreNetAddressResolver>) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->addressResolver_)) resolveAddressWithAndroidJavaxSipAddressHop:create_AndroidGovNistJavaxSipStackHopImpl_initWithNSString_withInt_withNSString_(host, port, transport)];
      AndroidGovNistJavaxSipStackMessageChannel *messageChannel = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(([self getSIPStack]))) createRawMessageChannelWithNSString:[((id<AndroidJavaxSipListeningPoint>) nil_chk([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk([self getSipProvider])) getListeningPointWithNSString:[((id<AndroidJavaxSipAddressHop>) nil_chk(hop)) getTransport]])) getIPAddress] withInt:[self getPort] withAndroidJavaxSipAddressHop:hop];
      if (messageChannel != nil) {
        [messageChannel sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:transactionResponse];
        JreStrongAssign(&lastResponseHost_, host);
        lastResponsePort_ = port;
        JreStrongAssign(&lastResponseTransport_, transport);
      }
      else {
        @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$$CI", @"Could not create a message channel for ", hop, @" with source IP:Port ", [((id<AndroidJavaxSipListeningPoint>) nil_chk([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk([self getSipProvider])) getListeningPointWithNSString:[hop getTransport]])) getIPAddress], ':', [self getPort]));
      }
    }
    JreStrongAssign(&lastResponseAsBytes_, [transactionResponse encodeAsBytesWithNSString:[self getTransport]]);
    JreStrongAssign(&lastResponse_, nil);
  }
  @finally {
    [self startTransactionTimer];
  }
}

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
                         withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)newChannelToUse {
  AndroidGovNistJavaxSipStackSIPServerTransactionImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_(self, sipStack, newChannelToUse);
  return self;
}

- (void)setRequestInterfaceWithAndroidGovNistJavaxSipStackServerRequestInterface:(id<AndroidGovNistJavaxSipStackServerRequestInterface>)newRequestOf {
  JreStrongAssign(&requestOf_, newRequestOf);
}

- (AndroidGovNistJavaxSipStackMessageChannel *)getResponseChannel {
  return encapsulatedChannel_;
}

- (jboolean)isMessagePartOfTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)messageToTest {
  jboolean transactionMatches = false;
  NSString *method = [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(messageToTest)) getCSeq])) getMethod];
  AndroidGovNistJavaxSipMessageSIPRequest *origRequest = [self getOriginalRequest];
  if ([self isInviteTransaction] || ![self isTerminated]) {
    AndroidGovNistJavaxSipHeaderVia *topViaHeader = [messageToTest getTopmostVia];
    if (topViaHeader != nil) {
      NSString *messageBranch = [topViaHeader getBranch];
      if (messageBranch != nil) {
        if (![((NSString *) nil_chk([messageBranch lowercaseString])) hasPrefix:AndroidGovNistJavaxSipSIPConstants_BRANCH_MAGIC_COOKIE_LOWER_CASE]) {
          messageBranch = nil;
        }
      }
      if (messageBranch != nil && [self getBranch] != nil) {
        if ([((NSString *) nil_chk(method)) isEqual:AndroidJavaxSipMessageRequest_CANCEL]) {
          transactionMatches = ([((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_CANCEL] && [((NSString *) nil_chk([self getBranch])) java_equalsIgnoreCase:messageBranch] && [((AndroidGovNistCoreHostPort *) nil_chk([topViaHeader getSentBy])) isEqual:[((AndroidGovNistJavaxSipHeaderVia *) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(origRequest)) getTopmostVia])) getSentBy]]);
        }
        else {
          if (origRequest != nil) {
            transactionMatches = ([((NSString *) nil_chk([self getBranch])) java_equalsIgnoreCase:messageBranch] && [((AndroidGovNistCoreHostPort *) nil_chk([topViaHeader getSentBy])) isEqual:[((AndroidGovNistJavaxSipHeaderVia *) nil_chk([origRequest getTopmostVia])) getSentBy]]);
          }
          else {
            transactionMatches = ([((NSString *) nil_chk([self getBranch])) java_equalsIgnoreCase:messageBranch] && [((AndroidGovNistCoreHostPort *) nil_chk([topViaHeader getSentBy])) isEqual:originalRequestSentBy_]);
          }
        }
      }
      else {
        origRequest = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([self getRequest], [AndroidGovNistJavaxSipMessageSIPRequest class]);
        NSString *originalFromTag = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(origRequest)) getFromTag];
        NSString *thisFromTag = [((id<AndroidJavaxSipHeaderFromHeader>) nil_chk([messageToTest getFrom])) getTag];
        jboolean skipFrom = (originalFromTag == nil || thisFromTag == nil);
        NSString *originalToTag = [origRequest getToTag];
        NSString *thisToTag = [((id<AndroidJavaxSipHeaderToHeader>) nil_chk([messageToTest getTo])) getTag];
        jboolean skipTo = (originalToTag == nil || thisToTag == nil);
        jboolean isResponse = ([messageToTest isKindOfClass:[AndroidGovNistJavaxSipMessageSIPResponse class]]);
        if ([((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([messageToTest getCSeq])) getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_CANCEL] && ![((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([origRequest getCSeq])) getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_CANCEL]) {
          transactionMatches = false;
        }
        else if ((isResponse || [((id<AndroidJavaxSipAddressURI>) nil_chk([origRequest getRequestURI])) isEqual:[((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(messageToTest, [AndroidGovNistJavaxSipMessageSIPRequest class])) getRequestURI]]) && (skipFrom || (originalFromTag != nil && [originalFromTag java_equalsIgnoreCase:thisFromTag])) && (skipTo || (originalToTag != nil && [originalToTag java_equalsIgnoreCase:thisToTag])) && [((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([origRequest getCallId])) getCallId])) java_equalsIgnoreCase:[((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([messageToTest getCallId])) getCallId]] && [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([origRequest getCSeq])) getSeqNumber] == [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([messageToTest getCSeq])) getSeqNumber] && ((![((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([messageToTest getCSeq])) getMethod])) isEqual:AndroidJavaxSipMessageRequest_CANCEL]) || [((NSString *) nil_chk([self getMethod])) isEqual:[((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([messageToTest getCSeq])) getMethod]]) && [topViaHeader isEqual:[origRequest getTopmostVia]]) {
          transactionMatches = true;
        }
      }
    }
  }
  return transactionMatches;
}

- (void)map {
  jint realState = [self getRealState];
  if (realState < 0 || realState == AndroidJavaxSipTransactionState__TRYING) {
    if ([self isInviteTransaction] && !self->isMapped_ && [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer] != nil) {
      self->isMapped_ = true;
      [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:create_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_SendTrying_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(self) withLong:200];
    }
    else {
      isMapped_ = true;
    }
  }
  [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) removePendingTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:self];
}

- (void)processRequestWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)transactionRequest
                    withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)sourceChannel {
  jboolean toTu = false;
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$$", @"processRequest: ", [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(transactionRequest)) getFirstLine])];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$I", @"tx state = ", [self getRealState])];
  @try {
    if ([self getRealState] < 0) {
      [self setOriginalRequestWithAndroidGovNistJavaxSipMessageSIPRequest:transactionRequest];
      [self setStateWithInt:AndroidJavaxSipTransactionState__TRYING];
      toTu = true;
      [self setPassToListener];
      if ([self isInviteTransaction] && self->isMapped_) {
        [self sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:[transactionRequest createResponseWithInt:100 withNSString:@"Trying"]];
      }
    }
    else if ([self isInviteTransaction] && AndroidJavaxSipTransactionState__COMPLETED == [self getRealState] && [((NSString *) nil_chk([transactionRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_ACK]) {
      [self setStateWithInt:AndroidJavaxSipTransactionState__CONFIRMED];
      [self disableRetransmissionTimer];
      if (![self isReliable]) {
        [self enableTimeoutTimerWithInt:timerI_];
      }
      else {
        [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
      }
      if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) isNon2XXAckPassedToListener]) {
        [((id<AndroidGovNistJavaxSipStackServerRequestInterface>) nil_chk(requestOf_)) processRequestWithAndroidGovNistJavaxSipMessageSIPRequest:transactionRequest withAndroidGovNistJavaxSipStackMessageChannel:encapsulatedChannel_];
      }
      else {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$$$", @"ACK received for server Tx ", [self getTransactionId], @" not delivering to application!")];
        [self semRelease];
      }
      return;
    }
    else if ([((NSString *) nil_chk([transactionRequest getMethod])) isEqual:[self getMethod]]) {
      if (AndroidJavaxSipTransactionState__PROCEEDING == [self getRealState] || AndroidJavaxSipTransactionState__COMPLETED == [self getRealState]) {
        [self semRelease];
        [self resendLastResponseAsBytes];
      }
      else if ([((NSString *) nil_chk([transactionRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_ACK]) {
        if (requestOf_ != nil) [requestOf_ processRequestWithAndroidGovNistJavaxSipMessageSIPRequest:transactionRequest withAndroidGovNistJavaxSipStackMessageChannel:encapsulatedChannel_];
        else [self semRelease];
      }
      else {
        [self semRelease];
      }
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$$@$@$@", @"completed processing retransmitted request : ", [transactionRequest getFirstLine], self, @" txState = ", [self getState], @" lastResponse = ", self->lastResponseAsBytes_)];
      return;
    }
    if (AndroidJavaxSipTransactionState__COMPLETED != [self getRealState] && AndroidJavaxSipTransactionState__TERMINATED != [self getRealState] && requestOf_ != nil) {
      if ([((NSString *) nil_chk([self getMethod])) isEqual:[transactionRequest getMethod]]) {
        if (toTu) {
          [((id<AndroidGovNistJavaxSipStackServerRequestInterface>) nil_chk(requestOf_)) processRequestWithAndroidGovNistJavaxSipMessageSIPRequest:transactionRequest withAndroidGovNistJavaxSipStackMessageChannel:encapsulatedChannel_];
        }
        else [self semRelease];
      }
      else {
        if (requestOf_ != nil) [requestOf_ processRequestWithAndroidGovNistJavaxSipMessageSIPRequest:transactionRequest withAndroidGovNistJavaxSipStackMessageChannel:encapsulatedChannel_];
        else [self semRelease];
      }
    }
    else {
      if (AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_([self getMethod]) && [self getRealState] == AndroidJavaxSipTransactionState__TERMINATED && [((NSString *) nil_chk([transactionRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_ACK] && requestOf_ != nil) {
        AndroidGovNistJavaxSipStackSIPDialog *thisDialog = (AndroidGovNistJavaxSipStackSIPDialog *) cast_chk([self getDialog], [AndroidGovNistJavaxSipStackSIPDialog class]);
        if (thisDialog == nil || !thisDialog->ackProcessed_) {
          if (thisDialog != nil) {
            [thisDialog ackReceivedWithLong:[((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([transactionRequest getCSeq])) getSeqNumber]];
            thisDialog->ackProcessed_ = true;
          }
          [((id<AndroidGovNistJavaxSipStackServerRequestInterface>) nil_chk(requestOf_)) processRequestWithAndroidGovNistJavaxSipMessageSIPRequest:transactionRequest withAndroidGovNistJavaxSipStackMessageChannel:encapsulatedChannel_];
        }
        else {
          [self semRelease];
        }
      }
      else if ([((NSString *) nil_chk([transactionRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_CANCEL]) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:@"Too late to cancel Transaction"];
        [self semRelease];
        @try {
          [self sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:[transactionRequest createResponseWithInt:AndroidJavaxSipMessageResponse_OK]];
        }
        @catch (JavaIoIOException *ex) {
        }
      }
      else {
        [self semRelease];
      }
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$I", @"Dropping request ", [self getRealState])];
    }
  }
  @catch (JavaIoIOException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) errorWithNSString:@"IOException " withNSException:e];
    [self semRelease];
    [self raiseIOExceptionEvent];
  }
}

- (void)sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)messageToSend {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$$", @"sipServerTransaction::sendMessage ", [((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(messageToSend)) getFirstLine])];
  AndroidGovNistJavaxSipMessageSIPResponse *transactionResponse = (AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(messageToSend, [AndroidGovNistJavaxSipMessageSIPResponse class]);
  jint statusCode = [transactionResponse getStatusCode];
  @try {
    @try {
      if (originalRequestBranch_ != nil) [((AndroidGovNistJavaxSipHeaderVia *) nil_chk([transactionResponse getTopmostVia])) setBranchWithNSString:[self getBranch]];
      else [((AndroidGovNistJavaxSipHeaderVia *) nil_chk([transactionResponse getTopmostVia])) removeParameterWithNSString:AndroidGovNistJavaxSipHeaderParameterNames_BRANCH];
      if (!originalRequestHasPort_) [((AndroidGovNistJavaxSipHeaderVia *) nil_chk([transactionResponse getTopmostVia])) removePort];
    }
    @catch (JavaTextParseException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) errorWithNSString:@"UnexpectedException" withNSException:ex];
      @throw create_JavaIoIOException_initWithNSString_(@"Unexpected exception");
    }
    if (![((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([transactionResponse getCSeq])) getMethod])) isEqual:[self getMethod]]) {
      [self sendResponseWithAndroidGovNistJavaxSipMessageSIPResponse:transactionResponse];
      return;
    }
    if (!AndroidGovNistJavaxSipStackSIPServerTransactionImpl_checkStateTimersWithInt_(self, statusCode)) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:@"checkStateTimers returned false -- not sending message"];
      return;
    }
    @try {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$@$@", @"sendMessage : tx = ", self, @" getState = ", [self getState])];
      JreStrongAssign(&lastResponse_, transactionResponse);
      lastResponseStatusCode_ = [transactionResponse getStatusCode];
      [self sendResponseWithAndroidGovNistJavaxSipMessageSIPResponse:transactionResponse];
    }
    @catch (JavaIoIOException *e) {
      [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
      self->collectionTime_ = 0;
      @throw e;
    }
  }
  @finally {
    [self startTransactionTimer];
  }
}

- (jboolean)checkStateTimersWithInt:(jint)statusCode {
  return AndroidGovNistJavaxSipStackSIPServerTransactionImpl_checkStateTimersWithInt_(self, statusCode);
}

- (NSString *)getViaHost {
  return [super getViaHost];
}

- (jint)getViaPort {
  return [super getViaPort];
}

- (void)fireRetransmissionTimer {
  @try {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$@$@", @"fireRetransmissionTimer() -- ", self, @" state ", [self getState])];
    if ([self isInviteTransaction] && (lastResponse_ != nil || lastResponseAsBytes_ != nil)) {
      if (!self->retransmissionAlertEnabled_ || [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) isTransactionPendingAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:self]) {
        if (lastResponseStatusCode_ / 100 >= 2 && !self->isAckSeen_) {
          [self resendLastResponseAsBytes];
        }
      }
      else {
        AndroidGovNistJavaxSipSipProviderImpl *sipProvider = [self getSipProvider];
        AndroidJavaxSipTimeoutEvent *txTimeout = create_AndroidJavaxSipTimeoutEvent_initWithId_withAndroidJavaxSipServerTransaction_withAndroidJavaxSipTimeout_(sipProvider, self, JreLoadStatic(AndroidJavaxSipTimeout, RETRANSMIT));
        [((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(sipProvider)) handleEventWithJavaUtilEventObject:txTimeout withAndroidGovNistJavaxSipStackSIPTransaction:self];
      }
    }
  }
  @catch (JavaIoIOException *e) {
    [self raiseErrorEventWithInt:AndroidGovNistJavaxSipStackSIPTransactionErrorEvent_TRANSPORT_ERROR];
  }
}

- (void)resendLastResponseAsBytes {
  if (lastResponse_ != nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @"resend last response ", lastResponse_)];
    [self sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:lastResponse_];
  }
  else if (lastResponseAsBytes_ != nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$$", @"resend last response ", [NSString java_stringWithBytes:lastResponseAsBytes_])];
    if ([self isReliable]) {
      @try {
        AndroidGovNistJavaxSipMessageSIPResponse *lastReparsedResponse = (AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk([((id<AndroidGovNistJavaxSipParserMessageParser>) nil_chk([((id<AndroidGovNistJavaxSipParserMessageParserFactory>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMessageParserFactory])) createMessageParserWithAndroidGovNistJavaxSipStackSIPTransactionStack:sipStack_])) parseSIPMessageWithByteArray:lastResponseAsBytes_ withBoolean:true withBoolean:false withAndroidGovNistJavaxSipParserParseExceptionListener:nil], [AndroidGovNistJavaxSipMessageSIPResponse class]);
        [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(lastReparsedResponse)) setRemoteAddressWithJavaNetInetAddress:[self getPeerInetAddress]];
        [lastReparsedResponse setRemotePortWithInt:[self getPeerPort]];
        [lastReparsedResponse setLocalPortWithInt:[((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk([self getMessageChannel])) getPort]];
        [lastReparsedResponse setLocalAddressWithJavaNetInetAddress:[((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk([((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk([self getMessageChannel])) getMessageProcessor])) getIpAddress]];
        [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk([self getMessageChannel])) logMessageWithAndroidGovNistJavaxSipMessageSIPMessage:lastReparsedResponse withJavaNetInetAddress:[self getPeerInetAddress] withInt:[self getPeerPort] withLong:JavaLangSystem_currentTimeMillis()];
      }
      @catch (JavaTextParseException *e) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$$", @"couldn't reparse last response ", [NSString java_stringWithBytes:lastResponseAsBytes_])];
      }
      [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk([self getMessageChannel])) sendMessageWithByteArray:lastResponseAsBytes_ withJavaNetInetAddress:[self getPeerInetAddress] withInt:[self getPeerPort] withBoolean:false];
    }
    else {
      id<AndroidJavaxSipAddressHop> hop = [((id<AndroidGovNistCoreNetAddressResolver>) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->addressResolver_)) resolveAddressWithAndroidJavaxSipAddressHop:create_AndroidGovNistJavaxSipStackHopImpl_initWithNSString_withInt_withNSString_(lastResponseHost_, lastResponsePort_, lastResponseTransport_)];
      AndroidGovNistJavaxSipStackMessageChannel *messageChannel = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(([self getSIPStack]))) createRawMessageChannelWithNSString:[((id<AndroidJavaxSipListeningPoint>) nil_chk([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk([self getSipProvider])) getListeningPointWithNSString:[((id<AndroidJavaxSipAddressHop>) nil_chk(hop)) getTransport]])) getIPAddress] withInt:[self getPort] withAndroidJavaxSipAddressHop:hop];
      if (messageChannel != nil) {
        @try {
          AndroidGovNistJavaxSipMessageSIPResponse *lastReparsedResponse = (AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk([((id<AndroidGovNistJavaxSipParserMessageParser>) nil_chk([((id<AndroidGovNistJavaxSipParserMessageParserFactory>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMessageParserFactory])) createMessageParserWithAndroidGovNistJavaxSipStackSIPTransactionStack:sipStack_])) parseSIPMessageWithByteArray:lastResponseAsBytes_ withBoolean:true withBoolean:false withAndroidGovNistJavaxSipParserParseExceptionListener:nil], [AndroidGovNistJavaxSipMessageSIPResponse class]);
          [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(lastReparsedResponse)) setRemoteAddressWithJavaNetInetAddress:[messageChannel getPeerInetAddress]];
          [lastReparsedResponse setRemotePortWithInt:[messageChannel getPeerPort]];
          [lastReparsedResponse setLocalPortWithInt:[messageChannel getPort]];
          [lastReparsedResponse setLocalAddressWithJavaNetInetAddress:[((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk([messageChannel getMessageProcessor])) getIpAddress]];
          [messageChannel logMessageWithAndroidGovNistJavaxSipMessageSIPMessage:lastReparsedResponse withJavaNetInetAddress:[messageChannel getPeerInetAddress] withInt:[messageChannel getPeerPort] withLong:JavaLangSystem_currentTimeMillis()];
        }
        @catch (JavaTextParseException *e) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$$", @"couldn't reparse last response ", [NSString java_stringWithBytes:lastResponseAsBytes_])];
        }
        [messageChannel sendMessageWithByteArray:lastResponseAsBytes_ withJavaNetInetAddress:JavaNetInetAddress_getByNameWithNSString_([hop getHost]) withInt:[hop getPort] withBoolean:false];
      }
      else {
        @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$$CI", @"Could not create a message channel for ", hop, @" with source IP:Port ", [((id<AndroidJavaxSipListeningPoint>) nil_chk([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk([self getSipProvider])) getListeningPointWithNSString:[hop getTransport]])) getIPAddress], ':', [self getPort]));
      }
    }
  }
}

- (void)fireReliableResponseRetransmissionTimer {
  AndroidGovNistJavaxSipStackSIPServerTransactionImpl_fireReliableResponseRetransmissionTimer(self);
}

- (void)fireTimeoutTimer {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$@$I$$", @"SIPServerTransaction.fireTimeoutTimer this = ", self, @" current state = ", [self getRealState], @" method = ", [self getMethod])];
  if ([self isInviteTransaction] && [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) removeTransactionPendingAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:self]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:@"Found tx pending ACK - timer H has kicked"];
  }
  AndroidGovNistJavaxSipStackSIPDialog *dialog = (AndroidGovNistJavaxSipStackSIPDialog *) cast_chk([self getDialog], [AndroidGovNistJavaxSipStackSIPDialog class]);
  if (AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_([self getMethod]) && (AndroidJavaxSipTransactionState__CALLING == [self getRealState] || AndroidJavaxSipTransactionState__TRYING == [self getRealState])) {
    [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(dialog)) setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE];
  }
  else if ([((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_BYE]) {
    if (dialog != nil && [dialog isTerminatedOnBye]) [dialog setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE];
  }
  if (AndroidJavaxSipTransactionState__COMPLETED == [self getRealState] && [self isInviteTransaction]) {
    [self raiseErrorEventWithInt:AndroidGovNistJavaxSipStackSIPTransactionErrorEvent_TIMEOUT_ERROR];
    [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
    [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:self];
  }
  else if (AndroidJavaxSipTransactionState__COMPLETED == [self getRealState] && ![self isInviteTransaction]) {
    [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
    if (![((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_CANCEL]) {
      [self cleanUp];
    }
    else {
      [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:self];
    }
  }
  else if (AndroidJavaxSipTransactionState__CONFIRMED == [self getRealState] && [self isInviteTransaction]) {
    [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
    [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:self];
  }
  else if (![self isInviteTransaction] && (AndroidJavaxSipTransactionState__COMPLETED == [self getRealState] || AndroidJavaxSipTransactionState__CONFIRMED == [self getRealState])) {
    [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
  }
  else if ([self isInviteTransaction] && AndroidJavaxSipTransactionState__TERMINATED == [self getRealState]) {
    [self raiseErrorEventWithInt:AndroidGovNistJavaxSipStackSIPTransactionErrorEvent_TIMEOUT_ERROR];
    if (dialog != nil) [dialog setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE];
  }
}

- (jint)getLastResponseStatusCode {
  return self->lastResponseStatusCode_;
}

- (void)setOriginalRequestWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)originalRequest {
  [super setOriginalRequestWithAndroidGovNistJavaxSipMessageSIPRequest:originalRequest];
}

- (void)sendResponseWithAndroidJavaxSipMessageResponse:(id<AndroidJavaxSipMessageResponse>)response {
  AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = (AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(response, [AndroidGovNistJavaxSipMessageSIPResponse class]);
  AndroidGovNistJavaxSipStackSIPDialog *dialog = (AndroidGovNistJavaxSipStackSIPDialog *) cast_chk([self getDialog], [AndroidGovNistJavaxSipStackSIPDialog class]);
  if (response == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null response");
  @try {
    [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) checkHeaders];
  }
  @catch (JavaTextParseException *ex) {
    @throw create_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_([((JavaTextParseException *) nil_chk(ex)) getMessage], JreLoadEnum(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, MissingRequiredHeader));
  }
  NSString *responseMethod = [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipResponse getCSeq])) getMethod];
  if (![((NSString *) nil_chk(responseMethod)) isEqual:[self getMethod]]) {
    @throw create_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(@"CSeq method does not match Request method of request that created the tx.", JreLoadEnum(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, UnmatchingCSeq));
  }
  jint statusCode = [response getStatusCode];
  if ([((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_SUBSCRIBE] && statusCode / 100 == 2) {
    if ([response getHeaderWithNSString:AndroidJavaxSipHeaderExpiresHeader_NAME] == nil) {
      @throw create_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(@"Expires header is mandatory in 2xx response of SUBSCRIBE", JreLoadEnum(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, ExpiresHeaderMandatory));
    }
    else {
      AndroidGovNistJavaxSipHeaderExpires *requestExpires = (AndroidGovNistJavaxSipHeaderExpires *) cast_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk([self getOriginalRequest])) getExpires], [AndroidGovNistJavaxSipHeaderExpires class]);
      AndroidGovNistJavaxSipHeaderExpires *responseExpires = (AndroidGovNistJavaxSipHeaderExpires *) cast_chk([response getExpires], [AndroidGovNistJavaxSipHeaderExpires class]);
      if (requestExpires != nil && [((AndroidGovNistJavaxSipHeaderExpires *) nil_chk(responseExpires)) getExpires] > [requestExpires getExpires]) {
        @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Response Expires time exceeds request Expires time : See RFC 3265 3.1.1");
      }
    }
  }
  if (statusCode == 200 && [responseMethod isEqual:AndroidJavaxSipMessageRequest_INVITE] && [sipResponse getHeaderWithNSString:AndroidJavaxSipHeaderContactHeader_NAME] == nil) @throw create_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(@"Contact Header is mandatory for the OK to the INVITE", JreLoadEnum(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, ContactHeaderMandatory));
  if (![self isMessagePartOfTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *) cast_chk(response, [AndroidGovNistJavaxSipMessageSIPMessage class])]) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Response does not belong to this transaction.");
  }
  @try {
    id<AndroidJavaxSipHeaderContentTypeHeader> contentTypeHeader = [((AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(response, [AndroidGovNistJavaxSipMessageSIPResponse class])) getContentTypeHeader];
    if (self->pendingReliableResponseAsBytes_ != nil && [self getDialog] != nil && [self getInternalState] != AndroidJavaxSipTransactionState__TERMINATED && statusCode / 100 == 2 && contentTypeHeader != nil && [((NSString *) nil_chk([contentTypeHeader getContentType])) java_equalsIgnoreCase:AndroidGovNistJavaxSipStackSIPServerTransaction_CONTENT_TYPE_APPLICATION] && [((NSString *) nil_chk([contentTypeHeader getContentSubType])) java_equalsIgnoreCase:AndroidGovNistJavaxSipStackSIPServerTransaction_CONTENT_SUBTYPE_SDP]) {
      if (!AndroidGovNistJavaxSipStackSIPServerTransactionImpl_interlockProvisionalResponses) {
        @throw create_AndroidJavaxSipSipException_initWithNSString_(@"cannot send response -- unacked provisional");
      }
      else {
        @try {
          jboolean acquired = [((JavaUtilConcurrentSemaphore *) nil_chk(self->provisionalResponseSem_)) tryAcquireWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
          if (!acquired) {
            @throw create_AndroidJavaxSipSipException_initWithNSString_(@"cannot send response -- unacked provisional");
          }
        }
        @catch (JavaLangInterruptedException *ex) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) errorWithNSString:@"Interrupted acuqiring PRACK sem"];
          @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Cannot aquire PRACK sem");
        }
      }
    }
    else {
      if (self->pendingReliableResponseAsBytes_ != nil && [sipResponse isFinalResponse]) {
        [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:provisionalResponseTask_];
        JreStrongAssign(&self->provisionalResponseTask_, nil);
      }
    }
    if (dialog != nil) {
      if (statusCode / 100 == 2 && AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_(responseMethod)) {
        if ([dialog getLocalTag] == nil && [sipResponse getToTag] == nil) {
          [((id<AndroidJavaxSipHeaderToHeader>) nil_chk([sipResponse getTo])) setTagWithNSString:[((AndroidGovNistJavaxSipUtils *) nil_chk(AndroidGovNistJavaxSipUtils_getInstance())) generateTag]];
        }
        else if ([dialog getLocalTag] != nil && [sipResponse getToTag] == nil) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$@$@$$", @"assigning toTag : serverTransaction = ", self, @" dialog ", dialog, @" tag = ", [dialog getLocalTag])];
          [sipResponse setToTagWithNSString:[dialog getLocalTag]];
        }
        else if ([dialog getLocalTag] != nil && [sipResponse getToTag] != nil && ![((NSString *) nil_chk([dialog getLocalTag])) isEqual:[sipResponse getToTag]]) {
          @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$$$$", @"Tag mismatch dialogTag is ", [dialog getLocalTag], @" responseTag is ", [sipResponse getToTag]));
        }
      }
      if (![((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([sipResponse getCallId])) getCallId])) isEqual:[((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([dialog getCallId])) getCallId]]) {
        @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Dialog mismatch!");
      }
    }
    NSString *fromTag = originalRequestFromTag_;
    if ([self getRequest] != nil) {
      fromTag = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([self getRequest], [AndroidGovNistJavaxSipMessageSIPRequest class])))) getFromTag];
    }
    if (fromTag != nil && [sipResponse getFromTag] != nil && ![((NSString *) nil_chk([sipResponse getFromTag])) isEqual:fromTag]) {
      @throw create_AndroidJavaxSipSipException_initWithNSString_(@"From tag of request does not match response from tag");
    }
    else if (fromTag != nil) {
      [((id<AndroidJavaxSipHeaderFromHeader>) nil_chk([sipResponse getFrom])) setTagWithNSString:fromTag];
    }
    else {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:@"WARNING -- Null From tag in request!!"];
    }
    if (dialog != nil && statusCode != 100) {
      [dialog setResponseTagsWithAndroidGovNistJavaxSipMessageSIPResponse:sipResponse];
      AndroidJavaxSipDialogState *oldState = [dialog getState];
      [dialog setLastResponseWithAndroidGovNistJavaxSipStackSIPTransaction:self withAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(response, [AndroidGovNistJavaxSipMessageSIPResponse class])];
      if (oldState == nil && [dialog getState] == JreLoadStatic(AndroidJavaxSipDialogState, TERMINATED)) {
        AndroidJavaxSipDialogTerminatedEvent *event = create_AndroidJavaxSipDialogTerminatedEvent_initWithId_withAndroidJavaxSipDialog_([dialog getSipProvider], dialog);
        [((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk([dialog getSipProvider])) handleEventWithJavaUtilEventObject:event withAndroidGovNistJavaxSipStackSIPTransaction:self];
      }
    }
    else if (dialog == nil && [self isInviteTransaction] && self->retransmissionAlertEnabled_ && self->retransmissionAlertTimerTask_ == nil && [response getStatusCode] / 100 == 2) {
      NSString *dialogId = [((AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(response, [AndroidGovNistJavaxSipMessageSIPResponse class])) getDialogIdWithBoolean:true];
      JreStrongAssignAndConsume(&self->retransmissionAlertTimerTask_, new_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_withNSString_(self, dialogId));
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->retransmissionAlertTransactions_)) putWithId:dialogId withId:self];
      [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) scheduleWithFixedDelayWithAndroidGovNistJavaxSipStackSIPStackTimerTask:self->retransmissionAlertTimerTask_ withLong:0 withLong:AndroidGovNistJavaxSipStackSIPTransactionStack_BASE_TIMER_INTERVAL];
    }
    [self sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(response, [AndroidGovNistJavaxSipMessageSIPResponse class])];
    if (dialog != nil) {
      [dialog startRetransmitTimerWithAndroidGovNistJavaxSipStackSIPServerTransaction:self withAndroidJavaxSipMessageResponse:(AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(response, [AndroidGovNistJavaxSipMessageSIPResponse class])];
    }
  }
  @catch (JavaIoIOException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) errorWithNSString:@"IOException" withNSException:ex];
    [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
    [self raiseErrorEventWithInt:AndroidGovNistJavaxSipStackSIPTransactionErrorEvent_TRANSPORT_ERROR];
    @throw create_AndroidJavaxSipSipException_initWithNSString_withNSException_([((JavaIoIOException *) nil_chk(ex)) getMessage], ex);
  }
  @catch (JavaTextParseException *ex1) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) errorWithNSString:@"ParseException" withNSException:ex1];
    [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
    @throw create_AndroidJavaxSipSipException_initWithNSString_withNSException_([((JavaTextParseException *) nil_chk(ex1)) getMessage], ex1);
  }
}

- (jint)getRealState {
  return [super getInternalState];
}

- (AndroidJavaxSipTransactionState *)getState {
  if ([self isInviteTransaction] && AndroidJavaxSipTransactionState__TRYING == [super getInternalState]) return JreLoadStatic(AndroidJavaxSipTransactionState, PROCEEDING);
  else return [super getState];
}

- (void)setStateWithInt:(jint)newState {
  if (newState == AndroidJavaxSipTransactionState__TERMINATED && [self isReliable] && (!((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([self getSIPStack]))->cacheServerConnections_)) {
    self->collectionTime_ = AndroidGovNistJavaxSipStackSIPTransaction_TIMER_J;
    [((JavaUtilConcurrentSemaphore *) nil_chk(self->terminationSemaphore_)) release__];
  }
  [super setStateWithInt:newState];
}

- (void)startTransactionTimer {
  if ([((NSString *) nil_chk([self getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_INVITE] || [((NSString *) nil_chk([self getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_CANCEL] || [((NSString *) nil_chk([self getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_ACK]) {
    if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(self->transactionTimerStarted_)) compareAndSetWithBoolean:false withBoolean:true]) {
      if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer] != nil && [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) isStarted]) {
        AndroidGovNistJavaxSipStackSIPStackTimerTask *myTimer = create_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_TransactionTimer_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(self);
        if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer] != nil && [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) isStarted]) {
          [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) scheduleWithFixedDelayWithAndroidGovNistJavaxSipStackSIPStackTimerTask:myTimer withLong:baseTimerInterval_ withLong:baseTimerInterval_];
        }
        myTimer = nil;
      }
    }
  }
}

- (void)startTransactionTimerJWithLong:(jlong)time {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(self->transactionTimerStarted_)) compareAndSetWithBoolean:false withBoolean:true]) {
    if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer] != nil && [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) isStarted]) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$$$J", @"starting TransactionTimerJ() : ", [self getTransactionId], @" time ", time)];
      AndroidGovNistJavaxSipStackSIPStackTimerTask *task = create_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(self);
      if (time > 0) {
        [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:task withLong:time * AndroidGovNistJavaxSipStackSIPTransaction_T1 * baseTimerInterval_];
      }
      else {
        [task runTask];
      }
    }
  }
}

- (jboolean)isEqual:(id)other {
  if (other == nil) return false;
  if (![[other java_getClass] isEqual:[self java_getClass]]) {
    return false;
  }
  id<AndroidGovNistJavaxSipStackSIPServerTransaction> sst = (id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check(other, AndroidGovNistJavaxSipStackSIPServerTransaction_class_());
  return [((NSString *) nil_chk([self getBranch])) java_equalsIgnoreCase:[sst getBranch]];
}

- (id<AndroidJavaxSipDialog>)getDialog {
  if (dialog_ == nil && dialogId_ != nil) {
    return [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getDialogWithNSString:dialogId_];
  }
  return dialog_;
}

- (void)setDialogWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)sipDialog
                                             withNSString:(NSString *)dialogId {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$@$@", @"setDialog ", self, @" dialog = ", sipDialog)];
  JreStrongAssign(&self->dialog_, sipDialog);
  JreStrongAssign(&self->dialogId_, dialogId);
  if (dialogId != nil) [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(sipDialog)) setAssigned];
  if (self->retransmissionAlertEnabled_ && self->retransmissionAlertTimerTask_ != nil) {
    [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:retransmissionAlertTimerTask_];
    if (((AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask *) nil_chk(self->retransmissionAlertTimerTask_))->dialogId_ != nil) {
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->retransmissionAlertTransactions_)) removeWithId:self->retransmissionAlertTimerTask_->dialogId_];
    }
    JreStrongAssign(&self->retransmissionAlertTimerTask_, nil);
  }
  self->retransmissionAlertEnabled_ = false;
}

- (void)terminate {
  [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
  if (self->retransmissionAlertTimerTask_ != nil) {
    [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:retransmissionAlertTimerTask_];
    if (((AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask *) nil_chk(retransmissionAlertTimerTask_))->dialogId_ != nil) {
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_))->retransmissionAlertTransactions_)) removeWithId:retransmissionAlertTimerTask_->dialogId_];
    }
    JreStrongAssign(&self->retransmissionAlertTimerTask_, nil);
  }
  if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(transactionTimerStarted_)) get]) {
    [self testAndSetTransactionTerminatedEvent];
    [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:self];
  }
}

- (void)sendReliableProvisionalResponseWithAndroidJavaxSipMessageResponse:(id<AndroidJavaxSipMessageResponse>)relResponse {
  if (self->pendingReliableResponseAsBytes_ != nil) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Unacknowledged response");
  }
  else {
    AndroidGovNistJavaxSipMessageSIPResponse *reliableResponse = (AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(relResponse, [AndroidGovNistJavaxSipMessageSIPResponse class]);
    JreStrongAssign(&self->pendingReliableResponseAsBytes_, [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(reliableResponse)) encodeAsBytesWithNSString:[self getTransport]]);
    JreStrongAssign(&self->pendingReliableResponseMethod_, [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([reliableResponse getCSeq])) getMethod]);
    self->pendingReliableCSeqNumber_ = [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([reliableResponse getCSeq])) getSeqNumber];
  }
  AndroidGovNistJavaxSipHeaderRSeq *rseq = (AndroidGovNistJavaxSipHeaderRSeq *) cast_chk([((id<AndroidJavaxSipMessageResponse>) nil_chk(relResponse)) getHeaderWithNSString:AndroidJavaxSipHeaderRSeqHeader_NAME], [AndroidGovNistJavaxSipHeaderRSeq class]);
  if ([relResponse getHeaderWithNSString:AndroidJavaxSipHeaderRSeqHeader_NAME] == nil) {
    rseq = create_AndroidGovNistJavaxSipHeaderRSeq_init();
    [relResponse setHeaderWithAndroidJavaxSipHeaderHeader:rseq];
  }
  @try {
    if (rseqNumber_ < 0) {
      self->rseqNumber_ = JreFpToInt((JavaLangMath_random() * 1000));
    }
    self->rseqNumber_++;
    [((AndroidGovNistJavaxSipHeaderRSeq *) nil_chk(rseq)) setSeqNumberWithLong:self->rseqNumber_];
    self->pendingReliableRSeqNumber_ = [rseq getSeqNumber];
    JreStrongAssign(&self->lastResponse_, (AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(relResponse, [AndroidGovNistJavaxSipMessageSIPResponse class]));
    if ([self getDialog] != nil && AndroidGovNistJavaxSipStackSIPServerTransactionImpl_interlockProvisionalResponses) {
      jboolean acquired = [((JavaUtilConcurrentSemaphore *) nil_chk(self->provisionalResponseSem_)) tryAcquireWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
      if (!acquired) {
        @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Unacknowledged reliable response");
      }
    }
    JreStrongAssignAndConsume(&self->provisionalResponseTask_, new_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(self));
    [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getTimer])) scheduleWithFixedDelayWithAndroidGovNistJavaxSipStackSIPStackTimerTask:provisionalResponseTask_ withLong:0 withLong:AndroidGovNistJavaxSipStackSIPTransactionStack_BASE_TIMER_INTERVAL];
    [self sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *) cast_chk(relResponse, [AndroidGovNistJavaxSipMessageSIPMessage class])];
  }
  @catch (JavaLangException *ex) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
  }
}

- (IOSByteArray *)getReliableProvisionalResponse {
  return self->pendingReliableResponseAsBytes_;
}

- (jboolean)prackRecieved {
  if (self->pendingReliableResponseAsBytes_ == nil) return false;
  if (provisionalResponseTask_ != nil) {
    [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:provisionalResponseTask_];
    JreStrongAssign(&self->provisionalResponseTask_, nil);
  }
  JreStrongAssign(&self->pendingReliableResponseAsBytes_, nil);
  if (AndroidGovNistJavaxSipStackSIPServerTransactionImpl_interlockProvisionalResponses && [self getDialog] != nil) {
    [((JavaUtilConcurrentSemaphore *) nil_chk(self->provisionalResponseSem_)) release__];
  }
  return true;
}

- (void)enableRetransmissionAlerts {
  if ([self getDialog] != nil) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Dialog associated with tx");
  else if (![self isInviteTransaction]) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Request Method must be INVITE");
  self->retransmissionAlertEnabled_ = true;
}

- (jboolean)isRetransmissionAlertEnabled {
  return self->retransmissionAlertEnabled_;
}

- (void)disableRetransmissionAlerts {
  if (self->retransmissionAlertTimerTask_ != nil && self->retransmissionAlertEnabled_) {
    [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:retransmissionAlertTimerTask_];
    self->retransmissionAlertEnabled_ = false;
    NSString *dialogId = ((AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask *) nil_chk(self->retransmissionAlertTimerTask_))->dialogId_;
    if (dialogId != nil) {
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->retransmissionAlertTransactions_)) removeWithId:dialogId];
    }
    JreStrongAssign(&self->retransmissionAlertTimerTask_, nil);
  }
}

- (void)setAckSeen {
  self->isAckSeen_ = true;
}

- (jboolean)ackSeen {
  return self->isAckSeen_;
}

- (void)setMappedWithBoolean:(jboolean)b {
  self->isMapped_ = true;
}

- (void)setPendingSubscribeWithAndroidGovNistJavaxSipStackSIPClientTransaction:(id<AndroidGovNistJavaxSipStackSIPClientTransaction>)pendingSubscribeClientTx {
  JreStrongAssign(&self->pendingSubscribeTransaction_, pendingSubscribeClientTx);
}

- (void)releaseSem {
  if (self->pendingSubscribeTransaction_ != nil) {
    if (![((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) isDeliverUnsolicitedNotify]) {
      [((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) nil_chk(pendingSubscribeTransaction_)) releaseSem];
    }
  }
  else if (self->inviteTransaction_SIPServerTransactionImpl_ != nil && [((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_CANCEL]) {
    [self->inviteTransaction_SIPServerTransactionImpl_ releaseSem];
  }
  [super releaseSem];
}

- (void)setInviteTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)st {
  JreStrongAssign(&self->inviteTransaction_SIPServerTransactionImpl_, st);
}

- (id<AndroidGovNistJavaxSipStackSIPServerTransaction>)getCanceledInviteTransaction {
  return self->inviteTransaction_SIPServerTransactionImpl_;
}

- (void)scheduleAckRemoval {
  if ([self getMethod] == nil || ![((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_ACK]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$Z$$C", @"Method is null[", ([self getMethod] == nil), @"] or method is not ACK[", [self getMethod], ']'));
  }
  [self startTransactionTimer];
}

- (void)cleanUp {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @"removing", self)];
  if ([self getReleaseReferencesStrategy] != JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, None)) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$$", @"cleanup : ", [self getTransactionId])];
    if (originalRequest_ == nil && originalRequestBytes_ != nil && [self getReleaseReferencesStrategy] == JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, Normal)) {
      @try {
        JreStrongAssign(&originalRequest_, (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([((id<AndroidGovNistJavaxSipParserMessageParser>) nil_chk([((id<AndroidGovNistJavaxSipParserMessageParserFactory>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMessageParserFactory])) createMessageParserWithAndroidGovNistJavaxSipStackSIPTransactionStack:sipStack_])) parseSIPMessageWithByteArray:originalRequestBytes_ withBoolean:true withBoolean:false withAndroidGovNistJavaxSipParserParseExceptionListener:nil], [AndroidGovNistJavaxSipMessageSIPRequest class]));
      }
      @catch (JavaTextParseException *e) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) errorWithNSString:JreStrcat("$@$", @"message ", originalRequestBytes_, @"could not be reparsed !")];
      }
    }
    else if (originalRequest_ != nil && originalRequestBytes_ == nil && [self getReleaseReferencesStrategy] == JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, Normal)) {
      JreStrongAssign(&originalRequestBytes_, [originalRequest_ encodeAsBytesWithNSString:[self getTransport]]);
    }
    if (originalRequest_ != nil && originalRequestBytes_ == nil) {
      JreStrongAssign(&mergeId_, [(originalRequest_) getMergeId]);
    }
    [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:self];
    [self cleanUpOnTimer];
    JreStrongAssign(&originalRequestFromTag_, nil);
    JreStrongAssign(&originalRequestSentBy_, nil);
    if (originalRequest_ != nil) {
      JreStrongAssign(&originalRequest_, nil);
    }
    if (![self isReliable] && inviteTransaction_SIPServerTransactionImpl_ != nil) {
      JreStrongAssign(&inviteTransaction_SIPServerTransactionImpl_, nil);
    }
    JreStrongAssign(&lastResponse_, nil);
  }
  else {
    [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:self];
  }
  if ((!((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->cacheServerConnections_) && [self isReliable] && --((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk([self getMessageChannel]))->useCount_ <= 0) {
    [self close];
  }
  else {
    if ((!((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->cacheServerConnections_) && [self isReliable]) {
      jint useCount = ((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk([self getMessageChannel]))->useCount_;
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$I", @"Use Count = ", useCount)];
    }
  }
}

- (void)cleanUpOnTimer {
  if ([self getReleaseReferencesStrategy] != JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, None)) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$$", @"cleanup on timer : ", [self getTransactionId])];
    if (dialog_ != nil && [((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_CANCEL]) {
      JreStrongAssign(&dialogId_, [dialog_ getDialogId]);
    }
    JreStrongAssign(&dialog_, nil);
    if (inviteTransaction_SIPServerTransactionImpl_ != nil && ![((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_CANCEL]) {
      [inviteTransaction_SIPServerTransactionImpl_ releaseSem];
      JreStrongAssign(&inviteTransaction_SIPServerTransactionImpl_, nil);
    }
    if (originalRequest_ != nil) {
      JreStrongAssign(&mergeId_, [(originalRequest_) getMergeId]);
      [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(originalRequest_)) setTransactionWithId:nil];
      [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(originalRequest_)) setInviteTransactionWithId:nil];
      if (![((NSString *) nil_chk([self getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_INVITE]) {
        if (originalRequestSentBy_ == nil) {
          JreStrongAssign(&originalRequestSentBy_, [((AndroidGovNistJavaxSipHeaderVia *) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(originalRequest_)) getTopmostVia])) getSentBy]);
        }
        if (originalRequestFromTag_ == nil) {
          JreStrongAssign(&originalRequestFromTag_, [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(originalRequest_)) getFromTag]);
        }
      }
      if (originalRequestBytes_ == nil && [self getReleaseReferencesStrategy] == JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, Normal)) {
        JreStrongAssign(&originalRequestBytes_, [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(originalRequest_)) encodeAsBytesWithNSString:[self getTransport]]);
      }
      if (![((NSString *) nil_chk([self getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_INVITE] && ![((NSString *) nil_chk([self getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_CANCEL]) {
        JreStrongAssign(&originalRequest_, nil);
      }
    }
    if (lastResponse_ != nil) {
      if ([self getReleaseReferencesStrategy] == JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, Normal)) {
        JreStrongAssign(&lastResponseAsBytes_, [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(lastResponse_)) encodeAsBytesWithNSString:[self getTransport]]);
      }
      JreStrongAssign(&lastResponse_, nil);
    }
    JreStrongAssign(&pendingReliableResponseAsBytes_, nil);
    JreStrongAssign(&pendingReliableResponseMethod_, nil);
    JreStrongAssign(&pendingSubscribeTransaction_, nil);
    JreStrongAssign(&provisionalResponseSem_, nil);
    JreStrongAssign(&retransmissionAlertTimerTask_, nil);
    JreStrongAssign(&requestOf_, nil);
  }
}

- (NSString *)getPendingReliableResponseMethod {
  return pendingReliableResponseMethod_;
}

- (jlong)getPendingReliableCSeqNumber {
  return pendingReliableCSeqNumber_;
}

- (jlong)getPendingReliableRSeqNumber {
  return pendingReliableRSeqNumber_;
}

- (void)waitForTermination {
  @try {
    [((JavaUtilConcurrentSemaphore *) nil_chk(self->terminationSemaphore_)) acquire];
  }
  @catch (JavaLangInterruptedException *e) {
  }
}

- (void)dealloc {
  RELEASE_(requestOf_);
  RELEASE_(dialog_);
  RELEASE_(dialogId_);
  RELEASE_(pendingReliableResponseAsBytes_);
  RELEASE_(pendingReliableResponseMethod_);
  RELEASE_(provisionalResponseTask_);
  RELEASE_(retransmissionAlertTimerTask_);
  RELEASE_(pendingSubscribeTransaction_);
  RELEASE_(inviteTransaction_SIPServerTransactionImpl_);
  RELEASE_(provisionalResponseSem_);
  RELEASE_(terminationSemaphore_);
  RELEASE_(lastResponseAsBytes_);
  RELEASE_(lastResponseHost_);
  RELEASE_(lastResponseTransport_);
  RELEASE_(originalRequestSentBy_);
  RELEASE_(originalRequestFromTag_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x4, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageChannel;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 7, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 15, 16, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipTransactionState;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 18, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipDialog;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 24, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 15, 16, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 16, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPServerTransaction;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 32, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(sendResponseWithAndroidGovNistJavaxSipMessageSIPResponse:);
  methods[1].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistJavaxSipStackMessageChannel:);
  methods[2].selector = @selector(setRequestInterfaceWithAndroidGovNistJavaxSipStackServerRequestInterface:);
  methods[3].selector = @selector(getResponseChannel);
  methods[4].selector = @selector(isMessagePartOfTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[5].selector = @selector(map);
  methods[6].selector = @selector(processRequestWithAndroidGovNistJavaxSipMessageSIPRequest:withAndroidGovNistJavaxSipStackMessageChannel:);
  methods[7].selector = @selector(sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[8].selector = @selector(checkStateTimersWithInt:);
  methods[9].selector = @selector(getViaHost);
  methods[10].selector = @selector(getViaPort);
  methods[11].selector = @selector(fireRetransmissionTimer);
  methods[12].selector = @selector(resendLastResponseAsBytes);
  methods[13].selector = @selector(fireReliableResponseRetransmissionTimer);
  methods[14].selector = @selector(fireTimeoutTimer);
  methods[15].selector = @selector(getLastResponseStatusCode);
  methods[16].selector = @selector(setOriginalRequestWithAndroidGovNistJavaxSipMessageSIPRequest:);
  methods[17].selector = @selector(sendResponseWithAndroidJavaxSipMessageResponse:);
  methods[18].selector = @selector(getRealState);
  methods[19].selector = @selector(getState);
  methods[20].selector = @selector(setStateWithInt:);
  methods[21].selector = @selector(startTransactionTimer);
  methods[22].selector = @selector(startTransactionTimerJWithLong:);
  methods[23].selector = @selector(isEqual:);
  methods[24].selector = @selector(getDialog);
  methods[25].selector = @selector(setDialogWithAndroidGovNistJavaxSipStackSIPDialog:withNSString:);
  methods[26].selector = @selector(terminate);
  methods[27].selector = @selector(sendReliableProvisionalResponseWithAndroidJavaxSipMessageResponse:);
  methods[28].selector = @selector(getReliableProvisionalResponse);
  methods[29].selector = @selector(prackRecieved);
  methods[30].selector = @selector(enableRetransmissionAlerts);
  methods[31].selector = @selector(isRetransmissionAlertEnabled);
  methods[32].selector = @selector(disableRetransmissionAlerts);
  methods[33].selector = @selector(setAckSeen);
  methods[34].selector = @selector(ackSeen);
  methods[35].selector = @selector(setMappedWithBoolean:);
  methods[36].selector = @selector(setPendingSubscribeWithAndroidGovNistJavaxSipStackSIPClientTransaction:);
  methods[37].selector = @selector(releaseSem);
  methods[38].selector = @selector(setInviteTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:);
  methods[39].selector = @selector(getCanceledInviteTransaction);
  methods[40].selector = @selector(scheduleAckRemoval);
  methods[41].selector = @selector(cleanUp);
  methods[42].selector = @selector(cleanUpOnTimer);
  methods[43].selector = @selector(getPendingReliableResponseMethod);
  methods[44].selector = @selector(getPendingReliableCSeqNumber);
  methods[45].selector = @selector(getPendingReliableRSeqNumber);
  methods[46].selector = @selector(waitForTermination);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 33, -1, -1 },
    { "rseqNumber_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "requestOf_", "LAndroidGovNistJavaxSipStackServerRequestInterface;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "dialog_", "LAndroidGovNistJavaxSipStackSIPDialog;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dialogId_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "pendingReliableResponseAsBytes_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pendingReliableResponseMethod_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pendingReliableCSeqNumber_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pendingReliableRSeqNumber_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "provisionalResponseTask_", "LAndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "retransmissionAlertEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "retransmissionAlertTimerTask_", "LAndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isAckSeen_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "pendingSubscribeTransaction_", "LAndroidGovNistJavaxSipStackSIPClientTransaction;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inviteTransaction_SIPServerTransactionImpl_", "LAndroidGovNistJavaxSipStackSIPServerTransaction;", .constantValue.asLong = 0, 0x2, 34, -1, -1, -1 },
    { "interlockProvisionalResponses", "Z", .constantValue.asLong = 0, 0xa, -1, 35, -1, -1 },
    { "provisionalResponseSem_", "LJavaUtilConcurrentSemaphore;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "terminationSemaphore_", "LJavaUtilConcurrentSemaphore;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastResponseAsBytes_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastResponseHost_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastResponsePort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastResponseTransport_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastResponseStatusCode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "originalRequestSentBy_", "LAndroidGovNistCoreHostPort;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "originalRequestFromTag_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "sendResponse", "LAndroidGovNistJavaxSipMessageSIPResponse;", "LJavaIoIOException;", "LAndroidGovNistJavaxSipStackSIPTransactionStack;LAndroidGovNistJavaxSipStackMessageChannel;", "setRequestInterface", "LAndroidGovNistJavaxSipStackServerRequestInterface;", "isMessagePartOfTransaction", "LAndroidGovNistJavaxSipMessageSIPMessage;", "processRequest", "LAndroidGovNistJavaxSipMessageSIPRequest;LAndroidGovNistJavaxSipStackMessageChannel;", "sendMessage", "checkStateTimers", "I", "setOriginalRequest", "LAndroidGovNistJavaxSipMessageSIPRequest;", "LAndroidJavaxSipMessageResponse;", "LAndroidJavaxSipSipException;", "setState", "startTransactionTimerJ", "J", "equals", "LNSObject;", "setDialog", "LAndroidGovNistJavaxSipStackSIPDialog;LNSString;", "LAndroidJavaxSipObjectInUseException;", "sendReliableProvisionalResponse", "setMapped", "Z", "setPendingSubscribe", "LAndroidGovNistJavaxSipStackSIPClientTransaction;", "setInviteTransaction", "LAndroidGovNistJavaxSipStackSIPServerTransaction;", "LJavaLangIllegalStateException;", &AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger, "inviteTransaction", &AndroidGovNistJavaxSipStackSIPServerTransactionImpl_interlockProvisionalResponses, "LAndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask;LAndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask;LAndroidGovNistJavaxSipStackSIPServerTransactionImpl_SendTrying;LAndroidGovNistJavaxSipStackSIPServerTransactionImpl_TransactionTimer;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPServerTransactionImpl = { "SIPServerTransactionImpl", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 47, 25, -1, 36, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPServerTransactionImpl;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackSIPServerTransactionImpl class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackSIPServerTransaction_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackSIPServerTransactionImpl)
  }
}

@end

void AndroidGovNistJavaxSipStackSIPServerTransactionImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *self, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackMessageChannel *newChannelToUse) {
  AndroidGovNistJavaxSipStackSIPTransactionImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_(self, sipStack, newChannelToUse);
  self->rseqNumber_ = -1;
  JreStrongAssignAndConsume(&self->provisionalResponseSem_, new_JavaUtilConcurrentSemaphore_initWithInt_(1));
  JreStrongAssignAndConsume(&self->terminationSemaphore_, new_JavaUtilConcurrentSemaphore_initWithInt_(0));
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_logger)) debugWithNSString:JreStrcat("$$", @"Creating Server Transaction", [self getBranchId])];
}

AndroidGovNistJavaxSipStackSIPServerTransactionImpl *new_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_(AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackMessageChannel *newChannelToUse) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_, sipStack, newChannelToUse)
}

AndroidGovNistJavaxSipStackSIPServerTransactionImpl *create_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_(AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackMessageChannel *newChannelToUse) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_, sipStack, newChannelToUse)
}

jboolean AndroidGovNistJavaxSipStackSIPServerTransactionImpl_checkStateTimersWithInt_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *self, jint statusCode) {
  if ([self getRealState] == AndroidJavaxSipTransactionState__TRYING) {
    if (statusCode / 100 == 1) {
      [self setStateWithInt:AndroidJavaxSipTransactionState__PROCEEDING];
    }
    else if (200 <= statusCode && statusCode <= 699) {
      if (![self isInviteTransaction]) {
        if (![self isReliable] && [self getInternalState] != AndroidJavaxSipTransactionState__COMPLETED) {
          [self setStateWithInt:AndroidJavaxSipTransactionState__COMPLETED];
          [self startTransactionTimerJWithLong:AndroidGovNistJavaxSipStackSIPTransaction_TIMER_J];
          [self cleanUpOnTimer];
        }
        else {
          [self cleanUpOnTimer];
          [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
          [self startTransactionTimerJWithLong:0];
        }
      }
      else {
        if (statusCode / 100 == 2) {
          [self disableRetransmissionTimer];
          [self disableTimeoutTimer];
          self->collectionTime_ = AndroidGovNistJavaxSipStackSIPTransaction_TIMER_J;
          [self cleanUpOnTimer];
          [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
          if ([self getDialog] != nil) [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(((AndroidGovNistJavaxSipStackSIPDialog *) cast_chk([self getDialog], [AndroidGovNistJavaxSipStackSIPDialog class])))) setRetransmissionTicks];
        }
        else {
          [self setStateWithInt:AndroidJavaxSipTransactionState__COMPLETED];
          if (![self isReliable]) {
            [self enableRetransmissionTimer];
          }
          [self cleanUpOnTimer];
          [self enableTimeoutTimerWithInt:AndroidGovNistJavaxSipStackSIPTransaction_TIMER_H];
        }
      }
    }
  }
  else if ([self getRealState] == AndroidJavaxSipTransactionState__PROCEEDING) {
    if ([self isInviteTransaction]) {
      if (statusCode / 100 == 2) {
        [self disableRetransmissionTimer];
        [self disableTimeoutTimer];
        self->collectionTime_ = AndroidGovNistJavaxSipStackSIPTransaction_TIMER_J;
        [self cleanUpOnTimer];
        [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
        if ([self getDialog] != nil) [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(((AndroidGovNistJavaxSipStackSIPDialog *) cast_chk([self getDialog], [AndroidGovNistJavaxSipStackSIPDialog class])))) setRetransmissionTicks];
      }
      else if (300 <= statusCode && statusCode <= 699) {
        [self setStateWithInt:AndroidJavaxSipTransactionState__COMPLETED];
        if (![self isReliable]) {
          [self enableRetransmissionTimer];
        }
        [self cleanUpOnTimer];
        [self enableTimeoutTimerWithInt:AndroidGovNistJavaxSipStackSIPTransaction_TIMER_H];
      }
    }
    else if (200 <= statusCode && statusCode <= 699) {
      [self setStateWithInt:AndroidJavaxSipTransactionState__COMPLETED];
      if (![self isReliable]) {
        [self disableRetransmissionTimer];
        [self startTransactionTimerJWithLong:AndroidGovNistJavaxSipStackSIPTransaction_TIMER_J];
      }
      else {
        [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
        [self startTransactionTimerJWithLong:0];
      }
      [self cleanUpOnTimer];
    }
  }
  else if (AndroidJavaxSipTransactionState__COMPLETED == [self getRealState]) {
    return false;
  }
  return true;
}

void AndroidGovNistJavaxSipStackSIPServerTransactionImpl_fireReliableResponseRetransmissionTimer(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *self) {
  @try {
    [self resendLastResponseAsBytes];
  }
  @catch (JavaIoIOException *e) {
    [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
    [self raiseErrorEventWithInt:AndroidGovNistJavaxSipStackSIPTransactionErrorEvent_TRANSPORT_ERROR];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPServerTransactionImpl)

@implementation AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl:(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *)outer$
                                                               withNSString:(NSString *)dialogId {
  AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_withNSString_(self, outer$, dialogId);
  return self;
}

- (void)runTask {
  AndroidGovNistJavaxSipStackSIPServerTransactionImpl *serverTransaction = this$0_;
  ticksLeft_--;
  if (ticksLeft_ == -1) {
    [serverTransaction fireRetransmissionTimer];
    self->ticksLeft_ = 2 * ticks_;
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(dialogId_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl:withNSString:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPServerTransactionImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "dialogId_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ticks_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ticksLeft_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipStackSIPServerTransactionImpl;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask = { "RetransmissionAlertTimerTask", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 2, 4, 1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask;
}

@end

void AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_withNSString_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask *self, AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$, NSString *dialogId) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
  self->ticks_ = AndroidGovNistJavaxSipStackSIPTransaction_T1;
  self->ticksLeft_ = self->ticks_;
  JreStrongAssign(&self->dialogId_, dialogId);
}

AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask *new_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_withNSString_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$, NSString *dialogId) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask, initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_withNSString_, outer$, dialogId)
}

AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask *create_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_withNSString_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$, NSString *dialogId) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask, initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_withNSString_, outer$, dialogId)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_RetransmissionAlertTimerTask)

@implementation AndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl:(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *)outer$ {
  AndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(self, outer$);
  return self;
}

- (void)runTask {
  AndroidGovNistJavaxSipStackSIPServerTransactionImpl *serverTransaction = this$0_;
  if ([serverTransaction isTerminated]) {
    [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_)) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:self];
  }
  else {
    ticksLeft_--;
    if (ticksLeft_ == -1) {
      AndroidGovNistJavaxSipStackSIPServerTransactionImpl_fireReliableResponseRetransmissionTimer(serverTransaction);
      self->ticksLeft_ = 2 * ticks_;
      self->ticks_ = self->ticksLeft_;
      if (self->ticksLeft_ >= AndroidGovNistJavaxSipStackSIPTransaction_TIMER_H) {
        [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_)) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:self];
        [this$0_ setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
        [this$0_ fireTimeoutTimer];
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPServerTransactionImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "ticks_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ticksLeft_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPServerTransactionImpl;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask = { "ProvisionalResponseTask", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 2, 3, 0, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask;
}

@end

void AndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask *self, AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
  self->ticks_ = AndroidGovNistJavaxSipStackSIPTransaction_T1;
  self->ticksLeft_ = self->ticks_;
}

AndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask *new_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask, initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_, outer$)
}

AndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask *create_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask, initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_ProvisionalResponseTask)

@implementation AndroidGovNistJavaxSipStackSIPServerTransactionImpl_SendTrying

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl:(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *)outer$ {
  AndroidGovNistJavaxSipStackSIPServerTransactionImpl_SendTrying_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(self, outer$);
  return self;
}

- (void)runTask {
  AndroidGovNistJavaxSipStackSIPServerTransactionImpl *serverTransaction = this$0_;
  jint realState = [serverTransaction getRealState];
  if (realState < 0 || AndroidJavaxSipTransactionState__TRYING == realState) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, logger))) debugWithNSString:JreStrcat("$I", @" sending Trying current state = ", [serverTransaction getRealState])];
    @try {
      [serverTransaction sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:[((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk([serverTransaction getOriginalRequest])) createResponseWithInt:100 withNSString:@"Trying"]];
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, logger))) debugWithNSString:JreStrcat("$I", @" trying sent ", [serverTransaction getRealState])];
    }
    @catch (JavaIoIOException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, logger))) errorWithNSString:@"IO error sending  TRYING"];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPServerTransactionImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPServerTransactionImpl;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPServerTransactionImpl_SendTrying = { "SendTrying", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 2, 1, 0, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_SendTrying;
}

@end

void AndroidGovNistJavaxSipStackSIPServerTransactionImpl_SendTrying_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_SendTrying *self, AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, logger))) debugWithNSString:JreStrcat("$@", @"scheduled timer for ", outer$)];
}

AndroidGovNistJavaxSipStackSIPServerTransactionImpl_SendTrying *new_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_SendTrying_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_SendTrying, initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_, outer$)
}

AndroidGovNistJavaxSipStackSIPServerTransactionImpl_SendTrying *create_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_SendTrying_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_SendTrying, initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_SendTrying)

@implementation AndroidGovNistJavaxSipStackSIPServerTransactionImpl_TransactionTimer

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl:(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *)outer$ {
  AndroidGovNistJavaxSipStackSIPServerTransactionImpl_TransactionTimer_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(self, outer$);
  return self;
}

- (void)runTask {
  if ([this$0_ isTerminated]) {
    @try {
      [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_)) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:self];
    }
    @catch (JavaLangIllegalStateException *ex) {
      if (![((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_)) isAlive]) return;
    }
    AndroidGovNistJavaxSipStackSIPStackTimerTask *myTimer = create_AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(this$0_);
    if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_)) getConnectionLingerTimer] != 0) {
      [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_)) getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:myTimer withLong:[((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_)) getConnectionLingerTimer] * 1000];
    }
    else {
      [myTimer runTask];
    }
  }
  else {
    [this$0_ fireTimer];
  }
  if (this$0_->originalRequest_ != nil) {
    [this$0_->originalRequest_ cleanUp];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPServerTransactionImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPServerTransactionImpl;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPServerTransactionImpl_TransactionTimer = { "TransactionTimer", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 2, 1, 0, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_TransactionTimer;
}

@end

void AndroidGovNistJavaxSipStackSIPServerTransactionImpl_TransactionTimer_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_TransactionTimer *self, AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, logger))) debugWithNSString:JreStrcat("$$", @"TransactionTimer() : ", [outer$ getTransactionId])];
}

AndroidGovNistJavaxSipStackSIPServerTransactionImpl_TransactionTimer *new_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_TransactionTimer_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_TransactionTimer, initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_, outer$)
}

AndroidGovNistJavaxSipStackSIPServerTransactionImpl_TransactionTimer *create_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_TransactionTimer_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_TransactionTimer, initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_TransactionTimer)

@implementation AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl:(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *)outer$ {
  AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(self, outer$);
  return self;
}

- (void)runTask {
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPServerTransactionImpl, logger))) debugWithNSString:JreStrcat("$$", @"executing TransactionTimerJ() : ", [this$0_ getTransactionId])];
  [this$0_ fireTimeoutTimer];
  [this$0_ cleanUp];
  if (this$0_->originalRequest_ != nil) {
    [this$0_->originalRequest_ cleanUp];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPServerTransactionImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPServerTransactionImpl;", "startTransactionTimerJWithLong:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1;
}

@end

void AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1 *self, AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
}

AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1 *new_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1, initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_, outer$)
}

AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1 *create_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_(AndroidGovNistJavaxSipStackSIPServerTransactionImpl *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPServerTransactionImpl_1, initWithAndroidGovNistJavaxSipStackSIPServerTransactionImpl_, outer$)
}
