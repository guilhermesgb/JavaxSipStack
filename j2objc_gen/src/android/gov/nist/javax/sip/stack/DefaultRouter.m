//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/DefaultRouter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/core/net/AddressResolver.h"
#include "android/gov/nist/javax/sip/address/AddressImpl.h"
#include "android/gov/nist/javax/sip/address/GenericURI.h"
#include "android/gov/nist/javax/sip/address/ParameterNames.h"
#include "android/gov/nist/javax/sip/address/SipUri.h"
#include "android/gov/nist/javax/sip/header/RequestLine.h"
#include "android/gov/nist/javax/sip/header/Route.h"
#include "android/gov/nist/javax/sip/header/RouteList.h"
#include "android/gov/nist/javax/sip/message/SIPRequest.h"
#include "android/gov/nist/javax/sip/stack/DefaultRouter.h"
#include "android/gov/nist/javax/sip/stack/HopImpl.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/javax/sip/ListeningPoint.h"
#include "android/javax/sip/SipException.h"
#include "android/javax/sip/SipStack.h"
#include "android/javax/sip/address/Address.h"
#include "android/javax/sip/address/Hop.h"
#include "android/javax/sip/address/SipURI.h"
#include "android/javax/sip/address/URI.h"
#include "android/javax/sip/header/Header.h"
#include "android/javax/sip/header/ViaHeader.h"
#include "android/javax/sip/message/Request.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/LinkedList.h"
#include "java/util/ListIterator.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface AndroidGovNistJavaxSipStackDefaultRouter () {
 @public
  AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack_;
  id<AndroidJavaxSipAddressHop> defaultRoute_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackDefaultRouter, sipStack_, AndroidGovNistJavaxSipStackSIPTransactionStack *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackDefaultRouter, defaultRoute_, id<AndroidJavaxSipAddressHop>)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackDefaultRouter_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackDefaultRouter_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackDefaultRouter_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackDefaultRouter, logger, id<OrgSlf4jLogger>)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackDefaultRouter_init(AndroidGovNistJavaxSipStackDefaultRouter *self);

__attribute__((unused)) static AndroidGovNistJavaxSipStackDefaultRouter *new_AndroidGovNistJavaxSipStackDefaultRouter_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackDefaultRouter *create_AndroidGovNistJavaxSipStackDefaultRouter_init();

__attribute__((unused)) static id<AndroidJavaxSipAddressHop> AndroidGovNistJavaxSipStackDefaultRouter_createHopWithAndroidJavaxSipAddressSipURI_withAndroidJavaxSipMessageRequest_(AndroidGovNistJavaxSipStackDefaultRouter *self, id<AndroidJavaxSipAddressSipURI> sipUri, id<AndroidJavaxSipMessageRequest> request);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackDefaultRouter)

@implementation AndroidGovNistJavaxSipStackDefaultRouter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackDefaultRouter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithAndroidJavaxSipSipStack:(id<AndroidJavaxSipSipStack>)sipStack
                                   withNSString:(NSString *)defaultRoute {
  AndroidGovNistJavaxSipStackDefaultRouter_initWithAndroidJavaxSipSipStack_withNSString_(self, sipStack, defaultRoute);
  return self;
}

- (id<AndroidJavaxSipAddressHop>)getNextHopWithAndroidJavaxSipMessageRequest:(id<AndroidJavaxSipMessageRequest>)request {
  AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class]);
  AndroidGovNistJavaxSipHeaderRequestLine *requestLine = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getRequestLine];
  if (requestLine == nil) {
    return defaultRoute_;
  }
  id<AndroidJavaxSipAddressURI> requestURI = [requestLine getUri];
  if (requestURI == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Bad message: Null requestURI");
  AndroidGovNistJavaxSipHeaderRouteList *routes = [sipRequest getRouteHeaders];
  if (routes != nil && [routes getFirst] != nil) {
    AndroidGovNistJavaxSipHeaderRoute *route = (AndroidGovNistJavaxSipHeaderRoute *) cast_chk([routes getFirst], [AndroidGovNistJavaxSipHeaderRoute class]);
    id<AndroidJavaxSipAddressURI> uri = [((id<AndroidJavaxSipAddressAddress>) nil_chk([((AndroidGovNistJavaxSipHeaderRoute *) nil_chk(route)) getAddress])) getURI];
    if ([((id<AndroidJavaxSipAddressURI>) nil_chk(uri)) isSipURI]) {
      id<AndroidJavaxSipAddressSipURI> sipUri = (id<AndroidJavaxSipAddressSipURI>) cast_check(uri, AndroidJavaxSipAddressSipURI_class_());
      if (![sipUri hasLrParam]) {
        [self fixStrictRoutingWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackDefaultRouter_logger)) debugWithNSString:@"Route post processing fixed strict routing"];
      }
      id<AndroidJavaxSipAddressHop> hop = AndroidGovNistJavaxSipStackDefaultRouter_createHopWithAndroidJavaxSipAddressSipURI_withAndroidJavaxSipMessageRequest_(self, sipUri, request);
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackDefaultRouter_logger)) debugWithNSString:JreStrcat("$@", @"NextHop based on Route:", hop)];
      return hop;
    }
    else {
      @throw create_AndroidJavaxSipSipException_initWithNSString_(@"First Route not a SIP URI");
    }
  }
  else if ([requestURI isSipURI] && [((id<AndroidJavaxSipAddressSipURI>) cast_check(requestURI, AndroidJavaxSipAddressSipURI_class_())) getMAddrParam] != nil) {
    id<AndroidJavaxSipAddressHop> hop = AndroidGovNistJavaxSipStackDefaultRouter_createHopWithAndroidJavaxSipAddressSipURI_withAndroidJavaxSipMessageRequest_(self, (id<AndroidJavaxSipAddressSipURI>) cast_check(requestURI, AndroidJavaxSipAddressSipURI_class_()), request);
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackDefaultRouter_logger)) debugWithNSString:JreStrcat("$$", @"Using request URI maddr to route the request = ", [((id<AndroidJavaxSipAddressHop>) nil_chk(hop)) description])];
    return hop;
  }
  else if (defaultRoute_ != nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackDefaultRouter_logger)) debugWithNSString:JreStrcat("$$", @"Using outbound proxy to route the request = ", [defaultRoute_ description])];
    return defaultRoute_;
  }
  else if ([requestURI isSipURI]) {
    id<AndroidJavaxSipAddressHop> hop = AndroidGovNistJavaxSipStackDefaultRouter_createHopWithAndroidJavaxSipAddressSipURI_withAndroidJavaxSipMessageRequest_(self, (id<AndroidJavaxSipAddressSipURI>) cast_check(requestURI, AndroidJavaxSipAddressSipURI_class_()), request);
    if (hop != nil) [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackDefaultRouter_logger)) debugWithNSString:JreStrcat("$$", @"Used request-URI for nextHop = ", [hop description])];
    else {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackDefaultRouter_logger)) debugWithNSString:@"returning null hop -- loop detected"];
    }
    return hop;
  }
  else {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithNSString_withOrgSlf4jLogger_(@"Unexpected non-sip URI", AndroidGovNistJavaxSipStackDefaultRouter_logger);
    return nil;
  }
}

- (void)fixStrictRoutingWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)req {
  AndroidGovNistJavaxSipHeaderRouteList *routes = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(req)) getRouteHeaders];
  AndroidGovNistJavaxSipHeaderRoute *first = (AndroidGovNistJavaxSipHeaderRoute *) cast_chk([((AndroidGovNistJavaxSipHeaderRouteList *) nil_chk(routes)) getFirst], [AndroidGovNistJavaxSipHeaderRoute class]);
  AndroidGovNistJavaxSipAddressSipUri *firstUri = (AndroidGovNistJavaxSipAddressSipUri *) cast_chk([((id<AndroidJavaxSipAddressAddress>) nil_chk([((AndroidGovNistJavaxSipHeaderRoute *) nil_chk(first)) getAddress])) getURI], [AndroidGovNistJavaxSipAddressSipUri class]);
  [routes removeFirst];
  AndroidGovNistJavaxSipAddressAddressImpl *addr = create_AndroidGovNistJavaxSipAddressAddressImpl_init();
  [addr setAddessWithAndroidJavaxSipAddressURI:[req getRequestURI]];
  AndroidGovNistJavaxSipHeaderRoute *route = create_AndroidGovNistJavaxSipHeaderRoute_initWithAndroidGovNistJavaxSipAddressAddressImpl_(addr);
  [routes addWithId:route];
  [req setRequestURIWithAndroidJavaxSipAddressURI:firstUri];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackDefaultRouter_logger)) debugWithNSString:JreStrcat("$@", @"post: fixStrictRouting", req)];
}

- (id<AndroidJavaxSipAddressHop>)createHopWithAndroidJavaxSipAddressSipURI:(id<AndroidJavaxSipAddressSipURI>)sipUri
                                         withAndroidJavaxSipMessageRequest:(id<AndroidJavaxSipMessageRequest>)request {
  return AndroidGovNistJavaxSipStackDefaultRouter_createHopWithAndroidJavaxSipAddressSipURI_withAndroidJavaxSipMessageRequest_(self, sipUri, request);
}

- (id<AndroidJavaxSipAddressHop>)getOutboundProxy {
  return self->defaultRoute_;
}

- (id<JavaUtilListIterator>)getNextHopsWithAndroidJavaxSipMessageRequest:(id<AndroidJavaxSipMessageRequest>)request {
  @try {
    JavaUtilLinkedList *llist = create_JavaUtilLinkedList_init();
    [llist addWithId:[self getNextHopWithAndroidJavaxSipMessageRequest:request]];
    return [llist listIterator];
  }
  @catch (AndroidJavaxSipSipException *ex) {
    return nil;
  }
}

- (void)dealloc {
  RELEASE_(sipStack_);
  RELEASE_(defaultRoute_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipAddressHop;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipAddressHop;", 0x14, 6, 7, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipAddressHop;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilListIterator;", 0x1, 8, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithAndroidJavaxSipSipStack:withNSString:);
  methods[2].selector = @selector(getNextHopWithAndroidJavaxSipMessageRequest:);
  methods[3].selector = @selector(fixStrictRoutingWithAndroidGovNistJavaxSipMessageSIPRequest:);
  methods[4].selector = @selector(createHopWithAndroidJavaxSipAddressSipURI:withAndroidJavaxSipMessageRequest:);
  methods[5].selector = @selector(getOutboundProxy);
  methods[6].selector = @selector(getNextHopsWithAndroidJavaxSipMessageRequest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 9, -1, -1 },
    { "sipStack_", "LAndroidGovNistJavaxSipStackSIPTransactionStack;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultRoute_", "LAndroidJavaxSipAddressHop;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidJavaxSipSipStack;LNSString;", "getNextHop", "LAndroidJavaxSipMessageRequest;", "LAndroidJavaxSipSipException;", "fixStrictRouting", "LAndroidGovNistJavaxSipMessageSIPRequest;", "createHop", "LAndroidJavaxSipAddressSipURI;LAndroidJavaxSipMessageRequest;", "getNextHops", &AndroidGovNistJavaxSipStackDefaultRouter_logger };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackDefaultRouter = { "DefaultRouter", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackDefaultRouter;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackDefaultRouter class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackDefaultRouter_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackDefaultRouter_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackDefaultRouter)
  }
}

@end

void AndroidGovNistJavaxSipStackDefaultRouter_init(AndroidGovNistJavaxSipStackDefaultRouter *self) {
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackDefaultRouter *new_AndroidGovNistJavaxSipStackDefaultRouter_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackDefaultRouter, init)
}

AndroidGovNistJavaxSipStackDefaultRouter *create_AndroidGovNistJavaxSipStackDefaultRouter_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackDefaultRouter, init)
}

void AndroidGovNistJavaxSipStackDefaultRouter_initWithAndroidJavaxSipSipStack_withNSString_(AndroidGovNistJavaxSipStackDefaultRouter *self, id<AndroidJavaxSipSipStack> sipStack, NSString *defaultRoute) {
  NSObject_init(self);
  JreStrongAssign(&self->sipStack_, (AndroidGovNistJavaxSipStackSIPTransactionStack *) cast_chk(sipStack, [AndroidGovNistJavaxSipStackSIPTransactionStack class]));
  if (defaultRoute != nil) {
    @try {
      JreStrongAssign(&self->defaultRoute_, [((id<AndroidGovNistCoreNetAddressResolver>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getAddressResolver])) resolveAddressWithAndroidJavaxSipAddressHop:(create_AndroidGovNistJavaxSipStackHopImpl_initWithNSString_(defaultRoute))]);
    }
    @catch (JavaLangIllegalArgumentException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackDefaultRouter_logger)) errorWithNSString:@"Invalid default route specification - need host:port/transport"];
      @throw ex;
    }
  }
}

AndroidGovNistJavaxSipStackDefaultRouter *new_AndroidGovNistJavaxSipStackDefaultRouter_initWithAndroidJavaxSipSipStack_withNSString_(id<AndroidJavaxSipSipStack> sipStack, NSString *defaultRoute) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackDefaultRouter, initWithAndroidJavaxSipSipStack_withNSString_, sipStack, defaultRoute)
}

AndroidGovNistJavaxSipStackDefaultRouter *create_AndroidGovNistJavaxSipStackDefaultRouter_initWithAndroidJavaxSipSipStack_withNSString_(id<AndroidJavaxSipSipStack> sipStack, NSString *defaultRoute) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackDefaultRouter, initWithAndroidJavaxSipSipStack_withNSString_, sipStack, defaultRoute)
}

id<AndroidJavaxSipAddressHop> AndroidGovNistJavaxSipStackDefaultRouter_createHopWithAndroidJavaxSipAddressSipURI_withAndroidJavaxSipMessageRequest_(AndroidGovNistJavaxSipStackDefaultRouter *self, id<AndroidJavaxSipAddressSipURI> sipUri, id<AndroidJavaxSipMessageRequest> request) {
  NSString *transport = [((id<AndroidJavaxSipAddressSipURI>) nil_chk(sipUri)) isSecure] ? AndroidGovNistJavaxSipAddressParameterNames_TLS : [sipUri getTransportParam];
  if (transport == nil) {
    id<AndroidJavaxSipHeaderViaHeader> via = (id<AndroidJavaxSipHeaderViaHeader>) cast_check([((id<AndroidJavaxSipMessageRequest>) nil_chk(request)) getHeaderWithNSString:AndroidJavaxSipHeaderViaHeader_NAME], AndroidJavaxSipHeaderViaHeader_class_());
    if (via != nil) {
      transport = [via getTransport];
    }
    if (transport == nil) {
      transport = AndroidJavaxSipListeningPoint_UDP;
    }
  }
  jint port;
  if ([sipUri getPort] != -1) {
    port = [sipUri getPort];
  }
  else {
    if ([((NSString *) nil_chk(transport)) java_equalsIgnoreCase:AndroidGovNistJavaxSipAddressParameterNames_TLS]) port = 5061;
    else port = 5060;
  }
  NSString *host = [sipUri getMAddrParam] != nil ? [sipUri getMAddrParam] : [sipUri getHost];
  id<AndroidGovNistCoreNetAddressResolver> addressResolver = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getAddressResolver];
  return [((id<AndroidGovNistCoreNetAddressResolver>) nil_chk(addressResolver)) resolveAddressWithAndroidJavaxSipAddressHop:create_AndroidGovNistJavaxSipStackHopImpl_initWithNSString_withInt_withNSString_(host, port, transport)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackDefaultRouter)
