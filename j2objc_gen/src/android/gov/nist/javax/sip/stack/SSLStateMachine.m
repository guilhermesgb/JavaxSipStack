//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/SSLStateMachine.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/ClientTransactionExt.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/TlsSecurityPolicy.h"
#include "android/gov/nist/javax/sip/stack/ByteBufferFactory.h"
#include "android/gov/nist/javax/sip/stack/ClientAuthType.h"
#include "android/gov/nist/javax/sip/stack/HandshakeCompletedListenerImpl.h"
#include "android/gov/nist/javax/sip/stack/NioTlsChannelInterface.h"
#include "android/gov/nist/javax/sip/stack/NioTlsMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/SSLStateMachine.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/Runnable.h"
#include "java/lang/SecurityException.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/util/LinkedList.h"
#include "java/util/Queue.h"
#include "javax/net/ssl/SSLEngine.h"
#include "javax/net/ssl/SSLEngineResult.h"
#include "javax/net/ssl/SSLException.h"
#include "javax/net/ssl/SSLPeerUnverifiedException.h"
#include "javax/net/ssl/SSLSession.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface AndroidGovNistJavaxSipStackSSLStateMachine () {
 @public
  id unwrapLock_;
  id wrapLock_;
}

- (void)wrapNonAppData;

- (void)startBufferWithJavaNioByteBuffer:(JavaNioByteBuffer *)src;

- (void)clearBuffer;

- (JavaNioByteBuffer *)normalizeTlsRecordBufferWithJavaNioByteBuffer:(JavaNioByteBuffer *)src;

- (void)unwrapWithJavaNioByteBuffer:(JavaNioByteBuffer *)src
              withJavaNioByteBuffer:(JavaNioByteBuffer *)dst;

- (void)runDelegatedTasksWithJavaxNetSslSSLEngineResult:(JavaxNetSslSSLEngineResult *)result;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSSLStateMachine, unwrapLock_, id)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSSLStateMachine, wrapLock_, id)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSSLStateMachine_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSSLStateMachine_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSSLStateMachine_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackSSLStateMachine, logger, id<OrgSlf4jLogger>)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSSLStateMachine_wrapNonAppData(AndroidGovNistJavaxSipStackSSLStateMachine *self);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSSLStateMachine_startBufferWithJavaNioByteBuffer_(AndroidGovNistJavaxSipStackSSLStateMachine *self, JavaNioByteBuffer *src);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSSLStateMachine_clearBuffer(AndroidGovNistJavaxSipStackSSLStateMachine *self);

__attribute__((unused)) static JavaNioByteBuffer *AndroidGovNistJavaxSipStackSSLStateMachine_normalizeTlsRecordBufferWithJavaNioByteBuffer_(AndroidGovNistJavaxSipStackSSLStateMachine *self, JavaNioByteBuffer *src);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSSLStateMachine_unwrapWithJavaNioByteBuffer_withJavaNioByteBuffer_(AndroidGovNistJavaxSipStackSSLStateMachine *self, JavaNioByteBuffer *src, JavaNioByteBuffer *dst);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSSLStateMachine_runDelegatedTasksWithJavaxNetSslSSLEngineResult_(AndroidGovNistJavaxSipStackSSLStateMachine *self, JavaxNetSslSSLEngineResult *result);

@interface AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback : NSObject

@end

@interface AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem () {
 @public
  JavaNioByteBuffer *message_;
  id<AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback> callback_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem, message_, JavaNioByteBuffer *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem, callback_, id<AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback>)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackSSLStateMachine)

JavaNioByteBuffer *AndroidGovNistJavaxSipStackSSLStateMachine_EMPTY_BUFFER;

@implementation AndroidGovNistJavaxSipStackSSLStateMachine

- (instancetype)initWithJavaxNetSslSSLEngine:(JavaxNetSslSSLEngine *)sslEngine
withAndroidGovNistJavaxSipStackNioTlsChannelInterface:(id<AndroidGovNistJavaxSipStackNioTlsChannelInterface>)channel {
  AndroidGovNistJavaxSipStackSSLStateMachine_initWithJavaxNetSslSSLEngine_withAndroidGovNistJavaxSipStackNioTlsChannelInterface_(self, sslEngine, channel);
  return self;
}

- (void)wrapRemaining {
  [self wrapWithJavaNioByteBuffer:nil withJavaNioByteBuffer:[((id<AndroidGovNistJavaxSipStackNioTlsChannelInterface>) nil_chk(channel_)) prepareEncryptedDataBuffer] withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback:nil];
}

- (void)wrapWithJavaNioByteBuffer:(JavaNioByteBuffer *)src
            withJavaNioByteBuffer:(JavaNioByteBuffer *)dst
withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback:(id<AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback>)callback {
  @synchronized(wrapLock_) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:JreStrcat("$@$I", @"Wrapping ", src, @", buffers size ", [((id<JavaUtilQueue>) nil_chk(pendingOutboundBuffers_)) size])];
    if (src != nil) {
      [((id<JavaUtilQueue>) nil_chk(pendingOutboundBuffers_)) offerWithId:create_AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem_initWithJavaNioByteBuffer_withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback_(src, callback)];
    }
    jint iter = 0;
    while (true) {
      iter++;
      AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem *currentBuffer = [((id<JavaUtilQueue>) nil_chk(pendingOutboundBuffers_)) peek];
      if (currentBuffer == nil) break;
      JavaxNetSslSSLEngineResult *result;
      @try {
        result = [((JavaxNetSslSSLEngine *) nil_chk(sslEngine_)) wrapWithJavaNioByteBuffer:currentBuffer->message_ withJavaNioByteBuffer:dst];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:JreStrcat("$@$I", @"Wrap result ", result, @" buffers size ", [((id<JavaUtilQueue>) nil_chk(pendingOutboundBuffers_)) size])];
      }
      @finally {
        if (![((JavaNioByteBuffer *) nil_chk(currentBuffer->message_)) hasRemaining]) {
          [((id<JavaUtilQueue>) nil_chk(pendingOutboundBuffers_)) remove];
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:JreStrcat("$I$@", @"REMOVED item from encryption queue because it has no more data, all is done, buffers size now is ", [((id<JavaUtilQueue>) nil_chk(pendingOutboundBuffers_)) size], @" current buffer is ", currentBuffer)];
        }
      }
      jint remaining = [((JavaNioByteBuffer *) nil_chk(currentBuffer->message_)) remaining];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:JreStrcat("$I$I", @"Remaining ", remaining, @" queue size is ", [((id<JavaUtilQueue>) nil_chk(pendingOutboundBuffers_)) size])];
      if ([((JavaxNetSslSSLEngineResult *) nil_chk(result)) bytesProduced] > 0) {
        [((JavaNioByteBuffer *) nil_chk(dst)) flip];
        IOSByteArray *bytes = [IOSByteArray arrayWithLength:[dst remaining]];
        [dst getWithByteArray:bytes];
        if ([currentBuffer getCallBack] != nil) {
          [((id<AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback>) nil_chk([currentBuffer getCallBack])) doSendWithByteArray:bytes];
        }
        else {
          [self sendSSLMetadataWithByteArray:bytes];
        }
        [dst clear];
      }
      else {
        switch ([[result getHandshakeStatus] ordinal]) {
          case JavaxNetSslSSLEngineResult_HandshakeStatus_Enum_NEED_WRAP:
          if ([((JavaNioByteBuffer *) nil_chk(currentBuffer->message_)) hasRemaining]) {
            break;
          }
          else {
            goto break_loop;
          }
          case JavaxNetSslSSLEngineResult_HandshakeStatus_Enum_NEED_UNWRAP:
          goto break_loop;
          case JavaxNetSslSSLEngineResult_HandshakeStatus_Enum_NEED_TASK:
          AndroidGovNistJavaxSipStackSSLStateMachine_runDelegatedTasksWithJavaxNetSslSSLEngineResult_(self, result);
          break;
          case JavaxNetSslSSLEngineResult_HandshakeStatus_Enum_FINISHED:
          if ([channel_ isKindOfClass:[AndroidGovNistJavaxSipStackNioTlsMessageChannel class]]) {
            [((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk(channel_, [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) setHandshakeCompletedWithBoolean:true];
            if ([((JavaxNetSslSSLEngine *) nil_chk(sslEngine_)) getSession] != nil) {
              if (![((AndroidGovNistJavaxSipStackClientAuthType *) nil_chk(JreLoadEnum(AndroidGovNistJavaxSipStackClientAuthType, Disabled))) isEqual:[((AndroidGovNistJavaxSipSipStackImpl *) nil_chk([((id<AndroidGovNistJavaxSipStackNioTlsChannelInterface>) nil_chk(channel_)) getSIPStack])) getClientAuth]] && ![((AndroidGovNistJavaxSipStackClientAuthType *) nil_chk(JreLoadEnum(AndroidGovNistJavaxSipStackClientAuthType, DisabledAll))) isEqual:[((AndroidGovNistJavaxSipSipStackImpl *) nil_chk([((id<AndroidGovNistJavaxSipStackNioTlsChannelInterface>) nil_chk(channel_)) getSIPStack])) getClientAuth]]) {
                @try {
                  [((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk(channel_, [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) getHandshakeCompletedListener])) setPeerCertificatesWithJavaSecurityCertCertificateArray:[((id<JavaxNetSslSSLSession>) nil_chk([((JavaxNetSslSSLEngine *) nil_chk(sslEngine_)) getSession])) getPeerCertificates]];
                }
                @catch (JavaxNetSslSSLPeerUnverifiedException *e) {
                  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:@"sslEngine.getSession().getPeerCertificates() are not available, which is normal if running with gov.nist.javax.sip.TLS_CLIENT_AUTH_TYPE=Disabled"];
                }
              }
              [((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk(channel_, [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) getHandshakeCompletedListener])) setLocalCertificatesWithJavaSecurityCertCertificateArray:[((id<JavaxNetSslSSLSession>) nil_chk([((JavaxNetSslSSLEngine *) nil_chk(sslEngine_)) getSession])) getLocalCertificates]];
              [((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk(channel_, [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) getHandshakeCompletedListener])) setCipherSuiteWithNSString:[((id<JavaxNetSslSSLSession>) nil_chk([((JavaxNetSslSSLEngine *) nil_chk(sslEngine_)) getSession])) getCipherSuite]];
            }
          }
          break;
          case JavaxNetSslSSLEngineResult_HandshakeStatus_Enum_NOT_HANDSHAKING:
          goto break_loop;
          default:
          break;
        }
      }
    }
    break_loop: ;
  }
}

- (void)wrapNonAppData {
  AndroidGovNistJavaxSipStackSSLStateMachine_wrapNonAppData(self);
}

- (void)unwrapWithJavaNioByteBuffer:(JavaNioByteBuffer *)src {
  JavaNioByteBuffer *outputBuffer = [((id<AndroidGovNistJavaxSipStackNioTlsChannelInterface>) nil_chk(channel_)) prepareAppDataBuffer];
  AndroidGovNistJavaxSipStackSSLStateMachine_unwrapWithJavaNioByteBuffer_withJavaNioByteBuffer_(self, src, outputBuffer);
}

- (void)startBufferWithJavaNioByteBuffer:(JavaNioByteBuffer *)src {
  AndroidGovNistJavaxSipStackSSLStateMachine_startBufferWithJavaNioByteBuffer_(self, src);
}

- (void)clearBuffer {
  AndroidGovNistJavaxSipStackSSLStateMachine_clearBuffer(self);
}

- (JavaNioByteBuffer *)normalizeTlsRecordBufferWithJavaNioByteBuffer:(JavaNioByteBuffer *)src {
  return AndroidGovNistJavaxSipStackSSLStateMachine_normalizeTlsRecordBufferWithJavaNioByteBuffer_(self, src);
}

- (void)unwrapWithJavaNioByteBuffer:(JavaNioByteBuffer *)src
              withJavaNioByteBuffer:(JavaNioByteBuffer *)dst {
  AndroidGovNistJavaxSipStackSSLStateMachine_unwrapWithJavaNioByteBuffer_withJavaNioByteBuffer_(self, src, dst);
}

- (void)runDelegatedTasksWithJavaxNetSslSSLEngineResult:(JavaxNetSslSSLEngineResult *)result {
  AndroidGovNistJavaxSipStackSSLStateMachine_runDelegatedTasksWithJavaxNetSslSSLEngineResult_(self, result);
}

- (void)sendSSLMetadataWithByteArray:(IOSByteArray *)msg {
  [((id<AndroidGovNistJavaxSipStackNioTlsChannelInterface>) nil_chk(channel_)) sendEncryptedDataWithByteArray:msg];
}

- (void)dealloc {
  RELEASE_(sslEngine_);
  RELEASE_(pendingOutboundBuffers_);
  RELEASE_(channel_);
  RELEASE_(tlsRecordBuffer_);
  RELEASE_(unwrapLock_);
  RELEASE_(wrapLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNioByteBuffer;", 0x2, 8, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 9, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxNetSslSSLEngine:withAndroidGovNistJavaxSipStackNioTlsChannelInterface:);
  methods[1].selector = @selector(wrapRemaining);
  methods[2].selector = @selector(wrapWithJavaNioByteBuffer:withJavaNioByteBuffer:withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback:);
  methods[3].selector = @selector(wrapNonAppData);
  methods[4].selector = @selector(unwrapWithJavaNioByteBuffer:);
  methods[5].selector = @selector(startBufferWithJavaNioByteBuffer:);
  methods[6].selector = @selector(clearBuffer);
  methods[7].selector = @selector(normalizeTlsRecordBufferWithJavaNioByteBuffer:);
  methods[8].selector = @selector(unwrapWithJavaNioByteBuffer:withJavaNioByteBuffer:);
  methods[9].selector = @selector(runDelegatedTasksWithJavaxNetSslSSLEngineResult:);
  methods[10].selector = @selector(sendSSLMetadataWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 14, -1, -1 },
    { "EMPTY_BUFFER", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "sslEngine_", "LJavaxNetSslSSLEngine;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "pendingOutboundBuffers_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x4, -1, -1, 16, -1 },
    { "channel_", "LAndroidGovNistJavaxSipStackNioTlsChannelInterface;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "tlsRecordBuffer_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "unwrapLock_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "wrapLock_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxNetSslSSLEngine;LAndroidGovNistJavaxSipStackNioTlsChannelInterface;", "LJavaIoIOException;", "wrap", "LJavaNioByteBuffer;LJavaNioByteBuffer;LAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback;", "LJavaLangException;", "unwrap", "LJavaNioByteBuffer;", "startBuffer", "normalizeTlsRecordBuffer", "LJavaNioByteBuffer;LJavaNioByteBuffer;", "runDelegatedTasks", "LJavaxNetSslSSLEngineResult;", "sendSSLMetadata", "[B", &AndroidGovNistJavaxSipStackSSLStateMachine_logger, &AndroidGovNistJavaxSipStackSSLStateMachine_EMPTY_BUFFER, "Ljava/util/Queue<Landroid/gov/nist/javax/sip/stack/SSLStateMachine$MessageSendItem;>;", "LAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback;LAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSSLStateMachine = { "SSLStateMachine", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 11, 8, -1, 17, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSSLStateMachine;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackSSLStateMachine class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackSSLStateMachine_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackSSLStateMachine_class_()));
    JreStrongAssign(&AndroidGovNistJavaxSipStackSSLStateMachine_EMPTY_BUFFER, JavaNioByteBuffer_wrapWithByteArray_([IOSByteArray arrayWithBytes:(jbyte[]){  } count:0]));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackSSLStateMachine)
  }
}

@end

void AndroidGovNistJavaxSipStackSSLStateMachine_initWithJavaxNetSslSSLEngine_withAndroidGovNistJavaxSipStackNioTlsChannelInterface_(AndroidGovNistJavaxSipStackSSLStateMachine *self, JavaxNetSslSSLEngine *sslEngine, id<AndroidGovNistJavaxSipStackNioTlsChannelInterface> channel) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->pendingOutboundBuffers_, new_JavaUtilLinkedList_init());
  JreStrongAssignAndConsume(&self->unwrapLock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->wrapLock_, new_NSObject_init());
  JreStrongAssign(&self->sslEngine_, sslEngine);
  JreStrongAssign(&self->channel_, channel);
}

AndroidGovNistJavaxSipStackSSLStateMachine *new_AndroidGovNistJavaxSipStackSSLStateMachine_initWithJavaxNetSslSSLEngine_withAndroidGovNistJavaxSipStackNioTlsChannelInterface_(JavaxNetSslSSLEngine *sslEngine, id<AndroidGovNistJavaxSipStackNioTlsChannelInterface> channel) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSSLStateMachine, initWithJavaxNetSslSSLEngine_withAndroidGovNistJavaxSipStackNioTlsChannelInterface_, sslEngine, channel)
}

AndroidGovNistJavaxSipStackSSLStateMachine *create_AndroidGovNistJavaxSipStackSSLStateMachine_initWithJavaxNetSslSSLEngine_withAndroidGovNistJavaxSipStackNioTlsChannelInterface_(JavaxNetSslSSLEngine *sslEngine, id<AndroidGovNistJavaxSipStackNioTlsChannelInterface> channel) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSSLStateMachine, initWithJavaxNetSslSSLEngine_withAndroidGovNistJavaxSipStackNioTlsChannelInterface_, sslEngine, channel)
}

void AndroidGovNistJavaxSipStackSSLStateMachine_wrapNonAppData(AndroidGovNistJavaxSipStackSSLStateMachine *self) {
  JavaNioByteBuffer *encryptedDataBuffer = [((id<AndroidGovNistJavaxSipStackNioTlsChannelInterface>) nil_chk(self->channel_)) prepareEncryptedDataBuffer];
  JavaxNetSslSSLEngineResult *result;
  @try {
    loop: while (true) {
      result = [((JavaxNetSslSSLEngine *) nil_chk(self->sslEngine_)) wrapWithJavaNioByteBuffer:AndroidGovNistJavaxSipStackSSLStateMachine_EMPTY_BUFFER withJavaNioByteBuffer:encryptedDataBuffer];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:JreStrcat("$@$I", @"NonAppWrap result ", result, @" buffers size ", [((id<JavaUtilQueue>) nil_chk(self->pendingOutboundBuffers_)) size])];
      if ([((JavaxNetSslSSLEngineResult *) nil_chk(result)) bytesProduced] > 0) {
        [((JavaNioByteBuffer *) nil_chk(encryptedDataBuffer)) flip];
        IOSByteArray *msg = [IOSByteArray arrayWithLength:[encryptedDataBuffer remaining]];
        [encryptedDataBuffer getWithByteArray:msg];
        [self sendSSLMetadataWithByteArray:msg];
        [encryptedDataBuffer clear];
      }
      switch ([[result getHandshakeStatus] ordinal]) {
        case JavaxNetSslSSLEngineResult_HandshakeStatus_Enum_FINISHED:
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:@"Handshake complete!"];
        if ([self->channel_ isKindOfClass:[AndroidGovNistJavaxSipStackNioTlsMessageChannel class]]) {
          [((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk(self->channel_, [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) setHandshakeCompletedWithBoolean:true];
          if ([((JavaxNetSslSSLEngine *) nil_chk(self->sslEngine_)) getSession] != nil) {
            if (![((AndroidGovNistJavaxSipStackClientAuthType *) nil_chk(JreLoadEnum(AndroidGovNistJavaxSipStackClientAuthType, Disabled))) isEqual:[((AndroidGovNistJavaxSipSipStackImpl *) nil_chk([((id<AndroidGovNistJavaxSipStackNioTlsChannelInterface>) nil_chk(self->channel_)) getSIPStack])) getClientAuth]] && ![((AndroidGovNistJavaxSipStackClientAuthType *) nil_chk(JreLoadEnum(AndroidGovNistJavaxSipStackClientAuthType, DisabledAll))) isEqual:[((AndroidGovNistJavaxSipSipStackImpl *) nil_chk([((id<AndroidGovNistJavaxSipStackNioTlsChannelInterface>) nil_chk(self->channel_)) getSIPStack])) getClientAuth]]) {
              @try {
                [((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk(self->channel_, [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) getHandshakeCompletedListener])) setPeerCertificatesWithJavaSecurityCertCertificateArray:[((id<JavaxNetSslSSLSession>) nil_chk([((JavaxNetSslSSLEngine *) nil_chk(self->sslEngine_)) getSession])) getPeerCertificates]];
              }
              @catch (JavaxNetSslSSLPeerUnverifiedException *e) {
                [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:@"sslEngine.getSession().getPeerCertificates() are not available, which is normal if running with gov.nist.javax.sip.TLS_CLIENT_AUTH_TYPE=Disabled"];
              }
            }
            [((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk(self->channel_, [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) getHandshakeCompletedListener])) setLocalCertificatesWithJavaSecurityCertCertificateArray:[((id<JavaxNetSslSSLSession>) nil_chk([((JavaxNetSslSSLEngine *) nil_chk(self->sslEngine_)) getSession])) getLocalCertificates]];
            [((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk(self->channel_, [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) getHandshakeCompletedListener])) setCipherSuiteWithNSString:[((id<JavaxNetSslSSLSession>) nil_chk([((JavaxNetSslSSLEngine *) nil_chk(self->sslEngine_)) getSession])) getCipherSuite]];
          }
        }
        break;
        case JavaxNetSslSSLEngineResult_HandshakeStatus_Enum_NEED_TASK:
        AndroidGovNistJavaxSipStackSSLStateMachine_runDelegatedTasksWithJavaxNetSslSSLEngineResult_(self, result);
        break;
      }
      if ([result bytesProduced] == 0) {
        break;
      }
    }
  }
  @catch (JavaxNetSslSSLException *e) {
    @throw e;
  }
  @finally {
  }
}

void AndroidGovNistJavaxSipStackSSLStateMachine_startBufferWithJavaNioByteBuffer_(AndroidGovNistJavaxSipStackSSLStateMachine *self, JavaNioByteBuffer *src) {
  if (self->tlsRecordBuffer_ == nil) {
    JreStrongAssign(&self->tlsRecordBuffer_, [((AndroidGovNistJavaxSipStackByteBufferFactory *) nil_chk(AndroidGovNistJavaxSipStackByteBufferFactory_getInstance())) allocateDirectWithInt:33270]);
    [((JavaNioByteBuffer *) nil_chk(self->tlsRecordBuffer_)) putWithJavaNioByteBuffer:src];
    [((JavaNioByteBuffer *) nil_chk(self->tlsRecordBuffer_)) flip];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:JreStrcat("$@$@", @"Allocated record buffer for reading ", self->tlsRecordBuffer_, @" for src = ", src)];
  }
}

void AndroidGovNistJavaxSipStackSSLStateMachine_clearBuffer(AndroidGovNistJavaxSipStackSSLStateMachine *self) {
  JreStrongAssign(&self->tlsRecordBuffer_, nil);
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:@"Buffer cleared"];
}

JavaNioByteBuffer *AndroidGovNistJavaxSipStackSSLStateMachine_normalizeTlsRecordBufferWithJavaNioByteBuffer_(AndroidGovNistJavaxSipStackSSLStateMachine *self, JavaNioByteBuffer *src) {
  if (self->tlsRecordBuffer_ == nil) {
    return src;
  }
  else {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:JreStrcat("$@$@", @"Normalize buffer ", src, @" into record buffer ", self->tlsRecordBuffer_)];
    [((JavaNioByteBuffer *) nil_chk(self->tlsRecordBuffer_)) positionWithInt:[self->tlsRecordBuffer_ limit]];
    [((JavaNioByteBuffer *) nil_chk(self->tlsRecordBuffer_)) limitWithInt:[self->tlsRecordBuffer_ capacity]];
    [((JavaNioByteBuffer *) nil_chk(self->tlsRecordBuffer_)) putWithJavaNioByteBuffer:src];
    [((JavaNioByteBuffer *) nil_chk(self->tlsRecordBuffer_)) flip];
    return self->tlsRecordBuffer_;
  }
}

void AndroidGovNistJavaxSipStackSSLStateMachine_unwrapWithJavaNioByteBuffer_withJavaNioByteBuffer_(AndroidGovNistJavaxSipStackSSLStateMachine *self, JavaNioByteBuffer *src, JavaNioByteBuffer *dst) {
  @synchronized(self->unwrapLock_) {
    while (true) {
      src = AndroidGovNistJavaxSipStackSSLStateMachine_normalizeTlsRecordBufferWithJavaNioByteBuffer_(self, src);
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:JreStrcat("$@$@", @"Unwrap src ", src, @" dst ", dst)];
      JavaxNetSslSSLEngineResult *result = nil;
      @try {
        result = [((JavaxNetSslSSLEngine *) nil_chk(self->sslEngine_)) unwrapWithJavaNioByteBuffer:src withJavaNioByteBuffer:dst];
      }
      @catch (JavaLangException *e) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:JreStrcat("$@", @"An Exception occured while trying to unwrap the message ", e)];
        @throw e;
      }
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:JreStrcat("$@$I$@$@", @"Unwrap result ", result, @" buffers size ", [((id<JavaUtilQueue>) nil_chk(self->pendingOutboundBuffers_)) size], @" src=", src, @" dst=", dst)];
      if ([((JavaxNetSslSSLEngineResult_Status *) nil_chk([((JavaxNetSslSSLEngineResult *) nil_chk(result)) getStatus])) isEqual:JreLoadEnum(JavaxNetSslSSLEngineResult_Status, BUFFER_UNDERFLOW)]) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:@"Buffer underflow, wait for the next inbound chunk of data to feed the SSL engine"];
        AndroidGovNistJavaxSipStackSSLStateMachine_startBufferWithJavaNioByteBuffer_(self, src);
        break;
      }
      else {
        AndroidGovNistJavaxSipStackSSLStateMachine_clearBuffer(self);
      }
      if ([((JavaxNetSslSSLEngineResult_Status *) nil_chk([result getStatus])) isEqual:JreLoadEnum(JavaxNetSslSSLEngineResult_Status, BUFFER_OVERFLOW)]) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:JreStrcat("$I$I$I$II", @"Buffer overflow , must prepare the buffer again. outNetBuffer remaining: ", [((JavaNioByteBuffer *) nil_chk(dst)) remaining], @" outNetBuffer postion: ", [dst position], @" Packet buffer size: ", [((id<JavaxNetSslSSLSession>) nil_chk([((JavaxNetSslSSLEngine *) nil_chk(self->sslEngine_)) getSession])) getPacketBufferSize], @" new buffer size: ", [((id<JavaxNetSslSSLSession>) nil_chk([((JavaxNetSslSSLEngine *) nil_chk(self->sslEngine_)) getSession])) getPacketBufferSize], [dst position])];
        JavaNioByteBuffer *newBuf = [((id<AndroidGovNistJavaxSipStackNioTlsChannelInterface>) nil_chk(self->channel_)) prepareAppDataBufferWithInt:[((id<JavaxNetSslSSLSession>) nil_chk([((JavaxNetSslSSLEngine *) nil_chk(self->sslEngine_)) getSession])) getPacketBufferSize]];
        dst = newBuf;
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:JreStrcat("$I$I", @" new outNetBuffer remaining: ", [((JavaNioByteBuffer *) nil_chk(dst)) remaining], @" new outNetBuffer postion: ", [dst position])];
        continue;
      }
      if ([result bytesProduced] > 0) {
        [((JavaNioByteBuffer *) nil_chk(dst)) flip];
        IOSByteArray *a = [IOSByteArray arrayWithLength:[dst remaining]];
        [dst getWithByteArray:a];
        [((id<AndroidGovNistJavaxSipStackNioTlsChannelInterface>) nil_chk(self->channel_)) addPlaintextBytesWithByteArray:a];
      }
      switch ([[result getHandshakeStatus] ordinal]) {
        case JavaxNetSslSSLEngineResult_HandshakeStatus_Enum_NEED_UNWRAP:
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:JreStrcat("$Z$@", @"Unwrap has remaining: ", [((JavaNioByteBuffer *) nil_chk(src)) hasRemaining], @" buffer ", src)];
        if ([src hasRemaining]) {
          break;
        }
        else {
          goto break_loop;
        }
        case JavaxNetSslSSLEngineResult_HandshakeStatus_Enum_NEED_WRAP:
        AndroidGovNistJavaxSipStackSSLStateMachine_wrapNonAppData(self);
        break;
        case JavaxNetSslSSLEngineResult_HandshakeStatus_Enum_NEED_TASK:
        AndroidGovNistJavaxSipStackSSLStateMachine_runDelegatedTasksWithJavaxNetSslSSLEngineResult_(self, result);
        break;
        case JavaxNetSslSSLEngineResult_HandshakeStatus_Enum_FINISHED:
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:@"Handshaking just finnished, but has remaining. Will try to wrap the queues app items."];
        [self wrapRemaining];
        if ([((JavaNioByteBuffer *) nil_chk(src)) hasRemaining]) {
          break;
        }
        else {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:@"Handshake passed"];
          if ([self->channel_ isKindOfClass:[AndroidGovNistJavaxSipStackNioTlsMessageChannel class]]) {
            [((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk(self->channel_, [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) setHandshakeCompletedWithBoolean:true];
            if ([((JavaxNetSslSSLEngine *) nil_chk(self->sslEngine_)) getSession] != nil) {
              if (![((AndroidGovNistJavaxSipStackClientAuthType *) nil_chk(JreLoadEnum(AndroidGovNistJavaxSipStackClientAuthType, Disabled))) isEqual:[((AndroidGovNistJavaxSipSipStackImpl *) nil_chk([((id<AndroidGovNistJavaxSipStackNioTlsChannelInterface>) nil_chk(self->channel_)) getSIPStack])) getClientAuth]] && ![((AndroidGovNistJavaxSipStackClientAuthType *) nil_chk(JreLoadEnum(AndroidGovNistJavaxSipStackClientAuthType, DisabledAll))) isEqual:[((AndroidGovNistJavaxSipSipStackImpl *) nil_chk([((id<AndroidGovNistJavaxSipStackNioTlsChannelInterface>) nil_chk(self->channel_)) getSIPStack])) getClientAuth]]) {
                @try {
                  [((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk(self->channel_, [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) getHandshakeCompletedListener])) setPeerCertificatesWithJavaSecurityCertCertificateArray:[((id<JavaxNetSslSSLSession>) nil_chk([((JavaxNetSslSSLEngine *) nil_chk(self->sslEngine_)) getSession])) getPeerCertificates]];
                }
                @catch (JavaxNetSslSSLPeerUnverifiedException *e) {
                  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:@"sslEngine.getSession().getPeerCertificates() are not available, which is normal if running with gov.nist.javax.sip.TLS_CLIENT_AUTH_TYPE=Disabled"];
                }
              }
              [((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk(self->channel_, [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) getHandshakeCompletedListener])) setLocalCertificatesWithJavaSecurityCertCertificateArray:[((id<JavaxNetSslSSLSession>) nil_chk([((JavaxNetSslSSLEngine *) nil_chk(self->sslEngine_)) getSession])) getLocalCertificates]];
              [((AndroidGovNistJavaxSipStackHandshakeCompletedListenerImpl *) nil_chk([((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk(self->channel_, [AndroidGovNistJavaxSipStackNioTlsMessageChannel class])))) getHandshakeCompletedListener])) setCipherSuiteWithNSString:[((id<JavaxNetSslSSLSession>) nil_chk([((JavaxNetSslSSLEngine *) nil_chk(self->sslEngine_)) getSession])) getCipherSuite]];
            }
            @try {
              [((id<AndroidGovNistJavaxSipTlsSecurityPolicy>) nil_chk([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk([((id<AndroidGovNistJavaxSipStackNioTlsChannelInterface>) nil_chk(self->channel_)) getSIPStack])) getTlsSecurityPolicy])) enforceTlsPolicyWithAndroidGovNistJavaxSipClientTransactionExt:[((id<AndroidGovNistJavaxSipStackNioTlsChannelInterface>) nil_chk(self->channel_)) getEncapsulatedClientTransaction]];
            }
            @catch (JavaLangSecurityException *ex) {
              @throw create_JavaIoIOException_initWithNSString_([((JavaLangSecurityException *) nil_chk(ex)) getMessage]);
            }
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:@"TLS Security policy passed"];
          }
          goto break_loop;
        }
        case JavaxNetSslSSLEngineResult_HandshakeStatus_Enum_NOT_HANDSHAKING:
        [self wrapRemaining];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:JreStrcat("$Z$@", @"Not handshaking, but has remaining: ", [((JavaNioByteBuffer *) nil_chk(src)) hasRemaining], @" buffer ", src)];
        if ([src hasRemaining]) {
          break;
        }
        else {
          goto break_loop;
        }
        default:
        break;
      }
    }
    break_loop: ;
  }
}

void AndroidGovNistJavaxSipStackSSLStateMachine_runDelegatedTasksWithJavaxNetSslSSLEngineResult_(AndroidGovNistJavaxSipStackSSLStateMachine *self, JavaxNetSslSSLEngineResult *result) {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:JreStrcat("$@", @"Running delegated task for ", result)];
  if ([((JavaxNetSslSSLEngineResult *) nil_chk(result)) getHandshakeStatus] == JreLoadEnum(JavaxNetSslSSLEngineResult_HandshakeStatus, NEED_TASK)) {
    id<JavaLangRunnable> runnable;
    while ((runnable = [((JavaxNetSslSSLEngine *) nil_chk(self->sslEngine_)) getDelegatedTask]) != nil) {
      [((id<JavaLangRunnable>) nil_chk(runnable)) run];
    }
    JavaxNetSslSSLEngineResult_HandshakeStatus *hsStatus = [((JavaxNetSslSSLEngine *) nil_chk(self->sslEngine_)) getHandshakeStatus];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSSLStateMachine_logger)) debugWithNSString:JreStrcat("$@", @"Handshake status after delegated tasks ", hsStatus)];
    if (hsStatus == JreLoadEnum(JavaxNetSslSSLEngineResult_HandshakeStatus, NEED_TASK)) {
      @throw create_JavaIoIOException_initWithNSString_(@"handshake shouldn't need additional tasks");
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSSLStateMachine)

@implementation AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(doSendWithByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "doSend", "[B", "LJavaIoIOException;", "LAndroidGovNistJavaxSipStackSSLStateMachine;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback = { "MessageSendCallback", "android.gov.nist.javax.sip.stack", ptrTable, methods, NULL, 7, 0x609, 1, 0, 3, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback)

@implementation AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem

- (instancetype)initWithJavaNioByteBuffer:(JavaNioByteBuffer *)buffer
withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback:(id<AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback>)callback {
  AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem_initWithJavaNioByteBuffer_withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback_(self, buffer, callback);
  return self;
}

- (id<AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback>)getCallBack {
  return callback_;
}

- (NSString *)description {
  return JreStrcat("$$@$@C", [AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem_class_() getSimpleName], @" [", message_, @", ", callback_, ']');
}

- (void)dealloc {
  RELEASE_(message_);
  RELEASE_(callback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaNioByteBuffer:withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback:);
  methods[1].selector = @selector(getCallBack);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "message_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "callback_", "LAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNioByteBuffer;LAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback;", "toString", "LAndroidGovNistJavaxSipStackSSLStateMachine;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem = { "MessageSendItem", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x9, 3, 2, 2, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem;
}

@end

void AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem_initWithJavaNioByteBuffer_withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback_(AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem *self, JavaNioByteBuffer *buffer, id<AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback> callback) {
  NSObject_init(self);
  JreStrongAssign(&self->message_, buffer);
  JreStrongAssign(&self->callback_, callback);
}

AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem *new_AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem_initWithJavaNioByteBuffer_withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback_(JavaNioByteBuffer *buffer, id<AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback> callback) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem, initWithJavaNioByteBuffer_withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback_, buffer, callback)
}

AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem *create_AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem_initWithJavaNioByteBuffer_withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback_(JavaNioByteBuffer *buffer, id<AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback> callback) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem, initWithJavaNioByteBuffer_withAndroidGovNistJavaxSipStackSSLStateMachine_MessageSendCallback_, buffer, callback)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSSLStateMachine_MessageSendItem)
