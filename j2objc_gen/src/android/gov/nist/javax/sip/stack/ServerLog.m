//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/ServerLog.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/LogLevels.h"
#include "android/gov/nist/javax/sip/LogRecord.h"
#include "android/gov/nist/javax/sip/LogRecordFactory.h"
#include "android/gov/nist/javax/sip/header/CallID.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/gov/nist/javax/sip/stack/ServerLog.h"
#include "android/javax/sip/SipStack.h"
#include "android/javax/sip/header/CallIdHeader.h"
#include "android/javax/sip/header/Header.h"
#include "android/javax/sip/header/TimeStampHeader.h"
#include "java/io/File.h"
#include "java/io/FileWriter.h"
#include "java/io/IOException.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Properties.h"
#include "org/slf4j/Logger.h"

@interface AndroidGovNistJavaxSipStackServerLog () {
 @public
  jboolean logContent_;
  NSString *logFileName_;
  JavaIoPrintWriter *printWriter_;
  NSString *auxInfo_;
  NSString *description__;
  NSString *stackIpAddress_;
  AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack_;
  JavaUtilProperties *configurationProperties_;
}

- (void)setPropertiesWithJavaUtilProperties:(JavaUtilProperties *)configurationProperties;

- (void)logMessageWithNSString:(NSString *)message;

- (void)logMessageWithNSString:(NSString *)message
                  withNSString:(NSString *)from
                  withNSString:(NSString *)to
                   withBoolean:(jboolean)sender
                  withNSString:(NSString *)callId
                  withNSString:(NSString *)firstLine
                  withNSString:(NSString *)status
                  withNSString:(NSString *)tid
                      withLong:(jlong)time
                      withLong:(jlong)timestampVal;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackServerLog, logFileName_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackServerLog, printWriter_, JavaIoPrintWriter *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackServerLog, auxInfo_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackServerLog, description__, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackServerLog, stackIpAddress_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackServerLog, sipStack_, AndroidGovNistJavaxSipStackSIPTransactionStack *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackServerLog, configurationProperties_, JavaUtilProperties *)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackServerLog_setPropertiesWithJavaUtilProperties_(AndroidGovNistJavaxSipStackServerLog *self, JavaUtilProperties *configurationProperties);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackServerLog_logMessageWithNSString_(AndroidGovNistJavaxSipStackServerLog *self, NSString *message);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackServerLog_logMessageWithNSString_withNSString_withNSString_withBoolean_withNSString_withNSString_withNSString_withNSString_withLong_withLong_(AndroidGovNistJavaxSipStackServerLog *self, NSString *message, NSString *from, NSString *to, jboolean sender, NSString *callId, NSString *firstLine, NSString *status, NSString *tid, jlong time, jlong timestampVal);

@implementation AndroidGovNistJavaxSipStackServerLog

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackServerLog_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setPropertiesWithJavaUtilProperties:(JavaUtilProperties *)configurationProperties {
  AndroidGovNistJavaxSipStackServerLog_setPropertiesWithJavaUtilProperties_(self, configurationProperties);
}

- (void)setStackIpAddressWithNSString:(NSString *)ipAddress {
  JreStrongAssign(&self->stackIpAddress_, ipAddress);
}

- (void)closeLogFile {
  @synchronized(self) {
    if (printWriter_ != nil) {
      [printWriter_ close];
      JreStrongAssign(&printWriter_, nil);
    }
  }
}

- (void)checkLogFile {
  if (logFileName_ == nil || traceLevel_ < AndroidGovNistCoreLogLevels_TRACE_MESSAGES) {
    return;
  }
  @try {
    JavaIoFile *logFile = create_JavaIoFile_initWithNSString_(logFileName_);
    if (![logFile exists]) {
      [logFile createNewFile];
      JreStrongAssign(&printWriter_, nil);
    }
    if (printWriter_ == nil) {
      jboolean overwrite = [((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_([((JavaUtilProperties *) nil_chk(configurationProperties_)) getPropertyWithNSString:@"android.gov.nist.javax.sip.SERVER_LOG_OVERWRITE"]))) booleanValue];
      JavaIoFileWriter *fw = create_JavaIoFileWriter_initWithNSString_withBoolean_(logFileName_, !overwrite);
      JreStrongAssignAndConsume(&printWriter_, new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(fw, true));
      [printWriter_ printlnWithNSString:JreStrcat("$$$$$$$$$", @"<!-- Use the  Trace Viewer in src/tools/tracesviewer to view this  trace  \nHere are the stack configuration properties \nandroid.javax.sip.IP_ADDRESS= ", [((JavaUtilProperties *) nil_chk(configurationProperties_)) getPropertyWithNSString:@"android.javax.sip.IP_ADDRESS"], @"\nandroid.javax.sip.STACK_NAME= ", [((JavaUtilProperties *) nil_chk(configurationProperties_)) getPropertyWithNSString:@"android.javax.sip.STACK_NAME"], @"\nandroid.javax.sip.ROUTER_PATH= ", [((JavaUtilProperties *) nil_chk(configurationProperties_)) getPropertyWithNSString:@"android.javax.sip.ROUTER_PATH"], @"\nandroid.javax.sip.OUTBOUND_PROXY= ", [((JavaUtilProperties *) nil_chk(configurationProperties_)) getPropertyWithNSString:@"android.javax.sip.OUTBOUND_PROXY"], @"\n-->")];
      [((JavaIoPrintWriter *) nil_chk(printWriter_)) printlnWithNSString:JreStrcat("$$$$$$$", @"<description\n logDescription=\"", description__, @"\"\n name=\"", [((JavaUtilProperties *) nil_chk(configurationProperties_)) getPropertyWithNSString:@"android.javax.sip.STACK_NAME"], @"\"\n auxInfo=\"", auxInfo_, @"\"/>\n ")];
      if (auxInfo_ != nil) {
        [((id<OrgSlf4jLogger>) nil_chk(stackLogger_)) debugWithNSString:JreStrcat("$$$$$$$$$$$$$$C", @"Here are the stack configuration properties \nandroid.javax.sip.IP_ADDRESS= ", [((JavaUtilProperties *) nil_chk(configurationProperties_)) getPropertyWithNSString:@"android.javax.sip.IP_ADDRESS"], @"\nandroid.javax.sip.ROUTER_PATH= ", [((JavaUtilProperties *) nil_chk(configurationProperties_)) getPropertyWithNSString:@"android.javax.sip.ROUTER_PATH"], @"\nandroid.javax.sip.OUTBOUND_PROXY= ", [((JavaUtilProperties *) nil_chk(configurationProperties_)) getPropertyWithNSString:@"android.javax.sip.OUTBOUND_PROXY"], @"\nandroid.gov.nist.javax.sip.CACHE_CLIENT_CONNECTIONS= ", [((JavaUtilProperties *) nil_chk(configurationProperties_)) getPropertyWithNSString:@"android.gov.nist.javax.sip.CACHE_CLIENT_CONNECTIONS"], @"\nandroid.gov.nist.javax.sip.CACHE_SERVER_CONNECTIONS= ", [((JavaUtilProperties *) nil_chk(configurationProperties_)) getPropertyWithNSString:@"android.gov.nist.javax.sip.CACHE_SERVER_CONNECTIONS"], @"\nandroid.gov.nist.javax.sip.REENTRANT_LISTENER= ", [((JavaUtilProperties *) nil_chk(configurationProperties_)) getPropertyWithNSString:@"android.gov.nist.javax.sip.REENTRANT_LISTENER"], @"android.gov.nist.javax.sip.THREAD_POOL_SIZE= ", [((JavaUtilProperties *) nil_chk(configurationProperties_)) getPropertyWithNSString:@"android.gov.nist.javax.sip.THREAD_POOL_SIZE"], 0x000a)];
        [((id<OrgSlf4jLogger>) nil_chk(stackLogger_)) debugWithNSString:@" ]]> "];
        [((id<OrgSlf4jLogger>) nil_chk(stackLogger_)) debugWithNSString:@"</debug>"];
        [((id<OrgSlf4jLogger>) nil_chk(stackLogger_)) debugWithNSString:JreStrcat("$$$$$$$", @"<description\n logDescription=\"", description__, @"\"\n name=\"", stackIpAddress_, @"\"\n auxInfo=\"", auxInfo_, @"\"/>\n ")];
        [((id<OrgSlf4jLogger>) nil_chk(stackLogger_)) debugWithNSString:@"<debug>"];
        [((id<OrgSlf4jLogger>) nil_chk(stackLogger_)) debugWithNSString:@"<![CDATA[ "];
      }
      else {
        [((id<OrgSlf4jLogger>) nil_chk(stackLogger_)) debugWithNSString:JreStrcat("$@C", @"Here are the stack configuration properties \n", configurationProperties_, 0x000a)];
        [((id<OrgSlf4jLogger>) nil_chk(stackLogger_)) debugWithNSString:@" ]]>"];
        [((id<OrgSlf4jLogger>) nil_chk(stackLogger_)) debugWithNSString:@"</debug>"];
        [((id<OrgSlf4jLogger>) nil_chk(stackLogger_)) debugWithNSString:JreStrcat("$$$$$", @"<description\n logDescription=\"", description__, @"\"\n name=\"", stackIpAddress_, @"\" />\n")];
        [((id<OrgSlf4jLogger>) nil_chk(stackLogger_)) debugWithNSString:@"<debug>"];
        [((id<OrgSlf4jLogger>) nil_chk(stackLogger_)) debugWithNSString:@"<![CDATA[ "];
      }
    }
  }
  @catch (JavaIoIOException *ex) {
  }
}

- (jboolean)needsLogging {
  return logFileName_ != nil;
}

- (void)setLogFileNameWithNSString:(NSString *)name {
  JreStrongAssign(&logFileName_, name);
}

- (NSString *)getLogFileName {
  return logFileName_;
}

- (void)logMessageWithNSString:(NSString *)message {
  AndroidGovNistJavaxSipStackServerLog_logMessageWithNSString_(self, message);
}

- (void)logMessageWithNSString:(NSString *)message
                  withNSString:(NSString *)from
                  withNSString:(NSString *)to
                   withBoolean:(jboolean)sender
                  withNSString:(NSString *)callId
                  withNSString:(NSString *)firstLine
                  withNSString:(NSString *)status
                  withNSString:(NSString *)tid
                      withLong:(jlong)time
                      withLong:(jlong)timestampVal {
  AndroidGovNistJavaxSipStackServerLog_logMessageWithNSString_withNSString_withNSString_withBoolean_withNSString_withNSString_withNSString_withNSString_withLong_withLong_(self, message, from, to, sender, callId, firstLine, status, tid, time, timestampVal);
}

- (void)logMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)message
                                                 withNSString:(NSString *)from
                                                 withNSString:(NSString *)to
                                                  withBoolean:(jboolean)sender
                                                     withLong:(jlong)time {
  [self checkLogFile];
  if ([((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(message)) getFirstLine] == nil) return;
  AndroidGovNistJavaxSipHeaderCallID *cid = (AndroidGovNistJavaxSipHeaderCallID *) cast_chk([message getCallId], [AndroidGovNistJavaxSipHeaderCallID class]);
  NSString *callId = nil;
  if (cid != nil) callId = [cid getCallId];
  NSString *firstLine = [((NSString *) nil_chk([message getFirstLine])) java_trim];
  NSString *inputText = (logContent_ ? [message encode] : [((JavaLangStringBuilder *) nil_chk([message encodeMessageWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])) description]);
  NSString *tid = [message getTransactionId];
  id<AndroidJavaxSipHeaderTimeStampHeader> tsHdr = (id<AndroidJavaxSipHeaderTimeStampHeader>) cast_check([message getHeaderWithNSString:AndroidJavaxSipHeaderTimeStampHeader_NAME], AndroidJavaxSipHeaderTimeStampHeader_class_());
  jlong tsval = tsHdr == nil ? 0 : [tsHdr getTime];
  AndroidGovNistJavaxSipStackServerLog_logMessageWithNSString_withNSString_withNSString_withBoolean_withNSString_withNSString_withNSString_withNSString_withLong_withLong_(self, inputText, from, to, sender, callId, firstLine, nil, tid, time, tsval);
}

- (void)logMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)message
                                                 withNSString:(NSString *)from
                                                 withNSString:(NSString *)to
                                                 withNSString:(NSString *)status
                                                  withBoolean:(jboolean)sender
                                                     withLong:(jlong)time {
  [self checkLogFile];
  AndroidGovNistJavaxSipHeaderCallID *cid = (AndroidGovNistJavaxSipHeaderCallID *) cast_chk([((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(message)) getCallId], [AndroidGovNistJavaxSipHeaderCallID class]);
  NSString *callId = nil;
  if (cid != nil) callId = [cid getCallId];
  NSString *firstLine = [((NSString *) nil_chk([message getFirstLine])) java_trim];
  NSString *encoded = (logContent_ ? [message encode] : [((JavaLangStringBuilder *) nil_chk([message encodeMessageWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])) description]);
  NSString *tid = [message getTransactionId];
  id<AndroidJavaxSipHeaderTimeStampHeader> tshdr = (id<AndroidJavaxSipHeaderTimeStampHeader>) cast_check([message getHeaderWithNSString:AndroidJavaxSipHeaderTimeStampHeader_NAME], AndroidJavaxSipHeaderTimeStampHeader_class_());
  jlong tsval = tshdr == nil ? 0 : [tshdr getTime];
  AndroidGovNistJavaxSipStackServerLog_logMessageWithNSString_withNSString_withNSString_withBoolean_withNSString_withNSString_withNSString_withNSString_withLong_withLong_(self, encoded, from, to, sender, callId, firstLine, status, tid, time, tsval);
}

- (void)logMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)message
                                                 withNSString:(NSString *)from
                                                 withNSString:(NSString *)to
                                                 withNSString:(NSString *)status
                                                  withBoolean:(jboolean)sender {
  [self logMessageWithAndroidGovNistJavaxSipMessageSIPMessage:message withNSString:from withNSString:to withNSString:status withBoolean:sender withLong:JavaLangSystem_currentTimeMillis()];
}

- (void)logExceptionWithJavaLangException:(JavaLangException *)ex {
  if (traceLevel_ >= AndroidGovNistCoreLogLevels_TRACE_EXCEPTION) {
    [self checkLogFile];
    [((JavaLangException *) nil_chk(ex)) printStackTrace];
    if (printWriter_ != nil) [ex printStackTraceWithJavaIoPrintWriter:printWriter_];
  }
}

- (void)setTraceLevelWithInt:(jint)level {
  traceLevel_ = level;
}

- (jint)getTraceLevel {
  return traceLevel_;
}

- (void)setAuxInfoWithNSString:(NSString *)auxInfo {
  JreStrongAssign(&self->auxInfo_, auxInfo);
}

- (void)setSipStackWithAndroidJavaxSipSipStack:(id<AndroidJavaxSipSipStack>)sipStack {
  if ([sipStack isKindOfClass:[AndroidGovNistJavaxSipStackSIPTransactionStack class]]) {
    JreStrongAssign(&self->sipStack_, (AndroidGovNistJavaxSipStackSIPTransactionStack *) cast_chk(sipStack, [AndroidGovNistJavaxSipStackSIPTransactionStack class]));
    JreStrongAssign(&self->stackLogger_, [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getStackLogger]);
  }
  else @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sipStack must be a SIPTransactionStack");
}

- (void)setStackPropertiesWithJavaUtilProperties:(JavaUtilProperties *)stackProperties {
  AndroidGovNistJavaxSipStackServerLog_setPropertiesWithJavaUtilProperties_(self, stackProperties);
}

- (void)setLevelWithInt:(jint)jsipLoggingLevel {
}

- (void)dealloc {
  RELEASE_(stackLogger_);
  RELEASE_(logFileName_);
  RELEASE_(printWriter_);
  RELEASE_(auxInfo_);
  RELEASE_(description__);
  RELEASE_(stackIpAddress_);
  RELEASE_(sipStack_);
  RELEASE_(configurationProperties_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setPropertiesWithJavaUtilProperties:);
  methods[2].selector = @selector(setStackIpAddressWithNSString:);
  methods[3].selector = @selector(closeLogFile);
  methods[4].selector = @selector(checkLogFile);
  methods[5].selector = @selector(needsLogging);
  methods[6].selector = @selector(setLogFileNameWithNSString:);
  methods[7].selector = @selector(getLogFileName);
  methods[8].selector = @selector(logMessageWithNSString:);
  methods[9].selector = @selector(logMessageWithNSString:withNSString:withNSString:withBoolean:withNSString:withNSString:withNSString:withNSString:withLong:withLong:);
  methods[10].selector = @selector(logMessageWithAndroidGovNistJavaxSipMessageSIPMessage:withNSString:withNSString:withBoolean:withLong:);
  methods[11].selector = @selector(logMessageWithAndroidGovNistJavaxSipMessageSIPMessage:withNSString:withNSString:withNSString:withBoolean:withLong:);
  methods[12].selector = @selector(logMessageWithAndroidGovNistJavaxSipMessageSIPMessage:withNSString:withNSString:withNSString:withBoolean:);
  methods[13].selector = @selector(logExceptionWithJavaLangException:);
  methods[14].selector = @selector(setTraceLevelWithInt:);
  methods[15].selector = @selector(getTraceLevel);
  methods[16].selector = @selector(setAuxInfoWithNSString:);
  methods[17].selector = @selector(setSipStackWithAndroidJavaxSipSipStack:);
  methods[18].selector = @selector(setStackPropertiesWithJavaUtilProperties:);
  methods[19].selector = @selector(setLevelWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logContent_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stackLogger_", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "logFileName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "printWriter_", "LJavaIoPrintWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "auxInfo_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "description__", "LNSString;", .constantValue.asLong = 0, 0x2, 19, -1, -1, -1 },
    { "stackIpAddress_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sipStack_", "LAndroidGovNistJavaxSipStackSIPTransactionStack;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "configurationProperties_", "LJavaUtilProperties;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "traceLevel_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setProperties", "LJavaUtilProperties;", "setStackIpAddress", "LNSString;", "setLogFileName", "logMessage", "LNSString;LNSString;LNSString;ZLNSString;LNSString;LNSString;LNSString;JJ", "LAndroidGovNistJavaxSipMessageSIPMessage;LNSString;LNSString;ZJ", "LAndroidGovNistJavaxSipMessageSIPMessage;LNSString;LNSString;LNSString;ZJ", "LAndroidGovNistJavaxSipMessageSIPMessage;LNSString;LNSString;LNSString;Z", "logException", "LJavaLangException;", "setTraceLevel", "I", "setAuxInfo", "setSipStack", "LAndroidJavaxSipSipStack;", "setStackProperties", "setLevel", "description" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackServerLog = { "ServerLog", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 20, 10, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackServerLog;
}

@end

void AndroidGovNistJavaxSipStackServerLog_init(AndroidGovNistJavaxSipStackServerLog *self) {
  NSObject_init(self);
  self->traceLevel_ = AndroidGovNistCoreLogLevels_TRACE_MESSAGES;
}

AndroidGovNistJavaxSipStackServerLog *new_AndroidGovNistJavaxSipStackServerLog_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackServerLog, init)
}

AndroidGovNistJavaxSipStackServerLog *create_AndroidGovNistJavaxSipStackServerLog_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackServerLog, init)
}

void AndroidGovNistJavaxSipStackServerLog_setPropertiesWithJavaUtilProperties_(AndroidGovNistJavaxSipStackServerLog *self, JavaUtilProperties *configurationProperties) {
  JreStrongAssign(&self->configurationProperties_, configurationProperties);
  JreStrongAssign(&self->description__, [((JavaUtilProperties *) nil_chk(configurationProperties)) getPropertyWithNSString:@"android.javax.sip.STACK_NAME"]);
  JreStrongAssign(&self->stackIpAddress_, [configurationProperties getPropertyWithNSString:@"android.javax.sip.IP_ADDRESS"]);
  JreStrongAssign(&self->logFileName_, [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.SERVER_LOG"]);
  NSString *logLevel = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.TRACE_LEVEL"];
  NSString *logContent = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.LOG_MESSAGE_CONTENT"];
  self->logContent_ = (logContent != nil && [logContent isEqual:@"true"]);
  [self checkLogFile];
}

void AndroidGovNistJavaxSipStackServerLog_logMessageWithNSString_(AndroidGovNistJavaxSipStackServerLog *self, NSString *message) {
  [self checkLogFile];
  NSString *logInfo = message;
  if (self->printWriter_ != nil) {
    [self->printWriter_ printlnWithNSString:logInfo];
  }
  [((id<OrgSlf4jLogger>) nil_chk(self->stackLogger_)) infoWithNSString:logInfo];
}

void AndroidGovNistJavaxSipStackServerLog_logMessageWithNSString_withNSString_withNSString_withBoolean_withNSString_withNSString_withNSString_withNSString_withLong_withLong_(AndroidGovNistJavaxSipStackServerLog *self, NSString *message, NSString *from, NSString *to, jboolean sender, NSString *callId, NSString *firstLine, NSString *status, NSString *tid, jlong time, jlong timestampVal) {
  id<AndroidGovNistJavaxSipLogRecord> log = [((id<AndroidGovNistJavaxSipLogRecordFactory>) nil_chk(((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_))->logRecordFactory_)) createLogRecordWithNSString:message withNSString:from withNSString:to withLong:time withBoolean:sender withNSString:firstLine withNSString:tid withNSString:callId withLong:timestampVal];
  if (log != nil) AndroidGovNistJavaxSipStackServerLog_logMessageWithNSString_(self, [log description]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackServerLog)
