//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/KeyedSemaphore.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/stack/KeyedSemaphore.h"
#include "java/io/IOException.h"
#include "java/lang/InterruptedException.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/Semaphore.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackKeyedSemaphore)

id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackKeyedSemaphore_logger;

@implementation AndroidGovNistJavaxSipStackKeyedSemaphore

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackKeyedSemaphore_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)leaveIOCriticalSectionWithNSString:(NSString *)key {
  JavaUtilConcurrentSemaphore *creationSemaphore = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(map_)) getWithId:key];
  if (creationSemaphore != nil) {
    [creationSemaphore release__];
  }
}

- (void)removeWithNSString:(NSString *)key {
  if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(map_)) getWithId:key] != nil) {
    [((JavaUtilConcurrentSemaphore *) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(map_)) getWithId:key])) release__];
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(map_)) removeWithId:key];
  }
}

- (void)enterIOCriticalSectionWithNSString:(NSString *)key {
  JavaUtilConcurrentSemaphore *creationSemaphore = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(map_)) getWithId:key];
  if (creationSemaphore == nil) {
    JavaUtilConcurrentSemaphore *newCreationSemaphore = create_JavaUtilConcurrentSemaphore_initWithInt_withBoolean_(1, true);
    creationSemaphore = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(map_)) putIfAbsentWithId:key withId:newCreationSemaphore];
    if (creationSemaphore == nil) {
      creationSemaphore = newCreationSemaphore;
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackKeyedSemaphore_logger)) debugWithNSString:JreStrcat("$$", @"new Semaphore added for key ", key)];
    }
  }
  @try {
    jboolean retval = [creationSemaphore tryAcquireWithLong:10 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    if (!retval) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"Could not acquire IO Semaphore'", key, @"' after 10 seconds -- giving up "));
    }
  }
  @catch (JavaLangInterruptedException *e) {
    @throw create_JavaIoIOException_initWithNSString_(@"exception in acquiring sem");
  }
}

- (void)dealloc {
  RELEASE_(map_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(leaveIOCriticalSectionWithNSString:);
  methods[2].selector = @selector(removeWithNSString:);
  methods[3].selector = @selector(enterIOCriticalSectionWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "map_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x0, -1, -1, 5, -1 },
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0x8, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "leaveIOCriticalSection", "LNSString;", "remove", "enterIOCriticalSection", "LJavaIoIOException;", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/util/concurrent/Semaphore;>;", &AndroidGovNistJavaxSipStackKeyedSemaphore_logger };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackKeyedSemaphore = { "KeyedSemaphore", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackKeyedSemaphore;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackKeyedSemaphore class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackKeyedSemaphore_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackKeyedSemaphore_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackKeyedSemaphore)
  }
}

@end

void AndroidGovNistJavaxSipStackKeyedSemaphore_init(AndroidGovNistJavaxSipStackKeyedSemaphore *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->map_, new_JavaUtilConcurrentConcurrentHashMap_init());
}

AndroidGovNistJavaxSipStackKeyedSemaphore *new_AndroidGovNistJavaxSipStackKeyedSemaphore_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackKeyedSemaphore, init)
}

AndroidGovNistJavaxSipStackKeyedSemaphore *create_AndroidGovNistJavaxSipStackKeyedSemaphore_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackKeyedSemaphore, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackKeyedSemaphore)
