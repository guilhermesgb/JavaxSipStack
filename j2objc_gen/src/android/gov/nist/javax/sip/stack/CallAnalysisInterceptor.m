//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/CallAnalysisInterceptor.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/stack/CallAnalysisInterceptor.h"
#include "android/gov/nist/javax/sip/stack/CallAnalyzer.h"
#include "android/javax/sip/SipStack.h"
#include "android/javax/sip/message/Message.h"
#include "java/lang/Long.h"
#include "java/util/Properties.h"

@interface AndroidGovNistJavaxSipStackCallAnalysisInterceptor () {
 @public
  AndroidGovNistJavaxSipStackCallAnalyzer *callAnalyzer_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackCallAnalysisInterceptor, callAnalyzer_, AndroidGovNistJavaxSipStackCallAnalyzer *)

inline AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *AndroidGovNistJavaxSipStackCallAnalysisInterceptor_get_interceptorCheckpoint();
static AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *AndroidGovNistJavaxSipStackCallAnalysisInterceptor_interceptorCheckpoint;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipStackCallAnalysisInterceptor, interceptorCheckpoint, AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference *)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackCallAnalysisInterceptor)

@implementation AndroidGovNistJavaxSipStackCallAnalysisInterceptor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackCallAnalysisInterceptor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)afterMessageWithAndroidJavaxSipMessageMessage:(id<AndroidJavaxSipMessageMessage>)message {
  [((AndroidGovNistJavaxSipStackCallAnalyzer *) nil_chk(callAnalyzer_)) leaveWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:AndroidGovNistJavaxSipStackCallAnalysisInterceptor_interceptorCheckpoint];
}

- (void)beforeMessageWithAndroidJavaxSipMessageMessage:(id<AndroidJavaxSipMessageMessage>)message {
  [((AndroidGovNistJavaxSipStackCallAnalyzer *) nil_chk(callAnalyzer_)) enterWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:AndroidGovNistJavaxSipStackCallAnalysisInterceptor_interceptorCheckpoint];
}

- (void)destroy {
  [((AndroidGovNistJavaxSipStackCallAnalyzer *) nil_chk(callAnalyzer_)) stop];
  JreStrongAssign(&callAnalyzer_, nil);
}

- (void)init__WithAndroidJavaxSipSipStack:(id<AndroidJavaxSipSipStack>)stack {
  JreStrongAssignAndConsume(&callAnalyzer_, new_AndroidGovNistJavaxSipStackCallAnalyzer_initWithAndroidGovNistJavaxSipSipStackImpl_(((AndroidGovNistJavaxSipSipStackImpl *) cast_chk(stack, [AndroidGovNistJavaxSipSipStackImpl class]))));
  JavaUtilProperties *props = [((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(((AndroidGovNistJavaxSipSipStackImpl *) cast_chk(stack, [AndroidGovNistJavaxSipSipStackImpl class])))) getConfigurationProperties];
  JavaLangLong *checkingInterval = JavaLangLong_valueOfWithLong_(JavaLangLong_parseLongWithNSString_([((JavaUtilProperties *) nil_chk(props)) getPropertyWithNSString:JreStrcat("$$", [AndroidGovNistJavaxSipStackCallAnalysisInterceptor_class_() getName], @".checkingInterval") withNSString:@"1000"]));
  JavaLangLong *minStuckTime = JavaLangLong_valueOfWithLong_(JavaLangLong_parseLongWithNSString_([props getPropertyWithNSString:JreStrcat("$$", [AndroidGovNistJavaxSipStackCallAnalysisInterceptor_class_() getName], @".minStuckTIme") withNSString:@"4000"]));
  JavaLangLong *minTimeBetweenDumps = JavaLangLong_valueOfWithLong_(JavaLangLong_parseLongWithNSString_([props getPropertyWithNSString:JreStrcat("$$", [AndroidGovNistJavaxSipStackCallAnalysisInterceptor_class_() getName], @".minTimeBetweenDumps") withNSString:@"2000"]));
  AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration *config = create_AndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration_initWithJavaLangLong_withJavaLangLong_withJavaLangLong_(checkingInterval, minTimeBetweenDumps, minStuckTime);
  [((AndroidGovNistJavaxSipStackCallAnalyzer *) nil_chk(callAnalyzer_)) configureWithAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference:AndroidGovNistJavaxSipStackCallAnalysisInterceptor_interceptorCheckpoint withAndroidGovNistJavaxSipStackCallAnalyzer_MetricAnalysisConfiguration:config];
}

- (void)dealloc {
  RELEASE_(callAnalyzer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(afterMessageWithAndroidJavaxSipMessageMessage:);
  methods[2].selector = @selector(beforeMessageWithAndroidJavaxSipMessageMessage:);
  methods[3].selector = @selector(destroy);
  methods[4].selector = @selector(init__WithAndroidJavaxSipSipStack:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "callAnalyzer_", "LAndroidGovNistJavaxSipStackCallAnalyzer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "interceptorCheckpoint", "LAndroidGovNistJavaxSipStackCallAnalyzer_MetricReference;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "afterMessage", "LAndroidJavaxSipMessageMessage;", "beforeMessage", "init", "LAndroidJavaxSipSipStack;", &AndroidGovNistJavaxSipStackCallAnalysisInterceptor_interceptorCheckpoint };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackCallAnalysisInterceptor = { "CallAnalysisInterceptor", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackCallAnalysisInterceptor;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackCallAnalysisInterceptor class]) {
    JreStrongAssignAndConsume(&AndroidGovNistJavaxSipStackCallAnalysisInterceptor_interceptorCheckpoint, new_AndroidGovNistJavaxSipStackCallAnalyzer_MetricReference_initWithNSString_(@"ick"));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackCallAnalysisInterceptor)
  }
}

@end

void AndroidGovNistJavaxSipStackCallAnalysisInterceptor_init(AndroidGovNistJavaxSipStackCallAnalysisInterceptor *self) {
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackCallAnalysisInterceptor *new_AndroidGovNistJavaxSipStackCallAnalysisInterceptor_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackCallAnalysisInterceptor, init)
}

AndroidGovNistJavaxSipStackCallAnalysisInterceptor *create_AndroidGovNistJavaxSipStackCallAnalysisInterceptor_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackCallAnalysisInterceptor, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackCallAnalysisInterceptor)
