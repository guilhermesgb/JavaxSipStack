//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/SIPTransactionStack.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/Host.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/core/ServerLogger.h"
#include "android/gov/nist/core/ThreadAuditor.h"
#include "android/gov/nist/core/net/AddressResolver.h"
#include "android/gov/nist/core/net/DefaultNetworkLayer.h"
#include "android/gov/nist/core/net/NetworkLayer.h"
#include "android/gov/nist/core/net/SecurityManagerProvider.h"
#include "android/gov/nist/javax/sip/DefaultAddressResolver.h"
#include "android/gov/nist/javax/sip/ListeningPointImpl.h"
#include "android/gov/nist/javax/sip/LogRecordFactory.h"
#include "android/gov/nist/javax/sip/ReleaseReferencesStrategy.h"
#include "android/gov/nist/javax/sip/SIPConstants.h"
#include "android/gov/nist/javax/sip/SipListenerExt.h"
#include "android/gov/nist/javax/sip/SipProviderImpl.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/Utils.h"
#include "android/gov/nist/javax/sip/header/Event.h"
#include "android/gov/nist/javax/sip/header/RequestLine.h"
#include "android/gov/nist/javax/sip/header/RouteList.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/header/extensions/JoinHeader.h"
#include "android/gov/nist/javax/sip/header/extensions/ReplacesHeader.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/message/SIPRequest.h"
#include "android/gov/nist/javax/sip/message/SIPResponse.h"
#include "android/gov/nist/javax/sip/parser/MessageParserFactory.h"
#include "android/gov/nist/javax/sip/stack/ClientAuthType.h"
#include "android/gov/nist/javax/sip/stack/ConnectionOrientedMessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/DefaultRouter.h"
#include "android/gov/nist/javax/sip/stack/IOHandler.h"
#include "android/gov/nist/javax/sip/stack/MessageChannel.h"
#include "android/gov/nist/javax/sip/stack/MessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/MessageProcessorFactory.h"
#include "android/gov/nist/javax/sip/stack/NIOHandler.h"
#include "android/gov/nist/javax/sip/stack/NioMessageProcessorFactory.h"
#include "android/gov/nist/javax/sip/stack/NioTcpMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/NioTcpMessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/NioTlsMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/NioTlsMessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/SIPClientTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPClientTransactionImpl.h"
#include "android/gov/nist/javax/sip/stack/SIPDialog.h"
#include "android/gov/nist/javax/sip/stack/SIPDialogErrorEvent.h"
#include "android/gov/nist/javax/sip/stack/SIPEventInterceptor.h"
#include "android/gov/nist/javax/sip/stack/SIPMessageValve.h"
#include "android/gov/nist/javax/sip/stack/SIPServerTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPServerTransactionImpl.h"
#include "android/gov/nist/javax/sip/stack/SIPStackTimerTask.h"
#include "android/gov/nist/javax/sip/stack/SIPTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionErrorEvent.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/gov/nist/javax/sip/stack/ServerRequestInterface.h"
#include "android/gov/nist/javax/sip/stack/ServerResponseInterface.h"
#include "android/gov/nist/javax/sip/stack/SocketTimeoutAuditor.h"
#include "android/gov/nist/javax/sip/stack/StackMessageFactory.h"
#include "android/gov/nist/javax/sip/stack/TLSMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/TLSMessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/timers/SipTimer.h"
#include "android/javax/sip/ClientTransaction.h"
#include "android/javax/sip/Dialog.h"
#include "android/javax/sip/DialogState.h"
#include "android/javax/sip/DialogTerminatedEvent.h"
#include "android/javax/sip/ServerTransaction.h"
#include "android/javax/sip/SipListener.h"
#include "android/javax/sip/TransactionState.h"
#include "android/javax/sip/TransactionTerminatedEvent.h"
#include "android/javax/sip/address/Hop.h"
#include "android/javax/sip/address/Router.h"
#include "android/javax/sip/address/URI.h"
#include "android/javax/sip/header/CallIdHeader.h"
#include "android/javax/sip/header/EventHeader.h"
#include "android/javax/sip/header/Header.h"
#include "android/javax/sip/header/ToHeader.h"
#include "android/javax/sip/message/Request.h"
#include "android/javax/sip/message/Response.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/InetAddress.h"
#include "java/net/Socket.h"
#include "java/net/SocketAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/nio/channels/SocketChannel.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface AndroidGovNistJavaxSipStackSIPTransactionStack () {
 @public
  id<AndroidGovNistJavaxSipStackTimersSipTimer> timer_;
  JavaUtilConcurrentConcurrentHashMap *pendingTransactions_;
  JavaUtilConcurrentAtomicAtomicInteger *activeClientTransactionCount_;
  JavaUtilConcurrentConcurrentHashMap *mergeTable_;
  JavaUtilConcurrentConcurrentHashMap *terminatedServerTransactionsPendingAck_;
  JavaUtilConcurrentConcurrentHashMap *forkedClientTransactionTable_;
  jboolean non2XXAckPassedToListener_;
  id<JavaUtilCollection> messageProcessors_;
  jint stackCongestionControlTimeout_;
  jboolean deliverUnsolicitedNotify_;
  jboolean deliverTerminatedEventForAck_;
  jint tcpPostParsingThreadPoolSize_;
  AndroidGovNistJavaxSipReleaseReferencesStrategy *releaseReferencesStrategy_;
  jint threadPriority_;
  jlong sslHandshakeTimeout_;
  jboolean sslRenegotiationEnabled_;
  id<JavaUtilConcurrentExecutorService> reinviteExecutor_;
}

- (void)addTransactionHashWithAndroidGovNistJavaxSipStackSIPTransaction:(id<AndroidGovNistJavaxSipStackSIPTransaction>)sipTransaction;

- (NSString *)auditDialogsWithJavaUtilSet:(id<JavaUtilSet>)activeCallIDs
                                 withLong:(jlong)leakedDialogTimer;

- (NSString *)auditTransactionsWithJavaUtilConcurrentConcurrentHashMap:(JavaUtilConcurrentConcurrentHashMap *)transactionsMap
                                                              withLong:(jlong)a_nLeakedTransactionTimer;

- (AndroidGovNistJavaxSipStackMessageProcessor *)findMessageProcessorWithNSString:(NSString *)myAddress
                                                                          withInt:(jint)myPort
                                                                     withNSString:(NSString *)transport;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionStack, timer_, id<AndroidGovNistJavaxSipStackTimersSipTimer>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionStack, pendingTransactions_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionStack, activeClientTransactionCount_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionStack, mergeTable_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionStack, terminatedServerTransactionsPendingAck_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionStack, forkedClientTransactionTable_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionStack, messageProcessors_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionStack, releaseReferencesStrategy_, AndroidGovNistJavaxSipReleaseReferencesStrategy *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionStack, reinviteExecutor_, id<JavaUtilConcurrentExecutorService>)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSIPTransactionStack_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSIPTransactionStack_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSIPTransactionStack_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackSIPTransactionStack, logger, id<OrgSlf4jLogger>)

inline jint AndroidGovNistJavaxSipStackSIPTransactionStack_get_connectionLingerTimer();
inline jint AndroidGovNistJavaxSipStackSIPTransactionStack_set_connectionLingerTimer(jint value);
inline jint *AndroidGovNistJavaxSipStackSIPTransactionStack_getRef_connectionLingerTimer();
static jint AndroidGovNistJavaxSipStackSIPTransactionStack_connectionLingerTimer = 8;
J2OBJC_STATIC_FIELD_PRIMITIVE(AndroidGovNistJavaxSipStackSIPTransactionStack, connectionLingerTimer, jint)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPTransactionStack_addTransactionHashWithAndroidGovNistJavaxSipStackSIPTransaction_(AndroidGovNistJavaxSipStackSIPTransactionStack *self, id<AndroidGovNistJavaxSipStackSIPTransaction> sipTransaction);

__attribute__((unused)) static NSString *AndroidGovNistJavaxSipStackSIPTransactionStack_auditDialogsWithJavaUtilSet_withLong_(AndroidGovNistJavaxSipStackSIPTransactionStack *self, id<JavaUtilSet> activeCallIDs, jlong leakedDialogTimer);

__attribute__((unused)) static NSString *AndroidGovNistJavaxSipStackSIPTransactionStack_auditTransactionsWithJavaUtilConcurrentConcurrentHashMap_withLong_(AndroidGovNistJavaxSipStackSIPTransactionStack *self, JavaUtilConcurrentConcurrentHashMap *transactionsMap, jlong a_nLeakedTransactionTimer);

__attribute__((unused)) static AndroidGovNistJavaxSipStackMessageProcessor *AndroidGovNistJavaxSipStackSIPTransactionStack_findMessageProcessorWithNSString_withInt_withNSString_(AndroidGovNistJavaxSipStackSIPTransactionStack *self, NSString *myAddress, jint myPort, NSString *transport);

__attribute__((unused)) static IOSObjectArray *AndroidGovNistJavaxSipStackSIPTransactionStack__Annotations$0();

@interface AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor : NSObject < JavaUtilConcurrentExecutor >

- (instancetype)init;

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor_init(AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor *self);

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor *new_AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor *create_AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor_init();

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor)

@interface AndroidGovNistJavaxSipStackSIPTransactionStack_2 : NSObject < JavaUtilConcurrentThreadFactory > {
 @public
  AndroidGovNistJavaxSipStackSIPTransactionStack *this$0_;
  jint threadCount_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)outer$;

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)pRunnable OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackSIPTransactionStack_2)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPTransactionStack_2_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(AndroidGovNistJavaxSipStackSIPTransactionStack_2 *self, AndroidGovNistJavaxSipStackSIPTransactionStack *outer$);

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPTransactionStack_2 *new_AndroidGovNistJavaxSipStackSIPTransactionStack_2_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(AndroidGovNistJavaxSipStackSIPTransactionStack *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPTransactionStack_2 *create_AndroidGovNistJavaxSipStackSIPTransactionStack_2_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(AndroidGovNistJavaxSipStackSIPTransactionStack *outer$);

@interface AndroidGovNistJavaxSipStackSIPTransactionStack_1 : NSObject < JavaUtilConcurrentThreadFactory > {
 @public
  jint threadCount_;
}

- (instancetype)init;

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)pRunnable OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackSIPTransactionStack_1)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPTransactionStack_1_init(AndroidGovNistJavaxSipStackSIPTransactionStack_1 *self);

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPTransactionStack_1 *new_AndroidGovNistJavaxSipStackSIPTransactionStack_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPTransactionStack_1 *create_AndroidGovNistJavaxSipStackSIPTransactionStack_1_init();

@interface AndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer () {
 @public
  AndroidGovNistJavaxSipStackSIPTransactionStack *this$0_;
}

@end

@interface AndroidGovNistJavaxSipStackSIPTransactionStack_RemoveForkedTransactionTimerTask () {
 @public
  AndroidGovNistJavaxSipStackSIPTransactionStack *this$0_;
  NSString *forkId_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPTransactionStack_RemoveForkedTransactionTimerTask, forkId_, NSString *)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackSIPTransactionStack)

id<JavaUtilSet> AndroidGovNistJavaxSipStackSIPTransactionStack_dialogCreatingMethods;
id<JavaUtilConcurrentExecutor> AndroidGovNistJavaxSipStackSIPTransactionStack_selfRoutingThreadpoolExecutor;

@implementation AndroidGovNistJavaxSipStackSIPTransactionStack

- (id<JavaUtilConcurrentExecutor>)getSelfRoutingThreadpoolExecutor {
  if (AndroidGovNistJavaxSipStackSIPTransactionStack_selfRoutingThreadpoolExecutor == nil) {
    if (self->threadPoolSize_ <= 0) {
      JreStrongAssignAndConsume(&AndroidGovNistJavaxSipStackSIPTransactionStack_selfRoutingThreadpoolExecutor, new_AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor_init());
    }
    else {
      JreStrongAssign(&AndroidGovNistJavaxSipStackSIPTransactionStack_selfRoutingThreadpoolExecutor, JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_withJavaUtilConcurrentThreadFactory_(self->threadPoolSize_, create_AndroidGovNistJavaxSipStackSIPTransactionStack_2_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(self)));
    }
  }
  return AndroidGovNistJavaxSipStackSIPTransactionStack_selfRoutingThreadpoolExecutor;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackSIPTransactionStack_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)reInit {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:@"Re-initializing !"];
  JreStrongAssignAndConsume(&messageProcessors_, new_JavaUtilConcurrentCopyOnWriteArrayList_init());
  JreStrongAssignAndConsume(&self->ioHandler_, new_AndroidGovNistJavaxSipStackIOHandler_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(self));
  JreStrongAssignAndConsume(&pendingTransactions_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&clientTransactionTable_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&serverTransactionTable_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&retransmissionAlertTransactions_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&mergeTable_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->dialogTable_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->earlyDialogTable_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->serverDialogMergeTestTable_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->terminatedServerTransactionsPendingAck_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->forkedClientTransactionTable_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->activeClientTransactionCount_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0));
}

- (JavaNetSocketAddress *)getLocalAddressForTcpDstWithJavaNetInetAddress:(JavaNetInetAddress *)dst
                                                                 withInt:(jint)dstPort
                                                  withJavaNetInetAddress:(JavaNetInetAddress *)localAddress
                                                                 withInt:(jint)localPort {
  if ([[self getMessageProcessorFactory] isKindOfClass:[AndroidGovNistJavaxSipStackNioMessageProcessorFactory class]]) {
    IOSObjectArray *processors = [self getMessageProcessors];
    {
      IOSObjectArray *a__ = processors;
      AndroidGovNistJavaxSipStackMessageProcessor * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      AndroidGovNistJavaxSipStackMessageProcessor * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        AndroidGovNistJavaxSipStackMessageProcessor *processor = *b__++;
        if ([@"TCP" isEqual:[((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(processor)) getTransport]]) {
          AndroidGovNistJavaxSipStackNioTcpMessageChannel *msgChannel = (AndroidGovNistJavaxSipStackNioTcpMessageChannel *) cast_chk([processor createMessageChannelWithJavaNetInetAddress:dst withInt:dstPort], [AndroidGovNistJavaxSipStackNioTcpMessageChannel class]);
          return [((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTcpMessageChannel *) nil_chk(msgChannel))->socketChannel_)) socket])) getLocalSocketAddress];
        }
      }
    }
    return nil;
  }
  return [((AndroidGovNistJavaxSipStackIOHandler *) nil_chk(self->ioHandler_)) getLocalAddressForTcpDstWithJavaNetInetAddress:dst withInt:dstPort withJavaNetInetAddress:localAddress withInt:localPort];
}

- (JavaNetSocketAddress *)getLocalAddressForTlsDstWithJavaNetInetAddress:(JavaNetInetAddress *)dst
                                                                 withInt:(jint)dstPort
                                                  withJavaNetInetAddress:(JavaNetInetAddress *)localAddress {
  IOSObjectArray *processors = [self getMessageProcessors];
  {
    IOSObjectArray *a__ = processors;
    AndroidGovNistJavaxSipStackMessageProcessor * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    AndroidGovNistJavaxSipStackMessageProcessor * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      AndroidGovNistJavaxSipStackMessageProcessor *processor = *b__++;
      if ([processor isKindOfClass:[AndroidGovNistJavaxSipStackTLSMessageProcessor class]]) {
        AndroidGovNistJavaxSipStackTLSMessageChannel *msgChannel = (AndroidGovNistJavaxSipStackTLSMessageChannel *) cast_chk([((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(processor)) createMessageChannelWithJavaNetInetAddress:dst withInt:dstPort], [AndroidGovNistJavaxSipStackTLSMessageChannel class]);
        return [((AndroidGovNistJavaxSipStackIOHandler *) nil_chk(self->ioHandler_)) getLocalAddressForTlsDstWithJavaNetInetAddress:dst withInt:dstPort withJavaNetInetAddress:localAddress withAndroidGovNistJavaxSipStackTLSMessageChannel:msgChannel];
      }
      else if ([processor isKindOfClass:[AndroidGovNistJavaxSipStackNioTlsMessageProcessor class]]) {
        AndroidGovNistJavaxSipStackNioTlsMessageChannel *msgChannel = (AndroidGovNistJavaxSipStackNioTlsMessageChannel *) cast_chk([((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(processor)) createMessageChannelWithJavaNetInetAddress:dst withInt:dstPort], [AndroidGovNistJavaxSipStackNioTlsMessageChannel class]);
        return [((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk(((AndroidGovNistJavaxSipStackNioTcpMessageChannel *) nil_chk(msgChannel))->socketChannel_)) socket])) getLocalSocketAddress];
      }
    }
  }
  return nil;
}

- (void)printDialogTable {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@", @"dialog table  = ", self->dialogTable_)];
}

- (id<AndroidGovNistJavaxSipStackSIPServerTransaction>)getRetransmissionAlertTransactionWithNSString:(NSString *)dialogId {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->retransmissionAlertTransactions_)) getWithId:dialogId];
}

+ (jboolean)isDialogCreatedWithNSString:(NSString *)method {
  return AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_(method);
}

- (void)addExtensionMethodWithNSString:(NSString *)extensionMethod {
  if ([((NSString *) nil_chk(extensionMethod)) isEqual:AndroidJavaxSipMessageRequest_NOTIFY]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:@"NOTIFY Supported Natively"];
  }
  else {
    [((id<JavaUtilSet>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_dialogCreatingMethods)) addWithId:AndroidGovNistJavaxSipUtils_toUpperCaseWithNSString_([extensionMethod java_trim])];
  }
}

- (AndroidGovNistJavaxSipStackSIPDialog *)putDialogWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)dialog {
  NSString *dialogId = [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(dialog)) getDialogId];
  if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(dialogTable_)) containsKeyWithId:dialogId]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$$@", @"putDialog: dialog already exists", dialogId, @" in table = ", [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(dialogTable_)) getWithId:dialogId])];
    return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(dialogTable_)) getWithId:dialogId];
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$$@", @"putDialog dialogId=", dialogId, @" dialog = ", dialog)];
  [dialog setStackWithAndroidGovNistJavaxSipStackSIPTransactionStack:self];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(dialogTable_)) putWithId:dialogId withId:dialog];
  [self putMergeDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog];
  return dialog;
}

- (AndroidGovNistJavaxSipStackSIPDialog *)createDialogWithAndroidGovNistJavaxSipStackSIPTransaction:(id<AndroidGovNistJavaxSipStackSIPTransaction>)transaction {
  AndroidGovNistJavaxSipStackSIPDialog *retval = nil;
  if ([AndroidGovNistJavaxSipStackSIPClientTransaction_class_() isInstance:transaction]) {
    NSString *dialogId = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk(transaction)) getRequest], [AndroidGovNistJavaxSipMessageSIPRequest class])))) getDialogIdWithBoolean:false];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$", @"createDialog dialogId=", dialogId)];
    if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->earlyDialogTable_)) getWithId:dialogId] != nil) {
      AndroidGovNistJavaxSipStackSIPDialog *dialog = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->earlyDialogTable_)) getWithId:dialogId];
      if ([((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(dialog)) getState] == nil || [dialog getState] == JreLoadStatic(AndroidJavaxSipDialogState, EARLY)) {
        retval = dialog;
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$$@", @"createDialog early Dialog found : earlyDialogId=", dialogId, @" earlyDialog= ", dialog)];
      }
      else {
        retval = create_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPTransaction_(transaction);
        [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->earlyDialogTable_)) putWithId:dialogId withId:retval];
      }
    }
    else {
      retval = create_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPTransaction_(transaction);
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->earlyDialogTable_)) putWithId:dialogId withId:retval];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$$@", @"createDialog early Dialog not found : earlyDialogId=", dialogId, @" created one ", retval)];
    }
  }
  else {
    retval = create_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPTransaction_(transaction);
  }
  return retval;
}

- (AndroidGovNistJavaxSipStackSIPDialog *)createDialogWithAndroidGovNistJavaxSipStackSIPClientTransaction:(id<AndroidGovNistJavaxSipStackSIPClientTransaction>)transaction
                                                             withAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)sipResponse {
  NSString *originalDialogId = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) nil_chk(transaction)) getRequest], [AndroidGovNistJavaxSipMessageSIPRequest class])))) getDialogIdWithBoolean:false];
  NSString *earlyDialogId = [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) getDialogIdWithBoolean:false];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$", @"createDialog originalDialogId=", originalDialogId)];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$", @"createDialog earlyDialogId=", earlyDialogId)];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@", @"createDialog default Dialog=", [transaction getDefaultDialog])];
  if ([transaction getDefaultDialog] != nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$", @"createDialog default Dialog Id=", [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk([transaction getDefaultDialog])) getDialogId])];
  }
  AndroidGovNistJavaxSipStackSIPDialog *retval = nil;
  AndroidGovNistJavaxSipStackSIPDialog *earlyDialog = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->earlyDialogTable_)) getWithId:originalDialogId];
  if (earlyDialog != nil && transaction != nil && ([transaction getDefaultDialog] == nil || [((NSString *) nil_chk([((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk([transaction getDefaultDialog])) getDialogId])) isEqual:originalDialogId])) {
    retval = earlyDialog;
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$$@", @"createDialog early Dialog found : earlyDialogId=", originalDialogId, @" earlyDialog= ", retval)];
    if ([sipResponse isFinalResponse]) {
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->earlyDialogTable_)) removeWithId:originalDialogId];
    }
  }
  else {
    retval = create_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPClientTransaction_withAndroidGovNistJavaxSipMessageSIPResponse_(transaction, sipResponse);
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$$@", @"createDialog early Dialog not found : earlyDialogId=", earlyDialogId, @" created one ", retval)];
  }
  return retval;
}

- (AndroidGovNistJavaxSipStackSIPDialog *)createDialogWithAndroidGovNistJavaxSipSipProviderImpl:(AndroidGovNistJavaxSipSipProviderImpl *)sipProvider
                                                   withAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)sipResponse {
  return create_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipSipProviderImpl_withAndroidGovNistJavaxSipMessageSIPResponse_(sipProvider, sipResponse);
}

- (AndroidGovNistJavaxSipStackSIPDialog *)createDialogWithAndroidGovNistJavaxSipStackSIPClientTransaction:(id<AndroidGovNistJavaxSipStackSIPClientTransaction>)subscribeTx
                                                            withAndroidGovNistJavaxSipStackSIPTransaction:(id<AndroidGovNistJavaxSipStackSIPTransaction>)notifyST {
  return create_AndroidGovNistJavaxSipStackSIPDialog_initWithAndroidGovNistJavaxSipStackSIPClientTransaction_withAndroidGovNistJavaxSipStackSIPTransaction_(subscribeTx, notifyST);
}

- (void)removeDialogWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)dialog {
  NSString *id_ = [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(dialog)) getDialogId];
  NSString *earlyId = [dialog getEarlyDialogId];
  if (earlyId != nil) {
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->earlyDialogTable_)) removeWithId:earlyId];
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->dialogTable_)) removeWithId:earlyId];
  }
  [self removeMergeDialogWithNSString:[dialog getMergeId]];
  if (id_ != nil) {
    id old = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->dialogTable_)) getWithId:id_];
    if (old == dialog) {
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->dialogTable_)) removeWithId:id_];
    }
    if (![dialog testAndSetIsDialogTerminatedEventDelivered]) {
      AndroidJavaxSipDialogTerminatedEvent *event = create_AndroidJavaxSipDialogTerminatedEvent_initWithId_withAndroidJavaxSipDialog_([dialog getSipProvider], dialog);
      [((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk([dialog getSipProvider])) handleEventWithJavaUtilEventObject:event withAndroidGovNistJavaxSipStackSIPTransaction:nil];
    }
  }
  else if (self->isDialogTerminatedEventDeliveredForNullDialog_) {
    if (![dialog testAndSetIsDialogTerminatedEventDelivered]) {
      AndroidJavaxSipDialogTerminatedEvent *event = create_AndroidJavaxSipDialogTerminatedEvent_initWithId_withAndroidJavaxSipDialog_([dialog getSipProvider], dialog);
      [((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk([dialog getSipProvider])) handleEventWithJavaUtilEventObject:event withAndroidGovNistJavaxSipStackSIPTransaction:nil];
    }
  }
}

- (AndroidGovNistJavaxSipStackSIPDialog *)getEarlyDialogWithNSString:(NSString *)dialogId {
  AndroidGovNistJavaxSipStackSIPDialog *sipDialog = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(earlyDialogTable_)) getWithId:dialogId];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$$@", @"getEarlyDialog(", dialogId, @") : returning ", sipDialog)];
  return sipDialog;
}

- (void)removeMergeDialogWithNSString:(NSString *)mergeId {
  if (mergeId != nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$", @"Tyring to remove Dialog from serverDialogMerge table with Merge Dialog Id ", mergeId)];
    AndroidGovNistJavaxSipStackSIPDialog *sipDialog = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(serverDialogMergeTestTable_)) removeWithId:mergeId];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@$$", @"removed Dialog ", sipDialog, @" from serverDialogMerge table with Merge Dialog Id ", mergeId)];
  }
}

- (void)putMergeDialogWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)sipDialog {
  if (sipDialog != nil) {
    NSString *mergeId = [sipDialog getMergeId];
    if (mergeId != nil) {
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(serverDialogMergeTestTable_)) putWithId:mergeId withId:sipDialog];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@$$", @"put Dialog ", sipDialog, @" in serverDialogMerge table with Merge Dialog Id ", mergeId)];
    }
  }
}

- (AndroidGovNistJavaxSipStackSIPDialog *)getDialogWithNSString:(NSString *)dialogId {
  AndroidGovNistJavaxSipStackSIPDialog *sipDialog = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(dialogTable_)) getWithId:dialogId];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$$@", @"getDialog(", dialogId, @") : returning ", sipDialog)];
  return sipDialog;
}

- (void)removeDialogWithNSString:(NSString *)dialogId {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) warnWithNSString:@"Silently removing dialog from table"];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(dialogTable_)) removeWithId:dialogId];
}

- (id<AndroidGovNistJavaxSipStackSIPClientTransaction>)findSubscribeTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)notifyMessage
                                                                              withAndroidGovNistJavaxSipListeningPointImpl:(AndroidGovNistJavaxSipListeningPointImpl *)listeningPoint {
  id<AndroidGovNistJavaxSipStackSIPClientTransaction> retval = nil;
  @try {
    id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(clientTransactionTable_)) values])) iterator];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$I", @"ct table size = ", [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(clientTransactionTable_)) size])];
    NSString *thisToTag = [((id<AndroidJavaxSipHeaderToHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(notifyMessage)) getTo])) getTag];
    if (thisToTag == nil) {
      return retval;
    }
    AndroidGovNistJavaxSipHeaderEvent *eventHdr = (AndroidGovNistJavaxSipHeaderEvent *) cast_chk([notifyMessage getHeaderWithNSString:AndroidJavaxSipHeaderEventHeader_NAME], [AndroidGovNistJavaxSipHeaderEvent class]);
    if (eventHdr == nil) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:@"event Header is null -- returning null"];
      return retval;
    }
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      id<AndroidGovNistJavaxSipStackSIPClientTransaction> ct = (id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check([it next], AndroidGovNistJavaxSipStackSIPClientTransaction_class_());
      if (![((NSString *) nil_chk([((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) nil_chk(ct)) getMethod])) isEqual:AndroidJavaxSipMessageRequest_SUBSCRIBE]) continue;
      NSString *fromTag = [ct getOriginalRequestFromTag];
      AndroidGovNistJavaxSipHeaderEvent *hisEvent = [ct getOriginalRequestEvent];
      if (hisEvent == nil) continue;
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$", @"ct.fromTag = ", fromTag)];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$", @"thisToTag = ", thisToTag)];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@", @"hisEvent = ", hisEvent)];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@", @"eventHdr ", eventHdr)];
      if ([((NSString *) nil_chk(fromTag)) java_equalsIgnoreCase:thisToTag] && hisEvent != nil && [eventHdr matchWithAndroidGovNistJavaxSipHeaderEvent:hisEvent] && [((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([notifyMessage getCallId])) getCallId])) java_equalsIgnoreCase:[ct getOriginalRequestCallId]]) {
        if (![self isDeliverUnsolicitedNotify]) {
          [ct acquireSem];
        }
        retval = ct;
        return ct;
      }
    }
    return retval;
  }
  @finally {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@", @"findSubscribeTransaction : returning ", retval)];
  }
}

- (void)addTransactionPendingAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)serverTransaction {
  NSString *branchId = [((AndroidGovNistJavaxSipHeaderVia *) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(serverTransaction)) getRequest], [AndroidGovNistJavaxSipMessageSIPRequest class])))) getTopmostVia])) getBranch];
  if (branchId != nil) {
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->terminatedServerTransactionsPendingAck_)) putWithId:branchId withId:serverTransaction];
  }
}

- (id<AndroidGovNistJavaxSipStackSIPServerTransaction>)findTransactionPendingAckWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)ackMessage {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->terminatedServerTransactionsPendingAck_)) getWithId:[((AndroidGovNistJavaxSipHeaderVia *) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(ackMessage)) getTopmostVia])) getBranch]];
}

- (jboolean)removeTransactionPendingAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)serverTransaction {
  NSString *branchId = [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(serverTransaction)) getBranchId];
  if (branchId != nil && [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->terminatedServerTransactionsPendingAck_)) containsKeyWithId:branchId]) {
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->terminatedServerTransactionsPendingAck_)) removeWithId:branchId];
    return true;
  }
  else {
    return false;
  }
}

- (jboolean)isTransactionPendingAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)serverTransaction {
  NSString *branchId = [((AndroidGovNistJavaxSipHeaderVia *) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(serverTransaction)) getRequest], [AndroidGovNistJavaxSipMessageSIPRequest class])))) getTopmostVia])) getBranch];
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->terminatedServerTransactionsPendingAck_)) containsWithId:branchId];
}

- (id<AndroidGovNistJavaxSipStackSIPTransaction>)findTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage
                                                                                                withBoolean:(jboolean)isServer {
  id<AndroidGovNistJavaxSipStackSIPTransaction> retval = nil;
  @try {
    if (isServer) {
      AndroidGovNistJavaxSipHeaderVia *via = [((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) getTopmostVia];
      if ([((AndroidGovNistJavaxSipHeaderVia *) nil_chk(via)) getBranch] != nil) {
        NSString *key = [sipMessage getTransactionId];
        retval = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(serverTransactionTable_)) getWithId:key];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$$@", @"serverTx: looking for key ", key, @" existing=", serverTransactionTable_)];
        if ([((NSString *) nil_chk(key)) hasPrefix:AndroidGovNistJavaxSipSIPConstants_BRANCH_MAGIC_COOKIE_LOWER_CASE]) {
          return retval;
        }
      }
      id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(serverTransactionTable_)) values])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        id<AndroidGovNistJavaxSipStackSIPServerTransaction> sipServerTransaction = [it next];
        if ([((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(sipServerTransaction)) isMessagePartOfTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:sipMessage]) {
          retval = sipServerTransaction;
          return retval;
        }
      }
    }
    else {
      AndroidGovNistJavaxSipHeaderVia *via = [((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) getTopmostVia];
      if ([((AndroidGovNistJavaxSipHeaderVia *) nil_chk(via)) getBranch] != nil) {
        NSString *key = [sipMessage getTransactionId];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$", @"clientTx: looking for key ", key)];
        retval = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(clientTransactionTable_)) getWithId:key];
        if ([((NSString *) nil_chk(key)) hasPrefix:AndroidGovNistJavaxSipSIPConstants_BRANCH_MAGIC_COOKIE_LOWER_CASE]) {
          return retval;
        }
      }
      id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(clientTransactionTable_)) values])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        id<AndroidGovNistJavaxSipStackSIPClientTransaction> clientTransaction = [it next];
        if ([((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) nil_chk(clientTransaction)) isMessagePartOfTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:sipMessage]) {
          retval = clientTransaction;
          return retval;
        }
      }
    }
  }
  @finally {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@", @"findTransaction: returning  : ", retval)];
  }
  return retval;
}

- (id<AndroidGovNistJavaxSipStackSIPTransaction>)findTransactionWithNSString:(NSString *)transactionId
                                                                 withBoolean:(jboolean)isServer {
  if (isServer) {
    return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(serverTransactionTable_)) getWithId:transactionId];
  }
  else {
    return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(clientTransactionTable_)) getWithId:transactionId];
  }
}

- (id<AndroidGovNistJavaxSipStackSIPTransaction>)findCancelTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)cancelRequest
                                                                                                      withBoolean:(jboolean)isServer {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@$Z", @"findCancelTransaction request= \n", cancelRequest, @"\nfindCancelRequest isServer=", isServer)];
  if (isServer) {
    id<JavaUtilIterator> li = [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->serverTransactionTable_)) values])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(li)) hasNext]) {
      id<AndroidGovNistJavaxSipStackSIPTransaction> transaction = [li next];
      id<AndroidGovNistJavaxSipStackSIPServerTransaction> sipServerTransaction = (id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check(transaction, AndroidGovNistJavaxSipStackSIPServerTransaction_class_());
      if ([((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(sipServerTransaction)) doesCancelMatchTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:cancelRequest]) return sipServerTransaction;
    }
  }
  else {
    id<JavaUtilIterator> li = [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->clientTransactionTable_)) values])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(li)) hasNext]) {
      id<AndroidGovNistJavaxSipStackSIPTransaction> transaction = [li next];
      id<AndroidGovNistJavaxSipStackSIPClientTransaction> sipClientTransaction = (id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(transaction, AndroidGovNistJavaxSipStackSIPClientTransaction_class_());
      if ([((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) nil_chk(sipClientTransaction)) doesCancelMatchTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:cancelRequest]) return sipClientTransaction;
    }
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:@"Could not find transaction for cancel request"];
  return nil;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackStackMessageFactory:(id<AndroidGovNistJavaxSipStackStackMessageFactory>)messageFactory {
  AndroidGovNistJavaxSipStackSIPTransactionStack_initWithAndroidGovNistJavaxSipStackStackMessageFactory_(self, messageFactory);
  return self;
}

- (id<AndroidGovNistJavaxSipStackSIPServerTransaction>)findPendingTransactionWithNSString:(NSString *)transactionId {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$", @"looking for pending tx for :", transactionId)];
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(pendingTransactions_)) getWithId:transactionId];
}

- (jboolean)findMergedTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest {
  if (![((NSString *) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getMethod])) isEqual:AndroidJavaxSipMessageRequest_INVITE]) {
    return false;
  }
  NSString *mergeId = [sipRequest getMergeId];
  if (mergeId != nil) {
    id<AndroidGovNistJavaxSipStackSIPServerTransaction> mergedTransaction = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->mergeTable_)) getWithId:mergeId];
    if (mergedTransaction != nil && ![mergedTransaction isMessagePartOfTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:sipRequest]) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$$@", @"Mathcing merged transaction for merge id ", mergeId, @" with ", mergedTransaction)];
      return true;
    }
    else {
      AndroidGovNistJavaxSipStackSIPDialog *serverDialog = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->serverDialogMergeTestTable_)) getWithId:mergeId];
      if (serverDialog != nil && serverDialog->firstTransactionIsServerTransaction_ && [serverDialog getState] == JreLoadStatic(AndroidJavaxSipDialogState, CONFIRMED)) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$$@", @"Mathcing merged dialog for merge id ", mergeId, @" with ", serverDialog)];
        return true;
      }
    }
  }
  return false;
}

- (void)removePendingTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)tr {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$", @"removePendingTx: ", [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(tr)) getTransactionId])];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->pendingTransactions_)) removeWithId:[tr getTransactionId]];
}

- (void)removeFromMergeTableWithAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)tr {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:@"Removing tx from merge table "];
  NSString *key = [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(tr)) getMergeId];
  if (key != nil) {
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->mergeTable_)) removeWithId:key];
  }
}

- (void)putInMergeTableWithAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)sipTransaction
                               withAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest {
  NSString *mergeKey = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getMergeId];
  if (mergeKey != nil) {
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->mergeTable_)) putWithId:mergeKey withId:sipTransaction];
  }
}

- (void)mapTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)transaction {
  if ([((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(transaction)) isTransactionMapped]) return;
  AndroidGovNistJavaxSipStackSIPTransactionStack_addTransactionHashWithAndroidGovNistJavaxSipStackSIPTransaction_(self, transaction);
  [transaction setTransactionMappedWithBoolean:true];
}

- (id<AndroidGovNistJavaxSipStackServerRequestInterface>)newSIPServerRequestWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)requestReceived
                                                                          withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)requestMessageChannel {
  id<AndroidGovNistJavaxSipStackSIPServerTransaction> nextTransaction;
  NSString *key = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(requestReceived)) getTransactionId];
  [requestReceived setMessageChannelWithId:requestMessageChannel];
  if (sipMessageValve_ != nil) {
    @try {
      if (![sipMessageValve_ processRequestWithAndroidGovNistJavaxSipMessageSIPRequest:requestReceived withAndroidGovNistJavaxSipStackMessageChannel:requestMessageChannel]) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@", @"Request dropped by the SIP message valve. Request = ", requestReceived)];
        return nil;
      }
    }
    @catch (JavaLangException *e) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) errorWithNSString:JreStrcat("$@$", @"An issue happening the valve on request ", requestReceived, @" thus the message will not be processed further") withNSException:e];
      return nil;
    }
  }
  id<AndroidGovNistJavaxSipStackSIPServerTransaction> currentTransaction = (id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check([self findTransactionWithNSString:key withBoolean:true], AndroidGovNistJavaxSipStackSIPServerTransaction_class_());
  if (currentTransaction == nil || ![currentTransaction isMessagePartOfTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:requestReceived]) {
    currentTransaction = nil;
    if (![((NSString *) nil_chk([((NSString *) nil_chk(key)) lowercaseString])) hasPrefix:AndroidGovNistJavaxSipSIPConstants_BRANCH_MAGIC_COOKIE_LOWER_CASE]) {
      id<JavaUtilIterator> transactionIterator = [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(serverTransactionTable_)) values])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(transactionIterator)) hasNext] && currentTransaction == nil) {
        nextTransaction = [transactionIterator next];
        if ([((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(nextTransaction)) isMessagePartOfTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:requestReceived]) {
          currentTransaction = nextTransaction;
        }
      }
    }
    if (currentTransaction == nil) {
      currentTransaction = [self findPendingTransactionWithNSString:key];
      if (currentTransaction != nil) {
        [requestReceived setTransactionWithId:currentTransaction];
        if ([currentTransaction acquireSem]) return currentTransaction;
        else return nil;
      }
      currentTransaction = [self createServerTransactionWithAndroidGovNistJavaxSipStackMessageChannel:requestMessageChannel];
      if (currentTransaction != nil) {
        [currentTransaction setOriginalRequestWithAndroidGovNistJavaxSipMessageSIPRequest:requestReceived];
        [requestReceived setTransactionWithId:currentTransaction];
      }
    }
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$C$$@", @"newSIPServerRequest( ", [requestReceived getMethod], ':', [((AndroidGovNistJavaxSipHeaderVia *) nil_chk([requestReceived getTopmostVia])) getBranch], @"):", currentTransaction)];
  if (currentTransaction != nil) [currentTransaction setRequestInterfaceWithAndroidGovNistJavaxSipStackServerRequestInterface:[((id<AndroidGovNistJavaxSipStackStackMessageFactory>) nil_chk(sipMessageFactory_)) newSIPServerRequestWithAndroidGovNistJavaxSipMessageSIPRequest:requestReceived withAndroidGovNistJavaxSipStackSIPTransaction:currentTransaction]];
  if (currentTransaction != nil && [currentTransaction acquireSem]) {
    return currentTransaction;
  }
  else if (currentTransaction != nil) {
    @try {
      if ([currentTransaction isMessagePartOfTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:requestReceived] && [((NSString *) nil_chk([currentTransaction getMethod])) isEqual:[requestReceived getMethod]]) {
        AndroidGovNistJavaxSipMessageSIPResponse *trying = [requestReceived createResponseWithInt:AndroidJavaxSipMessageResponse_TRYING];
        [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(trying)) removeContent];
        [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk([currentTransaction getMessageChannel])) sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:trying];
      }
    }
    @catch (JavaLangException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) errorWithNSString:@"Exception occured sending TRYING"];
    }
    return nil;
  }
  else {
    return nil;
  }
}

- (id<AndroidGovNistJavaxSipStackServerResponseInterface>)newSIPServerResponseWithAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)responseReceived
                                                                             withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)responseMessageChannel {
  id<JavaUtilIterator> transactionIterator;
  id<AndroidGovNistJavaxSipStackSIPClientTransaction> nextTransaction;
  id<AndroidGovNistJavaxSipStackSIPClientTransaction> currentTransaction;
  if (sipMessageValve_ != nil) {
    @try {
      if (![sipMessageValve_ processResponseWithAndroidJavaxSipMessageResponse:responseReceived withAndroidGovNistJavaxSipStackMessageChannel:responseMessageChannel]) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@", @"Response dropped by the SIP message valve. Response = ", responseReceived)];
        return nil;
      }
    }
    @catch (JavaLangException *e) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) errorWithNSString:JreStrcat("$@$", @"An issue happening the valve on response ", responseReceived, @" thus the message will not be processed further") withNSException:e];
      return nil;
    }
  }
  NSString *key = [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(responseReceived)) getTransactionId];
  currentTransaction = (id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check([self findTransactionWithNSString:key withBoolean:false], AndroidGovNistJavaxSipStackSIPClientTransaction_class_());
  if (currentTransaction == nil || (![currentTransaction isMessagePartOfTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:responseReceived] && ![((NSString *) nil_chk(key)) hasPrefix:AndroidGovNistJavaxSipSIPConstants_BRANCH_MAGIC_COOKIE_LOWER_CASE])) {
    transactionIterator = [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(clientTransactionTable_)) values])) iterator];
    currentTransaction = nil;
    while ([((id<JavaUtilIterator>) nil_chk(transactionIterator)) hasNext] && currentTransaction == nil) {
      nextTransaction = [transactionIterator next];
      if ([((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) nil_chk(nextTransaction)) isMessagePartOfTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:responseReceived]) {
        currentTransaction = nextTransaction;
      }
    }
    if (currentTransaction == nil) {
      [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(responseMessageChannel)) logResponseWithAndroidGovNistJavaxSipMessageSIPResponse:responseReceived withLong:JavaLangSystem_currentTimeMillis() withNSString:@"before processing"];
      return [((id<AndroidGovNistJavaxSipStackStackMessageFactory>) nil_chk(sipMessageFactory_)) newSIPServerResponseWithAndroidGovNistJavaxSipMessageSIPResponse:responseReceived withAndroidGovNistJavaxSipStackMessageChannel:responseMessageChannel];
    }
  }
  jboolean acquired = [currentTransaction acquireSem];
  [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk([currentTransaction getMessageChannel])) logResponseWithAndroidGovNistJavaxSipMessageSIPResponse:responseReceived withLong:JavaLangSystem_currentTimeMillis() withNSString:@"before processing"];
  if (acquired) {
    id<AndroidGovNistJavaxSipStackServerResponseInterface> sri = [((id<AndroidGovNistJavaxSipStackStackMessageFactory>) nil_chk(sipMessageFactory_)) newSIPServerResponseWithAndroidGovNistJavaxSipMessageSIPResponse:responseReceived withAndroidGovNistJavaxSipStackMessageChannel:[currentTransaction getMessageChannel]];
    if (sri != nil) {
      [currentTransaction setResponseInterfaceWithAndroidGovNistJavaxSipStackServerResponseInterface:sri];
    }
    else {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:@"returning null - serverResponseInterface is null!"];
      [currentTransaction releaseSem];
      return nil;
    }
  }
  else {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:@"Could not aquire semaphore !!"];
  }
  if (acquired) return currentTransaction;
  else return nil;
}

- (AndroidGovNistJavaxSipStackMessageChannel *)createMessageChannelWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)request
                                                               withAndroidGovNistJavaxSipStackMessageProcessor:(AndroidGovNistJavaxSipStackMessageProcessor *)mp
                                                                                 withAndroidJavaxSipAddressHop:(id<AndroidJavaxSipAddressHop>)nextHop {
  AndroidGovNistCoreHost *targetHost = create_AndroidGovNistCoreHost_init();
  [targetHost setHostnameWithNSString:[((id<AndroidJavaxSipAddressHop>) nil_chk(nextHop)) getHost]];
  AndroidGovNistCoreHostPort *targetHostPort = create_AndroidGovNistCoreHostPort_init();
  [targetHostPort setHostWithAndroidGovNistCoreHost:targetHost];
  [targetHostPort setPortWithInt:[nextHop getPort]];
  AndroidGovNistJavaxSipStackMessageChannel *returnChannel = [((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(mp)) createMessageChannelWithAndroidGovNistCoreHostPort:targetHostPort];
  return returnChannel;
}

- (id<AndroidGovNistJavaxSipStackSIPClientTransaction>)createClientTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest
                                                                            withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)encapsulatedMessageChannel {
  id<AndroidGovNistJavaxSipStackSIPClientTransaction> ct = create_AndroidGovNistJavaxSipStackSIPClientTransactionImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_(self, encapsulatedMessageChannel);
  [ct setOriginalRequestWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
  return ct;
}

- (id<AndroidGovNistJavaxSipStackSIPServerTransaction>)createServerTransactionWithAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)encapsulatedMessageChannel {
  if (unlimitedServerTransactionTableSize_) {
    return create_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_(self, encapsulatedMessageChannel);
  }
  else {
    jfloat threshold = ((jfloat) ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(serverTransactionTable_)) size] - serverTransactionTableLowaterMark_)) / ((jfloat) (serverTransactionTableHighwaterMark_ - serverTransactionTableLowaterMark_));
    jboolean decision = JavaLangMath_random() > 1.0 - threshold;
    if (decision) {
      return nil;
    }
    else {
      return create_AndroidGovNistJavaxSipStackSIPServerTransactionImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_(self, encapsulatedMessageChannel);
    }
  }
}

- (jint)getClientTransactionTableSize {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->clientTransactionTable_)) size];
}

- (jint)getServerTransactionTableSize {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->serverTransactionTable_)) size];
}

- (void)addTransactionWithAndroidGovNistJavaxSipStackSIPClientTransaction:(id<AndroidGovNistJavaxSipStackSIPClientTransaction>)clientTransaction {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@", @"added transaction ", clientTransaction)];
  AndroidGovNistJavaxSipStackSIPTransactionStack_addTransactionHashWithAndroidGovNistJavaxSipStackSIPTransaction_(self, clientTransaction);
}

- (void)removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:(id<AndroidGovNistJavaxSipStackSIPTransaction>)sipTransaction {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$$@", @"removeTransaction: Removing Transaction = ", [((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk(sipTransaction)) getTransactionId], @" transaction = ", sipTransaction)];
  id removed = nil;
  @try {
    if ([AndroidGovNistJavaxSipStackSIPServerTransaction_class_() isInstance:sipTransaction]) {
      NSString *key = [sipTransaction getTransactionId];
      removed = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(serverTransactionTable_)) removeWithId:key];
      NSString *method = [sipTransaction getMethod];
      [self removePendingTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check(sipTransaction, AndroidGovNistJavaxSipStackSIPServerTransaction_class_())];
      [self removeTransactionPendingAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check(sipTransaction, AndroidGovNistJavaxSipStackSIPServerTransaction_class_())];
      if ([((NSString *) nil_chk(method)) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_INVITE]) {
        [self removeFromMergeTableWithAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check(sipTransaction, AndroidGovNistJavaxSipStackSIPServerTransaction_class_())];
      }
      AndroidGovNistJavaxSipSipProviderImpl *sipProvider = [sipTransaction getSipProvider];
      if (removed != nil && [sipTransaction testAndSetTransactionTerminatedEvent]) {
        AndroidJavaxSipTransactionTerminatedEvent *event = create_AndroidJavaxSipTransactionTerminatedEvent_initWithId_withAndroidJavaxSipServerTransaction_(sipProvider, (id<AndroidJavaxSipServerTransaction>) cast_check(sipTransaction, AndroidJavaxSipServerTransaction_class_()));
        [((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(sipProvider)) handleEventWithJavaUtilEventObject:event withAndroidGovNistJavaxSipStackSIPTransaction:sipTransaction];
      }
    }
    else {
      NSString *key = [sipTransaction getTransactionId];
      removed = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(clientTransactionTable_)) removeWithId:key];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@$$", @"REMOVED client tx ", removed, @" KEY = ", key)];
      if (removed != nil) {
        id<AndroidGovNistJavaxSipStackSIPClientTransaction> clientTx = (id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(removed, AndroidGovNistJavaxSipStackSIPClientTransaction_class_());
        NSString *forkId = [clientTx getForkId];
        if (forkId != nil && [clientTx isInviteTransaction] && self->maxForkTime_ != 0) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$$I$", @"Scheduling to remove forked client transaction : forkId = ", forkId, @" in ", self->maxForkTime_, @" seconds")];
          [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk(self->timer_)) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:create_AndroidGovNistJavaxSipStackSIPTransactionStack_RemoveForkedTransactionTimerTask_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withNSString_(self, forkId) withLong:self->maxForkTime_ * 1000];
          [clientTx stopExpiresTimer];
        }
      }
      if (removed != nil && [sipTransaction testAndSetTransactionTerminatedEvent]) {
        AndroidGovNistJavaxSipSipProviderImpl *sipProvider = [sipTransaction getSipProvider];
        AndroidJavaxSipTransactionTerminatedEvent *event = create_AndroidJavaxSipTransactionTerminatedEvent_initWithId_withAndroidJavaxSipClientTransaction_(sipProvider, (id<AndroidJavaxSipClientTransaction>) cast_check(sipTransaction, AndroidJavaxSipClientTransaction_class_()));
        [((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(sipProvider)) handleEventWithJavaUtilEventObject:event withAndroidGovNistJavaxSipStackSIPTransaction:sipTransaction];
      }
    }
  }
  @finally {
    if (removed != nil) {
      [((id<AndroidGovNistJavaxSipStackSIPTransaction>) cast_check(removed, AndroidGovNistJavaxSipStackSIPTransaction_class_())) cancelMaxTxLifeTimeTimer];
    }
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"removeTransaction: Table size :  clientTransactionTable %d  serverTransactionTable %d  mergetTable %d  terminatedServerTransactionsPendingAck %d   forkedClientTransactionTable %d  pendingTransactions %d ", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(clientTransactionTable_)) size]), JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(serverTransactionTable_)) size]), JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(mergeTable_)) size]), JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(terminatedServerTransactionsPendingAck_)) size]), JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(forkedClientTransactionTable_)) size]), JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(pendingTransactions_)) size]) } count:6 type:NSObject_class_()])];
  }
}

- (void)addTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)serverTransaction {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@", @"added transaction ", serverTransaction)];
  [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(serverTransaction)) map];
  AndroidGovNistJavaxSipStackSIPTransactionStack_addTransactionHashWithAndroidGovNistJavaxSipStackSIPTransaction_(self, serverTransaction);
}

- (void)addTransactionHashWithAndroidGovNistJavaxSipStackSIPTransaction:(id<AndroidGovNistJavaxSipStackSIPTransaction>)sipTransaction {
  AndroidGovNistJavaxSipStackSIPTransactionStack_addTransactionHashWithAndroidGovNistJavaxSipStackSIPTransaction_(self, sipTransaction);
}

- (void)decrementActiveClientTransactionCount {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->activeClientTransactionCount_)) decrementAndGet] <= self->clientTransactionTableLowaterMark_ && !self->unlimitedClientTransactionTableSize_) {
    @synchronized(self->clientTransactionTable_) {
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(clientTransactionTable_)) java_notify];
    }
  }
}

- (void)removeTransactionHashWithAndroidGovNistJavaxSipStackSIPTransaction:(id<AndroidGovNistJavaxSipStackSIPTransaction>)sipTransaction {
  AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = [((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk(sipTransaction)) getOriginalRequest];
  if (sipRequest == nil) return;
  id removed = nil;
  if ([AndroidGovNistJavaxSipStackSIPClientTransaction_class_() isInstance:sipTransaction]) {
    NSString *key = [sipTransaction getTransactionId];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$", @"removing client Tx : ", key)];
    removed = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(clientTransactionTable_)) removeWithId:key];
  }
  else if ([AndroidGovNistJavaxSipStackSIPServerTransaction_class_() isInstance:sipTransaction]) {
    NSString *key = [sipTransaction getTransactionId];
    removed = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(serverTransactionTable_)) removeWithId:key];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$", @"removing server Tx : ", key)];
  }
  if (removed != nil) {
    [((id<AndroidGovNistJavaxSipStackSIPTransaction>) cast_check(removed, AndroidGovNistJavaxSipStackSIPTransaction_class_())) cancelMaxTxLifeTimeTimer];
  }
}

- (void)transactionErrorEventWithAndroidGovNistJavaxSipStackSIPTransactionErrorEvent:(AndroidGovNistJavaxSipStackSIPTransactionErrorEvent *)transactionErrorEvent {
  @synchronized(self) {
    id<AndroidGovNistJavaxSipStackSIPTransaction> transaction = (id<AndroidGovNistJavaxSipStackSIPTransaction>) cast_check([((AndroidGovNistJavaxSipStackSIPTransactionErrorEvent *) nil_chk(transactionErrorEvent)) getSource], AndroidGovNistJavaxSipStackSIPTransaction_class_());
    if ([transactionErrorEvent getErrorID] == AndroidGovNistJavaxSipStackSIPTransactionErrorEvent_TRANSPORT_ERROR) {
      [((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk(transaction)) setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
      if ([AndroidGovNistJavaxSipStackSIPServerTransaction_class_() isInstance:transaction]) {
        [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check(transaction, AndroidGovNistJavaxSipStackSIPServerTransaction_class_())) setCollectionTimeWithInt:0];
      }
      [transaction disableTimeoutTimer];
      [transaction disableRetransmissionTimer];
    }
  }
}

- (void)dialogErrorEventWithAndroidGovNistJavaxSipStackSIPDialogErrorEvent:(AndroidGovNistJavaxSipStackSIPDialogErrorEvent *)dialogErrorEvent {
  @synchronized(self) {
    AndroidGovNistJavaxSipStackSIPDialog *sipDialog = (AndroidGovNistJavaxSipStackSIPDialog *) cast_chk([((AndroidGovNistJavaxSipStackSIPDialogErrorEvent *) nil_chk(dialogErrorEvent)) getSource], [AndroidGovNistJavaxSipStackSIPDialog class]);
    id<AndroidJavaxSipSipListener> sipListener = [((AndroidGovNistJavaxSipSipStackImpl *) cast_chk(self, [AndroidGovNistJavaxSipSipStackImpl class])) getSipListener];
    if (sipDialog != nil && !([AndroidGovNistJavaxSipSipListenerExt_class_() isInstance:sipListener])) {
      [sipDialog delete__];
    }
  }
}

- (void)stopStack {
  self->toExit_ = true;
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->pendingTransactions_)) clear];
  @synchronized(self) {
    [self java_notifyAll];
  }
  @synchronized(self->clientTransactionTable_) {
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(clientTransactionTable_)) java_notifyAll];
  }
  if (AndroidGovNistJavaxSipStackSIPTransactionStack_selfRoutingThreadpoolExecutor != nil && [JavaUtilConcurrentExecutorService_class_() isInstance:AndroidGovNistJavaxSipStackSIPTransactionStack_selfRoutingThreadpoolExecutor]) {
    [((id<JavaUtilConcurrentExecutorService>) cast_check(AndroidGovNistJavaxSipStackSIPTransactionStack_selfRoutingThreadpoolExecutor, JavaUtilConcurrentExecutorService_class_())) shutdown];
  }
  JreStrongAssign(&AndroidGovNistJavaxSipStackSIPTransactionStack_selfRoutingThreadpoolExecutor, nil);
  IOSObjectArray *processorList;
  processorList = [self getMessageProcessors];
  for (jint processorIndex = 0; processorIndex < ((IOSObjectArray *) nil_chk(processorList))->size_; processorIndex++) {
    [self removeMessageProcessorWithAndroidGovNistJavaxSipStackMessageProcessor:IOSObjectArray_Get(processorList, processorIndex)];
  }
  [self closeAllSockets];
  if (self->timer_ != nil) [self->timer_ stop];
  @try {
    JavaLangThread_sleepWithLong_(1000);
  }
  @catch (JavaLangInterruptedException *ex) {
  }
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->clientTransactionTable_)) clear];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->serverTransactionTable_)) clear];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->dialogTable_)) clear];
  [((id<AndroidGovNistCoreServerLogger>) nil_chk(self->serverLogger_)) closeLogFile];
}

- (void)closeAllSockets {
  [((AndroidGovNistJavaxSipStackIOHandler *) nil_chk(self->ioHandler_)) closeAll];
  for (AndroidGovNistJavaxSipStackMessageProcessor * __strong p in nil_chk(messageProcessors_)) {
    if ([p isKindOfClass:[AndroidGovNistJavaxSipStackNioTcpMessageProcessor class]]) {
      AndroidGovNistJavaxSipStackNioTcpMessageProcessor *niop = (AndroidGovNistJavaxSipStackNioTcpMessageProcessor *) cast_chk(p, [AndroidGovNistJavaxSipStackNioTcpMessageProcessor class]);
      [((AndroidGovNistJavaxSipStackNIOHandler *) nil_chk(((AndroidGovNistJavaxSipStackNioTcpMessageProcessor *) nil_chk(niop))->nioHandler_)) closeAll];
    }
  }
}

- (void)putPendingTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)tr {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@", @"putPendingTransaction: ", tr)];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->pendingTransactions_)) putWithId:[((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(tr)) getTransactionId] withId:tr];
}

- (id<AndroidGovNistCoreNetNetworkLayer>)getNetworkLayer {
  if (networkLayer_ == nil) {
    return JreLoadStatic(AndroidGovNistCoreNetDefaultNetworkLayer, SINGLETON);
  }
  else {
    return networkLayer_;
  }
}

- (id<OrgSlf4jLogger>)getStackLogger {
  return AndroidGovNistJavaxSipStackSIPTransactionStack_logger;
}

- (id<AndroidGovNistCoreServerLogger>)getServerLogger {
  return self->serverLogger_;
}

- (jint)getMaxMessageSize {
  return self->maxMessageSize_;
}

- (void)setSingleThreaded {
  self->threadPoolSize_ = 1;
}

- (jint)getTcpPostParsingThreadPoolSize {
  return tcpPostParsingThreadPoolSize_;
}

- (void)setTcpPostParsingThreadPoolSizeWithInt:(jint)tcpPostParsingThreadPoolSize {
  self->tcpPostParsingThreadPoolSize_ = tcpPostParsingThreadPoolSize;
}

- (void)setThreadPoolSizeWithInt:(jint)size {
  self->threadPoolSize_ = size;
}

- (void)setMaxConnectionsWithInt:(jint)nconnections {
  self->maxConnections_ = nconnections;
}

- (id<AndroidJavaxSipAddressHop>)getNextHopWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest {
  if (self->useRouterForAll_) {
    if (router_ != nil) return [router_ getNextHopWithAndroidJavaxSipMessageRequest:sipRequest];
    else return nil;
  }
  else {
    if ([((id<AndroidJavaxSipAddressURI>) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getRequestURI])) isSipURI] || [sipRequest getRouteHeaders] != nil) {
      return [((AndroidGovNistJavaxSipStackDefaultRouter *) nil_chk(defaultRouter_)) getNextHopWithAndroidJavaxSipMessageRequest:sipRequest];
    }
    else if (router_ != nil) {
      return [router_ getNextHopWithAndroidJavaxSipMessageRequest:sipRequest];
    }
    else return nil;
  }
}

- (void)setStackNameWithNSString:(NSString *)stackName {
  JreStrongAssign(&self->stackName_, stackName);
}

- (void)setHostAddressWithNSString:(NSString *)stackAddress {
  if ([((NSString *) nil_chk(stackAddress)) java_indexOf:':'] != [stackAddress java_lastIndexOf:':'] && [((NSString *) nil_chk([stackAddress java_trim])) charAtWithInt:0] != '[') JreStrongAssign(&self->stackAddress_, JreStrcat("C$C", '[', stackAddress, ']'));
  else JreStrongAssign(&self->stackAddress_, stackAddress);
  JreStrongAssign(&self->stackInetAddress_, JavaNetInetAddress_getByNameWithNSString_(stackAddress));
}

- (NSString *)getHostAddress {
  return self->stackAddress_;
}

- (void)setRouterWithAndroidJavaxSipAddressRouter:(id<AndroidJavaxSipAddressRouter>)router {
  JreStrongAssign(&self->router_, router);
}

- (id<AndroidJavaxSipAddressRouter>)getRouterWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)request {
  if ([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(request)) getRequestLine] == nil) {
    return self->defaultRouter_;
  }
  else if (self->useRouterForAll_) {
    return self->router_;
  }
  else {
    if ([((NSString *) nil_chk([((id<AndroidJavaxSipAddressURI>) nil_chk([request getRequestURI])) getScheme])) isEqual:@"sip"] || [((NSString *) nil_chk([((id<AndroidJavaxSipAddressURI>) nil_chk([request getRequestURI])) getScheme])) isEqual:@"sips"]) {
      return self->defaultRouter_;
    }
    else {
      if (self->router_ != nil) return self->router_;
      else return defaultRouter_;
    }
  }
}

- (id<AndroidJavaxSipAddressRouter>)getRouter {
  return self->router_;
}

- (jboolean)isAlive {
  return !toExit_;
}

- (void)addMessageProcessorWithAndroidGovNistJavaxSipStackMessageProcessor:(AndroidGovNistJavaxSipStackMessageProcessor *)newMessageProcessor {
  [((id<JavaUtilCollection>) nil_chk(messageProcessors_)) addWithId:newMessageProcessor];
}

- (void)removeMessageProcessorWithAndroidGovNistJavaxSipStackMessageProcessor:(AndroidGovNistJavaxSipStackMessageProcessor *)oldMessageProcessor {
  if ([((id<JavaUtilCollection>) nil_chk(messageProcessors_)) removeWithId:oldMessageProcessor]) {
    [((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(oldMessageProcessor)) stop];
  }
}

- (IOSObjectArray *)getMessageProcessors {
  return [((id<JavaUtilCollection>) nil_chk(messageProcessors_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:AndroidGovNistJavaxSipStackMessageProcessor_class_()]];
}

- (AndroidGovNistJavaxSipStackMessageProcessor *)createMessageProcessorWithJavaNetInetAddress:(JavaNetInetAddress *)ipAddress
                                                                                      withInt:(jint)port
                                                                                 withNSString:(NSString *)transport {
  AndroidGovNistJavaxSipStackMessageProcessor *newMessageProcessor = [((id<AndroidGovNistJavaxSipStackMessageProcessorFactory>) nil_chk(messageProcessorFactory_)) createMessageProcessorWithAndroidGovNistJavaxSipStackSIPTransactionStack:self withJavaNetInetAddress:ipAddress withInt:port withNSString:transport];
  [self addMessageProcessorWithAndroidGovNistJavaxSipStackMessageProcessor:newMessageProcessor];
  return newMessageProcessor;
}

- (void)setMessageFactoryWithAndroidGovNistJavaxSipStackStackMessageFactory:(id<AndroidGovNistJavaxSipStackStackMessageFactory>)messageFactory {
  JreStrongAssign(&self->sipMessageFactory_, messageFactory);
}

- (AndroidGovNistJavaxSipStackMessageChannel *)createRawMessageChannelWithNSString:(NSString *)sourceIpAddress
                                                                           withInt:(jint)sourcePort
                                                     withAndroidJavaxSipAddressHop:(id<AndroidJavaxSipAddressHop>)nextHop {
  AndroidGovNistCoreHost *targetHost;
  AndroidGovNistCoreHostPort *targetHostPort;
  id<JavaUtilIterator> processorIterator;
  AndroidGovNistJavaxSipStackMessageProcessor *nextProcessor;
  AndroidGovNistJavaxSipStackMessageChannel *newChannel;
  targetHost = create_AndroidGovNistCoreHost_init();
  [targetHost setHostnameWithNSString:[((id<AndroidJavaxSipAddressHop>) nil_chk(nextHop)) getHost]];
  targetHostPort = create_AndroidGovNistCoreHostPort_init();
  [targetHostPort setHostWithAndroidGovNistCoreHost:targetHost];
  [targetHostPort setPortWithInt:[nextHop getPort]];
  newChannel = nil;
  processorIterator = [((id<JavaUtilCollection>) nil_chk(messageProcessors_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(processorIterator)) hasNext] && newChannel == nil) {
    nextProcessor = (AndroidGovNistJavaxSipStackMessageProcessor *) cast_chk([processorIterator next], [AndroidGovNistJavaxSipStackMessageProcessor class]);
    if ([((NSString *) nil_chk([nextHop getTransport])) java_equalsIgnoreCase:[((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(nextProcessor)) getTransport]] && [((NSString *) nil_chk(sourceIpAddress)) isEqual:[((JavaNetInetAddress *) nil_chk([nextProcessor getIpAddress])) getHostAddress]] && sourcePort == [nextProcessor getPort]) {
      @try {
        newChannel = [nextProcessor createMessageChannelWithAndroidGovNistCoreHostPort:targetHostPort];
      }
      @catch (JavaNetUnknownHostException *ex) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) errorWithNSString:@"UnknownHostException" withNSException:ex];
        @throw ex;
      }
      @catch (JavaIoIOException *e) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) errorWithNSString:@"IOException" withNSException:e];
      }
    }
  }
  if (newChannel == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$I", @"newChanne is null, messageProcessors.size = ", [((id<JavaUtilCollection>) nil_chk(messageProcessors_)) size])];
    processorIterator = [((id<JavaUtilCollection>) nil_chk(messageProcessors_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(processorIterator)) hasNext] && newChannel == nil) {
      nextProcessor = (AndroidGovNistJavaxSipStackMessageProcessor *) cast_chk([processorIterator next], [AndroidGovNistJavaxSipStackMessageProcessor class]);
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@$$$@$I", @"nextProcessor:", nextProcessor, @"| transport = ", [((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(nextProcessor)) getTransport], @" ipAddress=", [nextProcessor getIpAddress], @" port=", [nextProcessor getPort])];
    }
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:@"More info on newChannel=null"];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@$$$I$@", @"nextHop=", nextHop, @" sourceIp=", sourceIpAddress, @" sourcePort=", sourcePort, @" targetHostPort=", targetHostPort)];
  }
  return newChannel;
}

- (jboolean)isEventForkedWithNSString:(NSString *)ename {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$$Z", @"isEventForked: ", ename, @" returning ", [((JavaUtilHashSet *) nil_chk(self->forkedEvents_)) containsWithId:ename])];
  return [((JavaUtilHashSet *) nil_chk(self->forkedEvents_)) containsWithId:ename];
}

- (id<AndroidGovNistCoreNetAddressResolver>)getAddressResolver {
  return self->addressResolver_;
}

- (void)setAddressResolverWithAndroidGovNistCoreNetAddressResolver:(id<AndroidGovNistCoreNetAddressResolver>)addressResolver {
  JreStrongAssign(&self->addressResolver_, addressResolver);
}

- (void)setLogRecordFactoryWithAndroidGovNistJavaxSipLogRecordFactory:(id<AndroidGovNistJavaxSipLogRecordFactory>)logRecordFactory {
  JreStrongAssign(&self->logRecordFactory_, logRecordFactory);
}

- (AndroidGovNistCoreThreadAuditor *)getThreadAuditor {
  return self->threadAuditor_;
}

- (NSString *)auditStackWithJavaUtilSet:(id<JavaUtilSet>)activeCallIDs
                               withLong:(jlong)leakedDialogTimer
                               withLong:(jlong)leakedTransactionTimer {
  NSString *auditReport = nil;
  NSString *leakedDialogs = AndroidGovNistJavaxSipStackSIPTransactionStack_auditDialogsWithJavaUtilSet_withLong_(self, activeCallIDs, leakedDialogTimer);
  NSString *leakedServerTransactions = AndroidGovNistJavaxSipStackSIPTransactionStack_auditTransactionsWithJavaUtilConcurrentConcurrentHashMap_withLong_(self, serverTransactionTable_, leakedTransactionTimer);
  NSString *leakedClientTransactions = AndroidGovNistJavaxSipStackSIPTransactionStack_auditTransactionsWithJavaUtilConcurrentConcurrentHashMap_withLong_(self, clientTransactionTable_, leakedTransactionTimer);
  if (leakedDialogs != nil || leakedServerTransactions != nil || leakedClientTransactions != nil) {
    auditReport = JreStrcat("$$$$", @"SIP Stack Audit:\n", (leakedDialogs != nil ? leakedDialogs : @""), (leakedServerTransactions != nil ? leakedServerTransactions : @""), (leakedClientTransactions != nil ? leakedClientTransactions : @""));
  }
  return auditReport;
}

- (NSString *)auditDialogsWithJavaUtilSet:(id<JavaUtilSet>)activeCallIDs
                                 withLong:(jlong)leakedDialogTimer {
  return AndroidGovNistJavaxSipStackSIPTransactionStack_auditDialogsWithJavaUtilSet_withLong_(self, activeCallIDs, leakedDialogTimer);
}

- (NSString *)auditTransactionsWithJavaUtilConcurrentConcurrentHashMap:(JavaUtilConcurrentConcurrentHashMap *)transactionsMap
                                                              withLong:(jlong)a_nLeakedTransactionTimer {
  return AndroidGovNistJavaxSipStackSIPTransactionStack_auditTransactionsWithJavaUtilConcurrentConcurrentHashMap_withLong_(self, transactionsMap, a_nLeakedTransactionTimer);
}

- (void)setNon2XXAckPassedToListenerWithBoolean:(jboolean)passToListener {
  self->non2XXAckPassedToListener_ = passToListener;
}

- (jboolean)isNon2XXAckPassedToListener {
  return non2XXAckPassedToListener_;
}

- (jint)getActiveClientTransactionCount {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(activeClientTransactionCount_)) get];
}

- (jboolean)isRfc2543Supported {
  return self->rfc2543Supported_;
}

- (jboolean)isCancelClientTransactionChecked {
  return self->cancelClientTransactionChecked_;
}

- (jboolean)isRemoteTagReassignmentAllowed {
  return self->remoteTagReassignmentAllowed_;
}

- (id<JavaUtilCollection>)getDialogs {
  JavaUtilHashSet *dialogs = create_JavaUtilHashSet_init();
  [dialogs addAllWithJavaUtilCollection:[((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->dialogTable_)) values]];
  [dialogs addAllWithJavaUtilCollection:[((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->earlyDialogTable_)) values]];
  return dialogs;
}

- (id<JavaUtilCollection>)getDialogsWithAndroidJavaxSipDialogState:(AndroidJavaxSipDialogState *)state {
  JavaUtilHashSet *matchingDialogs = create_JavaUtilHashSet_init();
  if ([((AndroidJavaxSipDialogState *) nil_chk(JreLoadStatic(AndroidJavaxSipDialogState, EARLY))) isEqual:state]) {
    [matchingDialogs addAllWithJavaUtilCollection:[((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->earlyDialogTable_)) values]];
  }
  else {
    id<JavaUtilCollection> dialogs = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(dialogTable_)) values];
    for (AndroidGovNistJavaxSipStackSIPDialog * __strong dialog in nil_chk(dialogs)) {
      if ([((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(dialog)) getState] != nil && [((AndroidJavaxSipDialogState *) nil_chk([dialog getState])) isEqual:state]) {
        [matchingDialogs addWithId:dialog];
      }
    }
  }
  return matchingDialogs;
}

- (id<AndroidJavaxSipDialog>)getReplacesDialogWithAndroidGovNistJavaxSipHeaderExtensionsReplacesHeader:(id<AndroidGovNistJavaxSipHeaderExtensionsReplacesHeader>)replacesHeader {
  NSString *cid = [((id<AndroidGovNistJavaxSipHeaderExtensionsReplacesHeader>) nil_chk(replacesHeader)) getCallId];
  NSString *fromTag = [replacesHeader getFromTag];
  NSString *toTag = [replacesHeader getToTag];
  for (AndroidGovNistJavaxSipStackSIPDialog * __strong dialog in nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->dialogTable_)) values])) {
    if ([((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(dialog)) getCallId])) getCallId])) isEqual:cid] && [((NSString *) nil_chk(fromTag)) java_equalsIgnoreCase:dialog->lastResponseFromTag_] && [((NSString *) nil_chk(toTag)) java_equalsIgnoreCase:dialog->lastResponseToTag_]) {
      return dialog;
    }
  }
  JavaLangStringBuilder *dialogId = create_JavaLangStringBuilder_initWithNSString_(cid);
  if (toTag != nil) {
    [dialogId appendWithNSString:@":"];
    [dialogId appendWithNSString:toTag];
  }
  if (fromTag != nil) {
    [dialogId appendWithNSString:@":"];
    [dialogId appendWithNSString:fromTag];
  }
  NSString *did = [((NSString *) nil_chk([dialogId description])) lowercaseString];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$", @"Looking for dialog ", did)];
  id<AndroidJavaxSipDialog> replacesDialog = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->dialogTable_)) getWithId:did];
  if (replacesDialog == nil) {
    for (id<AndroidGovNistJavaxSipStackSIPClientTransaction> __strong ctx in nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->clientTransactionTable_)) values])) {
      if ([((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) nil_chk(ctx)) getDialogWithNSString:did] != nil) {
        replacesDialog = [ctx getDialogWithNSString:did];
        break;
      }
    }
  }
  return replacesDialog;
}

- (id<AndroidJavaxSipDialog>)getJoinDialogWithAndroidGovNistJavaxSipHeaderExtensionsJoinHeader:(id<AndroidGovNistJavaxSipHeaderExtensionsJoinHeader>)joinHeader {
  NSString *cid = [((id<AndroidGovNistJavaxSipHeaderExtensionsJoinHeader>) nil_chk(joinHeader)) getCallId];
  NSString *fromTag = [joinHeader getFromTag];
  NSString *toTag = [joinHeader getToTag];
  JavaLangStringBuilder *retval = create_JavaLangStringBuilder_initWithNSString_(cid);
  if (toTag != nil) {
    [retval appendWithNSString:@":"];
    [retval appendWithNSString:toTag];
  }
  if (fromTag != nil) {
    [retval appendWithNSString:@":"];
    [retval appendWithNSString:fromTag];
  }
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->dialogTable_)) getWithId:[((NSString *) nil_chk([retval description])) lowercaseString]];
}

- (void)setTimerWithAndroidGovNistJavaxSipStackTimersSipTimer:(id<AndroidGovNistJavaxSipStackTimersSipTimer>)timer {
  JreStrongAssign(&self->timer_, timer);
}

- (id<AndroidGovNistJavaxSipStackTimersSipTimer>)getTimer {
  return timer_;
}

- (jint)getReceiveUdpBufferSize {
  return receiveUdpBufferSize_;
}

- (void)setReceiveUdpBufferSizeWithInt:(jint)receiveUdpBufferSize {
  self->receiveUdpBufferSize_ = receiveUdpBufferSize;
}

- (jint)getSendUdpBufferSize {
  return sendUdpBufferSize_;
}

- (void)setSendUdpBufferSizeWithInt:(jint)sendUdpBufferSize {
  self->sendUdpBufferSize_ = sendUdpBufferSize;
}

- (jboolean)checkBranchId {
  return self->checkBranchId_;
}

- (void)setLogStackTraceOnMessageSendWithBoolean:(jboolean)logStackTraceOnMessageSend {
  self->logStackTraceOnMessageSend_ = logStackTraceOnMessageSend;
}

- (jboolean)isLogStackTraceOnMessageSend {
  return logStackTraceOnMessageSend_;
}

- (void)setDeliverDialogTerminatedEventForNullDialog {
  self->isDialogTerminatedEventDeliveredForNullDialog_ = true;
}

- (void)addForkedClientTransactionWithAndroidGovNistJavaxSipStackSIPClientTransaction:(id<AndroidGovNistJavaxSipStackSIPClientTransaction>)clientTransaction {
  NSString *forkId = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([((id<AndroidGovNistJavaxSipStackSIPClientTransaction>) nil_chk(clientTransaction)) getRequest], [AndroidGovNistJavaxSipMessageSIPRequest class])))) getForkId];
  [clientTransaction setForkIdWithNSString:forkId];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$@$$$$$@$$", @"Adding forked client transaction : ", clientTransaction, @" branch=", [clientTransaction getBranch], @" forkId = ", forkId, @"  sipDialog = ", [clientTransaction getDefaultDialog], @" sipDialogId= ", [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk([clientTransaction getDefaultDialog])) getDialogId])];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->forkedClientTransactionTable_)) putWithId:forkId withId:clientTransaction];
}

- (id<AndroidGovNistJavaxSipStackSIPClientTransaction>)getForkedTransactionWithNSString:(NSString *)transactionId {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->forkedClientTransactionTable_)) getWithId:transactionId];
}

- (void)setDeliverUnsolicitedNotifyWithBoolean:(jboolean)deliverUnsolicitedNotify {
  self->deliverUnsolicitedNotify_ = deliverUnsolicitedNotify;
}

- (jboolean)isDeliverUnsolicitedNotify {
  return deliverUnsolicitedNotify_;
}

- (void)setDeliverTerminatedEventForAckWithBoolean:(jboolean)deliverTerminatedEventForAck {
  self->deliverTerminatedEventForAck_ = deliverTerminatedEventForAck;
}

- (jboolean)isDeliverTerminatedEventForAck {
  return deliverTerminatedEventForAck_;
}

- (jlong)getMinKeepAliveInterval {
  return self->minKeepAliveInterval_;
}

- (void)setPatchWebSocketHeadersWithJavaLangBoolean:(JavaLangBoolean *)patchWebSocketHeaders {
  self->patchWebSocketHeaders_ = [((JavaLangBoolean *) nil_chk(patchWebSocketHeaders)) booleanValue];
}

- (jboolean)isPatchWebSocketHeaders {
  return patchWebSocketHeaders_;
}

- (void)setPatchRportWithJavaLangBoolean:(JavaLangBoolean *)patchRport {
  self->patchRport_ = [((JavaLangBoolean *) nil_chk(patchRport)) booleanValue];
}

- (jboolean)isPatchRport {
  return patchRport_;
}

- (void)setMaxForkTimeWithInt:(jint)maxForkTime {
  self->maxForkTime_ = maxForkTime;
}

- (jint)getMaxForkTime {
  return maxForkTime_;
}

- (jboolean)isDeliverRetransmittedAckToListener {
  return self->deliverRetransmittedAckToListener_;
}

- (jint)getAckTimeoutFactor {
  if ([self getSipListener] != nil && [AndroidGovNistJavaxSipSipListenerExt_class_() isInstance:[self getSipListener]]) {
    return dialogTimeoutFactor_;
  }
  else {
    return 64;
  }
}

- (id<AndroidJavaxSipSipListener>)getSipListener {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilConcurrentExecutorService>)getReinviteExecutor {
  return reinviteExecutor_;
}

- (void)setMessageParserFactoryWithAndroidGovNistJavaxSipParserMessageParserFactory:(id<AndroidGovNistJavaxSipParserMessageParserFactory>)messageParserFactory {
  JreStrongAssign(&self->messageParserFactory_, messageParserFactory);
}

- (id<AndroidGovNistJavaxSipParserMessageParserFactory>)getMessageParserFactory {
  return messageParserFactory_;
}

- (void)setMessageProcessorFactoryWithAndroidGovNistJavaxSipStackMessageProcessorFactory:(id<AndroidGovNistJavaxSipStackMessageProcessorFactory>)messageProcessorFactory {
  JreStrongAssign(&self->messageProcessorFactory_, messageProcessorFactory);
}

- (id<AndroidGovNistJavaxSipStackMessageProcessorFactory>)getMessageProcessorFactory {
  return messageProcessorFactory_;
}

- (void)setAggressiveCleanupWithBoolean:(jboolean)aggressiveCleanup {
  if (aggressiveCleanup) JreStrongAssign(&releaseReferencesStrategy_, JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, Normal));
  else JreStrongAssign(&releaseReferencesStrategy_, JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, None));
}

- (jboolean)isAggressiveCleanup {
  if (releaseReferencesStrategy_ == JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, None)) return false;
  else return true;
}

- (jint)getEarlyDialogTimeout {
  return self->earlyDialogTimeout_;
}

- (void)setClientAuthWithAndroidGovNistJavaxSipStackClientAuthType:(AndroidGovNistJavaxSipStackClientAuthType *)clientAuth {
  JreStrongAssign(&self->clientAuth_, clientAuth);
}

- (AndroidGovNistJavaxSipStackClientAuthType *)getClientAuth {
  return clientAuth_;
}

- (void)setThreadPriorityWithInt:(jint)threadPriority {
  if (threadPriority < JavaLangThread_MIN_PRIORITY) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The Stack Thread Priority shouldn't be lower than Thread.MIN_PRIORITY");
  if (threadPriority > JavaLangThread_MAX_PRIORITY) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The Stack Thread Priority shouldn't be higher than Thread.MAX_PRIORITY");
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) infoWithNSString:JreStrcat("$I", @"Setting Stack Thread priority to ", threadPriority)];
  self->threadPriority_ = threadPriority;
}

- (jint)getThreadPriority {
  return threadPriority_;
}

- (jint)getReliableConnectionKeepAliveTimeout {
  return reliableConnectionKeepAliveTimeout_;
}

- (void)setReliableConnectionKeepAliveTimeoutWithInt:(jint)reliableConnectionKeepAliveTimeout {
  if (reliableConnectionKeepAliveTimeout == 0) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) infoWithNSString:@"Default value (840000 ms) will be used for reliableConnectionKeepAliveTimeout stack property"];
    reliableConnectionKeepAliveTimeout = 840000;
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) infoWithNSString:JreStrcat("$I$", @"value ", reliableConnectionKeepAliveTimeout, @" will be used for reliableConnectionKeepAliveTimeout stack property")];
  self->reliableConnectionKeepAliveTimeout_ = reliableConnectionKeepAliveTimeout;
}

- (AndroidGovNistJavaxSipStackMessageProcessor *)findMessageProcessorWithNSString:(NSString *)myAddress
                                                                          withInt:(jint)myPort
                                                                     withNSString:(NSString *)transport {
  return AndroidGovNistJavaxSipStackSIPTransactionStack_findMessageProcessorWithNSString_withInt_withNSString_(self, myAddress, myPort, transport);
}

- (jboolean)setKeepAliveTimeoutWithNSString:(NSString *)myAddress
                                    withInt:(jint)myPort
                               withNSString:(NSString *)transport
                               withNSString:(NSString *)peerAddress
                                    withInt:(jint)peerPort
                                   withLong:(jlong)keepAliveTimeout {
  AndroidGovNistJavaxSipStackMessageProcessor *processor = AndroidGovNistJavaxSipStackSIPTransactionStack_findMessageProcessorWithNSString_withInt_withNSString_(self, myAddress, myPort, transport);
  if (processor == nil || !([processor isKindOfClass:[AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor class]])) {
    return false;
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$$I$$$$$I$J$@", @"~~~ Trying to find MessageChannel and set new KeepAliveTimeout( myAddress=", myAddress, @", myPort=", myPort, @", transport=", transport, @", peerAddress=", peerAddress, @", peerPort=", peerPort, @", keepAliveTimeout=", keepAliveTimeout, @"), MessageProcessor=", processor)];
  return [((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) cast_chk(processor, [AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor class])) setKeepAliveTimeoutWithNSString:peerAddress withInt:peerPort withLong:keepAliveTimeout];
}

- (jboolean)closeReliableConnectionWithNSString:(NSString *)myAddress
                                        withInt:(jint)myPort
                                   withNSString:(NSString *)transport
                                   withNSString:(NSString *)peerAddress
                                        withInt:(jint)peerPort {
  AndroidGovNistJavaxSipStackMessageProcessor *processor = AndroidGovNistJavaxSipStackSIPTransactionStack_findMessageProcessorWithNSString_withInt_withNSString_(self, myAddress, myPort, transport);
  if (processor != nil && [processor isKindOfClass:[AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor class]]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$$I$$$$$I$@", @"~~~ closeReliableConnection( myAddress=", myAddress, @", myPort=", myPort, @", transport=", transport, @", peerAddress=", peerAddress, @", peerPort=", peerPort, @"), MessageProcessor=", processor)];
    return [((AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor *) cast_chk(processor, [AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor class])) closeReliableConnectionWithNSString:peerAddress withInt:peerPort];
  }
  return false;
}

- (jlong)getSslHandshakeTimeout {
  return sslHandshakeTimeout_;
}

- (void)setSslHandshakeTimeoutWithLong:(jlong)sslHandshakeTimeout {
  self->sslHandshakeTimeout_ = sslHandshakeTimeout;
}

- (void)setEarlyDialogTimeoutWithInt:(jint)earlyDialogTimeout {
  self->earlyDialogTimeout_ = earlyDialogTimeout;
}

- (jint)getMaxTxLifetimeInvite {
  return maxTxLifetimeInvite_;
}

- (void)setMaxTxLifetimeInviteWithInt:(jint)maxTxLifetimeInvite {
  self->maxTxLifetimeInvite_ = maxTxLifetimeInvite;
}

- (jint)getMaxTxLifetimeNonInvite {
  return maxTxLifetimeNonInvite_;
}

- (void)setMaxTxLifetimeNonInviteWithInt:(jint)maxTxLifetimeNonInvite {
  self->maxTxLifetimeNonInvite_ = maxTxLifetimeNonInvite;
}

- (jboolean)isSslRenegotiationEnabled {
  return sslRenegotiationEnabled_;
}

- (void)setSslRenegotiationEnabledWithBoolean:(jboolean)sslRenegotiationEnabled {
  self->sslRenegotiationEnabled_ = sslRenegotiationEnabled;
}

- (jint)getConnectionLingerTimer {
  return AndroidGovNistJavaxSipStackSIPTransactionStack_connectionLingerTimer;
}

- (void)setConnectionLingerTimerWithInt:(jint)connectionLingerTimer {
  AndroidGovNistJavaxSipStackSIPTransactionStack_connectionLingerTimer = connectionLingerTimer;
}

- (jint)getStackCongestionControlTimeout {
  return stackCongestionControlTimeout_;
}

- (void)setStackCongestionControlTimeoutWithInt:(jint)stackCongestionControlTimeout {
  self->stackCongestionControlTimeout_ = stackCongestionControlTimeout;
}

- (AndroidGovNistJavaxSipReleaseReferencesStrategy *)getReleaseReferencesStrategy {
  return releaseReferencesStrategy_;
}

- (void)setReleaseReferencesStrategyWithAndroidGovNistJavaxSipReleaseReferencesStrategy:(AndroidGovNistJavaxSipReleaseReferencesStrategy *)releaseReferencesStrategy {
  JreStrongAssign(&self->releaseReferencesStrategy_, releaseReferencesStrategy);
}

- (void)dealloc {
  RELEASE_(retransmissionAlertTransactions_);
  RELEASE_(earlyDialogTable_);
  RELEASE_(dialogTable_);
  RELEASE_(serverDialogMergeTestTable_);
  RELEASE_(timer_);
  RELEASE_(pendingTransactions_);
  RELEASE_(clientTransactionTable_);
  RELEASE_(activeClientTransactionCount_);
  RELEASE_(serverTransactionTable_);
  RELEASE_(mergeTable_);
  RELEASE_(terminatedServerTransactionsPendingAck_);
  RELEASE_(forkedClientTransactionTable_);
  RELEASE_(serverLogger_);
  RELEASE_(defaultRouter_);
  RELEASE_(ioHandler_);
  RELEASE_(stackName_);
  RELEASE_(stackAddress_);
  RELEASE_(stackInetAddress_);
  RELEASE_(sipMessageFactory_);
  RELEASE_(router_);
  RELEASE_(messageProcessors_);
  RELEASE_(networkLayer_);
  RELEASE_(outboundProxy_);
  RELEASE_(routerPath_);
  RELEASE_(forkedEvents_);
  RELEASE_(addressResolver_);
  RELEASE_(threadAuditor_);
  RELEASE_(logRecordFactory_);
  RELEASE_(clientAuth_);
  RELEASE_(messageParserFactory_);
  RELEASE_(messageProcessorFactory_);
  RELEASE_(releaseReferencesStrategy_);
  RELEASE_(sipMessageValve_);
  RELEASE_(sipEventInterceptor_);
  RELEASE_(securityManagerProvider_);
  RELEASE_(socketTimeoutAuditor_);
  RELEASE_(reinviteExecutor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilConcurrentExecutor;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetSocketAddress;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaNetSocketAddress;", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPServerTransaction;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 6, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPDialog;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPDialog;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPDialog;", 0x1, 11, 13, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPDialog;", 0x1, 11, 14, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPDialog;", 0x1, 11, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 10, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPDialog;", 0x1, 17, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 18, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 19, 10, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPDialog;", 0x1, 20, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 6, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPClientTransaction;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPServerTransaction;", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 27, 24, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 28, 24, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPTransaction;", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPTransaction;", 0x1, 29, 31, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPTransaction;", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 34, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPServerTransaction;", 0x1, 35, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 36, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 24, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackServerRequestInterface;", 0x1, 42, 43, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackServerResponseInterface;", 0x1, 44, 45, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageChannel;", 0x1, 46, 47, 2, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPClientTransaction;", 0x1, 48, 43, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPServerTransaction;", 0x1, 49, 50, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 24, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 55, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 56, 57, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 58, 59, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 24, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNetNetworkLayer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSlf4jLogger;", 0x1, -1, -1, -1, -1, 61, -1 },
    { NULL, "LAndroidGovNistCoreServerLogger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 62, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 64, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 65, 63, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipAddressHop;", 0x1, 66, 26, 67, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 69, 6, 70, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 71, 72, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipAddressRouter;", 0x1, 73, 26, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipAddressRouter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 74, 75, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 76, 75, -1, -1, -1, -1 },
    { NULL, "[LAndroidGovNistJavaxSipStackMessageProcessor;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageProcessor;", 0x4, 77, 78, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 79, 34, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageChannel;", 0x1, 80, 81, 70, -1, -1, -1 },
    { NULL, "Z", 0x1, 82, 6, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNetAddressResolver;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 83, 84, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 85, 86, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreThreadAuditor;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 87, 88, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 89, 90, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 91, 92, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 93, 94, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 95, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 96, 97, -1, 98, -1, -1 },
    { NULL, "LAndroidJavaxSipDialog;", 0x1, 99, 100, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipDialog;", 0x1, 101, 102, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 103, 104, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackTimersSipTimer;", 0x1, -1, -1, 105, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 106, 63, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 107, 63, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 108, 94, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 109, 52, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPClientTransaction;", 0x1, 110, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 111, 94, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 112, 94, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 113, 114, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 115, 114, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 116, 63, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipSipListener;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutorService;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 117, 118, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipParserMessageParserFactory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 119, 120, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageProcessorFactory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 121, 94, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 122, 123, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackClientAuthType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 124, 63, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 125, 63, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageProcessor;", 0x2, 126, 127, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 128, 129, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 130, 131, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 132, 133, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 134, 63, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 135, 63, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 136, 63, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 137, 94, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 138, 63, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 139, 63, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipReleaseReferencesStrategy;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 140, 141, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getSelfRoutingThreadpoolExecutor);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(reInit);
  methods[3].selector = @selector(getLocalAddressForTcpDstWithJavaNetInetAddress:withInt:withJavaNetInetAddress:withInt:);
  methods[4].selector = @selector(getLocalAddressForTlsDstWithJavaNetInetAddress:withInt:withJavaNetInetAddress:);
  methods[5].selector = @selector(printDialogTable);
  methods[6].selector = @selector(getRetransmissionAlertTransactionWithNSString:);
  methods[7].selector = @selector(isDialogCreatedWithNSString:);
  methods[8].selector = @selector(addExtensionMethodWithNSString:);
  methods[9].selector = @selector(putDialogWithAndroidGovNistJavaxSipStackSIPDialog:);
  methods[10].selector = @selector(createDialogWithAndroidGovNistJavaxSipStackSIPTransaction:);
  methods[11].selector = @selector(createDialogWithAndroidGovNistJavaxSipStackSIPClientTransaction:withAndroidGovNistJavaxSipMessageSIPResponse:);
  methods[12].selector = @selector(createDialogWithAndroidGovNistJavaxSipSipProviderImpl:withAndroidGovNistJavaxSipMessageSIPResponse:);
  methods[13].selector = @selector(createDialogWithAndroidGovNistJavaxSipStackSIPClientTransaction:withAndroidGovNistJavaxSipStackSIPTransaction:);
  methods[14].selector = @selector(removeDialogWithAndroidGovNistJavaxSipStackSIPDialog:);
  methods[15].selector = @selector(getEarlyDialogWithNSString:);
  methods[16].selector = @selector(removeMergeDialogWithNSString:);
  methods[17].selector = @selector(putMergeDialogWithAndroidGovNistJavaxSipStackSIPDialog:);
  methods[18].selector = @selector(getDialogWithNSString:);
  methods[19].selector = @selector(removeDialogWithNSString:);
  methods[20].selector = @selector(findSubscribeTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:withAndroidGovNistJavaxSipListeningPointImpl:);
  methods[21].selector = @selector(addTransactionPendingAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:);
  methods[22].selector = @selector(findTransactionPendingAckWithAndroidGovNistJavaxSipMessageSIPRequest:);
  methods[23].selector = @selector(removeTransactionPendingAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:);
  methods[24].selector = @selector(isTransactionPendingAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:);
  methods[25].selector = @selector(findTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:withBoolean:);
  methods[26].selector = @selector(findTransactionWithNSString:withBoolean:);
  methods[27].selector = @selector(findCancelTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:withBoolean:);
  methods[28].selector = @selector(initWithAndroidGovNistJavaxSipStackStackMessageFactory:);
  methods[29].selector = @selector(findPendingTransactionWithNSString:);
  methods[30].selector = @selector(findMergedTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:);
  methods[31].selector = @selector(removePendingTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:);
  methods[32].selector = @selector(removeFromMergeTableWithAndroidGovNistJavaxSipStackSIPServerTransaction:);
  methods[33].selector = @selector(putInMergeTableWithAndroidGovNistJavaxSipStackSIPServerTransaction:withAndroidGovNistJavaxSipMessageSIPRequest:);
  methods[34].selector = @selector(mapTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:);
  methods[35].selector = @selector(newSIPServerRequestWithAndroidGovNistJavaxSipMessageSIPRequest:withAndroidGovNistJavaxSipStackMessageChannel:);
  methods[36].selector = @selector(newSIPServerResponseWithAndroidGovNistJavaxSipMessageSIPResponse:withAndroidGovNistJavaxSipStackMessageChannel:);
  methods[37].selector = @selector(createMessageChannelWithAndroidGovNistJavaxSipMessageSIPRequest:withAndroidGovNistJavaxSipStackMessageProcessor:withAndroidJavaxSipAddressHop:);
  methods[38].selector = @selector(createClientTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:withAndroidGovNistJavaxSipStackMessageChannel:);
  methods[39].selector = @selector(createServerTransactionWithAndroidGovNistJavaxSipStackMessageChannel:);
  methods[40].selector = @selector(getClientTransactionTableSize);
  methods[41].selector = @selector(getServerTransactionTableSize);
  methods[42].selector = @selector(addTransactionWithAndroidGovNistJavaxSipStackSIPClientTransaction:);
  methods[43].selector = @selector(removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:);
  methods[44].selector = @selector(addTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:);
  methods[45].selector = @selector(addTransactionHashWithAndroidGovNistJavaxSipStackSIPTransaction:);
  methods[46].selector = @selector(decrementActiveClientTransactionCount);
  methods[47].selector = @selector(removeTransactionHashWithAndroidGovNistJavaxSipStackSIPTransaction:);
  methods[48].selector = @selector(transactionErrorEventWithAndroidGovNistJavaxSipStackSIPTransactionErrorEvent:);
  methods[49].selector = @selector(dialogErrorEventWithAndroidGovNistJavaxSipStackSIPDialogErrorEvent:);
  methods[50].selector = @selector(stopStack);
  methods[51].selector = @selector(closeAllSockets);
  methods[52].selector = @selector(putPendingTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:);
  methods[53].selector = @selector(getNetworkLayer);
  methods[54].selector = @selector(getStackLogger);
  methods[55].selector = @selector(getServerLogger);
  methods[56].selector = @selector(getMaxMessageSize);
  methods[57].selector = @selector(setSingleThreaded);
  methods[58].selector = @selector(getTcpPostParsingThreadPoolSize);
  methods[59].selector = @selector(setTcpPostParsingThreadPoolSizeWithInt:);
  methods[60].selector = @selector(setThreadPoolSizeWithInt:);
  methods[61].selector = @selector(setMaxConnectionsWithInt:);
  methods[62].selector = @selector(getNextHopWithAndroidGovNistJavaxSipMessageSIPRequest:);
  methods[63].selector = @selector(setStackNameWithNSString:);
  methods[64].selector = @selector(setHostAddressWithNSString:);
  methods[65].selector = @selector(getHostAddress);
  methods[66].selector = @selector(setRouterWithAndroidJavaxSipAddressRouter:);
  methods[67].selector = @selector(getRouterWithAndroidGovNistJavaxSipMessageSIPRequest:);
  methods[68].selector = @selector(getRouter);
  methods[69].selector = @selector(isAlive);
  methods[70].selector = @selector(addMessageProcessorWithAndroidGovNistJavaxSipStackMessageProcessor:);
  methods[71].selector = @selector(removeMessageProcessorWithAndroidGovNistJavaxSipStackMessageProcessor:);
  methods[72].selector = @selector(getMessageProcessors);
  methods[73].selector = @selector(createMessageProcessorWithJavaNetInetAddress:withInt:withNSString:);
  methods[74].selector = @selector(setMessageFactoryWithAndroidGovNistJavaxSipStackStackMessageFactory:);
  methods[75].selector = @selector(createRawMessageChannelWithNSString:withInt:withAndroidJavaxSipAddressHop:);
  methods[76].selector = @selector(isEventForkedWithNSString:);
  methods[77].selector = @selector(getAddressResolver);
  methods[78].selector = @selector(setAddressResolverWithAndroidGovNistCoreNetAddressResolver:);
  methods[79].selector = @selector(setLogRecordFactoryWithAndroidGovNistJavaxSipLogRecordFactory:);
  methods[80].selector = @selector(getThreadAuditor);
  methods[81].selector = @selector(auditStackWithJavaUtilSet:withLong:withLong:);
  methods[82].selector = @selector(auditDialogsWithJavaUtilSet:withLong:);
  methods[83].selector = @selector(auditTransactionsWithJavaUtilConcurrentConcurrentHashMap:withLong:);
  methods[84].selector = @selector(setNon2XXAckPassedToListenerWithBoolean:);
  methods[85].selector = @selector(isNon2XXAckPassedToListener);
  methods[86].selector = @selector(getActiveClientTransactionCount);
  methods[87].selector = @selector(isRfc2543Supported);
  methods[88].selector = @selector(isCancelClientTransactionChecked);
  methods[89].selector = @selector(isRemoteTagReassignmentAllowed);
  methods[90].selector = @selector(getDialogs);
  methods[91].selector = @selector(getDialogsWithAndroidJavaxSipDialogState:);
  methods[92].selector = @selector(getReplacesDialogWithAndroidGovNistJavaxSipHeaderExtensionsReplacesHeader:);
  methods[93].selector = @selector(getJoinDialogWithAndroidGovNistJavaxSipHeaderExtensionsJoinHeader:);
  methods[94].selector = @selector(setTimerWithAndroidGovNistJavaxSipStackTimersSipTimer:);
  methods[95].selector = @selector(getTimer);
  methods[96].selector = @selector(getReceiveUdpBufferSize);
  methods[97].selector = @selector(setReceiveUdpBufferSizeWithInt:);
  methods[98].selector = @selector(getSendUdpBufferSize);
  methods[99].selector = @selector(setSendUdpBufferSizeWithInt:);
  methods[100].selector = @selector(checkBranchId);
  methods[101].selector = @selector(setLogStackTraceOnMessageSendWithBoolean:);
  methods[102].selector = @selector(isLogStackTraceOnMessageSend);
  methods[103].selector = @selector(setDeliverDialogTerminatedEventForNullDialog);
  methods[104].selector = @selector(addForkedClientTransactionWithAndroidGovNistJavaxSipStackSIPClientTransaction:);
  methods[105].selector = @selector(getForkedTransactionWithNSString:);
  methods[106].selector = @selector(setDeliverUnsolicitedNotifyWithBoolean:);
  methods[107].selector = @selector(isDeliverUnsolicitedNotify);
  methods[108].selector = @selector(setDeliverTerminatedEventForAckWithBoolean:);
  methods[109].selector = @selector(isDeliverTerminatedEventForAck);
  methods[110].selector = @selector(getMinKeepAliveInterval);
  methods[111].selector = @selector(setPatchWebSocketHeadersWithJavaLangBoolean:);
  methods[112].selector = @selector(isPatchWebSocketHeaders);
  methods[113].selector = @selector(setPatchRportWithJavaLangBoolean:);
  methods[114].selector = @selector(isPatchRport);
  methods[115].selector = @selector(setMaxForkTimeWithInt:);
  methods[116].selector = @selector(getMaxForkTime);
  methods[117].selector = @selector(isDeliverRetransmittedAckToListener);
  methods[118].selector = @selector(getAckTimeoutFactor);
  methods[119].selector = @selector(getSipListener);
  methods[120].selector = @selector(getReinviteExecutor);
  methods[121].selector = @selector(setMessageParserFactoryWithAndroidGovNistJavaxSipParserMessageParserFactory:);
  methods[122].selector = @selector(getMessageParserFactory);
  methods[123].selector = @selector(setMessageProcessorFactoryWithAndroidGovNistJavaxSipStackMessageProcessorFactory:);
  methods[124].selector = @selector(getMessageProcessorFactory);
  methods[125].selector = @selector(setAggressiveCleanupWithBoolean:);
  methods[126].selector = @selector(isAggressiveCleanup);
  methods[127].selector = @selector(getEarlyDialogTimeout);
  methods[128].selector = @selector(setClientAuthWithAndroidGovNistJavaxSipStackClientAuthType:);
  methods[129].selector = @selector(getClientAuth);
  methods[130].selector = @selector(setThreadPriorityWithInt:);
  methods[131].selector = @selector(getThreadPriority);
  methods[132].selector = @selector(getReliableConnectionKeepAliveTimeout);
  methods[133].selector = @selector(setReliableConnectionKeepAliveTimeoutWithInt:);
  methods[134].selector = @selector(findMessageProcessorWithNSString:withInt:withNSString:);
  methods[135].selector = @selector(setKeepAliveTimeoutWithNSString:withInt:withNSString:withNSString:withInt:withLong:);
  methods[136].selector = @selector(closeReliableConnectionWithNSString:withInt:withNSString:withNSString:withInt:);
  methods[137].selector = @selector(getSslHandshakeTimeout);
  methods[138].selector = @selector(setSslHandshakeTimeoutWithLong:);
  methods[139].selector = @selector(setEarlyDialogTimeoutWithInt:);
  methods[140].selector = @selector(getMaxTxLifetimeInvite);
  methods[141].selector = @selector(setMaxTxLifetimeInviteWithInt:);
  methods[142].selector = @selector(getMaxTxLifetimeNonInvite);
  methods[143].selector = @selector(setMaxTxLifetimeNonInviteWithInt:);
  methods[144].selector = @selector(isSslRenegotiationEnabled);
  methods[145].selector = @selector(setSslRenegotiationEnabledWithBoolean:);
  methods[146].selector = @selector(getConnectionLingerTimer);
  methods[147].selector = @selector(setConnectionLingerTimerWithInt:);
  methods[148].selector = @selector(getStackCongestionControlTimeout);
  methods[149].selector = @selector(setStackCongestionControlTimeoutWithInt:);
  methods[150].selector = @selector(getReleaseReferencesStrategy);
  methods[151].selector = @selector(setReleaseReferencesStrategyWithAndroidGovNistJavaxSipReleaseReferencesStrategy:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 142, -1, -1 },
    { "BASE_TIMER_INTERVAL", "I", .constantValue.asInt = AndroidGovNistJavaxSipStackSIPTransactionStack_BASE_TIMER_INTERVAL, 0x19, -1, -1, -1, -1 },
    { "connectionLingerTimer", "I", .constantValue.asLong = 0, 0xa, -1, 143, -1, -1 },
    { "earlyDialogTimeout_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "retransmissionAlertTransactions_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x4, -1, -1, 144, -1 },
    { "earlyDialogTable_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x4, -1, -1, 145, -1 },
    { "dialogTable_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x4, -1, -1, 145, -1 },
    { "serverDialogMergeTestTable_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x4, -1, -1, 145, -1 },
    { "dialogCreatingMethods", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1c, -1, 146, 147, -1 },
    { "timer_", "LAndroidGovNistJavaxSipStackTimersSipTimer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pendingTransactions_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 144, -1 },
    { "clientTransactionTable_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x4, -1, -1, 148, -1 },
    { "unlimitedServerTransactionTableSize_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "unlimitedClientTransactionTableSize_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serverTransactionTableHighwaterMark_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serverTransactionTableLowaterMark_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "clientTransactionTableHiwaterMark_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "clientTransactionTableLowaterMark_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "activeClientTransactionCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "serverTransactionTable_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x4, -1, -1, 144, -1 },
    { "mergeTable_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 144, -1 },
    { "terminatedServerTransactionsPendingAck_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 144, -1 },
    { "forkedClientTransactionTable_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 148, -1 },
    { "deliverRetransmittedAckToListener_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serverLogger_", "LAndroidGovNistCoreServerLogger;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "udpFlag_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "defaultRouter_", "LAndroidGovNistJavaxSipStackDefaultRouter;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "needsLogging_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "non2XXAckPassedToListener_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ioHandler_", "LAndroidGovNistJavaxSipStackIOHandler;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "toExit_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "stackName_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "stackAddress_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "stackInetAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sipMessageFactory_", "LAndroidGovNistJavaxSipStackStackMessageFactory;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "router_", "LAndroidJavaxSipAddressRouter;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "threadPoolSize_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "maxConnections_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "cacheServerConnections_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "cacheClientConnections_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "useRouterForAll_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "maxContentLength_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "maxMessageSize_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "messageProcessors_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x2, -1, -1, 149, -1 },
    { "readTimeout_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "networkLayer_", "LAndroidGovNistCoreNetNetworkLayer;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "outboundProxy_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "routerPath_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "isAutomaticDialogSupportEnabled_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "forkedEvents_", "LJavaUtilHashSet;", .constantValue.asLong = 0, 0x4, -1, -1, 150, -1 },
    { "generateTimeStampHeader_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "addressResolver_", "LAndroidGovNistCoreNetAddressResolver;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "maxListenerResponseTime_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "maxTxLifetimeInvite_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "maxTxLifetimeNonInvite_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "rfc2543Supported_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "threadAuditor_", "LAndroidGovNistCoreThreadAuditor;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "logRecordFactory_", "LAndroidGovNistJavaxSipLogRecordFactory;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "cancelClientTransactionChecked_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "remoteTagReassignmentAllowed_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "logStackTraceOnMessageSend_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "receiveUdpBufferSize_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sendUdpBufferSize_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "stackCongestionControlTimeout_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isBackToBackUserAgent_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "checkBranchId_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "isAutomaticDialogErrorHandlingEnabled_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "isDialogTerminatedEventDeliveredForNullDialog_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "maxForkTime_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "deliverUnsolicitedNotify_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "deliverTerminatedEventForAck_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "patchWebSocketHeaders_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "patchRport_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "clientAuth_", "LAndroidGovNistJavaxSipStackClientAuthType;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "tcpPostParsingThreadPoolSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "minKeepAliveInterval_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "dialogTimeoutFactor_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "messageParserFactory_", "LAndroidGovNistJavaxSipParserMessageParserFactory;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "messageProcessorFactory_", "LAndroidGovNistJavaxSipStackMessageProcessorFactory;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "nioSocketMaxIdleTime_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "releaseReferencesStrategy_", "LAndroidGovNistJavaxSipReleaseReferencesStrategy;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sipMessageValve_", "LAndroidGovNistJavaxSipStackSIPMessageValve;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "sipEventInterceptor_", "LAndroidGovNistJavaxSipStackSIPEventInterceptor;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "selfRoutingThreadpoolExecutor", "LJavaUtilConcurrentExecutor;", .constantValue.asLong = 0, 0xc, -1, 151, -1, -1 },
    { "threadPriority_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "securityManagerProvider_", "LAndroidGovNistCoreNetSecurityManagerProvider;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "reliableConnectionKeepAliveTimeout_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sslHandshakeTimeout_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sslRenegotiationEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "socketTimeoutAuditor_", "LAndroidGovNistJavaxSipStackSocketTimeoutAuditor;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "reinviteExecutor_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getLocalAddressForTcpDst", "LJavaNetInetAddress;ILJavaNetInetAddress;I", "LJavaIoIOException;", "getLocalAddressForTlsDst", "LJavaNetInetAddress;ILJavaNetInetAddress;", "getRetransmissionAlertTransaction", "LNSString;", "isDialogCreated", "addExtensionMethod", "putDialog", "LAndroidGovNistJavaxSipStackSIPDialog;", "createDialog", "LAndroidGovNistJavaxSipStackSIPTransaction;", "LAndroidGovNistJavaxSipStackSIPClientTransaction;LAndroidGovNistJavaxSipMessageSIPResponse;", "LAndroidGovNistJavaxSipSipProviderImpl;LAndroidGovNistJavaxSipMessageSIPResponse;", "LAndroidGovNistJavaxSipStackSIPClientTransaction;LAndroidGovNistJavaxSipStackSIPTransaction;", "removeDialog", "getEarlyDialog", "removeMergeDialog", "putMergeDialog", "getDialog", "findSubscribeTransaction", "LAndroidGovNistJavaxSipMessageSIPRequest;LAndroidGovNistJavaxSipListeningPointImpl;", "addTransactionPendingAck", "LAndroidGovNistJavaxSipStackSIPServerTransaction;", "findTransactionPendingAck", "LAndroidGovNistJavaxSipMessageSIPRequest;", "removeTransactionPendingAck", "isTransactionPendingAck", "findTransaction", "LAndroidGovNistJavaxSipMessageSIPMessage;Z", "LNSString;Z", "findCancelTransaction", "LAndroidGovNistJavaxSipMessageSIPRequest;Z", "LAndroidGovNistJavaxSipStackStackMessageFactory;", "findPendingTransaction", "findMergedTransaction", "removePendingTransaction", "removeFromMergeTable", "putInMergeTable", "LAndroidGovNistJavaxSipStackSIPServerTransaction;LAndroidGovNistJavaxSipMessageSIPRequest;", "mapTransaction", "newSIPServerRequest", "LAndroidGovNistJavaxSipMessageSIPRequest;LAndroidGovNistJavaxSipStackMessageChannel;", "newSIPServerResponse", "LAndroidGovNistJavaxSipMessageSIPResponse;LAndroidGovNistJavaxSipStackMessageChannel;", "createMessageChannel", "LAndroidGovNistJavaxSipMessageSIPRequest;LAndroidGovNistJavaxSipStackMessageProcessor;LAndroidJavaxSipAddressHop;", "createClientTransaction", "createServerTransaction", "LAndroidGovNistJavaxSipStackMessageChannel;", "addTransaction", "LAndroidGovNistJavaxSipStackSIPClientTransaction;", "removeTransaction", "addTransactionHash", "removeTransactionHash", "transactionErrorEvent", "LAndroidGovNistJavaxSipStackSIPTransactionErrorEvent;", "dialogErrorEvent", "LAndroidGovNistJavaxSipStackSIPDialogErrorEvent;", "putPendingTransaction", (void *)&AndroidGovNistJavaxSipStackSIPTransactionStack__Annotations$0, "setTcpPostParsingThreadPoolSize", "I", "setThreadPoolSize", "setMaxConnections", "getNextHop", "LAndroidJavaxSipSipException;", "setStackName", "setHostAddress", "LJavaNetUnknownHostException;", "setRouter", "LAndroidJavaxSipAddressRouter;", "getRouter", "addMessageProcessor", "LAndroidGovNistJavaxSipStackMessageProcessor;", "removeMessageProcessor", "createMessageProcessor", "LJavaNetInetAddress;ILNSString;", "setMessageFactory", "createRawMessageChannel", "LNSString;ILAndroidJavaxSipAddressHop;", "isEventForked", "setAddressResolver", "LAndroidGovNistCoreNetAddressResolver;", "setLogRecordFactory", "LAndroidGovNistJavaxSipLogRecordFactory;", "auditStack", "LJavaUtilSet;JJ", "auditDialogs", "LJavaUtilSet;J", "auditTransactions", "LJavaUtilConcurrentConcurrentHashMap;J", "setNon2XXAckPassedToListener", "Z", "()Ljava/util/Collection<Landroid/javax/sip/Dialog;>;", "getDialogs", "LAndroidJavaxSipDialogState;", "(Landroid/javax/sip/DialogState;)Ljava/util/Collection<Landroid/javax/sip/Dialog;>;", "getReplacesDialog", "LAndroidGovNistJavaxSipHeaderExtensionsReplacesHeader;", "getJoinDialog", "LAndroidGovNistJavaxSipHeaderExtensionsJoinHeader;", "setTimer", "LAndroidGovNistJavaxSipStackTimersSipTimer;", "LJavaLangIllegalStateException;", "setReceiveUdpBufferSize", "setSendUdpBufferSize", "setLogStackTraceOnMessageSend", "addForkedClientTransaction", "getForkedTransaction", "setDeliverUnsolicitedNotify", "setDeliverTerminatedEventForAck", "setPatchWebSocketHeaders", "LJavaLangBoolean;", "setPatchRport", "setMaxForkTime", "setMessageParserFactory", "LAndroidGovNistJavaxSipParserMessageParserFactory;", "setMessageProcessorFactory", "LAndroidGovNistJavaxSipStackMessageProcessorFactory;", "setAggressiveCleanup", "setClientAuth", "LAndroidGovNistJavaxSipStackClientAuthType;", "setThreadPriority", "setReliableConnectionKeepAliveTimeout", "findMessageProcessor", "LNSString;ILNSString;", "setKeepAliveTimeout", "LNSString;ILNSString;LNSString;IJ", "closeReliableConnection", "LNSString;ILNSString;LNSString;I", "setSslHandshakeTimeout", "J", "setEarlyDialogTimeout", "setMaxTxLifetimeInvite", "setMaxTxLifetimeNonInvite", "setSslRenegotiationEnabled", "setConnectionLingerTimer", "setStackCongestionControlTimeout", "setReleaseReferencesStrategy", "LAndroidGovNistJavaxSipReleaseReferencesStrategy;", &AndroidGovNistJavaxSipStackSIPTransactionStack_logger, &AndroidGovNistJavaxSipStackSIPTransactionStack_connectionLingerTimer, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Landroid/gov/nist/javax/sip/stack/SIPServerTransaction;>;", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Landroid/gov/nist/javax/sip/stack/SIPDialog;>;", &AndroidGovNistJavaxSipStackSIPTransactionStack_dialogCreatingMethods, "Ljava/util/Set<Ljava/lang/String;>;", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Landroid/gov/nist/javax/sip/stack/SIPClientTransaction;>;", "Ljava/util/Collection<Landroid/gov/nist/javax/sip/stack/MessageProcessor;>;", "Ljava/util/HashSet<Ljava/lang/String;>;", &AndroidGovNistJavaxSipStackSIPTransactionStack_selfRoutingThreadpoolExecutor, "LAndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor;LAndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer;LAndroidGovNistJavaxSipStackSIPTransactionStack_RemoveForkedTransactionTimerTask;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPTransactionStack = { "SIPTransactionStack", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x401, 152, 91, -1, 152, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPTransactionStack;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackSIPTransactionStack class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackSIPTransactionStack_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackSIPTransactionStack_class_()));
    JreStrongAssignAndConsume(&AndroidGovNistJavaxSipStackSIPTransactionStack_dialogCreatingMethods, new_JavaUtilHashSet_init());
    {
      [AndroidGovNistJavaxSipStackSIPTransactionStack_dialogCreatingMethods addWithId:AndroidJavaxSipMessageRequest_REFER];
      [AndroidGovNistJavaxSipStackSIPTransactionStack_dialogCreatingMethods addWithId:AndroidJavaxSipMessageRequest_INVITE];
      [AndroidGovNistJavaxSipStackSIPTransactionStack_dialogCreatingMethods addWithId:AndroidJavaxSipMessageRequest_SUBSCRIBE];
    }
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackSIPTransactionStack)
  }
}

@end

void AndroidGovNistJavaxSipStackSIPTransactionStack_init(AndroidGovNistJavaxSipStackSIPTransactionStack *self) {
  NSObject_init(self);
  self->earlyDialogTimeout_ = 180;
  self->unlimitedServerTransactionTableSize_ = true;
  self->unlimitedClientTransactionTableSize_ = true;
  self->serverTransactionTableHighwaterMark_ = 5000;
  self->serverTransactionTableLowaterMark_ = 4000;
  self->clientTransactionTableHiwaterMark_ = 1000;
  self->clientTransactionTableLowaterMark_ = 800;
  JreStrongAssignAndConsume(&self->activeClientTransactionCount_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0));
  self->deliverRetransmittedAckToListener_ = false;
  self->rfc2543Supported_ = true;
  JreStrongAssign(&self->threadAuditor_, nil);
  self->cancelClientTransactionChecked_ = true;
  self->remoteTagReassignmentAllowed_ = true;
  self->logStackTraceOnMessageSend_ = true;
  self->stackCongestionControlTimeout_ = 0;
  self->isBackToBackUserAgent_ = false;
  self->isAutomaticDialogErrorHandlingEnabled_ = true;
  self->isDialogTerminatedEventDeliveredForNullDialog_ = false;
  self->maxForkTime_ = 0;
  self->deliverUnsolicitedNotify_ = false;
  self->deliverTerminatedEventForAck_ = false;
  self->patchWebSocketHeaders_ = false;
  self->patchRport_ = false;
  JreStrongAssign(&self->clientAuth_, JreLoadEnum(AndroidGovNistJavaxSipStackClientAuthType, Default));
  self->tcpPostParsingThreadPoolSize_ = 0;
  self->minKeepAliveInterval_ = -1LL;
  self->dialogTimeoutFactor_ = 64;
  JreStrongAssign(&self->releaseReferencesStrategy_, JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, None));
  self->threadPriority_ = JavaLangThread_MAX_PRIORITY;
  self->reliableConnectionKeepAliveTimeout_ = -1;
  self->sslHandshakeTimeout_ = -1;
  self->sslRenegotiationEnabled_ = false;
  JreStrongAssign(&self->socketTimeoutAuditor_, nil);
  JreStrongAssign(&self->reinviteExecutor_, JavaUtilConcurrentExecutors_newCachedThreadPoolWithJavaUtilConcurrentThreadFactory_(create_AndroidGovNistJavaxSipStackSIPTransactionStack_1_init()));
  self->toExit_ = false;
  JreStrongAssignAndConsume(&self->forkedEvents_, new_JavaUtilHashSet_init());
  self->threadPoolSize_ = -1;
  self->cacheServerConnections_ = true;
  self->cacheClientConnections_ = true;
  self->maxConnections_ = -1;
  JreStrongAssignAndConsume(&self->messageProcessors_, new_JavaUtilConcurrentCopyOnWriteArrayList_init());
  JreStrongAssignAndConsume(&self->ioHandler_, new_AndroidGovNistJavaxSipStackIOHandler_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(self));
  self->readTimeout_ = -1;
  self->maxListenerResponseTime_ = -1;
  JreStrongAssignAndConsume(&self->addressResolver_, new_AndroidGovNistJavaxSipDefaultAddressResolver_init());
  JreStrongAssignAndConsume(&self->dialogTable_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->earlyDialogTable_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->serverDialogMergeTestTable_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->clientTransactionTable_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->serverTransactionTable_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->terminatedServerTransactionsPendingAck_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->mergeTable_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->retransmissionAlertTransactions_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->pendingTransactions_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->forkedClientTransactionTable_, new_JavaUtilConcurrentConcurrentHashMap_init());
}

jboolean AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_(NSString *method) {
  AndroidGovNistJavaxSipStackSIPTransactionStack_initialize();
  return [((id<JavaUtilSet>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_dialogCreatingMethods)) containsWithId:method];
}

void AndroidGovNistJavaxSipStackSIPTransactionStack_initWithAndroidGovNistJavaxSipStackStackMessageFactory_(AndroidGovNistJavaxSipStackSIPTransactionStack *self, id<AndroidGovNistJavaxSipStackStackMessageFactory> messageFactory) {
  AndroidGovNistJavaxSipStackSIPTransactionStack_init(self);
  JreStrongAssign(&self->sipMessageFactory_, messageFactory);
}

void AndroidGovNistJavaxSipStackSIPTransactionStack_addTransactionHashWithAndroidGovNistJavaxSipStackSIPTransaction_(AndroidGovNistJavaxSipStackSIPTransactionStack *self, id<AndroidGovNistJavaxSipStackSIPTransaction> sipTransaction) {
  AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = [((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk(sipTransaction)) getOriginalRequest];
  id<AndroidGovNistJavaxSipStackSIPTransaction> existingTx = nil;
  if ([AndroidGovNistJavaxSipStackSIPClientTransaction_class_() isInstance:sipTransaction]) {
    if (!self->unlimitedClientTransactionTableSize_) {
      if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->activeClientTransactionCount_)) get] > self->clientTransactionTableHiwaterMark_) {
        @try {
          @synchronized(self->clientTransactionTable_) {
            [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->clientTransactionTable_)) java_wait];
            [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->activeClientTransactionCount_)) incrementAndGet];
          }
        }
        @catch (JavaLangException *ex) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) errorWithNSString:@"Exception occured while waiting for room" withNSException:ex];
        }
      }
    }
    else {
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->activeClientTransactionCount_)) incrementAndGet];
    }
    NSString *key = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getTransactionId];
    existingTx = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->clientTransactionTable_)) putIfAbsentWithId:key withId:(id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(sipTransaction, AndroidGovNistJavaxSipStackSIPClientTransaction_class_())];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$", @" putTransactionHash :  key = ", key)];
  }
  else {
    NSString *key = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getTransactionId];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$", @" putTransactionHash :  key = ", key)];
    existingTx = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->serverTransactionTable_)) putIfAbsentWithId:key withId:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check(sipTransaction, AndroidGovNistJavaxSipStackSIPServerTransaction_class_())];
  }
  if (existingTx == nil) {
    [sipTransaction scheduleMaxTxLifeTimeTimer];
  }
}

NSString *AndroidGovNistJavaxSipStackSIPTransactionStack_auditDialogsWithJavaUtilSet_withLong_(AndroidGovNistJavaxSipStackSIPTransactionStack *self, id<JavaUtilSet> activeCallIDs, jlong leakedDialogTimer) {
  NSString *auditReport = @"  Leaked dialogs:\n";
  jint leakedDialogs = 0;
  jlong currentTime = JavaLangSystem_currentTimeMillis();
  JavaUtilLinkedList *dialogs;
  @synchronized(self->dialogTable_) {
    dialogs = create_JavaUtilLinkedList_initWithJavaUtilCollection_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->dialogTable_)) values]);
  }
  id<JavaUtilIterator> it = [dialogs iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    AndroidGovNistJavaxSipStackSIPDialog *itDialog = (AndroidGovNistJavaxSipStackSIPDialog *) cast_chk([it next], [AndroidGovNistJavaxSipStackSIPDialog class]);
    id<AndroidJavaxSipHeaderCallIdHeader> callIdHeader = (itDialog != nil ? [itDialog getCallId] : nil);
    NSString *callID = (callIdHeader != nil ? [callIdHeader getCallId] : nil);
    if (itDialog != nil && callID != nil && ![((id<JavaUtilSet>) nil_chk(activeCallIDs)) containsWithId:callID]) {
      if (itDialog->auditTag_ == 0) {
        itDialog->auditTag_ = currentTime;
      }
      else {
        if (currentTime - itDialog->auditTag_ >= leakedDialogTimer) {
          leakedDialogs++;
          AndroidJavaxSipDialogState *dialogState = [itDialog getState];
          NSString *dialogReport = JreStrcat("$$$$", @"dialog id: ", [itDialog getDialogId], @", dialog state: ", (dialogState != nil ? [dialogState description] : @"null"));
          JreStrAppend(&auditReport, "$$C", @"    ", dialogReport, 0x000a);
          [itDialog setStateWithInt:AndroidGovNistJavaxSipStackSIPDialog_TERMINATED_STATE];
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$", @"auditDialogs: leaked ", dialogReport)];
        }
      }
    }
  }
  if (leakedDialogs > 0) {
    JreStrAppend(&auditReport, "$$$", @"    Total: ", JavaLangInteger_toStringWithInt_(leakedDialogs), @" leaked dialogs detected and removed.\n");
  }
  else {
    auditReport = nil;
  }
  return auditReport;
}

NSString *AndroidGovNistJavaxSipStackSIPTransactionStack_auditTransactionsWithJavaUtilConcurrentConcurrentHashMap_withLong_(AndroidGovNistJavaxSipStackSIPTransactionStack *self, JavaUtilConcurrentConcurrentHashMap *transactionsMap, jlong a_nLeakedTransactionTimer) {
  NSString *auditReport = @"  Leaked transactions:\n";
  jint leakedTransactions = 0;
  jlong currentTime = JavaLangSystem_currentTimeMillis();
  JavaUtilLinkedList *transactionsList = create_JavaUtilLinkedList_initWithJavaUtilCollection_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(transactionsMap)) values]);
  id<JavaUtilIterator> it = [transactionsList iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    id<AndroidGovNistJavaxSipStackSIPTransaction> sipTransaction = (id<AndroidGovNistJavaxSipStackSIPTransaction>) cast_check([it next], AndroidGovNistJavaxSipStackSIPTransaction_class_());
    if (sipTransaction != nil) {
      if ([sipTransaction getAuditTag] == 0) {
        [sipTransaction setAuditTagWithLong:currentTime];
      }
      else {
        if (currentTime - [sipTransaction getAuditTag] >= a_nLeakedTransactionTimer) {
          leakedTransactions++;
          AndroidJavaxSipTransactionState *transactionState = [sipTransaction getState];
          AndroidGovNistJavaxSipMessageSIPRequest *origRequest = [sipTransaction getOriginalRequest];
          NSString *origRequestMethod = (origRequest != nil ? [origRequest getMethod] : nil);
          NSString *transactionReport = JreStrcat("$$$$$", [[sipTransaction java_getClass] getName], @", state: ", (transactionState != nil ? [transactionState description] : @"null"), @", OR: ", (origRequestMethod != nil ? origRequestMethod : @"null"));
          JreStrAppend(&auditReport, "$$C", @"    ", transactionReport, 0x000a);
          [self removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:sipTransaction];
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPTransactionStack_logger)) debugWithNSString:JreStrcat("$$", @"auditTransactions: leaked ", transactionReport)];
        }
      }
    }
  }
  if (leakedTransactions > 0) {
    JreStrAppend(&auditReport, "$$$", @"    Total: ", JavaLangInteger_toStringWithInt_(leakedTransactions), @" leaked transactions detected and removed.\n");
  }
  else {
    auditReport = nil;
  }
  return auditReport;
}

AndroidGovNistJavaxSipStackMessageProcessor *AndroidGovNistJavaxSipStackSIPTransactionStack_findMessageProcessorWithNSString_withInt_withNSString_(AndroidGovNistJavaxSipStackSIPTransactionStack *self, NSString *myAddress, jint myPort, NSString *transport) {
  {
    IOSObjectArray *a__ = [self getMessageProcessors];
    AndroidGovNistJavaxSipStackMessageProcessor * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    AndroidGovNistJavaxSipStackMessageProcessor * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      AndroidGovNistJavaxSipStackMessageProcessor *processor = *b__++;
      if ([((NSString *) nil_chk([((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(processor)) getTransport])) java_equalsIgnoreCase:transport] && [((NSString *) nil_chk([processor getSavedIpAddress])) isEqual:myAddress] && [processor getPort] == myPort) {
        return processor;
      }
    }
  }
  return nil;
}

IOSObjectArray *AndroidGovNistJavaxSipStackSIPTransactionStack__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPTransactionStack)

@implementation AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  [((id<JavaLangRunnable>) nil_chk(command)) run];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(executeWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "execute", "LJavaLangRunnable;", "LAndroidGovNistJavaxSipStackSIPTransactionStack;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor = { "SameThreadExecutor", "android.gov.nist.javax.sip.stack", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor;
}

@end

void AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor_init(AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor *self) {
  NSObject_init(self);
}

AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor *new_AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor, init)
}

AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor *create_AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPTransactionStack_SameThreadExecutor)

@implementation AndroidGovNistJavaxSipStackSIPTransactionStack_2

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)outer$ {
  AndroidGovNistJavaxSipStackSIPTransactionStack_2_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(self, outer$);
  return self;
}

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)pRunnable {
  JavaLangThread *thread = create_JavaLangThread_initWithJavaLangRunnable_withNSString_(pRunnable, NSString_java_formatWithNSString_withNSObjectArray_(@"%s-%d", [IOSObjectArray arrayWithObjects:(id[]){ @"SelfRoutingThread", JavaLangInteger_valueOfWithInt_(threadCount_++) } count:2 type:NSObject_class_()]));
  [thread setPriorityWithInt:this$0_->threadPriority_];
  return thread;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionStack:);
  methods[1].selector = @selector(newThreadWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPTransactionStack;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "threadCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newThread", "LJavaLangRunnable;", "LAndroidGovNistJavaxSipStackSIPTransactionStack;", "getSelfRoutingThreadpoolExecutor" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPTransactionStack_2 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8008, 2, 2, 2, -1, 3, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPTransactionStack_2;
}

@end

void AndroidGovNistJavaxSipStackSIPTransactionStack_2_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(AndroidGovNistJavaxSipStackSIPTransactionStack_2 *self, AndroidGovNistJavaxSipStackSIPTransactionStack *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->threadCount_ = 0;
}

AndroidGovNistJavaxSipStackSIPTransactionStack_2 *new_AndroidGovNistJavaxSipStackSIPTransactionStack_2_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(AndroidGovNistJavaxSipStackSIPTransactionStack *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPTransactionStack_2, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_, outer$)
}

AndroidGovNistJavaxSipStackSIPTransactionStack_2 *create_AndroidGovNistJavaxSipStackSIPTransactionStack_2_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(AndroidGovNistJavaxSipStackSIPTransactionStack *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPTransactionStack_2, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_, outer$)
}

@implementation AndroidGovNistJavaxSipStackSIPTransactionStack_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipStackSIPTransactionStack_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)pRunnable {
  return create_JavaLangThread_initWithJavaLangRunnable_withNSString_(pRunnable, NSString_java_formatWithNSString_withNSObjectArray_(@"%s-%d", [IOSObjectArray arrayWithObjects:(id[]){ @"ReInviteSender", JavaLangInteger_valueOfWithInt_(threadCount_++) } count:2 type:NSObject_class_()]));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(newThreadWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "threadCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newThread", "LJavaLangRunnable;", "LAndroidGovNistJavaxSipStackSIPTransactionStack;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPTransactionStack_1 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPTransactionStack_1;
}

@end

void AndroidGovNistJavaxSipStackSIPTransactionStack_1_init(AndroidGovNistJavaxSipStackSIPTransactionStack_1 *self) {
  NSObject_init(self);
  self->threadCount_ = 0;
}

AndroidGovNistJavaxSipStackSIPTransactionStack_1 *new_AndroidGovNistJavaxSipStackSIPTransactionStack_1_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPTransactionStack_1, init)
}

AndroidGovNistJavaxSipStackSIPTransactionStack_1 *create_AndroidGovNistJavaxSipStackSIPTransactionStack_1_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPTransactionStack_1, init)
}

@implementation AndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)outer$
                      withAndroidGovNistCoreThreadAuditor_ThreadHandle:(AndroidGovNistCoreThreadAuditor_ThreadHandle *)a_oThreadHandle {
  AndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistCoreThreadAuditor_ThreadHandle_(self, outer$, a_oThreadHandle);
  return self;
}

- (void)runTask {
  if ([this$0_ getTimer] != nil) {
    if (threadHandle_ == nil && [this$0_ getThreadAuditor] != nil) {
      JreStrongAssign(&threadHandle_, [((AndroidGovNistCoreThreadAuditor *) nil_chk([this$0_ getThreadAuditor])) addCurrentThread]);
    }
    [((AndroidGovNistCoreThreadAuditor_ThreadHandle *) nil_chk(threadHandle_)) ping];
    [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([this$0_ getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:create_AndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistCoreThreadAuditor_ThreadHandle_(this$0_, threadHandle_) withLong:[((AndroidGovNistCoreThreadAuditor_ThreadHandle *) nil_chk(threadHandle_)) getPingIntervalInMillisecs]];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(threadHandle_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistCoreThreadAuditor_ThreadHandle:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPTransactionStack;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "threadHandle_", "LAndroidGovNistCoreThreadAuditor_ThreadHandle;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistCoreThreadAuditor_ThreadHandle;", "LAndroidGovNistJavaxSipStackSIPTransactionStack;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer = { "PingTimer", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x4, 2, 2, 1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer;
}

@end

void AndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistCoreThreadAuditor_ThreadHandle_(AndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer *self, AndroidGovNistJavaxSipStackSIPTransactionStack *outer$, AndroidGovNistCoreThreadAuditor_ThreadHandle *a_oThreadHandle) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
  JreStrongAssign(&self->threadHandle_, a_oThreadHandle);
}

AndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer *new_AndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistCoreThreadAuditor_ThreadHandle_(AndroidGovNistJavaxSipStackSIPTransactionStack *outer$, AndroidGovNistCoreThreadAuditor_ThreadHandle *a_oThreadHandle) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistCoreThreadAuditor_ThreadHandle_, outer$, a_oThreadHandle)
}

AndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer *create_AndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistCoreThreadAuditor_ThreadHandle_(AndroidGovNistJavaxSipStackSIPTransactionStack *outer$, AndroidGovNistCoreThreadAuditor_ThreadHandle *a_oThreadHandle) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistCoreThreadAuditor_ThreadHandle_, outer$, a_oThreadHandle)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer)

@implementation AndroidGovNistJavaxSipStackSIPTransactionStack_RemoveForkedTransactionTimerTask

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)outer$
                                                          withNSString:(NSString *)forkId {
  AndroidGovNistJavaxSipStackSIPTransactionStack_RemoveForkedTransactionTimerTask_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withNSString_(self, outer$, forkId);
  return self;
}

- (void)runTask {
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPTransactionStack, logger))) debugWithNSString:JreStrcat("$$", @"Removing forked client transaction : forkId = ", forkId_)];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->forkedClientTransactionTable_)) removeWithId:forkId_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(forkId_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionStack:withNSString:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPTransactionStack;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "forkId_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistJavaxSipStackSIPTransactionStack;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPTransactionStack_RemoveForkedTransactionTimerTask = { "RemoveForkedTransactionTimerTask", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 2, 2, 1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPTransactionStack_RemoveForkedTransactionTimerTask;
}

@end

void AndroidGovNistJavaxSipStackSIPTransactionStack_RemoveForkedTransactionTimerTask_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withNSString_(AndroidGovNistJavaxSipStackSIPTransactionStack_RemoveForkedTransactionTimerTask *self, AndroidGovNistJavaxSipStackSIPTransactionStack *outer$, NSString *forkId) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
  JreStrongAssign(&self->forkId_, forkId);
}

AndroidGovNistJavaxSipStackSIPTransactionStack_RemoveForkedTransactionTimerTask *new_AndroidGovNistJavaxSipStackSIPTransactionStack_RemoveForkedTransactionTimerTask_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withNSString_(AndroidGovNistJavaxSipStackSIPTransactionStack *outer$, NSString *forkId) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPTransactionStack_RemoveForkedTransactionTimerTask, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withNSString_, outer$, forkId)
}

AndroidGovNistJavaxSipStackSIPTransactionStack_RemoveForkedTransactionTimerTask *create_AndroidGovNistJavaxSipStackSIPTransactionStack_RemoveForkedTransactionTimerTask_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withNSString_(AndroidGovNistJavaxSipStackSIPTransactionStack *outer$, NSString *forkId) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPTransactionStack_RemoveForkedTransactionTimerTask, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withNSString_, outer$, forkId)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPTransactionStack_RemoveForkedTransactionTimerTask)
