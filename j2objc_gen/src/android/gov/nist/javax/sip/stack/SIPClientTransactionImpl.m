//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/SIPClientTransactionImpl.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/core/NameValueList.h"
#include "android/gov/nist/javax/sip/ReleaseReferencesStrategy.h"
#include "android/gov/nist/javax/sip/SIPConstants.h"
#include "android/gov/nist/javax/sip/SipProviderImpl.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/Utils.h"
#include "android/gov/nist/javax/sip/address/AddressImpl.h"
#include "android/gov/nist/javax/sip/header/Contact.h"
#include "android/gov/nist/javax/sip/header/ContactList.h"
#include "android/gov/nist/javax/sip/header/Event.h"
#include "android/gov/nist/javax/sip/header/Expires.h"
#include "android/gov/nist/javax/sip/header/RecordRoute.h"
#include "android/gov/nist/javax/sip/header/RecordRouteList.h"
#include "android/gov/nist/javax/sip/header/Route.h"
#include "android/gov/nist/javax/sip/header/RouteList.h"
#include "android/gov/nist/javax/sip/header/TimeStamp.h"
#include "android/gov/nist/javax/sip/header/To.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/message/SIPRequest.h"
#include "android/gov/nist/javax/sip/message/SIPResponse.h"
#include "android/gov/nist/javax/sip/parser/MessageParser.h"
#include "android/gov/nist/javax/sip/parser/MessageParserFactory.h"
#include "android/gov/nist/javax/sip/stack/IllegalTransactionStateException.h"
#include "android/gov/nist/javax/sip/stack/MessageChannel.h"
#include "android/gov/nist/javax/sip/stack/MessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/SIPClientTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPClientTransactionImpl.h"
#include "android/gov/nist/javax/sip/stack/SIPDialog.h"
#include "android/gov/nist/javax/sip/stack/SIPStackTimerTask.h"
#include "android/gov/nist/javax/sip/stack/SIPTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionErrorEvent.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionImpl.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/gov/nist/javax/sip/stack/ServerResponseInterface.h"
#include "android/gov/nist/javax/sip/stack/timers/SipTimer.h"
#include "android/javax/sip/Dialog.h"
#include "android/javax/sip/DialogState.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "android/javax/sip/SipException.h"
#include "android/javax/sip/Timeout.h"
#include "android/javax/sip/TimeoutEvent.h"
#include "android/javax/sip/TransactionState.h"
#include "android/javax/sip/address/Address.h"
#include "android/javax/sip/address/Hop.h"
#include "android/javax/sip/address/SipURI.h"
#include "android/javax/sip/address/URI.h"
#include "android/javax/sip/header/CSeqHeader.h"
#include "android/javax/sip/header/CallIdHeader.h"
#include "android/javax/sip/header/EventHeader.h"
#include "android/javax/sip/header/ExpiresHeader.h"
#include "android/javax/sip/header/FromHeader.h"
#include "android/javax/sip/header/Header.h"
#include "android/javax/sip/header/RouteHeader.h"
#include "android/javax/sip/header/TimeStampHeader.h"
#include "android/javax/sip/header/ToHeader.h"
#include "android/javax/sip/message/Request.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/text/ParseException.h"
#include "java/util/ListIterator.h"
#include "java/util/Set.h"
#include "java/util/concurrent/CopyOnWriteArraySet.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface AndroidGovNistJavaxSipStackSIPClientTransactionImpl () {
 @public
  id<JavaUtilSet> sipDialogs_;
  AndroidGovNistJavaxSipMessageSIPRequest *lastRequest_;
  jint viaPort_;
  NSString *viaHost_;
  id<AndroidGovNistJavaxSipStackServerResponseInterface> respondTo_;
  NSString *defaultDialogId_;
  AndroidGovNistJavaxSipStackSIPDialog *defaultDialog_;
  id<AndroidJavaxSipAddressHop> nextHop_;
  jboolean notifyOnRetransmit_;
  jboolean timeoutIfStillInCallingState_;
  jint callingStateTimeoutCount_;
  AndroidGovNistJavaxSipStackSIPStackTimerTask *transactionTimer_;
  NSString *originalRequestFromTag_;
  NSString *originalRequestCallId_;
  AndroidGovNistJavaxSipHeaderEvent *originalRequestEventHeader_;
  AndroidGovNistJavaxSipHeaderContact *originalRequestContact_;
  NSString *originalRequestScheme_;
  id transactionTimerLock_;
  JavaUtilConcurrentAtomicAtomicBoolean *timerKStarted_;
  jboolean transactionTimerCancelled_;
  id<JavaUtilSet> responsesReceived_;
}

- (void)nonInviteClientTransactionWithAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)transactionResponse
                                 withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)sourceChannel
                                      withAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)sipDialog;

- (void)scheduleTimerKWithLong:(jlong)time;

- (void)inviteClientTransactionWithAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)transactionResponse
                              withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)sourceChannel
                                   withAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)dialog;

- (id<AndroidJavaxSipMessageRequest>)createErrorAck;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, sipDialogs_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, lastRequest_, AndroidGovNistJavaxSipMessageSIPRequest *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, viaHost_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, respondTo_, id<AndroidGovNistJavaxSipStackServerResponseInterface>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, defaultDialogId_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, defaultDialog_, AndroidGovNistJavaxSipStackSIPDialog *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, nextHop_, id<AndroidJavaxSipAddressHop>)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, transactionTimer_, AndroidGovNistJavaxSipStackSIPStackTimerTask *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, originalRequestFromTag_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, originalRequestCallId_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, originalRequestEventHeader_, AndroidGovNistJavaxSipHeaderEvent *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, originalRequestContact_, AndroidGovNistJavaxSipHeaderContact *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, originalRequestScheme_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, transactionTimerLock_, id)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, timerKStarted_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, responsesReceived_, id<JavaUtilSet>)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSIPClientTransactionImpl_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSIPClientTransactionImpl_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, logger, id<OrgSlf4jLogger>)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPClientTransactionImpl_nonInviteClientTransactionWithAndroidGovNistJavaxSipMessageSIPResponse_withAndroidGovNistJavaxSipStackMessageChannel_withAndroidGovNistJavaxSipStackSIPDialog_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *self, AndroidGovNistJavaxSipMessageSIPResponse *transactionResponse, AndroidGovNistJavaxSipStackMessageChannel *sourceChannel, AndroidGovNistJavaxSipStackSIPDialog *sipDialog);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPClientTransactionImpl_scheduleTimerKWithLong_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *self, jlong time);

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPClientTransactionImpl_inviteClientTransactionWithAndroidGovNistJavaxSipMessageSIPResponse_withAndroidGovNistJavaxSipStackMessageChannel_withAndroidGovNistJavaxSipStackSIPDialog_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *self, AndroidGovNistJavaxSipMessageSIPResponse *transactionResponse, AndroidGovNistJavaxSipStackMessageChannel *sourceChannel, AndroidGovNistJavaxSipStackSIPDialog *dialog);

__attribute__((unused)) static id<AndroidJavaxSipMessageRequest> AndroidGovNistJavaxSipStackSIPClientTransactionImpl_createErrorAck(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *self);

@interface AndroidGovNistJavaxSipStackSIPClientTransactionImpl_TransactionTimer () {
 @public
  AndroidGovNistJavaxSipStackSIPClientTransactionImpl *this$0_;
}

@end

@interface AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask () {
 @public
  AndroidGovNistJavaxSipStackSIPClientTransactionImpl *this$0_;
}

@end

@interface AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1 : AndroidGovNistJavaxSipStackSIPStackTimerTask {
 @public
  AndroidGovNistJavaxSipStackSIPClientTransactionImpl *this$0_;
}

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl:(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *)outer$;

- (void)runTask;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1)

__attribute__((unused)) static void AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1 *self, AndroidGovNistJavaxSipStackSIPClientTransactionImpl *outer$);

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1 *new_AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1 *create_AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *outer$);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipStackSIPClientTransactionImpl)

@implementation AndroidGovNistJavaxSipStackSIPClientTransactionImpl

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)newSIPStack
                         withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)newChannelToUse {
  AndroidGovNistJavaxSipStackSIPClientTransactionImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_(self, newSIPStack, newChannelToUse);
  return self;
}

- (void)setResponseInterfaceWithAndroidGovNistJavaxSipStackServerResponseInterface:(id<AndroidGovNistJavaxSipStackServerResponseInterface>)newRespondTo {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$@$@", @"Setting response interface for ", self, @" to ", newRespondTo)];
  if (newRespondTo == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:@"WARNING -- setting to null!"];
  }
  JreStrongAssign(&respondTo_, newRespondTo);
}

- (AndroidGovNistJavaxSipStackMessageChannel *)getRequestChannel {
  return encapsulatedChannel_;
}

- (jboolean)isMessagePartOfTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)messageToTest {
  AndroidGovNistJavaxSipHeaderVia *topMostViaHeader = [((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(messageToTest)) getTopmostVia];
  jboolean transactionMatches;
  NSString *messageBranch = [((AndroidGovNistJavaxSipHeaderVia *) nil_chk(topMostViaHeader)) getBranch];
  jboolean rfc3261Compliant = [self getBranch] != nil && messageBranch != nil && [((NSString *) nil_chk([((NSString *) nil_chk([self getBranch])) lowercaseString])) hasPrefix:AndroidGovNistJavaxSipSIPConstants_BRANCH_MAGIC_COOKIE_LOWER_CASE] && [((NSString *) nil_chk([messageBranch lowercaseString])) hasPrefix:AndroidGovNistJavaxSipSIPConstants_BRANCH_MAGIC_COOKIE_LOWER_CASE];
  transactionMatches = false;
  if (AndroidJavaxSipTransactionState__COMPLETED == [self getInternalState]) {
    if (rfc3261Compliant) {
      transactionMatches = ([((NSString *) nil_chk([self getBranch])) java_equalsIgnoreCase:[topMostViaHeader getBranch]] && [((NSString *) nil_chk([self getMethod])) isEqual:[((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([messageToTest getCSeq])) getMethod]]);
    }
    else {
      transactionMatches = [((NSString *) nil_chk([self getBranch])) isEqual:[messageToTest getTransactionId]];
    }
  }
  else if (![self isTerminated]) {
    if (rfc3261Compliant) {
      if (topMostViaHeader != nil) {
        if ([((NSString *) nil_chk([self getBranch])) java_equalsIgnoreCase:[topMostViaHeader getBranch]]) {
          transactionMatches = [((NSString *) nil_chk([self getMethod])) isEqual:[((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([messageToTest getCSeq])) getMethod]];
        }
      }
    }
    else {
      if ([self getBranch] != nil) {
        transactionMatches = [((NSString *) nil_chk([self getBranch])) java_equalsIgnoreCase:[messageToTest getTransactionId]];
      }
      else {
        transactionMatches = [((NSString *) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([self getRequest], [AndroidGovNistJavaxSipMessageSIPRequest class])))) getTransactionId])) java_equalsIgnoreCase:[messageToTest getTransactionId]];
      }
    }
  }
  return transactionMatches;
}

- (void)sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)messageToSend {
  @try {
    AndroidGovNistJavaxSipMessageSIPRequest *transactionRequest;
    transactionRequest = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(messageToSend, [AndroidGovNistJavaxSipMessageSIPRequest class]);
    AndroidGovNistJavaxSipHeaderVia *topVia = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(transactionRequest)) getTopmostVia];
    @try {
      [((AndroidGovNistJavaxSipHeaderVia *) nil_chk(topVia)) setBranchWithNSString:[self getBranch]];
    }
    @catch (JavaTextParseException *ex) {
    }
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @"Sending Message ", messageToSend)];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @"TransactionState ", [self getState])];
    if (AndroidJavaxSipTransactionState__PROCEEDING == [self getInternalState] || AndroidJavaxSipTransactionState__CALLING == [self getInternalState]) {
      if ([((NSString *) nil_chk([transactionRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_ACK]) {
        if ([self isReliable]) {
          [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
        }
        else {
          [self setStateWithInt:AndroidJavaxSipTransactionState__COMPLETED];
        }
        [self cleanUpOnTimer];
        [super sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:transactionRequest];
        return;
      }
    }
    @try {
      JreStrongAssign(&lastRequest_, transactionRequest);
      if ([self getInternalState] < 0) {
        [self setOriginalRequestWithAndroidGovNistJavaxSipMessageSIPRequest:transactionRequest];
        if ([((NSString *) nil_chk([transactionRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_INVITE]) {
          [self setStateWithInt:AndroidJavaxSipTransactionState__CALLING];
        }
        else if ([((NSString *) nil_chk([transactionRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_ACK]) {
          [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
          [self cleanUpOnTimer];
        }
        else {
          [self setStateWithInt:AndroidJavaxSipTransactionState__TRYING];
        }
        if (![self isReliable]) {
          [self enableRetransmissionTimer];
        }
        if ([self isInviteTransaction]) {
          [self enableTimeoutTimerWithInt:AndroidGovNistJavaxSipStackSIPTransaction_TIMER_B];
        }
        else {
          [self enableTimeoutTimerWithInt:AndroidGovNistJavaxSipStackSIPTransaction_TIMER_F];
        }
      }
      [super sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:transactionRequest];
    }
    @catch (JavaIoIOException *e) {
      [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
      @throw e;
    }
  }
  @finally {
    self->isMapped_ = true;
    [self startTransactionTimer];
  }
}

- (void)processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)transactionResponse
                      withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)sourceChannel
                           withAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)dialog {
  @synchronized(self) {
    if ([self getInternalState] < 0) return;
    if ((AndroidJavaxSipTransactionState__COMPLETED == [self getInternalState] || AndroidJavaxSipTransactionState__TERMINATED == [self getInternalState]) && [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(transactionResponse)) getStatusCode] / 100 == 1) {
      return;
    }
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$$$@", @"processing ", [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(transactionResponse)) getFirstLine], @"current state = ", [self getState])];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @"dialog = ", dialog)];
    JreStrongAssign(&self->lastResponse_, transactionResponse);
    @try {
      if ([self isInviteTransaction]) AndroidGovNistJavaxSipStackSIPClientTransactionImpl_inviteClientTransactionWithAndroidGovNistJavaxSipMessageSIPResponse_withAndroidGovNistJavaxSipStackMessageChannel_withAndroidGovNistJavaxSipStackSIPDialog_(self, transactionResponse, sourceChannel, dialog);
      else AndroidGovNistJavaxSipStackSIPClientTransactionImpl_nonInviteClientTransactionWithAndroidGovNistJavaxSipMessageSIPResponse_withAndroidGovNistJavaxSipStackMessageChannel_withAndroidGovNistJavaxSipStackSIPDialog_(self, transactionResponse, sourceChannel, dialog);
    }
    @catch (JavaIoIOException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) errorWithNSString:@"IOException" withNSException:ex];
      [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
      [self raiseErrorEventWithInt:AndroidGovNistJavaxSipStackSIPTransactionErrorEvent_TRANSPORT_ERROR];
    }
  }
}

- (void)nonInviteClientTransactionWithAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)transactionResponse
                                 withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)sourceChannel
                                      withAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)sipDialog {
  AndroidGovNistJavaxSipStackSIPClientTransactionImpl_nonInviteClientTransactionWithAndroidGovNistJavaxSipMessageSIPResponse_withAndroidGovNistJavaxSipStackMessageChannel_withAndroidGovNistJavaxSipStackSIPDialog_(self, transactionResponse, sourceChannel, sipDialog);
}

- (void)scheduleTimerKWithLong:(jlong)time {
  AndroidGovNistJavaxSipStackSIPClientTransactionImpl_scheduleTimerKWithLong_(self, time);
}

- (void)inviteClientTransactionWithAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)transactionResponse
                              withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)sourceChannel
                                   withAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)dialog {
  AndroidGovNistJavaxSipStackSIPClientTransactionImpl_inviteClientTransactionWithAndroidGovNistJavaxSipMessageSIPResponse_withAndroidGovNistJavaxSipStackMessageChannel_withAndroidGovNistJavaxSipStackSIPDialog_(self, transactionResponse, sourceChannel, dialog);
}

- (void)sendRequest {
  AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = [self getOriginalRequest];
  if ([self getInternalState] >= 0) @throw create_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_(@"Request already sent", JreLoadEnum(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, RequestAlreadySent));
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @"sendRequest() ", sipRequest)];
  @try {
    [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) checkHeaders];
  }
  @catch (JavaTextParseException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) errorWithNSString:@"missing required header"];
    @throw create_AndroidGovNistJavaxSipStackIllegalTransactionStateException_initWithNSString_withAndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason_([((JavaTextParseException *) nil_chk(ex)) getMessage], JreLoadEnum(AndroidGovNistJavaxSipStackIllegalTransactionStateException_Reason, MissingRequiredHeader));
  }
  if ([((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_SUBSCRIBE] && [sipRequest getHeaderWithNSString:AndroidJavaxSipHeaderExpiresHeader_NAME] == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) warnWithNSString:@"Expires header missing in outgoing subscribe -- Notifier will assume implied value on event package"];
  }
  @try {
    if ([((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_CANCEL] && [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) isCancelClientTransactionChecked]) {
      id<AndroidGovNistJavaxSipStackSIPClientTransaction> ct = (id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) findCancelTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:[self getOriginalRequest] withBoolean:false], AndroidGovNistJavaxSipStackSIPClientTransaction_class_());
      if (ct == nil) {
        @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Could not find original tx to cancel. RFC 3261 9.1");
      }
      else if ([ct getInternalState] < 0) {
        @throw create_AndroidJavaxSipSipException_initWithNSString_(@"State is null no provisional response yet -- cannot cancel RFC 3261 9.1");
      }
      else if (![ct isInviteTransaction]) {
        @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Cannot cancel non-invite requests RFC 3261 9.1");
      }
    }
    else if ([((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_BYE] || [((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_NOTIFY]) {
      AndroidGovNistJavaxSipStackSIPDialog *dialog = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getDialogWithNSString:[((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk([self getOriginalRequest])) getDialogIdWithBoolean:false]];
      if ([((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk([self getSipProvider])) isAutomaticDialogSupportEnabled] && dialog != nil) {
        @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Dialog is present and AutomaticDialogSupport is enabled for  the provider -- Send the Request using the Dialog.sendRequest(transaction)");
      }
    }
    if ([self isInviteTransaction]) {
      AndroidGovNistJavaxSipStackSIPDialog *dialog = [self getDefaultDialog];
      if (dialog != nil && [dialog isBackToBackUserAgent]) {
        if (![dialog takeAckSem]) {
          @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Failed to take ACK semaphore");
        }
      }
    }
    self->isMapped_ = true;
    jint expiresTime = -1;
    if ([sipRequest getHeaderWithNSString:AndroidJavaxSipHeaderExpiresHeader_NAME] != nil) {
      AndroidGovNistJavaxSipHeaderExpires *expires = (AndroidGovNistJavaxSipHeaderExpires *) cast_chk([sipRequest getHeaderWithNSString:AndroidJavaxSipHeaderExpiresHeader_NAME], [AndroidGovNistJavaxSipHeaderExpires class]);
      expiresTime = [((AndroidGovNistJavaxSipHeaderExpires *) nil_chk(expires)) getExpires];
    }
    if ([self getDefaultDialog] != nil && [self isInviteTransaction] && expiresTime != -1 && expiresTimerTask_ == nil) {
      JreStrongAssignAndConsume(&self->expiresTimerTask_, new_AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(self));
      [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:expiresTimerTask_ withLong:[JavaLangLong_valueOfWithLong_(expiresTime) longLongValue] * 1000LL];
    }
    [self sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:sipRequest];
  }
  @catch (JavaIoIOException *ex) {
    [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
    if (self->expiresTimerTask_ != nil) {
      [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:self->expiresTimerTask_];
    }
    @throw create_AndroidJavaxSipSipException_initWithNSString_withNSException_([((JavaIoIOException *) nil_chk(ex)) getMessage] == nil ? @"IO Error sending request" : [ex getMessage], ex);
  }
}

- (void)fireRetransmissionTimer {
  @try {
    if ([self getInternalState] < 0 || !self->isMapped_) return;
    jboolean inv = [self isInviteTransaction];
    jint s = [self getInternalState];
    if ((inv && AndroidJavaxSipTransactionState__CALLING == s) || (!inv && (AndroidJavaxSipTransactionState__TRYING == s || AndroidJavaxSipTransactionState__PROCEEDING == s))) {
      if (lastRequest_ != nil) {
        if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->generateTimeStampHeader_ && [lastRequest_ getHeaderWithNSString:AndroidJavaxSipHeaderTimeStampHeader_NAME] != nil) {
          jlong milisec = JavaLangSystem_currentTimeMillis();
          AndroidGovNistJavaxSipHeaderTimeStamp *timeStamp = create_AndroidGovNistJavaxSipHeaderTimeStamp_init();
          @try {
            [timeStamp setTimeStampWithFloat:milisec];
          }
          @catch (AndroidJavaxSipInvalidArgumentException *ex) {
            AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
          }
          [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(lastRequest_)) setHeaderWithAndroidJavaxSipHeaderHeader:timeStamp];
        }
        [super sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:lastRequest_];
        if (self->notifyOnRetransmit_) {
          AndroidJavaxSipTimeoutEvent *txTimeout = create_AndroidJavaxSipTimeoutEvent_initWithId_withAndroidJavaxSipClientTransaction_withAndroidJavaxSipTimeout_([self getSipProvider], self, JreLoadStatic(AndroidJavaxSipTimeout, RETRANSMIT));
          [((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk([self getSipProvider])) handleEventWithJavaUtilEventObject:txTimeout withAndroidGovNistJavaxSipStackSIPTransaction:self];
        }
        if (self->timeoutIfStillInCallingState_ && [self getInternalState] == AndroidJavaxSipTransactionState__CALLING) {
          self->callingStateTimeoutCount_--;
          if (callingStateTimeoutCount_ == 0) {
            AndroidJavaxSipTimeoutEvent *timeoutEvent = create_AndroidJavaxSipTimeoutEvent_initWithId_withAndroidJavaxSipClientTransaction_withAndroidJavaxSipTimeout_([self getSipProvider], self, JreLoadStatic(AndroidJavaxSipTimeout, RETRANSMIT));
            [((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk([self getSipProvider])) handleEventWithJavaUtilEventObject:timeoutEvent withAndroidGovNistJavaxSipStackSIPTransaction:self];
            self->timeoutIfStillInCallingState_ = false;
          }
        }
      }
    }
  }
  @catch (JavaIoIOException *e) {
    [self raiseIOExceptionEvent];
    [self raiseErrorEventWithInt:AndroidGovNistJavaxSipStackSIPTransactionErrorEvent_TRANSPORT_ERROR];
  }
}

- (void)fireTimeoutTimer {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @"fireTimeoutTimer ", self)];
  AndroidGovNistJavaxSipStackSIPDialog *dialog = (AndroidGovNistJavaxSipStackSIPDialog *) cast_chk([self getDialog], [AndroidGovNistJavaxSipStackSIPDialog class]);
  if (AndroidJavaxSipTransactionState__CALLING == [self getInternalState] || AndroidJavaxSipTransactionState__TRYING == [self getInternalState] || AndroidJavaxSipTransactionState__PROCEEDING == [self getInternalState]) {
    if (dialog != nil && ([dialog getState] == nil || [dialog getState] == JreLoadStatic(AndroidJavaxSipDialogState, EARLY))) {
      if (AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_([self getMethod])) {
        [dialog delete__];
      }
    }
    else if (dialog != nil) {
      if ([((NSString *) nil_chk([self getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_BYE] && [dialog isTerminatedOnBye]) {
        [dialog delete__];
      }
    }
  }
  if (AndroidJavaxSipTransactionState__COMPLETED != [self getInternalState] && AndroidJavaxSipTransactionState__TERMINATED != [self getInternalState]) {
    [self raiseErrorEventWithInt:AndroidGovNistJavaxSipStackSIPTransactionErrorEvent_TIMEOUT_ERROR];
    if ([((NSString *) nil_chk([self getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_CANCEL]) {
      id<AndroidGovNistJavaxSipStackSIPClientTransaction> inviteTx = (id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk([self getOriginalRequest])) getInviteTransaction], AndroidGovNistJavaxSipStackSIPClientTransaction_class_());
      if (inviteTx != nil && (([inviteTx getInternalState] == AndroidJavaxSipTransactionState__CALLING || [inviteTx getInternalState] == AndroidJavaxSipTransactionState__PROCEEDING)) && [inviteTx getDialog] != nil) {
        [inviteTx setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
      }
    }
  }
  else {
    [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
  }
}

- (id<AndroidJavaxSipMessageRequest>)createCancel {
  AndroidGovNistJavaxSipMessageSIPRequest *originalRequest = [self getOriginalRequest];
  if (originalRequest == nil) @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$@", @"Bad state ", [self getState]));
  if (![((NSString *) nil_chk([originalRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_INVITE]) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Only INIVTE may be cancelled");
  if ([((NSString *) nil_chk([originalRequest getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_ACK]) @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Cannot Cancel ACK!");
  else {
    AndroidGovNistJavaxSipMessageSIPRequest *cancelRequest = [originalRequest createCancelRequest];
    [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(cancelRequest)) setInviteTransactionWithId:self];
    return cancelRequest;
  }
}

- (id<AndroidJavaxSipMessageRequest>)createAck {
  AndroidGovNistJavaxSipMessageSIPRequest *originalRequest = [self getOriginalRequest];
  if (originalRequest == nil) @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$@", @"bad state ", [self getState]));
  if ([((NSString *) nil_chk([self getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_ACK]) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Cannot ACK an ACK!");
  }
  else if (lastResponse_ == nil) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"bad Transaction state");
  }
  else if ([lastResponse_ getStatusCode] < 200) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @"lastResponse = ", lastResponse_)];
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Cannot ACK a provisional response!");
  }
  AndroidGovNistJavaxSipMessageSIPRequest *ackRequest = [originalRequest createAckRequestWithAndroidGovNistJavaxSipHeaderTo:(AndroidGovNistJavaxSipHeaderTo *) cast_chk([((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(lastResponse_)) getTo], [AndroidGovNistJavaxSipHeaderTo class])];
  AndroidGovNistJavaxSipHeaderRecordRouteList *recordRouteList = [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(lastResponse_)) getRecordRouteHeaders];
  if (recordRouteList == nil) {
    if ([((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(lastResponse_)) getContactHeaders] != nil && [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(lastResponse_)) getStatusCode] / 100 != 3) {
      AndroidGovNistJavaxSipHeaderContact *contact = (AndroidGovNistJavaxSipHeaderContact *) cast_chk([((AndroidGovNistJavaxSipHeaderContactList *) nil_chk([((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(lastResponse_)) getContactHeaders])) getFirst], [AndroidGovNistJavaxSipHeaderContact class]);
      id<AndroidJavaxSipAddressURI> uri = (id<AndroidJavaxSipAddressURI>) cast_check([((id<AndroidJavaxSipAddressURI>) nil_chk([((id<AndroidJavaxSipAddressAddress>) nil_chk([((AndroidGovNistJavaxSipHeaderContact *) nil_chk(contact)) getAddress])) getURI])) java_clone], AndroidJavaxSipAddressURI_class_());
      [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(ackRequest)) setRequestURIWithAndroidJavaxSipAddressURI:uri];
    }
    return ackRequest;
  }
  [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(ackRequest)) removeHeaderWithNSString:AndroidJavaxSipHeaderRouteHeader_NAME];
  AndroidGovNistJavaxSipHeaderRouteList *routeList = create_AndroidGovNistJavaxSipHeaderRouteList_init();
  id<JavaUtilListIterator> li = [recordRouteList listIteratorWithInt:[recordRouteList size]];
  while ([((id<JavaUtilListIterator>) nil_chk(li)) hasPrevious]) {
    AndroidGovNistJavaxSipHeaderRecordRoute *rr = [li previous];
    AndroidGovNistJavaxSipHeaderRoute *route = create_AndroidGovNistJavaxSipHeaderRoute_init();
    [route setAddressWithAndroidJavaxSipAddressAddress:(AndroidGovNistJavaxSipAddressAddressImpl *) cast_chk([((AndroidGovNistJavaxSipAddressAddressImpl *) nil_chk(((AndroidGovNistJavaxSipAddressAddressImpl *) cast_chk([((AndroidGovNistJavaxSipHeaderRecordRoute *) nil_chk(rr)) getAddress], [AndroidGovNistJavaxSipAddressAddressImpl class])))) java_clone], [AndroidGovNistJavaxSipAddressAddressImpl class])];
    [route setParametersWithAndroidGovNistCoreNameValueList:(AndroidGovNistCoreNameValueList *) cast_chk([((AndroidGovNistCoreNameValueList *) nil_chk([rr getParameters])) java_clone], [AndroidGovNistCoreNameValueList class])];
    [routeList addWithId:route];
  }
  AndroidGovNistJavaxSipHeaderContact *contact = nil;
  if ([((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(lastResponse_)) getContactHeaders] != nil) {
    contact = (AndroidGovNistJavaxSipHeaderContact *) cast_chk([((AndroidGovNistJavaxSipHeaderContactList *) nil_chk([((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(lastResponse_)) getContactHeaders])) getFirst], [AndroidGovNistJavaxSipHeaderContact class]);
  }
  if (![((id<AndroidJavaxSipAddressSipURI>) nil_chk(((id<AndroidJavaxSipAddressSipURI>) cast_check([((id<AndroidJavaxSipAddressAddress>) nil_chk([((AndroidGovNistJavaxSipHeaderRoute *) nil_chk(((AndroidGovNistJavaxSipHeaderRoute *) cast_chk([routeList getFirst], [AndroidGovNistJavaxSipHeaderRoute class])))) getAddress])) getURI], AndroidJavaxSipAddressSipURI_class_())))) hasLrParam]) {
    AndroidGovNistJavaxSipHeaderRoute *route = nil;
    if (contact != nil) {
      route = create_AndroidGovNistJavaxSipHeaderRoute_init();
      [route setAddressWithAndroidJavaxSipAddressAddress:(AndroidGovNistJavaxSipAddressAddressImpl *) cast_chk([((AndroidGovNistJavaxSipAddressAddressImpl *) nil_chk(((AndroidGovNistJavaxSipAddressAddressImpl *) cast_chk(([contact getAddress]), [AndroidGovNistJavaxSipAddressAddressImpl class])))) java_clone], [AndroidGovNistJavaxSipAddressAddressImpl class])];
    }
    AndroidGovNistJavaxSipHeaderRoute *firstRoute = (AndroidGovNistJavaxSipHeaderRoute *) cast_chk([routeList getFirst], [AndroidGovNistJavaxSipHeaderRoute class]);
    [routeList removeFirst];
    id<AndroidJavaxSipAddressURI> uri = [((id<AndroidJavaxSipAddressAddress>) nil_chk([((AndroidGovNistJavaxSipHeaderRoute *) nil_chk(firstRoute)) getAddress])) getURI];
    [ackRequest setRequestURIWithAndroidJavaxSipAddressURI:uri];
    if (route != nil) [routeList addWithId:route];
    [ackRequest addHeaderWithAndroidJavaxSipHeaderHeader:routeList];
  }
  else {
    if (contact != nil) {
      id<AndroidJavaxSipAddressURI> uri = (id<AndroidJavaxSipAddressURI>) cast_check([((id<AndroidJavaxSipAddressURI>) nil_chk([((id<AndroidJavaxSipAddressAddress>) nil_chk([contact getAddress])) getURI])) java_clone], AndroidJavaxSipAddressURI_class_());
      [ackRequest setRequestURIWithAndroidJavaxSipAddressURI:uri];
      [ackRequest addHeaderWithAndroidJavaxSipHeaderHeader:routeList];
    }
  }
  return ackRequest;
}

- (id<AndroidJavaxSipMessageRequest>)createErrorAck {
  return AndroidGovNistJavaxSipStackSIPClientTransactionImpl_createErrorAck(self);
}

- (void)setViaPortWithInt:(jint)port {
  self->viaPort_ = port;
}

- (void)setViaHostWithNSString:(NSString *)host {
  JreStrongAssign(&self->viaHost_, host);
}

- (jint)getViaPort {
  return self->viaPort_;
}

- (NSString *)getViaHost {
  return self->viaHost_;
}

- (AndroidGovNistJavaxSipHeaderVia *)getOutgoingViaHeader {
  return [((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk([self getMessageProcessor])) getViaHeader];
}

- (void)clearState {
}

- (void)setStateWithInt:(jint)newState {
  if (newState == AndroidJavaxSipTransactionState__TERMINATED && [self isReliable] && (!((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([self getSIPStack]))->cacheClientConnections_)) {
    self->collectionTime_ = AndroidGovNistJavaxSipStackSIPTransaction_TIMER_J;
  }
  if ([super getInternalState] != AndroidJavaxSipTransactionState__COMPLETED && (newState == AndroidJavaxSipTransactionState__COMPLETED || newState == AndroidJavaxSipTransactionState__TERMINATED)) {
    [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) decrementActiveClientTransactionCount];
  }
  [super setStateWithInt:newState];
}

- (void)startTransactionTimer {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(self->transactionTimerStarted_)) compareAndSetWithBoolean:false withBoolean:true]) {
    if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer] != nil && transactionTimerLock_ != nil) {
      @synchronized(transactionTimerLock_) {
        if (!transactionTimerCancelled_) {
          JreStrongAssignAndConsume(&transactionTimer_, new_AndroidGovNistJavaxSipStackSIPClientTransactionImpl_TransactionTimer_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(self));
          [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) scheduleWithFixedDelayWithAndroidGovNistJavaxSipStackSIPStackTimerTask:transactionTimer_ withLong:baseTimerInterval_ withLong:baseTimerInterval_];
        }
      }
    }
  }
}

- (void)terminate {
  [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
  if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(transactionTimerStarted_)) get]) {
    [self testAndSetTransactionTerminatedEvent];
    [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:self];
  }
  AndroidGovNistJavaxSipStackSIPDialog *dialog = (AndroidGovNistJavaxSipStackSIPDialog *) cast_chk([self getDialog], [AndroidGovNistJavaxSipStackSIPDialog class]);
  if (dialog != nil) {
    [dialog releaseAckSem];
  }
}

- (void)stopExpiresTimer {
  if (self->expiresTimerTask_ != nil) {
    [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:self->expiresTimerTask_];
    JreStrongAssign(&self->expiresTimerTask_, nil);
  }
}

- (jboolean)checkFromTagWithAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)sipResponse {
  NSString *originalFromTag = [self getOriginalRequestFromTag];
  if (self->defaultDialog_ != nil) {
    if (originalFromTag == nil ^ [((id<AndroidJavaxSipHeaderFromHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) getFrom])) getTag] == nil) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:@"From tag mismatch -- dropping response"];
      return false;
    }
    if (originalFromTag != nil && ![originalFromTag java_equalsIgnoreCase:[((id<AndroidJavaxSipHeaderFromHeader>) nil_chk([sipResponse getFrom])) getTag]]) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:@"From tag mismatch -- dropping response"];
      return false;
    }
  }
  return true;
}

- (void)processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)sipResponse
                      withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)incomingChannel {
  jint code = [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) getStatusCode];
  jboolean isRetransmission = ![((id<JavaUtilSet>) nil_chk(responsesReceived_)) addWithId:JavaLangInteger_valueOfWithInt_(code)];
  if (code > 100 && code < 200 && isRetransmission) {
    if (lastResponse_ != nil && ![((NSString *) nil_chk([sipResponse description])) isEqual:[((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(lastResponse_)) description]]) {
      isRetransmission = false;
    }
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$Z$@", @"marking response as retransmission ", isRetransmission, @" for ctx ", self)];
  [sipResponse setRetransmissionWithBoolean:isRetransmission];
  AndroidGovNistJavaxSipStackSIPDialog *dialog = nil;
  NSString *method = [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipResponse getCSeq])) getMethod];
  NSString *dialogId = [sipResponse getDialogIdWithBoolean:false];
  if ([((NSString *) nil_chk(method)) isEqual:AndroidJavaxSipMessageRequest_CANCEL] && lastRequest_ != nil) {
    id<AndroidGovNistJavaxSipStackSIPClientTransaction> ict = (id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check([lastRequest_ getInviteTransaction], AndroidGovNistJavaxSipStackSIPClientTransaction_class_());
    if (ict != nil) {
      dialog = [ict getDefaultDialog];
    }
  }
  else {
    dialog = [self getDialogWithNSString:dialogId];
  }
  if (dialog == nil) {
    if ((code > 100 && code < 300) && ([sipResponse getToTag] != nil || [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) isRfc2543Supported]) && AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_(method)) {
      @synchronized(self) {
        if (defaultDialog_ != nil) {
          if ([sipResponse getFromTag] != nil) {
            NSString *defaultDialogId = [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(defaultDialog_)) getDialogId];
            if ([((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(defaultDialog_)) getLastResponseMethod] == nil || ([method isEqual:AndroidJavaxSipMessageRequest_SUBSCRIBE] && [((NSString *) nil_chk([((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(defaultDialog_)) getLastResponseMethod])) isEqual:AndroidJavaxSipMessageRequest_NOTIFY] && [((NSString *) nil_chk(defaultDialogId)) isEqual:dialogId])) {
              [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(defaultDialog_)) setLastResponseWithAndroidGovNistJavaxSipStackSIPTransaction:self withAndroidGovNistJavaxSipMessageSIPResponse:sipResponse];
              dialog = defaultDialog_;
            }
            else {
              dialog = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getDialogWithNSString:dialogId];
              if (dialog == nil) {
                if ([((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(defaultDialog_)) isAssigned]) {
                  dialog = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) createDialogWithAndroidGovNistJavaxSipStackSIPClientTransaction:self withAndroidGovNistJavaxSipMessageSIPResponse:sipResponse];
                  [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(dialog)) setOriginalDialogWithAndroidGovNistJavaxSipStackSIPDialog:defaultDialog_];
                }
              }
            }
            if (dialog != nil) {
              [self setDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog withNSString:[dialog getDialogId]];
            }
            else {
              [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) errorWithNSString:@"dialog is unexpectedly null" withNSException:create_JavaLangNullPointerException_init()];
            }
          }
          else {
            @throw create_JavaLangRuntimeException_initWithNSString_(@"Response without from-tag");
          }
        }
        else {
          if (((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->isAutomaticDialogSupportEnabled_) {
            dialog = [sipStack_ createDialogWithAndroidGovNistJavaxSipStackSIPClientTransaction:self withAndroidGovNistJavaxSipMessageSIPResponse:sipResponse];
            [self setDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog withNSString:[((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(dialog)) getDialogId]];
          }
        }
      }
    }
    else {
      dialog = defaultDialog_;
    }
  }
  else {
    if (AndroidJavaxSipTransactionState__TERMINATED != [self getInternalState]) {
      [dialog setLastResponseWithAndroidGovNistJavaxSipStackSIPTransaction:self withAndroidGovNistJavaxSipMessageSIPResponse:sipResponse];
    }
  }
  [self processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:sipResponse withAndroidGovNistJavaxSipStackMessageChannel:incomingChannel withAndroidGovNistJavaxSipStackSIPDialog:dialog];
}

- (id<AndroidJavaxSipDialog>)getDialog {
  id<AndroidJavaxSipDialog> retval = nil;
  AndroidGovNistJavaxSipMessageSIPResponse *localLastResponse = self->lastResponse_;
  if (localLastResponse != nil && [localLastResponse getFromTag] != nil && [localLastResponse getToTag] != nil && [localLastResponse getStatusCode] != 100) {
    NSString *dialogId = [localLastResponse getDialogIdWithBoolean:false];
    retval = [self getDialogWithNSString:dialogId];
  }
  if (retval == nil) {
    retval = [self getDefaultDialog];
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$@$@$@", @" sipDialogs =  ", sipDialogs_, @" default dialog ", [self getDefaultDialog], @" retval ", retval)];
  return retval;
}

- (AndroidGovNistJavaxSipStackSIPDialog *)getDialogWithNSString:(NSString *)dialogId {
  AndroidGovNistJavaxSipStackSIPDialog *retval = nil;
  if (sipDialogs_ != nil && [sipDialogs_ containsWithId:dialogId]) {
    retval = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getDialogWithNSString:dialogId];
    if (retval == nil) {
      retval = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getEarlyDialogWithNSString:dialogId];
    }
  }
  return retval;
}

- (void)setDialogWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)sipDialog
                                             withNSString:(NSString *)dialogId {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$$$@", @"setDialog: ", dialogId, @" sipDialog = ", sipDialog)];
  if (sipDialog == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) errorWithNSString:@"NULL DIALOG!!"];
    @throw create_JavaLangNullPointerException_initWithNSString_(@"bad dialog null");
  }
  if (self->defaultDialog_ == nil && defaultDialogId_ == nil) {
    JreStrongAssign(&self->defaultDialog_, sipDialog);
    if ([self isInviteTransaction] && [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([self getSIPStack])) getMaxForkTime] != 0) {
      [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk([self getSIPStack])) addForkedClientTransactionWithAndroidGovNistJavaxSipStackSIPClientTransaction:self];
    }
  }
  if (dialogId != nil && [sipDialog getDialogId] != nil && sipDialogs_ != nil) {
    [self->sipDialogs_ addWithId:dialogId];
  }
}

- (AndroidGovNistJavaxSipStackSIPDialog *)getDefaultDialog {
  AndroidGovNistJavaxSipStackSIPDialog *dialog = defaultDialog_;
  if (dialog == nil && defaultDialogId_ != nil) {
    dialog = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getDialogWithNSString:defaultDialogId_];
  }
  return dialog;
}

- (void)setNextHopWithAndroidJavaxSipAddressHop:(id<AndroidJavaxSipAddressHop>)hop {
  JreStrongAssign(&self->nextHop_, hop);
}

- (id<AndroidJavaxSipAddressHop>)getNextHop {
  return nextHop_;
}

- (void)setNotifyOnRetransmitWithBoolean:(jboolean)notifyOnRetransmit {
  self->notifyOnRetransmit_ = notifyOnRetransmit;
}

- (jboolean)isNotifyOnRetransmit {
  return notifyOnRetransmit_;
}

- (void)alertIfStillInCallingStateByWithInt:(jint)count {
  self->timeoutIfStillInCallingState_ = true;
  self->callingStateTimeoutCount_ = count;
}

- (void)cleanUpOnTimer {
  if ([self getReleaseReferencesStrategy] != JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, None)) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$$", @"cleanupOnTimer: ", [self getTransactionId])];
    if (defaultDialog_ != nil) {
      NSString *dialogId = [defaultDialog_ getDialogId];
      if (dialogId != nil && [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getDialogWithNSString:dialogId] != nil) {
        JreStrongAssign(&defaultDialogId_, dialogId);
        JreStrongAssign(&defaultDialog_, nil);
      }
    }
    if (originalRequest_ != nil) {
      JreStrongAssign(&mergeId_, [(originalRequest_) getMergeId]);
      [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(originalRequest_)) setTransactionWithId:nil];
      [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(originalRequest_)) setInviteTransactionWithId:nil];
      [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(originalRequest_)) cleanUp];
      if (originalRequestBytes_ == nil && [self getReleaseReferencesStrategy] == JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, Normal)) {
        JreStrongAssign(&originalRequestBytes_, [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(originalRequest_)) encodeAsBytesWithNSString:[self getTransport]]);
      }
      if (![((NSString *) nil_chk([self getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_INVITE] && ![((NSString *) nil_chk([self getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_CANCEL]) {
        JreStrongAssign(&originalRequestFromTag_, [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(originalRequest_)) getFromTag]);
        JreStrongAssign(&originalRequestCallId_, [((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(originalRequest_)) getCallId])) getCallId]);
        JreStrongAssign(&originalRequestEventHeader_, (AndroidGovNistJavaxSipHeaderEvent *) cast_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(originalRequest_)) getHeaderWithNSString:@"Event"], [AndroidGovNistJavaxSipHeaderEvent class]));
        JreStrongAssign(&originalRequestContact_, [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(originalRequest_)) getContactHeader]);
        JreStrongAssign(&originalRequestScheme_, [((id<AndroidJavaxSipAddressURI>) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(originalRequest_)) getRequestURI])) getScheme]);
        JreStrongAssign(&originalRequest_, nil);
      }
    }
    if (![((NSString *) nil_chk([self getMethod])) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_SUBSCRIBE]) {
      JreStrongAssign(&lastResponse_, nil);
    }
    JreStrongAssign(&lastRequest_, nil);
  }
}

- (void)cleanUp {
  if ([self getReleaseReferencesStrategy] != JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, None)) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$$", @"cleanup : ", [self getTransactionId])];
    if (defaultDialog_ != nil) {
      JreStrongAssign(&defaultDialogId_, [defaultDialog_ getDialogId]);
      JreStrongAssign(&defaultDialog_, nil);
    }
    if (originalRequest_ != nil && originalRequestBytes_ == nil) {
      if ([self getReleaseReferencesStrategy] == JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, Normal)) {
        JreStrongAssign(&originalRequestBytes_, [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(originalRequest_)) encodeAsBytesWithNSString:[self getTransport]]);
      }
      JreStrongAssign(&mergeId_, [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk((originalRequest_))) getMergeId]);
    }
    JreStrongAssign(&originalRequest_, nil);
    [self cleanUpOnTimer];
    JreStrongAssign(&originalRequestCallId_, nil);
    JreStrongAssign(&originalRequestEventHeader_, nil);
    JreStrongAssign(&originalRequestFromTag_, nil);
    JreStrongAssign(&originalRequestContact_, nil);
    JreStrongAssign(&originalRequestScheme_, nil);
    if (sipDialogs_ != nil) {
      [sipDialogs_ clear];
    }
    [((id<JavaUtilSet>) nil_chk(responsesReceived_)) clear];
    JreStrongAssign(&respondTo_, nil);
    JreStrongAssign(&transactionTimer_, nil);
    JreStrongAssign(&lastResponse_, nil);
    JreStrongAssign(&transactionTimerLock_, nil);
    JreStrongAssign(&timerKStarted_, nil);
  }
}

- (void)cleanUpOnTerminated {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$@$Z", @"removing  = ", self, @" isReliable ", [self isReliable])];
  if ([self getReleaseReferencesStrategy] == JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, Normal)) {
    if (originalRequest_ == nil && originalRequestBytes_ != nil) {
      @try {
        JreStrongAssign(&originalRequest_, (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([((id<AndroidGovNistJavaxSipParserMessageParser>) nil_chk([((id<AndroidGovNistJavaxSipParserMessageParserFactory>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMessageParserFactory])) createMessageParserWithAndroidGovNistJavaxSipStackSIPTransactionStack:sipStack_])) parseSIPMessageWithByteArray:originalRequestBytes_ withBoolean:true withBoolean:false withAndroidGovNistJavaxSipParserParseExceptionListener:nil], [AndroidGovNistJavaxSipMessageSIPRequest class]));
      }
      @catch (JavaTextParseException *e) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) errorWithNSString:JreStrcat("$@$", @"message ", originalRequestBytes_, @" could not be reparsed !")];
      }
    }
  }
  [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:self];
  if ((!((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_))->cacheClientConnections_) && [self isReliable]) {
    jint newUseCount = --((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk([self getMessageChannel]))->useCount_;
    if (newUseCount <= 0) {
      AndroidGovNistJavaxSipStackSIPStackTimerTask *myTimer = create_AndroidGovNistJavaxSipStackSIPTransactionImpl_LingerTimer_initWithAndroidGovNistJavaxSipStackSIPTransactionImpl_(self);
      if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getConnectionLingerTimer] != 0) {
        [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:myTimer withLong:[((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getConnectionLingerTimer] * 1000];
      }
      else {
        [myTimer runTask];
      }
    }
  }
  else {
    if ([self isReliable]) {
      jint useCount = ((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk([self getMessageChannel]))->useCount_;
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$I", @"Client Use Count = ", useCount)];
    }
    if ([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(((AndroidGovNistJavaxSipSipStackImpl *) cast_chk([self getSIPStack], [AndroidGovNistJavaxSipSipStackImpl class])))) isReEntrantListener] && [self getReleaseReferencesStrategy] != JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, None)) {
      [self cleanUp];
    }
  }
}

- (NSString *)getOriginalRequestFromTag {
  if (originalRequest_ == nil) {
    return originalRequestFromTag_;
  }
  return [originalRequest_ getFromTag];
}

- (NSString *)getOriginalRequestCallId {
  if (originalRequest_ == nil) {
    return originalRequestCallId_;
  }
  return [((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([originalRequest_ getCallId])) getCallId];
}

- (AndroidGovNistJavaxSipHeaderEvent *)getOriginalRequestEvent {
  if (originalRequest_ == nil) {
    return originalRequestEventHeader_;
  }
  return (AndroidGovNistJavaxSipHeaderEvent *) cast_chk([originalRequest_ getHeaderWithNSString:AndroidJavaxSipHeaderEventHeader_NAME], [AndroidGovNistJavaxSipHeaderEvent class]);
}

- (AndroidGovNistJavaxSipHeaderContact *)getOriginalRequestContact {
  if (originalRequest_ == nil) {
    return originalRequestContact_;
  }
  return [originalRequest_ getContactHeader];
}

- (NSString *)getOriginalRequestScheme {
  if (originalRequest_ == nil) {
    return originalRequestScheme_;
  }
  return [((id<AndroidJavaxSipAddressURI>) nil_chk([originalRequest_ getRequestURI])) getScheme];
}

- (void)dealloc {
  RELEASE_(sipDialogs_);
  RELEASE_(lastRequest_);
  RELEASE_(viaHost_);
  RELEASE_(respondTo_);
  RELEASE_(defaultDialogId_);
  RELEASE_(defaultDialog_);
  RELEASE_(nextHop_);
  RELEASE_(transactionTimer_);
  RELEASE_(originalRequestFromTag_);
  RELEASE_(originalRequestCallId_);
  RELEASE_(originalRequestEventHeader_);
  RELEASE_(originalRequestContact_);
  RELEASE_(originalRequestScheme_);
  RELEASE_(transactionTimerLock_);
  RELEASE_(timerKStarted_);
  RELEASE_(responsesReceived_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageChannel;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, 6, -1, -1, -1 },
    { NULL, "V", 0x21, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 8, 6, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 8, 6, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageRequest;", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageRequest;", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageRequest;", 0x12, -1, -1, 14, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderVia;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipDialog;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPDialog;", 0x1, 23, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackSIPDialog;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipAddressHop;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderEvent;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderContact;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionStack:withAndroidGovNistJavaxSipStackMessageChannel:);
  methods[1].selector = @selector(setResponseInterfaceWithAndroidGovNistJavaxSipStackServerResponseInterface:);
  methods[2].selector = @selector(getRequestChannel);
  methods[3].selector = @selector(isMessagePartOfTransactionWithAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[4].selector = @selector(sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:);
  methods[5].selector = @selector(processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:withAndroidGovNistJavaxSipStackMessageChannel:withAndroidGovNistJavaxSipStackSIPDialog:);
  methods[6].selector = @selector(nonInviteClientTransactionWithAndroidGovNistJavaxSipMessageSIPResponse:withAndroidGovNistJavaxSipStackMessageChannel:withAndroidGovNistJavaxSipStackSIPDialog:);
  methods[7].selector = @selector(scheduleTimerKWithLong:);
  methods[8].selector = @selector(inviteClientTransactionWithAndroidGovNistJavaxSipMessageSIPResponse:withAndroidGovNistJavaxSipStackMessageChannel:withAndroidGovNistJavaxSipStackSIPDialog:);
  methods[9].selector = @selector(sendRequest);
  methods[10].selector = @selector(fireRetransmissionTimer);
  methods[11].selector = @selector(fireTimeoutTimer);
  methods[12].selector = @selector(createCancel);
  methods[13].selector = @selector(createAck);
  methods[14].selector = @selector(createErrorAck);
  methods[15].selector = @selector(setViaPortWithInt:);
  methods[16].selector = @selector(setViaHostWithNSString:);
  methods[17].selector = @selector(getViaPort);
  methods[18].selector = @selector(getViaHost);
  methods[19].selector = @selector(getOutgoingViaHeader);
  methods[20].selector = @selector(clearState);
  methods[21].selector = @selector(setStateWithInt:);
  methods[22].selector = @selector(startTransactionTimer);
  methods[23].selector = @selector(terminate);
  methods[24].selector = @selector(stopExpiresTimer);
  methods[25].selector = @selector(checkFromTagWithAndroidGovNistJavaxSipMessageSIPResponse:);
  methods[26].selector = @selector(processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:withAndroidGovNistJavaxSipStackMessageChannel:);
  methods[27].selector = @selector(getDialog);
  methods[28].selector = @selector(getDialogWithNSString:);
  methods[29].selector = @selector(setDialogWithAndroidGovNistJavaxSipStackSIPDialog:withNSString:);
  methods[30].selector = @selector(getDefaultDialog);
  methods[31].selector = @selector(setNextHopWithAndroidJavaxSipAddressHop:);
  methods[32].selector = @selector(getNextHop);
  methods[33].selector = @selector(setNotifyOnRetransmitWithBoolean:);
  methods[34].selector = @selector(isNotifyOnRetransmit);
  methods[35].selector = @selector(alertIfStillInCallingStateByWithInt:);
  methods[36].selector = @selector(cleanUpOnTimer);
  methods[37].selector = @selector(cleanUp);
  methods[38].selector = @selector(cleanUpOnTerminated);
  methods[39].selector = @selector(getOriginalRequestFromTag);
  methods[40].selector = @selector(getOriginalRequestCallId);
  methods[41].selector = @selector(getOriginalRequestEvent);
  methods[42].selector = @selector(getOriginalRequestContact);
  methods[43].selector = @selector(getOriginalRequestScheme);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 31, -1, -1 },
    { "sipDialogs_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 32, -1 },
    { "lastRequest_", "LAndroidGovNistJavaxSipMessageSIPRequest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "viaPort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "viaHost_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "respondTo_", "LAndroidGovNistJavaxSipStackServerResponseInterface;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "defaultDialogId_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultDialog_", "LAndroidGovNistJavaxSipStackSIPDialog;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextHop_", "LAndroidJavaxSipAddressHop;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "notifyOnRetransmit_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timeoutIfStillInCallingState_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "callingStateTimeoutCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "transactionTimer_", "LAndroidGovNistJavaxSipStackSIPStackTimerTask;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "originalRequestFromTag_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "originalRequestCallId_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "originalRequestEventHeader_", "LAndroidGovNistJavaxSipHeaderEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "originalRequestContact_", "LAndroidGovNistJavaxSipHeaderContact;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "originalRequestScheme_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "transactionTimerLock_", "LNSObject;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "timerKStarted_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "transactionTimerCancelled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "responsesReceived_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 33, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPTransactionStack;LAndroidGovNistJavaxSipStackMessageChannel;", "setResponseInterface", "LAndroidGovNistJavaxSipStackServerResponseInterface;", "isMessagePartOfTransaction", "LAndroidGovNistJavaxSipMessageSIPMessage;", "sendMessage", "LJavaIoIOException;", "processResponse", "LAndroidGovNistJavaxSipMessageSIPResponse;LAndroidGovNistJavaxSipStackMessageChannel;LAndroidGovNistJavaxSipStackSIPDialog;", "nonInviteClientTransaction", "scheduleTimerK", "J", "inviteClientTransaction", "LAndroidJavaxSipSipException;", "LAndroidJavaxSipSipException;LJavaTextParseException;", "setViaPort", "I", "setViaHost", "LNSString;", "setState", "checkFromTag", "LAndroidGovNistJavaxSipMessageSIPResponse;", "LAndroidGovNistJavaxSipMessageSIPResponse;LAndroidGovNistJavaxSipStackMessageChannel;", "getDialog", "setDialog", "LAndroidGovNistJavaxSipStackSIPDialog;LNSString;", "setNextHop", "LAndroidJavaxSipAddressHop;", "setNotifyOnRetransmit", "Z", "alertIfStillInCallingStateBy", &AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger, "Ljava/util/Set<Ljava/lang/String;>;", "Ljava/util/Set<Ljava/lang/Integer;>;", "LAndroidGovNistJavaxSipStackSIPClientTransactionImpl_TransactionTimer;LAndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPClientTransactionImpl = { "SIPClientTransactionImpl", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 44, 22, -1, 34, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPClientTransactionImpl;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipStackSIPClientTransactionImpl class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipStackSIPClientTransaction_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipStackSIPClientTransactionImpl)
  }
}

@end

void AndroidGovNistJavaxSipStackSIPClientTransactionImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *self, AndroidGovNistJavaxSipStackSIPTransactionStack *newSIPStack, AndroidGovNistJavaxSipStackMessageChannel *newChannelToUse) {
  AndroidGovNistJavaxSipStackSIPTransactionImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_(self, newSIPStack, newChannelToUse);
  JreStrongAssignAndConsume(&self->transactionTimerLock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->timerKStarted_, new_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false));
  self->transactionTimerCancelled_ = false;
  JreStrongAssignAndConsume(&self->responsesReceived_, new_JavaUtilConcurrentCopyOnWriteArraySet_init());
  [self setBranchWithNSString:[((AndroidGovNistJavaxSipUtils *) nil_chk(AndroidGovNistJavaxSipUtils_getInstance())) generateBranchId]];
  [self setEncapsulatedChannelWithAndroidGovNistJavaxSipStackMessageChannel:newChannelToUse];
  self->notifyOnRetransmit_ = false;
  self->timeoutIfStillInCallingState_ = false;
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @"Creating clientTransaction ", self)];
  JreStrongAssignAndConsume(&self->sipDialogs_, new_JavaUtilConcurrentCopyOnWriteArraySet_init());
}

AndroidGovNistJavaxSipStackSIPClientTransactionImpl *new_AndroidGovNistJavaxSipStackSIPClientTransactionImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_(AndroidGovNistJavaxSipStackSIPTransactionStack *newSIPStack, AndroidGovNistJavaxSipStackMessageChannel *newChannelToUse) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_, newSIPStack, newChannelToUse)
}

AndroidGovNistJavaxSipStackSIPClientTransactionImpl *create_AndroidGovNistJavaxSipStackSIPClientTransactionImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_(AndroidGovNistJavaxSipStackSIPTransactionStack *newSIPStack, AndroidGovNistJavaxSipStackMessageChannel *newChannelToUse) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackMessageChannel_, newSIPStack, newChannelToUse)
}

void AndroidGovNistJavaxSipStackSIPClientTransactionImpl_nonInviteClientTransactionWithAndroidGovNistJavaxSipMessageSIPResponse_withAndroidGovNistJavaxSipStackMessageChannel_withAndroidGovNistJavaxSipStackSIPDialog_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *self, AndroidGovNistJavaxSipMessageSIPResponse *transactionResponse, AndroidGovNistJavaxSipStackMessageChannel *sourceChannel, AndroidGovNistJavaxSipStackSIPDialog *sipDialog) {
  jint statusCode = [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(transactionResponse)) getStatusCode];
  if (AndroidJavaxSipTransactionState__TRYING == [self getInternalState]) {
    if (statusCode / 100 == 1) {
      [self setStateWithInt:AndroidJavaxSipTransactionState__PROCEEDING];
      [self enableRetransmissionTimerWithInt:[self getTimerT2]];
      [self enableTimeoutTimerWithInt:AndroidGovNistJavaxSipStackSIPTransaction_TIMER_F];
      if (self->respondTo_ != nil) {
        [self->respondTo_ processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:transactionResponse withAndroidGovNistJavaxSipStackMessageChannel:self->encapsulatedChannel_ withAndroidGovNistJavaxSipStackSIPDialog:sipDialog];
      }
      else {
        [self semRelease];
      }
    }
    else if (200 <= statusCode && statusCode <= 699) {
      if (![self isReliable]) {
        [self setStateWithInt:AndroidJavaxSipTransactionState__COMPLETED];
        AndroidGovNistJavaxSipStackSIPClientTransactionImpl_scheduleTimerKWithLong_(self, self->timerK_);
      }
      else {
        [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
      }
      if (self->respondTo_ != nil) {
        [self->respondTo_ processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:transactionResponse withAndroidGovNistJavaxSipStackMessageChannel:self->encapsulatedChannel_ withAndroidGovNistJavaxSipStackSIPDialog:sipDialog];
      }
      else {
        [self semRelease];
      }
      if ([self isReliable] && AndroidJavaxSipTransactionState__TERMINATED == [self getInternalState]) {
        [self cleanUpOnTerminated];
      }
      [self cleanUpOnTimer];
    }
  }
  else if (AndroidJavaxSipTransactionState__PROCEEDING == [self getInternalState]) {
    if (statusCode / 100 == 1) {
      if (self->respondTo_ != nil) {
        [self->respondTo_ processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:transactionResponse withAndroidGovNistJavaxSipStackMessageChannel:self->encapsulatedChannel_ withAndroidGovNistJavaxSipStackSIPDialog:sipDialog];
      }
      else {
        [self semRelease];
      }
    }
    else if (200 <= statusCode && statusCode <= 699) {
      [self disableRetransmissionTimer];
      [self disableTimeoutTimer];
      if (![self isReliable]) {
        [self setStateWithInt:AndroidJavaxSipTransactionState__COMPLETED];
        AndroidGovNistJavaxSipStackSIPClientTransactionImpl_scheduleTimerKWithLong_(self, self->timerK_);
      }
      else {
        [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
      }
      if (self->respondTo_ != nil) {
        [self->respondTo_ processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:transactionResponse withAndroidGovNistJavaxSipStackMessageChannel:self->encapsulatedChannel_ withAndroidGovNistJavaxSipStackSIPDialog:sipDialog];
      }
      else {
        [self semRelease];
      }
      if ([self isReliable] && AndroidJavaxSipTransactionState__TERMINATED == [self getInternalState]) {
        [self cleanUpOnTerminated];
      }
      [self cleanUpOnTimer];
    }
  }
  else {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @" Not sending response to TU! ", [self getState])];
    [self semRelease];
  }
}

void AndroidGovNistJavaxSipStackSIPClientTransactionImpl_scheduleTimerKWithLong_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *self, jlong time) {
  if (self->transactionTimer_ != nil && [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(self->timerKStarted_)) compareAndSetWithBoolean:false withBoolean:true]) {
    @synchronized(self->transactionTimerLock_) {
      if (!self->transactionTimerCancelled_) {
        [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:self->transactionTimer_];
        JreStrongAssign(&self->transactionTimer_, nil);
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$$$J", @"starting TransactionTimerK() : ", [self getTransactionId], @" time ", time)];
        AndroidGovNistJavaxSipStackSIPStackTimerTask *task = create_AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(self);
        if (time > 0) {
          [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:task withLong:time * self->baseTimerInterval_];
        }
        else {
          [task runTask];
        }
        self->transactionTimerCancelled_ = true;
      }
    }
  }
}

void AndroidGovNistJavaxSipStackSIPClientTransactionImpl_inviteClientTransactionWithAndroidGovNistJavaxSipMessageSIPResponse_withAndroidGovNistJavaxSipStackMessageChannel_withAndroidGovNistJavaxSipStackSIPDialog_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *self, AndroidGovNistJavaxSipMessageSIPResponse *transactionResponse, AndroidGovNistJavaxSipStackMessageChannel *sourceChannel, AndroidGovNistJavaxSipStackSIPDialog *dialog) {
  jint statusCode = [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(transactionResponse)) getStatusCode];
  if (AndroidJavaxSipTransactionState__TERMINATED == [self getInternalState]) {
    jboolean ackAlreadySent = false;
    if (dialog != nil && [dialog isAckSentWithLong:[((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([transactionResponse getCSeq])) getSeqNumber]]) {
      if ([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk([dialog getLastAckSent])) getCSeq])) getSeqNumber] == [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([transactionResponse getCSeq])) getSeqNumber] && [((NSString *) nil_chk([transactionResponse getFromTag])) isEqual:[((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk([dialog getLastAckSent])) getFromTag]]) {
        ackAlreadySent = true;
      }
    }
    if (dialog != nil && ackAlreadySent && [((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([transactionResponse getCSeq])) getMethod])) isEqual:[dialog getMethod]]) {
      @try {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:@"resending ACK"];
        [dialog resendAck];
      }
      @catch (AndroidJavaxSipSipException *ex) {
      }
    }
    if (dialog != nil) [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$@$@", @"Dialog ", dialog, @" current state ", [dialog getState])];
    if (dialog == nil && statusCode >= 200 && statusCode < 300) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$@$$$", @"Client Transaction ", self, @" branch id ", [self getBranch], @" doesn't have any dialog and is in TERMINATED state")];
      if (self->respondTo_ != nil) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:@"passing 2xx response up to the application"];
        [((id<AndroidGovNistJavaxSipStackServerResponseInterface>) nil_chk(self->respondTo_)) processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:transactionResponse withAndroidGovNistJavaxSipStackMessageChannel:self->encapsulatedChannel_ withAndroidGovNistJavaxSipStackSIPDialog:dialog];
      }
      else {
        [self semRelease];
        return;
      }
    }
    else if (dialog != nil && [dialog getState] == JreLoadStatic(AndroidJavaxSipDialogState, EARLY) && statusCode >= 200 && statusCode < 300) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$@$$$", @"Client Transaction ", self, @" branch id ", [self getBranch], @" has a early dialog and is in TERMINATED state")];
      [transactionResponse setRetransmissionWithBoolean:false];
      if (self->respondTo_ != nil) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:@"passing 2xx response up to the application"];
        [((id<AndroidGovNistJavaxSipStackServerResponseInterface>) nil_chk(self->respondTo_)) processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:transactionResponse withAndroidGovNistJavaxSipStackMessageChannel:self->encapsulatedChannel_ withAndroidGovNistJavaxSipStackSIPDialog:dialog];
      }
      else {
        [self semRelease];
        return;
      }
    }
    else {
      [self semRelease];
      return;
    }
  }
  else if (AndroidJavaxSipTransactionState__CALLING == [self getInternalState]) {
    if (statusCode / 100 == 2) {
      [self disableRetransmissionTimer];
      [self disableTimeoutTimer];
      [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
      if (self->respondTo_ != nil) [self->respondTo_ processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:transactionResponse withAndroidGovNistJavaxSipStackMessageChannel:self->encapsulatedChannel_ withAndroidGovNistJavaxSipStackSIPDialog:dialog];
      else {
        [self semRelease];
      }
    }
    else if (statusCode / 100 == 1) {
      [self disableRetransmissionTimer];
      [self disableTimeoutTimer];
      [self setStateWithInt:AndroidJavaxSipTransactionState__PROCEEDING];
      if (self->respondTo_ != nil) [self->respondTo_ processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:transactionResponse withAndroidGovNistJavaxSipStackMessageChannel:self->encapsulatedChannel_ withAndroidGovNistJavaxSipStackSIPDialog:dialog];
      else {
        [self semRelease];
      }
    }
    else if (300 <= statusCode && statusCode <= 699) {
      @try {
        [self sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_createErrorAck(self), [AndroidGovNistJavaxSipMessageSIPRequest class])];
      }
      @catch (JavaLangException *ex) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) errorWithNSString:@"Unexpected Exception sending ACK -- sending error AcK " withNSException:ex];
      }
      if ([self getDialog] != nil && [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(((AndroidGovNistJavaxSipStackSIPDialog *) cast_chk([self getDialog], [AndroidGovNistJavaxSipStackSIPDialog class])))) isBackToBackUserAgent]) {
        [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(((AndroidGovNistJavaxSipStackSIPDialog *) cast_chk([self getDialog], [AndroidGovNistJavaxSipStackSIPDialog class])))) releaseAckSem];
      }
      if (![self isReliable]) {
        [self setStateWithInt:AndroidJavaxSipTransactionState__COMPLETED];
        [self enableTimeoutTimerWithInt:self->timerD_];
      }
      else {
        [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
      }
      if (self->respondTo_ != nil) {
        [self->respondTo_ processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:transactionResponse withAndroidGovNistJavaxSipStackMessageChannel:self->encapsulatedChannel_ withAndroidGovNistJavaxSipStackSIPDialog:dialog];
      }
      else {
        [self semRelease];
      }
      [self cleanUpOnTimer];
    }
  }
  else if (AndroidJavaxSipTransactionState__PROCEEDING == [self getInternalState]) {
    if (statusCode / 100 == 1) {
      if (self->respondTo_ != nil) {
        [self->respondTo_ processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:transactionResponse withAndroidGovNistJavaxSipStackMessageChannel:self->encapsulatedChannel_ withAndroidGovNistJavaxSipStackSIPDialog:dialog];
      }
      else {
        [self semRelease];
      }
    }
    else if (statusCode / 100 == 2) {
      [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
      if (self->respondTo_ != nil) {
        [self->respondTo_ processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:transactionResponse withAndroidGovNistJavaxSipStackMessageChannel:self->encapsulatedChannel_ withAndroidGovNistJavaxSipStackSIPDialog:dialog];
      }
      else {
        [self semRelease];
      }
    }
    else if (300 <= statusCode && statusCode <= 699) {
      @try {
        [self sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_createErrorAck(self), [AndroidGovNistJavaxSipMessageSIPRequest class])];
      }
      @catch (JavaLangException *ex) {
        AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
      }
      if ([self getDialog] != nil) {
        [((AndroidGovNistJavaxSipStackSIPDialog *) nil_chk(((AndroidGovNistJavaxSipStackSIPDialog *) cast_chk([self getDialog], [AndroidGovNistJavaxSipStackSIPDialog class])))) releaseAckSem];
      }
      if (![self isReliable]) {
        [self setStateWithInt:AndroidJavaxSipTransactionState__COMPLETED];
        [self enableTimeoutTimerWithInt:self->timerD_];
      }
      else {
        [self setStateWithInt:AndroidJavaxSipTransactionState__TERMINATED];
      }
      [self cleanUpOnTimer];
      if (self->respondTo_ != nil) [self->respondTo_ processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:transactionResponse withAndroidGovNistJavaxSipStackMessageChannel:self->encapsulatedChannel_ withAndroidGovNistJavaxSipStackSIPDialog:dialog];
      else {
        [self semRelease];
      }
    }
  }
  else if (AndroidJavaxSipTransactionState__COMPLETED == [self getInternalState]) {
    if (300 <= statusCode && statusCode <= 699) {
      @try {
        [self sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_createErrorAck(self), [AndroidGovNistJavaxSipMessageSIPRequest class])];
      }
      @catch (JavaLangException *ex) {
        AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
      }
      @finally {
        [self semRelease];
      }
    }
  }
}

id<AndroidJavaxSipMessageRequest> AndroidGovNistJavaxSipStackSIPClientTransactionImpl_createErrorAck(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *self) {
  AndroidGovNistJavaxSipMessageSIPRequest *originalRequest = [self getOriginalRequest];
  if (originalRequest == nil) @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$@", @"bad state ", [self getState]));
  if (![self isInviteTransaction]) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Can only ACK an INVITE!");
  }
  else if (self->lastResponse_ == nil) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"bad Transaction state");
  }
  else if ([self->lastResponse_ getStatusCode] < 200) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_logger)) debugWithNSString:JreStrcat("$@", @"lastResponse = ", self->lastResponse_)];
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Cannot ACK a provisional response!");
  }
  return [originalRequest createErrorAckWithAndroidGovNistJavaxSipHeaderTo:(AndroidGovNistJavaxSipHeaderTo *) cast_chk([((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(self->lastResponse_)) getTo], [AndroidGovNistJavaxSipHeaderTo class])];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPClientTransactionImpl)

@implementation AndroidGovNistJavaxSipStackSIPClientTransactionImpl_TransactionTimer

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl:(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *)outer$ {
  AndroidGovNistJavaxSipStackSIPClientTransactionImpl_TransactionTimer_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(self, outer$);
  return self;
}

- (void)runTask {
  if ([this$0_ isTerminated]) {
    @try {
      [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_)) getTimer])) cancelWithAndroidGovNistJavaxSipStackSIPStackTimerTask:self];
    }
    @catch (JavaLangIllegalStateException *ex) {
      if (![((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(this$0_->sipStack_)) isAlive]) return;
    }
    [this$0_ cleanUpOnTerminated];
  }
  else {
    [this$0_ fireTimer];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPClientTransactionImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPClientTransactionImpl;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPClientTransactionImpl_TransactionTimer = { "TransactionTimer", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x1, 2, 1, 0, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPClientTransactionImpl_TransactionTimer;
}

@end

void AndroidGovNistJavaxSipStackSIPClientTransactionImpl_TransactionTimer_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_TransactionTimer *self, AndroidGovNistJavaxSipStackSIPClientTransactionImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
}

AndroidGovNistJavaxSipStackSIPClientTransactionImpl_TransactionTimer *new_AndroidGovNistJavaxSipStackSIPClientTransactionImpl_TransactionTimer_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_TransactionTimer, initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_, outer$)
}

AndroidGovNistJavaxSipStackSIPClientTransactionImpl_TransactionTimer *create_AndroidGovNistJavaxSipStackSIPClientTransactionImpl_TransactionTimer_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_TransactionTimer, initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_TransactionTimer)

@implementation AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl:(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *)outer$ {
  AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(self, outer$);
  return self;
}

- (void)runTask {
  id<AndroidGovNistJavaxSipStackSIPClientTransaction> ct = this$0_;
  AndroidGovNistJavaxSipSipProviderImpl *provider = [ct getSipProvider];
  if ([ct getState] != JreLoadStatic(AndroidJavaxSipTransactionState, TERMINATED)) {
    AndroidJavaxSipTimeoutEvent *tte = create_AndroidJavaxSipTimeoutEvent_initWithId_withAndroidJavaxSipClientTransaction_withAndroidJavaxSipTimeout_(provider, ct, JreLoadStatic(AndroidJavaxSipTimeout, TRANSACTION));
    [((AndroidGovNistJavaxSipSipProviderImpl *) nil_chk(provider)) handleEventWithJavaUtilEventObject:tte withAndroidGovNistJavaxSipStackSIPTransaction:ct];
  }
  else {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, logger))) debugWithNSString:JreStrcat("$@", @"state = ", [ct getState])];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPClientTransactionImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPClientTransactionImpl;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask = { "ExpiresTimerTask", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x0, 2, 1, 0, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask;
}

@end

void AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask *self, AndroidGovNistJavaxSipStackSIPClientTransactionImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
}

AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask *new_AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask, initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_, outer$)
}

AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask *create_AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask, initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_ExpiresTimerTask)

@implementation AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl:(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *)outer$ {
  AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(self, outer$);
  return self;
}

- (void)runTask {
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipStackSIPClientTransactionImpl, logger))) debugWithNSString:JreStrcat("$$", @"executing TransactionTimerJ() : ", [this$0_ getTransactionId])];
  [this$0_ fireTimeoutTimer];
  [this$0_ cleanUpOnTerminated];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl:);
  methods[1].selector = @selector(runTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipStackSIPClientTransactionImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPClientTransactionImpl;", "scheduleTimerKWithLong:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1 = { "", "android.gov.nist.javax.sip.stack", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1;
}

@end

void AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1 *self, AndroidGovNistJavaxSipStackSIPClientTransactionImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidGovNistJavaxSipStackSIPStackTimerTask_init(self);
}

AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1 *new_AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1, initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_, outer$)
}

AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1 *create_AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1_initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_(AndroidGovNistJavaxSipStackSIPClientTransactionImpl *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipStackSIPClientTransactionImpl_1, initWithAndroidGovNistJavaxSipStackSIPClientTransactionImpl_, outer$)
}
