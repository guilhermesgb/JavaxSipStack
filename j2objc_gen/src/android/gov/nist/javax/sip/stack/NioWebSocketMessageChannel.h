//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/stack/NioWebSocketMessageChannel.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidGovNistJavaxSipStackNioWebSocketMessageChannel")
#ifdef RESTRICT_AndroidGovNistJavaxSipStackNioWebSocketMessageChannel
#define INCLUDE_ALL_AndroidGovNistJavaxSipStackNioWebSocketMessageChannel 0
#else
#define INCLUDE_ALL_AndroidGovNistJavaxSipStackNioWebSocketMessageChannel 1
#endif
#undef RESTRICT_AndroidGovNistJavaxSipStackNioWebSocketMessageChannel

#if !defined (AndroidGovNistJavaxSipStackNioWebSocketMessageChannel_) && (INCLUDE_ALL_AndroidGovNistJavaxSipStackNioWebSocketMessageChannel || defined(INCLUDE_AndroidGovNistJavaxSipStackNioWebSocketMessageChannel))
#define AndroidGovNistJavaxSipStackNioWebSocketMessageChannel_

#define RESTRICT_AndroidGovNistJavaxSipStackNioTcpMessageChannel 1
#define INCLUDE_AndroidGovNistJavaxSipStackNioTcpMessageChannel 1
#include "android/gov/nist/javax/sip/stack/NioTcpMessageChannel.h"

@class AndroidGovNistJavaxSipMessageSIPMessage;
@class AndroidGovNistJavaxSipStackNioTcpMessageProcessor;
@class AndroidGovNistJavaxSipStackNioWebSocketMessageProcessor;
@class AndroidGovNistJavaxSipStackSIPTransactionStack;
@class IOSByteArray;
@class JavaNetInetAddress;
@class JavaNioChannelsSocketChannel;
@class JavaUtilConcurrentAtomicAtomicBoolean;
@protocol AndroidJavaxSipAddressSipURI;

@interface AndroidGovNistJavaxSipStackNioWebSocketMessageChannel : AndroidGovNistJavaxSipStackNioTcpMessageChannel {
 @public
  jboolean readingHttp_;
  NSString *httpInput_;
  jboolean client_;
  JavaUtilConcurrentAtomicAtomicBoolean *httpClientRequestSent_;
  NSString *httpHostHeader_;
  NSString *httpMethod_;
  NSString *httpLocation_;
}

#pragma mark Public

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)inetAddress
                                   withInt:(jint)port
withAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack
withAndroidGovNistJavaxSipStackNioTcpMessageProcessor:(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *)nioTcpMessageProcessor;

+ (AndroidGovNistJavaxSipStackNioWebSocketMessageChannel *)createWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)stack
                                                        withAndroidGovNistJavaxSipStackNioWebSocketMessageProcessor:(AndroidGovNistJavaxSipStackNioWebSocketMessageProcessor *)nioTcpMessageProcessor
                                                                                   withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel;

- (NSString *)getTransport;

- (void)onNewSocketWithByteArray:(IOSByteArray *)message;

- (void)processMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)message;

- (void)rewriteUriWithAndroidJavaxSipAddressSipURI:(id<AndroidJavaxSipAddressSipURI>)uri;

- (void)sendMessageWithByteArray:(IOSByteArray *)message
          withJavaNetInetAddress:(JavaNetInetAddress *)receiverAddress
                         withInt:(jint)receiverPort
                     withBoolean:(jboolean)retry;

- (void)sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage
                                        withJavaNetInetAddress:(JavaNetInetAddress *)receiverAddress
                                                       withInt:(jint)receiverPort;

- (void)sendWrappedWithByteArray:(IOSByteArray *)message
          withJavaNetInetAddress:(JavaNetInetAddress *)receiverAddress
                         withInt:(jint)receiverPort
                     withBoolean:(jboolean)retry;

+ (IOSByteArray *)wrapBufferIntoWebSocketFrameWithByteArray:(IOSByteArray *)buffer
                                                withBoolean:(jboolean)client;

#pragma mark Protected

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)stack
                 withAndroidGovNistJavaxSipStackNioTcpMessageProcessor:(AndroidGovNistJavaxSipStackNioTcpMessageProcessor *)nioTcpMessageProcessor
                                      withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel;

- (void)addBytesWithByteArray:(IOSByteArray *)bytes;

- (void)sendMessageWithByteArray:(IOSByteArray *)msg
                     withBoolean:(jboolean)isClient;

- (void)sendNonWebSocketMessageWithByteArray:(IOSByteArray *)msg
                                 withBoolean:(jboolean)isClient;

@end

J2OBJC_STATIC_INIT(AndroidGovNistJavaxSipStackNioWebSocketMessageChannel)

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackNioWebSocketMessageChannel, httpInput_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackNioWebSocketMessageChannel, httpClientRequestSent_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackNioWebSocketMessageChannel, httpHostHeader_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackNioWebSocketMessageChannel, httpMethod_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipStackNioWebSocketMessageChannel, httpLocation_, NSString *)

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackNioWebSocketMessageChannel *AndroidGovNistJavaxSipStackNioWebSocketMessageChannel_createWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioWebSocketMessageProcessor_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackSIPTransactionStack *stack, AndroidGovNistJavaxSipStackNioWebSocketMessageProcessor *nioTcpMessageProcessor, JavaNioChannelsSocketChannel *socketChannel);

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackNioWebSocketMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackNioWebSocketMessageChannel *self, AndroidGovNistJavaxSipStackSIPTransactionStack *stack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor, JavaNioChannelsSocketChannel *socketChannel);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackNioWebSocketMessageChannel *new_AndroidGovNistJavaxSipStackNioWebSocketMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackSIPTransactionStack *stack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor, JavaNioChannelsSocketChannel *socketChannel) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackNioWebSocketMessageChannel *create_AndroidGovNistJavaxSipStackNioWebSocketMessageChannel_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_withJavaNioChannelsSocketChannel_(AndroidGovNistJavaxSipStackSIPTransactionStack *stack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor, JavaNioChannelsSocketChannel *socketChannel);

FOUNDATION_EXPORT IOSByteArray *AndroidGovNistJavaxSipStackNioWebSocketMessageChannel_wrapBufferIntoWebSocketFrameWithByteArray_withBoolean_(IOSByteArray *buffer, jboolean client);

FOUNDATION_EXPORT void AndroidGovNistJavaxSipStackNioWebSocketMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(AndroidGovNistJavaxSipStackNioWebSocketMessageChannel *self, JavaNetInetAddress *inetAddress, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor);

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackNioWebSocketMessageChannel *new_AndroidGovNistJavaxSipStackNioWebSocketMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(JavaNetInetAddress *inetAddress, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidGovNistJavaxSipStackNioWebSocketMessageChannel *create_AndroidGovNistJavaxSipStackNioWebSocketMessageChannel_initWithJavaNetInetAddress_withInt_withAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipStackNioTcpMessageProcessor_(JavaNetInetAddress *inetAddress, jint port, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack, AndroidGovNistJavaxSipStackNioTcpMessageProcessor *nioTcpMessageProcessor);

J2OBJC_TYPE_LITERAL_HEADER(AndroidGovNistJavaxSipStackNioWebSocketMessageChannel)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidGovNistJavaxSipStackNioWebSocketMessageChannel")
