//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/SipStackImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/ServerLogger.h"
#include "android/gov/nist/core/ThreadAuditor.h"
#include "android/gov/nist/core/net/AddressResolver.h"
#include "android/gov/nist/core/net/DefaultSecurityManagerProvider.h"
#include "android/gov/nist/core/net/NetworkLayer.h"
#include "android/gov/nist/core/net/SecurityManagerProvider.h"
#include "android/gov/nist/core/net/SslNetworkLayer.h"
#include "android/gov/nist/javax/sip/EventScanner.h"
#include "android/gov/nist/javax/sip/ListeningPointImpl.h"
#include "android/gov/nist/javax/sip/LogRecordFactory.h"
#include "android/gov/nist/javax/sip/MergedSystemProperties.h"
#include "android/gov/nist/javax/sip/NistSipMessageFactoryImpl.h"
#include "android/gov/nist/javax/sip/ReleaseReferencesStrategy.h"
#include "android/gov/nist/javax/sip/SipProviderImpl.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/TlsSecurityPolicy.h"
#include "android/gov/nist/javax/sip/clientauthutils/AccountManager.h"
#include "android/gov/nist/javax/sip/clientauthutils/AuthenticationHelper.h"
#include "android/gov/nist/javax/sip/clientauthutils/AuthenticationHelperImpl.h"
#include "android/gov/nist/javax/sip/clientauthutils/SecureAccountManager.h"
#include "android/gov/nist/javax/sip/parser/MessageParserFactory.h"
#include "android/gov/nist/javax/sip/parser/PostParseExecutorServices.h"
#include "android/gov/nist/javax/sip/parser/StringMsgParser.h"
#include "android/gov/nist/javax/sip/parser/StringMsgParserFactory.h"
#include "android/gov/nist/javax/sip/stack/ByteBufferFactory.h"
#include "android/gov/nist/javax/sip/stack/ClientAuthType.h"
#include "android/gov/nist/javax/sip/stack/ConnectionOrientedMessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/DefaultMessageLogFactory.h"
#include "android/gov/nist/javax/sip/stack/DefaultRouter.h"
#include "android/gov/nist/javax/sip/stack/MessageProcessor.h"
#include "android/gov/nist/javax/sip/stack/MessageProcessorFactory.h"
#include "android/gov/nist/javax/sip/stack/OIOMessageProcessorFactory.h"
#include "android/gov/nist/javax/sip/stack/SIPEventInterceptor.h"
#include "android/gov/nist/javax/sip/stack/SIPMessageValve.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/gov/nist/javax/sip/stack/SocketTimeoutAuditor.h"
#include "android/gov/nist/javax/sip/stack/timers/DefaultSipTimer.h"
#include "android/gov/nist/javax/sip/stack/timers/SipTimer.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "android/javax/sip/ListeningPoint.h"
#include "android/javax/sip/ObjectInUseException.h"
#include "android/javax/sip/PeerUnavailableException.h"
#include "android/javax/sip/SipListener.h"
#include "android/javax/sip/SipProvider.h"
#include "android/javax/sip/SipStack.h"
#include "android/javax/sip/TransportNotSupportedException.h"
#include "android/javax/sip/address/Router.h"
#include "android/javax/sip/header/HeaderFactory.h"
#include "android/javax/sip/message/Request.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/security/GeneralSecurityException.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Hashtable.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Properties.h"
#include "java/util/StringTokenizer.h"
#include "java/util/concurrent/Semaphore.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

static void (*AndroidGovNistJavaxSipSipStackImpl_super$_setMessageFactoryWithAndroidGovNistJavaxSipStackStackMessageFactory_)(id, SEL, id);

static void (*AndroidGovNistJavaxSipSipStackImpl_super$_setHostAddressWithNSString_)(id, SEL, id);

static void (*AndroidGovNistJavaxSipSipStackImpl_super$_setStackNameWithNSString_)(id, SEL, id);

static void (*AndroidGovNistJavaxSipSipStackImpl_super$_setReliableConnectionKeepAliveTimeoutWithInt_)(id, SEL, jint);

static void (*AndroidGovNistJavaxSipSipStackImpl_super$_setSslHandshakeTimeoutWithLong_)(id, SEL, jlong);

static void (*AndroidGovNistJavaxSipSipStackImpl_super$_setThreadPriorityWithInt_)(id, SEL, jint);

static void (*AndroidGovNistJavaxSipSipStackImpl_super$_setRouterWithAndroidJavaxSipAddressRouter_)(id, SEL, id);

static jint (*AndroidGovNistJavaxSipSipStackImpl_super$_getMaxTxLifetimeInvite)(id, SEL);

static jint (*AndroidGovNistJavaxSipSipStackImpl_super$_getMaxTxLifetimeNonInvite)(id, SEL);

static void (*AndroidGovNistJavaxSipSipStackImpl_super$_setDeliverUnsolicitedNotifyWithBoolean_)(id, SEL, jboolean);

static void (*AndroidGovNistJavaxSipSipStackImpl_super$_setStackCongestionControlTimeoutWithInt_)(id, SEL, jint);

static void (*AndroidGovNistJavaxSipSipStackImpl_super$_setTcpPostParsingThreadPoolSizeWithInt_)(id, SEL, jint);

static void (*AndroidGovNistJavaxSipSipStackImpl_super$_setPatchWebSocketHeadersWithJavaLangBoolean_)(id, SEL, id);

static void (*AndroidGovNistJavaxSipSipStackImpl_super$_setPatchRportWithJavaLangBoolean_)(id, SEL, id);

static void (*AndroidGovNistJavaxSipSipStackImpl_super$_setReceiveUdpBufferSizeWithInt_)(id, SEL, jint);

static void (*AndroidGovNistJavaxSipSipStackImpl_super$_setSendUdpBufferSizeWithInt_)(id, SEL, jint);

static void (*AndroidGovNistJavaxSipSipStackImpl_super$_setConnectionLingerTimerWithInt_)(id, SEL, jint);

@interface AndroidGovNistJavaxSipSipStackImpl () {
 @public
  AndroidGovNistJavaxSipEventScanner *eventScanner_;
  jboolean reEntrantListener_;
  JavaUtilConcurrentSemaphore *stackSemaphore_;
  IOSObjectArray *cipherSuites_;
  IOSObjectArray *enabledProtocols_;
  JavaUtilProperties *configurationProperties_;
}

- (void)reInitialize;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipSipStackImpl, eventScanner_, AndroidGovNistJavaxSipEventScanner *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipSipStackImpl, stackSemaphore_, JavaUtilConcurrentSemaphore *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipSipStackImpl, cipherSuites_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipSipStackImpl, enabledProtocols_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipSipStackImpl, configurationProperties_, JavaUtilProperties *)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipSipStackImpl_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipSipStackImpl_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipSipStackImpl_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipSipStackImpl, logger, id<OrgSlf4jLogger>)

@interface AndroidGovNistJavaxSipSipStackImpl_1 : JavaLangThread {
 @public
  AndroidGovNistJavaxSipSipStackImpl *this$0_;
  id<AndroidJavaxSipSipStack> val$thisStack_;
}

- (instancetype)initWithAndroidGovNistJavaxSipSipStackImpl:(AndroidGovNistJavaxSipSipStackImpl *)outer$
                               withAndroidJavaxSipSipStack:(id<AndroidJavaxSipSipStack>)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipSipStackImpl_1)

__attribute__((unused)) static void AndroidGovNistJavaxSipSipStackImpl_1_initWithAndroidGovNistJavaxSipSipStackImpl_withAndroidJavaxSipSipStack_(AndroidGovNistJavaxSipSipStackImpl_1 *self, AndroidGovNistJavaxSipSipStackImpl *outer$, id<AndroidJavaxSipSipStack> capture$0);

__attribute__((unused)) static AndroidGovNistJavaxSipSipStackImpl_1 *new_AndroidGovNistJavaxSipSipStackImpl_1_initWithAndroidGovNistJavaxSipSipStackImpl_withAndroidJavaxSipSipStack_(AndroidGovNistJavaxSipSipStackImpl *outer$, id<AndroidJavaxSipSipStack> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipSipStackImpl_1 *create_AndroidGovNistJavaxSipSipStackImpl_1_initWithAndroidGovNistJavaxSipSipStackImpl_withAndroidJavaxSipSipStack_(AndroidGovNistJavaxSipSipStackImpl *outer$, id<AndroidJavaxSipSipStack> capture$0);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipSipStackImpl)

JavaLangInteger *AndroidGovNistJavaxSipSipStackImpl_MAX_DATAGRAM_SIZE;

@implementation AndroidGovNistJavaxSipSipStackImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipSipStackImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)reInitialize {
  [super reInit];
  JreStrongAssignAndConsume(&self->eventScanner_, new_AndroidGovNistJavaxSipEventScanner_initWithAndroidGovNistJavaxSipSipStackImpl_(self));
  JreStrongAssignAndConsume(&self->listeningPoints_, new_JavaUtilHashtable_init());
  JreStrongAssign(&self->sipProviders_, JavaUtilCollections_synchronizedListWithJavaUtilList_(create_JavaUtilLinkedList_init()));
  JreStrongAssign(&self->sipListener_, nil);
  if (![((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([self getTimer])) isStarted]) {
    NSString *defaultTimerName = [((JavaUtilProperties *) nil_chk(configurationProperties_)) getPropertyWithNSString:@"android.gov.nist.javax.sip.TIMER_CLASS_NAME" withNSString:[AndroidGovNistJavaxSipStackTimersDefaultSipTimer_class_() getName]];
    @try {
      [self setTimerWithAndroidGovNistJavaxSipStackTimersSipTimer:(id<AndroidGovNistJavaxSipStackTimersSipTimer>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(defaultTimerName))) newInstance], AndroidGovNistJavaxSipStackTimersSipTimer_class_())];
      [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([self getTimer])) startWithAndroidGovNistJavaxSipSipStackImpl:self withJavaUtilProperties:configurationProperties_];
      if ([self getThreadAuditor] != nil && [((AndroidGovNistCoreThreadAuditor *) nil_chk([self getThreadAuditor])) isEnabled]) {
        [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([self getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:create_AndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistCoreThreadAuditor_ThreadHandle_(self, nil) withLong:0];
      }
    }
    @catch (JavaLangException *e) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:@"Bad configuration value for android.gov.nist.javax.sip.TIMER_CLASS_NAME" withNSException:e];
    }
  }
}

- (jboolean)isAutomaticDialogSupportEnabled {
  return isAutomaticDialogSupportEnabled_;
}

- (instancetype)initWithJavaUtilProperties:(JavaUtilProperties *)configurationProperties {
  AndroidGovNistJavaxSipSipStackImpl_initWithJavaUtilProperties_(self, configurationProperties);
  return self;
}

- (id<AndroidJavaxSipListeningPoint>)createListeningPointWithNSString:(NSString *)address
                                                              withInt:(jint)port
                                                         withNSString:(NSString *)transport {
  @synchronized(self) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) debugWithNSString:JreStrcat("$$$I$$", @"createListeningPoint : address = ", address, @" port = ", port, @" transport = ", transport)];
    if (address == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Address for listening point is null!");
    if (transport == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null transport");
    if (port <= 0) @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_(@"bad port");
    if (![transport java_equalsIgnoreCase:@"UDP"] && ![transport java_equalsIgnoreCase:@"TLS"] && ![transport java_equalsIgnoreCase:@"TCP"] && ![transport java_equalsIgnoreCase:@"SCTP"] && ![transport java_equalsIgnoreCase:@"WS"] && ![transport java_equalsIgnoreCase:@"WSS"]) @throw create_AndroidJavaxSipTransportNotSupportedException_initWithNSString_(JreStrcat("$$", @"bad transport ", transport));
    if (![self isAlive]) {
      self->toExit_ = false;
      [self reInitialize];
    }
    NSString *key = AndroidGovNistJavaxSipListeningPointImpl_makeKeyWithNSString_withInt_withNSString_(address, port, transport);
    AndroidGovNistJavaxSipListeningPointImpl *lip = [((JavaUtilHashtable *) nil_chk(listeningPoints_)) getWithId:key];
    if (lip != nil) {
      return lip;
    }
    else {
      @try {
        JavaNetInetAddress *inetAddr = JavaNetInetAddress_getByNameWithNSString_(address);
        AndroidGovNistJavaxSipStackMessageProcessor *messageProcessor = [self createMessageProcessorWithJavaNetInetAddress:inetAddr withInt:port withNSString:transport];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) debugWithNSString:JreStrcat("$$$I$$", @"Created Message Processor: ", address, @" port = ", port, @" transport = ", transport)];
        lip = create_AndroidGovNistJavaxSipListeningPointImpl_initWithAndroidJavaxSipSipStack_withInt_withNSString_(self, port, transport);
        JreStrongAssign(&lip->messageProcessor_, messageProcessor);
        [((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(messageProcessor)) setListeningPointWithAndroidGovNistJavaxSipListeningPointImpl:lip];
        [((JavaUtilHashtable *) nil_chk(self->listeningPoints_)) putWithId:key withId:lip];
        [messageProcessor start];
        if (socketTimeoutAuditor_ == nil && nioSocketMaxIdleTime_ > 0 && [messageProcessor isKindOfClass:[AndroidGovNistJavaxSipStackConnectionOrientedMessageProcessor class]]) {
          JreStrongAssignAndConsume(&socketTimeoutAuditor_, new_AndroidGovNistJavaxSipStackSocketTimeoutAuditor_initWithLong_(nioSocketMaxIdleTime_));
          [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([self getTimer])) scheduleWithFixedDelayWithAndroidGovNistJavaxSipStackSIPStackTimerTask:socketTimeoutAuditor_ withLong:nioSocketMaxIdleTime_ withLong:nioSocketMaxIdleTime_];
        }
        return lip;
      }
      @catch (JavaIoIOException *ex) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:JreStrcat("$$$I$$", @"Invalid argument address = ", address, @" port = ", port, @" transport = ", transport)];
        @throw create_AndroidJavaxSipInvalidArgumentException_initWithNSString_withNSException_([((JavaIoIOException *) nil_chk(ex)) getMessage], ex);
      }
    }
  }
}

- (id<AndroidJavaxSipSipProvider>)createSipProviderWithAndroidJavaxSipListeningPoint:(id<AndroidJavaxSipListeningPoint>)listeningPoint {
  if (listeningPoint == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null listeningPoint");
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) debugWithNSString:JreStrcat("$@", @"createSipProvider: ", listeningPoint)];
  AndroidGovNistJavaxSipListeningPointImpl *listeningPointImpl = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk(listeningPoint, [AndroidGovNistJavaxSipListeningPointImpl class]);
  if (listeningPointImpl->sipProvider_ != nil) @throw create_AndroidJavaxSipObjectInUseException_initWithNSString_(@"Provider already attached!");
  AndroidGovNistJavaxSipSipProviderImpl *provider = create_AndroidGovNistJavaxSipSipProviderImpl_initWithAndroidGovNistJavaxSipSipStackImpl_(self);
  [provider setListeningPointWithAndroidJavaxSipListeningPoint:listeningPointImpl];
  JreStrongAssign(&listeningPointImpl->sipProvider_, provider);
  [((id<JavaUtilList>) nil_chk(self->sipProviders_)) addWithId:provider];
  return provider;
}

- (void)deleteListeningPointWithAndroidJavaxSipListeningPoint:(id<AndroidJavaxSipListeningPoint>)listeningPoint {
  if (listeningPoint == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null listeningPoint arg");
  AndroidGovNistJavaxSipListeningPointImpl *lip = (AndroidGovNistJavaxSipListeningPointImpl *) cast_chk(listeningPoint, [AndroidGovNistJavaxSipListeningPointImpl class]);
  [super removeMessageProcessorWithAndroidGovNistJavaxSipStackMessageProcessor:lip->messageProcessor_];
  NSString *key = [lip getKey];
  [((JavaUtilHashtable *) nil_chk(self->listeningPoints_)) removeWithId:key];
}

- (void)deleteSipProviderWithAndroidJavaxSipSipProvider:(id<AndroidJavaxSipSipProvider>)sipProvider {
  if (sipProvider == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null provider arg");
  AndroidGovNistJavaxSipSipProviderImpl *sipProviderImpl = (AndroidGovNistJavaxSipSipProviderImpl *) cast_chk(sipProvider, [AndroidGovNistJavaxSipSipProviderImpl class]);
  if ([sipProviderImpl getSipListener] != nil) {
    @throw create_AndroidJavaxSipObjectInUseException_initWithNSString_(@"SipProvider still has an associated SipListener!");
  }
  [sipProviderImpl removeListeningPoints];
  [sipProviderImpl stop];
  [((id<JavaUtilList>) nil_chk(sipProviders_)) removeWithId:sipProvider];
  if ([((id<JavaUtilList>) nil_chk(sipProviders_)) isEmpty]) {
    [self stopStack];
  }
}

- (NSString *)getIPAddress {
  return [super getHostAddress];
}

- (id<JavaUtilIterator>)getListeningPoints {
  return [((id<JavaUtilCollection>) nil_chk([((JavaUtilHashtable *) nil_chk(self->listeningPoints_)) values])) iterator];
}

- (jboolean)isRetransmissionFilterActive {
  return true;
}

- (id<JavaUtilIterator>)getSipProviders {
  return [((id<JavaUtilList>) nil_chk(self->sipProviders_)) iterator];
}

- (NSString *)getStackName {
  return self->stackName_;
}

- (void)java_finalize {
  [self stopStack];
}

- (id<AndroidJavaxSipListeningPoint>)createListeningPointWithInt:(jint)port
                                                    withNSString:(NSString *)transport {
  if (stackAddress_ == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Stack does not have a default IP Address!");
  return [self createListeningPointWithNSString:stackAddress_ withInt:port withNSString:transport];
}

- (void)stop {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) debugWithNSString:@"stopStack -- stoppping the stack"];
  [self stopStack];
  if (sipMessageValve_ != nil) [sipMessageValve_ destroy];
  if (sipEventInterceptor_ != nil) [sipEventInterceptor_ destroy];
  JreStrongAssign(&self->sipProviders_, JavaUtilCollections_synchronizedListWithJavaUtilList_(create_JavaUtilLinkedList_init()));
  JreStrongAssignAndConsume(&self->listeningPoints_, new_JavaUtilHashtable_init());
  if (self->eventScanner_ != nil) [self->eventScanner_ forceStop];
  JreStrongAssign(&self->eventScanner_, nil);
  AndroidGovNistJavaxSipParserPostParseExecutorServices_shutdownThreadpool();
}

- (void)start {
  if (self->eventScanner_ == nil) {
    JreStrongAssignAndConsume(&self->eventScanner_, new_AndroidGovNistJavaxSipEventScanner_initWithAndroidGovNistJavaxSipSipStackImpl_(self));
  }
}

- (id<AndroidJavaxSipSipListener>)getSipListener {
  return self->sipListener_;
}

- (id<AndroidGovNistJavaxSipTlsSecurityPolicy>)getTlsSecurityPolicy {
  return self->tlsSecurityPolicy_;
}

- (id<AndroidGovNistJavaxSipLogRecordFactory>)getLogRecordFactory {
  return logRecordFactory_;
}

- (AndroidGovNistJavaxSipEventScanner *)getEventScanner {
  return eventScanner_;
}

- (id<AndroidGovNistJavaxSipClientauthutilsAuthenticationHelper>)getAuthenticationHelperWithAndroidGovNistJavaxSipClientauthutilsAccountManager:(id<AndroidGovNistJavaxSipClientauthutilsAccountManager>)accountManager
                                                                                                         withAndroidJavaxSipHeaderHeaderFactory:(id<AndroidJavaxSipHeaderHeaderFactory>)headerFactory {
  return create_AndroidGovNistJavaxSipClientauthutilsAuthenticationHelperImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipClientauthutilsAccountManager_withAndroidJavaxSipHeaderHeaderFactory_(self, accountManager, headerFactory);
}

- (id<AndroidGovNistJavaxSipClientauthutilsAuthenticationHelper>)getSecureAuthenticationHelperWithAndroidGovNistJavaxSipClientauthutilsSecureAccountManager:(id<AndroidGovNistJavaxSipClientauthutilsSecureAccountManager>)accountManager
                                                                                                                     withAndroidJavaxSipHeaderHeaderFactory:(id<AndroidJavaxSipHeaderHeaderFactory>)headerFactory {
  return create_AndroidGovNistJavaxSipClientauthutilsAuthenticationHelperImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistJavaxSipClientauthutilsSecureAccountManager_withAndroidJavaxSipHeaderHeaderFactory_(self, accountManager, headerFactory);
}

- (void)setEnabledCipherSuitesWithNSStringArray:(IOSObjectArray *)newCipherSuites {
  JreStrongAssign(&cipherSuites_, newCipherSuites);
}

- (IOSObjectArray *)getEnabledCipherSuites {
  return cipherSuites_;
}

- (void)setEnabledProtocolsWithNSStringArray:(IOSObjectArray *)newProtocols {
  JreStrongAssign(&enabledProtocols_, newProtocols);
}

- (IOSObjectArray *)getEnabledProtocols {
  return enabledProtocols_;
}

- (void)setIsBackToBackUserAgentWithBoolean:(jboolean)flag {
  isBackToBackUserAgent_ = flag;
}

- (jboolean)isBackToBackUserAgent {
  return isBackToBackUserAgent_;
}

- (jboolean)isAutomaticDialogErrorHandlingEnabled {
  return isAutomaticDialogErrorHandlingEnabled_;
}

- (void)setTlsSecurityPolicyWithAndroidGovNistJavaxSipTlsSecurityPolicy:(id<AndroidGovNistJavaxSipTlsSecurityPolicy>)tlsSecurityPolicy {
  JreStrongAssign(&self->tlsSecurityPolicy_, tlsSecurityPolicy);
}

- (jboolean)acquireSem {
  @try {
    return [((JavaUtilConcurrentSemaphore *) nil_chk(self->stackSemaphore_)) tryAcquireWithLong:10 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  }
  @catch (JavaLangInterruptedException *ex) {
    return false;
  }
}

- (void)releaseSem {
  [((JavaUtilConcurrentSemaphore *) nil_chk(self->stackSemaphore_)) release__];
}

- (JavaUtilProperties *)getConfigurationProperties {
  return configurationProperties_;
}

- (jboolean)isReEntrantListener {
  return reEntrantListener_;
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidGovNistJavaxSipSipStackImpl class]);
  RELEASE_(eventScanner_);
  RELEASE_(listeningPoints_);
  RELEASE_(sipProviders_);
  RELEASE_(sipListener_);
  RELEASE_(tlsSecurityPolicy_);
  RELEASE_(stackSemaphore_);
  RELEASE_(cipherSuites_);
  RELEASE_(enabledProtocols_);
  RELEASE_(configurationProperties_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipListeningPoint;", 0x21, 2, 3, 4, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipSipProvider;", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipListeningPoint;", 0x1, 2, 13, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 14, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipSipListener;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipTlsSecurityPolicy;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipLogRecordFactory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipEventScanner;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipClientauthutilsAuthenticationHelper;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipClientauthutilsAuthenticationHelper;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 20, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(reInitialize);
  methods[2].selector = @selector(isAutomaticDialogSupportEnabled);
  methods[3].selector = @selector(initWithJavaUtilProperties:);
  methods[4].selector = @selector(createListeningPointWithNSString:withInt:withNSString:);
  methods[5].selector = @selector(createSipProviderWithAndroidJavaxSipListeningPoint:);
  methods[6].selector = @selector(deleteListeningPointWithAndroidJavaxSipListeningPoint:);
  methods[7].selector = @selector(deleteSipProviderWithAndroidJavaxSipSipProvider:);
  methods[8].selector = @selector(getIPAddress);
  methods[9].selector = @selector(getListeningPoints);
  methods[10].selector = @selector(isRetransmissionFilterActive);
  methods[11].selector = @selector(getSipProviders);
  methods[12].selector = @selector(getStackName);
  methods[13].selector = @selector(java_finalize);
  methods[14].selector = @selector(createListeningPointWithInt:withNSString:);
  methods[15].selector = @selector(stop);
  methods[16].selector = @selector(start);
  methods[17].selector = @selector(getSipListener);
  methods[18].selector = @selector(getTlsSecurityPolicy);
  methods[19].selector = @selector(getLogRecordFactory);
  methods[20].selector = @selector(getEventScanner);
  methods[21].selector = @selector(getAuthenticationHelperWithAndroidGovNistJavaxSipClientauthutilsAccountManager:withAndroidJavaxSipHeaderHeaderFactory:);
  methods[22].selector = @selector(getSecureAuthenticationHelperWithAndroidGovNistJavaxSipClientauthutilsSecureAccountManager:withAndroidJavaxSipHeaderHeaderFactory:);
  methods[23].selector = @selector(setEnabledCipherSuitesWithNSStringArray:);
  methods[24].selector = @selector(getEnabledCipherSuites);
  methods[25].selector = @selector(setEnabledProtocolsWithNSStringArray:);
  methods[26].selector = @selector(getEnabledProtocols);
  methods[27].selector = @selector(setIsBackToBackUserAgentWithBoolean:);
  methods[28].selector = @selector(isBackToBackUserAgent);
  methods[29].selector = @selector(isAutomaticDialogErrorHandlingEnabled);
  methods[30].selector = @selector(setTlsSecurityPolicyWithAndroidGovNistJavaxSipTlsSecurityPolicy:);
  methods[31].selector = @selector(acquireSem);
  methods[32].selector = @selector(releaseSem);
  methods[33].selector = @selector(getConfigurationProperties);
  methods[34].selector = @selector(isReEntrantListener);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 26, -1, -1 },
    { "eventScanner_", "LAndroidGovNistJavaxSipEventScanner;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listeningPoints_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x4, -1, -1, 27, -1 },
    { "sipProviders_", "LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, 28, -1 },
    { "MAX_DATAGRAM_SIZE", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "reEntrantListener_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sipListener_", "LAndroidJavaxSipSipListener;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tlsSecurityPolicy_", "LAndroidGovNistJavaxSipTlsSecurityPolicy;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "stackSemaphore_", "LJavaUtilConcurrentSemaphore;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipherSuites_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "enabledProtocols_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "configurationProperties_", "LJavaUtilProperties;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilProperties;", "LAndroidJavaxSipPeerUnavailableException;", "createListeningPoint", "LNSString;ILNSString;", "LAndroidJavaxSipTransportNotSupportedException;LAndroidJavaxSipInvalidArgumentException;", "createSipProvider", "LAndroidJavaxSipListeningPoint;", "LAndroidJavaxSipObjectInUseException;", "deleteListeningPoint", "deleteSipProvider", "LAndroidJavaxSipSipProvider;", "()Ljava/util/Iterator<Landroid/gov/nist/javax/sip/SipProviderImpl;>;", "finalize", "ILNSString;", "LAndroidJavaxSipProviderDoesNotExistException;LAndroidJavaxSipSipException;", "getAuthenticationHelper", "LAndroidGovNistJavaxSipClientauthutilsAccountManager;LAndroidJavaxSipHeaderHeaderFactory;", "getSecureAuthenticationHelper", "LAndroidGovNistJavaxSipClientauthutilsSecureAccountManager;LAndroidJavaxSipHeaderHeaderFactory;", "setEnabledCipherSuites", "[LNSString;", "setEnabledProtocols", "setIsBackToBackUserAgent", "Z", "setTlsSecurityPolicy", "LAndroidGovNistJavaxSipTlsSecurityPolicy;", &AndroidGovNistJavaxSipSipStackImpl_logger, "Ljava/util/Hashtable<Ljava/lang/String;Landroid/gov/nist/javax/sip/ListeningPointImpl;>;", "Ljava/util/List<Landroid/gov/nist/javax/sip/SipProviderImpl;>;", &AndroidGovNistJavaxSipSipStackImpl_MAX_DATAGRAM_SIZE };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipSipStackImpl = { "SipStackImpl", "android.gov.nist.javax.sip", ptrTable, methods, fields, 7, 0x1, 35, 12, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipSipStackImpl;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipSipStackImpl class]) {
    AndroidGovNistJavaxSipSipStackImpl_super$_setConnectionLingerTimerWithInt_ = (void (*)(id, SEL, jint))[AndroidGovNistJavaxSipStackSIPTransactionStack instanceMethodForSelector:@selector(setConnectionLingerTimerWithInt:)];
    AndroidGovNistJavaxSipSipStackImpl_super$_setSendUdpBufferSizeWithInt_ = (void (*)(id, SEL, jint))[AndroidGovNistJavaxSipStackSIPTransactionStack instanceMethodForSelector:@selector(setSendUdpBufferSizeWithInt:)];
    AndroidGovNistJavaxSipSipStackImpl_super$_setReceiveUdpBufferSizeWithInt_ = (void (*)(id, SEL, jint))[AndroidGovNistJavaxSipStackSIPTransactionStack instanceMethodForSelector:@selector(setReceiveUdpBufferSizeWithInt:)];
    AndroidGovNistJavaxSipSipStackImpl_super$_setPatchRportWithJavaLangBoolean_ = (void (*)(id, SEL, id))[AndroidGovNistJavaxSipStackSIPTransactionStack instanceMethodForSelector:@selector(setPatchRportWithJavaLangBoolean:)];
    AndroidGovNistJavaxSipSipStackImpl_super$_setPatchWebSocketHeadersWithJavaLangBoolean_ = (void (*)(id, SEL, id))[AndroidGovNistJavaxSipStackSIPTransactionStack instanceMethodForSelector:@selector(setPatchWebSocketHeadersWithJavaLangBoolean:)];
    AndroidGovNistJavaxSipSipStackImpl_super$_setTcpPostParsingThreadPoolSizeWithInt_ = (void (*)(id, SEL, jint))[AndroidGovNistJavaxSipStackSIPTransactionStack instanceMethodForSelector:@selector(setTcpPostParsingThreadPoolSizeWithInt:)];
    AndroidGovNistJavaxSipSipStackImpl_super$_setStackCongestionControlTimeoutWithInt_ = (void (*)(id, SEL, jint))[AndroidGovNistJavaxSipStackSIPTransactionStack instanceMethodForSelector:@selector(setStackCongestionControlTimeoutWithInt:)];
    AndroidGovNistJavaxSipSipStackImpl_super$_setDeliverUnsolicitedNotifyWithBoolean_ = (void (*)(id, SEL, jboolean))[AndroidGovNistJavaxSipStackSIPTransactionStack instanceMethodForSelector:@selector(setDeliverUnsolicitedNotifyWithBoolean:)];
    AndroidGovNistJavaxSipSipStackImpl_super$_getMaxTxLifetimeNonInvite = (jint (*)(id, SEL))[AndroidGovNistJavaxSipStackSIPTransactionStack instanceMethodForSelector:@selector(getMaxTxLifetimeNonInvite)];
    AndroidGovNistJavaxSipSipStackImpl_super$_getMaxTxLifetimeInvite = (jint (*)(id, SEL))[AndroidGovNistJavaxSipStackSIPTransactionStack instanceMethodForSelector:@selector(getMaxTxLifetimeInvite)];
    AndroidGovNistJavaxSipSipStackImpl_super$_setRouterWithAndroidJavaxSipAddressRouter_ = (void (*)(id, SEL, id))[AndroidGovNistJavaxSipStackSIPTransactionStack instanceMethodForSelector:@selector(setRouterWithAndroidJavaxSipAddressRouter:)];
    AndroidGovNistJavaxSipSipStackImpl_super$_setThreadPriorityWithInt_ = (void (*)(id, SEL, jint))[AndroidGovNistJavaxSipStackSIPTransactionStack instanceMethodForSelector:@selector(setThreadPriorityWithInt:)];
    AndroidGovNistJavaxSipSipStackImpl_super$_setSslHandshakeTimeoutWithLong_ = (void (*)(id, SEL, jlong))[AndroidGovNistJavaxSipStackSIPTransactionStack instanceMethodForSelector:@selector(setSslHandshakeTimeoutWithLong:)];
    AndroidGovNistJavaxSipSipStackImpl_super$_setReliableConnectionKeepAliveTimeoutWithInt_ = (void (*)(id, SEL, jint))[AndroidGovNistJavaxSipStackSIPTransactionStack instanceMethodForSelector:@selector(setReliableConnectionKeepAliveTimeoutWithInt:)];
    AndroidGovNistJavaxSipSipStackImpl_super$_setStackNameWithNSString_ = (void (*)(id, SEL, id))[AndroidGovNistJavaxSipStackSIPTransactionStack instanceMethodForSelector:@selector(setStackNameWithNSString:)];
    AndroidGovNistJavaxSipSipStackImpl_super$_setHostAddressWithNSString_ = (void (*)(id, SEL, id))[AndroidGovNistJavaxSipStackSIPTransactionStack instanceMethodForSelector:@selector(setHostAddressWithNSString:)];
    AndroidGovNistJavaxSipSipStackImpl_super$_setMessageFactoryWithAndroidGovNistJavaxSipStackStackMessageFactory_ = (void (*)(id, SEL, id))[AndroidGovNistJavaxSipStackSIPTransactionStack instanceMethodForSelector:@selector(setMessageFactoryWithAndroidGovNistJavaxSipStackStackMessageFactory:)];
    JreStrongAssign(&AndroidGovNistJavaxSipSipStackImpl_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipSipStackImpl_class_()));
    JreStrongAssign(&AndroidGovNistJavaxSipSipStackImpl_MAX_DATAGRAM_SIZE, JavaLangInteger_valueOfWithInt_(64 * 1024));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipSipStackImpl)
  }
}

@end

void AndroidGovNistJavaxSipSipStackImpl_init(AndroidGovNistJavaxSipSipStackImpl *self) {
  AndroidGovNistJavaxSipStackSIPTransactionStack_init(self);
  JreStrongAssignAndConsume(&self->stackSemaphore_, new_JavaUtilConcurrentSemaphore_initWithInt_(1));
  JreStrongAssignAndConsume(&self->cipherSuites_, [IOSObjectArray newArrayWithObjects:(id[]){ @"TLS_RSA_WITH_AES_128_CBC_SHA", @"SSL_RSA_WITH_3DES_EDE_CBC_SHA", @"TLS_DH_anon_WITH_AES_128_CBC_SHA", @"SSL_DH_anon_WITH_3DES_EDE_CBC_SHA" } count:4 type:NSString_class_()]);
  JreStrongAssignAndConsume(&self->enabledProtocols_, [IOSObjectArray newArrayWithObjects:(id[]){ @"TLSv1.2", @"TLSv1.1", @"TLSv1" } count:3 type:NSString_class_()]);
  AndroidGovNistJavaxSipNistSipMessageFactoryImpl *msgFactory = create_AndroidGovNistJavaxSipNistSipMessageFactoryImpl_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(self);
  AndroidGovNistJavaxSipSipStackImpl_super$_setMessageFactoryWithAndroidGovNistJavaxSipStackStackMessageFactory_(self, @selector(setMessageFactoryWithAndroidGovNistJavaxSipStackStackMessageFactory:), msgFactory);
  JreStrongAssignAndConsume(&self->eventScanner_, new_AndroidGovNistJavaxSipEventScanner_initWithAndroidGovNistJavaxSipSipStackImpl_(self));
  JreStrongAssignAndConsume(&self->listeningPoints_, new_JavaUtilHashtable_init());
  JreStrongAssign(&self->sipProviders_, JavaUtilCollections_synchronizedListWithJavaUtilList_(create_JavaUtilLinkedList_init()));
}

AndroidGovNistJavaxSipSipStackImpl *new_AndroidGovNistJavaxSipSipStackImpl_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipSipStackImpl, init)
}

AndroidGovNistJavaxSipSipStackImpl *create_AndroidGovNistJavaxSipSipStackImpl_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipSipStackImpl, init)
}

void AndroidGovNistJavaxSipSipStackImpl_initWithJavaUtilProperties_(AndroidGovNistJavaxSipSipStackImpl *self, JavaUtilProperties *configurationProperties) {
  AndroidGovNistJavaxSipSipStackImpl_init(self);
  configurationProperties = create_AndroidGovNistJavaxSipMergedSystemProperties_initWithJavaUtilProperties_(configurationProperties);
  JreStrongAssign(&self->configurationProperties_, configurationProperties);
  NSString *address = [configurationProperties getPropertyWithNSString:@"android.javax.sip.IP_ADDRESS"];
  @try {
    if (address != nil) {
      AndroidGovNistJavaxSipSipStackImpl_super$_setHostAddressWithNSString_(self, @selector(setHostAddressWithNSString:), address);
    }
  }
  @catch (JavaNetUnknownHostException *ex) {
    @throw create_AndroidJavaxSipPeerUnavailableException_initWithNSString_(JreStrcat("$$", @"bad address ", address));
  }
  NSString *name = [configurationProperties getPropertyWithNSString:@"android.javax.sip.STACK_NAME"];
  if (name == nil) @throw create_AndroidJavaxSipPeerUnavailableException_initWithNSString_(@"stack name is missing");
  AndroidGovNistJavaxSipSipStackImpl_super$_setStackNameWithNSString_(self, @selector(setStackNameWithNSString:), name);
  NSString *stackLoggerClassName = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.STACK_LOGGER"];
  if (stackLoggerClassName == nil) stackLoggerClassName = @"android.gov.nist.core.LogWriter";
  NSString *serverLoggerClassName = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.SERVER_LOGGER"];
  if (serverLoggerClassName == nil) serverLoggerClassName = @"android.gov.nist.javax.sip.stack.ServerLog";
  @try {
    IOSClass *serverLoggerClass = IOSClass_forName_(serverLoggerClassName);
    IOSObjectArray *constructorArgs = [IOSObjectArray arrayWithLength:0 type:IOSClass_class_()];
    JavaLangReflectConstructor *cons = [((IOSClass *) nil_chk(serverLoggerClass)) getConstructor:constructorArgs];
    IOSObjectArray *args = [IOSObjectArray arrayWithLength:0 type:NSObject_class_()];
    JreStrongAssign(&self->serverLogger_, (id<AndroidGovNistCoreServerLogger>) cast_check([((JavaLangReflectConstructor *) nil_chk(cons)) newInstanceWithNSObjectArray:args], AndroidGovNistCoreServerLogger_class_()));
    [((id<AndroidGovNistCoreServerLogger>) nil_chk(self->serverLogger_)) setSipStackWithAndroidJavaxSipSipStack:self];
    [((id<AndroidGovNistCoreServerLogger>) nil_chk(self->serverLogger_)) setStackPropertiesWithJavaUtilProperties:configurationProperties];
  }
  @catch (JavaLangReflectInvocationTargetException *ex1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_withNSException_(JreStrcat("$$$", @"Cound not instantiate server logger ", stackLoggerClassName, @"- check that it is present on the classpath and that there is a no-args constructor defined"), ex1);
  }
  @catch (JavaLangException *ex) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_withNSException_(JreStrcat("$$$", @"Cound not instantiate server logger ", stackLoggerClassName, @"- check that it is present on the classpath and that there is a no-args constructor defined"), ex);
  }
  AndroidGovNistJavaxSipSipStackImpl_super$_setReliableConnectionKeepAliveTimeoutWithInt_(self, @selector(setReliableConnectionKeepAliveTimeoutWithInt:), 1000 * JavaLangInteger_parseIntWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.RELIABLE_CONNECTION_KEEP_ALIVE_TIMEOUT" withNSString:@"-1"]));
  AndroidGovNistJavaxSipSipStackImpl_super$_setSslHandshakeTimeoutWithLong_(self, @selector(setSslHandshakeTimeoutWithLong:), JavaLangLong_parseLongWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.SSL_HANDSHAKE_TIMEOUT" withNSString:@"-1"]));
  AndroidGovNistJavaxSipSipStackImpl_super$_setThreadPriorityWithInt_(self, @selector(setThreadPriorityWithInt:), JavaLangInteger_parseIntWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.THREAD_PRIORITY" withNSString:JreStrcat("I", JavaLangThread_MAX_PRIORITY)]));
  JreStrongAssign(&self->outboundProxy_, [configurationProperties getPropertyWithNSString:@"android.javax.sip.OUTBOUND_PROXY"]);
  [((AndroidGovNistJavaxSipStackByteBufferFactory *) nil_chk(AndroidGovNistJavaxSipStackByteBufferFactory_getInstance())) setUseDirectWithBoolean:[((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.stack.USE_DIRECT_BUFFERS" withNSString:[((JavaLangBoolean *) nil_chk(JreLoadStatic(JavaLangBoolean, TRUE))) description]]))) booleanValue]];
  JreStrongAssignAndConsume(&self->defaultRouter_, new_AndroidGovNistJavaxSipStackDefaultRouter_initWithAndroidJavaxSipSipStack_withNSString_(self, self->outboundProxy_));
  NSString *routerPath = [configurationProperties getPropertyWithNSString:@"android.javax.sip.ROUTER_PATH"];
  if (routerPath == nil) routerPath = @"android.gov.nist.javax.sip.stack.DefaultRouter";
  @try {
    IOSClass *routerClass = IOSClass_forName_(routerPath);
    IOSObjectArray *constructorArgs = [IOSObjectArray arrayWithLength:2 type:IOSClass_class_()];
    IOSObjectArray_Set(constructorArgs, 0, AndroidJavaxSipSipStack_class_());
    IOSObjectArray_Set(constructorArgs, 1, NSString_class_());
    JavaLangReflectConstructor *cons = [((IOSClass *) nil_chk(routerClass)) getConstructor:constructorArgs];
    IOSObjectArray *args = [IOSObjectArray arrayWithLength:2 type:NSObject_class_()];
    IOSObjectArray_Set(args, 0, self);
    IOSObjectArray_Set(args, 1, self->outboundProxy_);
    id<AndroidJavaxSipAddressRouter> router = (id<AndroidJavaxSipAddressRouter>) cast_check([((JavaLangReflectConstructor *) nil_chk(cons)) newInstanceWithNSObjectArray:args], AndroidJavaxSipAddressRouter_class_());
    AndroidGovNistJavaxSipSipStackImpl_super$_setRouterWithAndroidJavaxSipAddressRouter_(self, @selector(setRouterWithAndroidJavaxSipAddressRouter:), router);
  }
  @catch (JavaLangReflectInvocationTargetException *ex1) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:@"could not instantiate router -- invocation target problem" withNSException:(JavaLangException *) cast_chk([((JavaLangReflectInvocationTargetException *) nil_chk(ex1)) getCause], [JavaLangException class])];
    @throw create_AndroidJavaxSipPeerUnavailableException_initWithNSString_withNSException_(@"Cound not instantiate router - check constructor", ex1);
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:@"could not instantiate router" withNSException:(JavaLangException *) cast_chk([((JavaLangException *) nil_chk(ex)) getCause], [JavaLangException class])];
    @throw create_AndroidJavaxSipPeerUnavailableException_initWithNSString_withNSException_(@"Could not instantiate router", ex);
  }
  NSString *useRouterForAll = [configurationProperties getPropertyWithNSString:@"android.javax.sip.USE_ROUTER_FOR_ALL_URIS"];
  self->useRouterForAll_ = true;
  if (useRouterForAll != nil) {
    self->useRouterForAll_ = [@"true" java_equalsIgnoreCase:useRouterForAll];
  }
  NSString *extensionMethods = [configurationProperties getPropertyWithNSString:@"android.javax.sip.EXTENSION_METHODS"];
  if (extensionMethods != nil) {
    JavaUtilStringTokenizer *st = create_JavaUtilStringTokenizer_initWithNSString_(extensionMethods);
    while ([st hasMoreTokens]) {
      NSString *em = [st nextTokenWithNSString:@":"];
      if ([((NSString *) nil_chk(em)) java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_BYE] || [em java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_INVITE] || [em java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_SUBSCRIBE] || [em java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_NOTIFY] || [em java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_ACK] || [em java_equalsIgnoreCase:AndroidJavaxSipMessageRequest_OPTIONS]) @throw create_AndroidJavaxSipPeerUnavailableException_initWithNSString_(JreStrcat("$$", @"Bad extension method ", em));
      else [self addExtensionMethodWithNSString:em];
    }
  }
  NSString *clientAuthType = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.TLS_CLIENT_AUTH_TYPE"];
  if (clientAuthType != nil) {
    JreStrongAssign(&self->clientAuth_, AndroidGovNistJavaxSipStackClientAuthType_valueOfWithNSString_(clientAuthType));
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) infoWithNSString:JreStrcat("$$$", @"using ", clientAuthType, @" tls auth policy")];
  }
  NSString *keyStoreFile = [configurationProperties getPropertyWithNSString:@"javax.net.ssl.keyStore"];
  NSString *trustStoreFile = [configurationProperties getPropertyWithNSString:@"javax.net.ssl.trustStore"];
  if (keyStoreFile != nil) {
    if (trustStoreFile == nil) {
      trustStoreFile = keyStoreFile;
    }
    NSString *keyStorePassword = [configurationProperties getPropertyWithNSString:@"javax.net.ssl.keyStorePassword"];
    NSString *trustStorePassword = [configurationProperties getPropertyWithNSString:@"javax.net.ssl.trustStorePassword" withNSString:keyStorePassword];
    NSString *keyStoreType = [configurationProperties getPropertyWithNSString:@"javax.net.ssl.keyStoreType"];
    NSString *trustStoreType = [configurationProperties getPropertyWithNSString:@"javax.net.ssl.trustStoreType"];
    if (trustStoreType == nil) trustStoreType = keyStoreType;
    @try {
      JreStrongAssignAndConsume(&self->networkLayer_, new_AndroidGovNistCoreNetSslNetworkLayer_initWithAndroidGovNistJavaxSipSipStackImpl_withNSString_withNSString_withCharArray_withCharArray_withNSString_withNSString_(self, trustStoreFile, keyStoreFile, keyStorePassword != nil ? [keyStorePassword java_toCharArray] : nil, trustStorePassword != nil ? [trustStorePassword java_toCharArray] : nil, keyStoreType, trustStoreType));
    }
    @catch (JavaLangException *e1) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:@"could not instantiate SSL networking" withNSException:e1];
    }
  }
  self->isAutomaticDialogSupportEnabled_ = [((NSString *) nil_chk([configurationProperties getPropertyWithNSString:@"android.javax.sip.AUTOMATIC_DIALOG_SUPPORT" withNSString:@"on"])) java_equalsIgnoreCase:@"on"];
  self->isAutomaticDialogErrorHandlingEnabled_ = [((NSString *) nil_chk([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.AUTOMATIC_DIALOG_ERROR_HANDLING" withNSString:@"true"])) isEqual:[JreLoadStatic(JavaLangBoolean, TRUE) description]];
  if (self->isAutomaticDialogSupportEnabled_) {
    self->isAutomaticDialogErrorHandlingEnabled_ = true;
  }
  if ([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.MAX_LISTENER_RESPONSE_TIME"] != nil) {
    self->maxListenerResponseTime_ = JavaLangInteger_parseIntWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.MAX_LISTENER_RESPONSE_TIME"]);
    if (self->maxListenerResponseTime_ <= 0) @throw create_AndroidJavaxSipPeerUnavailableException_initWithNSString_(@"Bad configuration parameter android.gov.nist.javax.sip.MAX_LISTENER_RESPONSE_TIME : should be positive");
  }
  else {
    self->maxListenerResponseTime_ = -1;
  }
  if ([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.MAX_TX_LIFETIME_INVITE"] != nil) {
    self->maxTxLifetimeInvite_ = JavaLangInteger_parseIntWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.MAX_TX_LIFETIME_INVITE"]);
    if (AndroidGovNistJavaxSipSipStackImpl_super$_getMaxTxLifetimeInvite(self, @selector(getMaxTxLifetimeInvite)) <= 0) @throw create_AndroidJavaxSipPeerUnavailableException_initWithNSString_(@"Bad configuration parameter android.gov.nist.javax.sip.MAX_TX_LIFETIME_INVITE : should be positive");
  }
  else {
    self->maxTxLifetimeInvite_ = -1;
  }
  if ([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.MAX_TX_LIFETIME_NON_INVITE"] != nil) {
    self->maxTxLifetimeNonInvite_ = JavaLangInteger_parseIntWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.MAX_TX_LIFETIME_NON_INVITE"]);
    if (AndroidGovNistJavaxSipSipStackImpl_super$_getMaxTxLifetimeNonInvite(self, @selector(getMaxTxLifetimeNonInvite)) <= 0) @throw create_AndroidJavaxSipPeerUnavailableException_initWithNSString_(@"Bad configuration parameter android.gov.nist.javax.sip.MAX_TX_LIFETIME_NON_INVITE : should be positive");
  }
  else {
    self->maxTxLifetimeNonInvite_ = -1;
  }
  [self setDeliverTerminatedEventForAckWithBoolean:[((NSString *) nil_chk([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.DELIVER_TERMINATED_EVENT_FOR_ACK" withNSString:@"false"])) java_equalsIgnoreCase:@"true"]];
  AndroidGovNistJavaxSipSipStackImpl_super$_setDeliverUnsolicitedNotifyWithBoolean_(self, @selector(setDeliverUnsolicitedNotifyWithBoolean:), JavaLangBoolean_parseBooleanWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.DELIVER_UNSOLICITED_NOTIFY" withNSString:@"false"]));
  NSString *forkedSubscriptions = [configurationProperties getPropertyWithNSString:@"android.javax.sip.FORKABLE_EVENTS"];
  if (forkedSubscriptions != nil) {
    JavaUtilStringTokenizer *st = create_JavaUtilStringTokenizer_initWithNSString_(forkedSubscriptions);
    while ([st hasMoreTokens]) {
      NSString *nextEvent = [st nextToken];
      [((JavaUtilHashSet *) nil_chk(self->forkedEvents_)) addWithId:nextEvent];
    }
  }
  NSString *tlsPolicyPath = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.TLS_SECURITY_POLICY"];
  if (tlsPolicyPath == nil) {
    tlsPolicyPath = @"android.gov.nist.javax.sip.stack.DefaultTlsSecurityPolicy";
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) warnWithNSString:@"using default tls security policy"];
  }
  @try {
    IOSClass *tlsPolicyClass = IOSClass_forName_(tlsPolicyPath);
    IOSObjectArray *constructorArgs = [IOSObjectArray arrayWithLength:0 type:IOSClass_class_()];
    JavaLangReflectConstructor *cons = [((IOSClass *) nil_chk(tlsPolicyClass)) getConstructor:constructorArgs];
    IOSObjectArray *args = [IOSObjectArray arrayWithLength:0 type:NSObject_class_()];
    JreStrongAssign(&self->tlsSecurityPolicy_, (id<AndroidGovNistJavaxSipTlsSecurityPolicy>) cast_check([((JavaLangReflectConstructor *) nil_chk(cons)) newInstanceWithNSObjectArray:args], AndroidGovNistJavaxSipTlsSecurityPolicy_class_()));
  }
  @catch (JavaLangReflectInvocationTargetException *ex1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_withNSException_(JreStrcat("$$$", @"Cound not instantiate TLS security policy ", tlsPolicyPath, @"- check that it is present on the classpath and that there is a no-args constructor defined"), ex1);
  }
  @catch (JavaLangException *ex) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_withNSException_(JreStrcat("$$$", @"Cound not instantiate TLS security policy ", tlsPolicyPath, @"- check that it is present on the classpath and that there is a no-args constructor defined"), ex);
  }
  NSString *NETWORK_LAYER_KEY = @"android.gov.nist.javax.sip.NETWORK_LAYER";
  if ([configurationProperties containsKeyWithId:NETWORK_LAYER_KEY]) {
    NSString *path = [configurationProperties getPropertyWithNSString:NETWORK_LAYER_KEY];
    @try {
      IOSClass *clazz = IOSClass_forName_(path);
      JavaLangReflectConstructor *c = [((IOSClass *) nil_chk(clazz)) getConstructor:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
      JreStrongAssign(&self->networkLayer_, (id<AndroidGovNistCoreNetNetworkLayer>) cast_check([((JavaLangReflectConstructor *) nil_chk(c)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], AndroidGovNistCoreNetNetworkLayer_class_()));
      [((id<AndroidGovNistCoreNetNetworkLayer>) nil_chk(self->networkLayer_)) setSipStackWithAndroidGovNistJavaxSipSipStackImpl:self];
    }
    @catch (JavaLangException *e) {
      @throw create_AndroidJavaxSipPeerUnavailableException_initWithNSString_withNSException_(JreStrcat("$$", @"can't find or instantiate NetworkLayer implementation: ", path), e);
    }
  }
  NSString *ADDRESS_RESOLVER_KEY = @"android.gov.nist.javax.sip.ADDRESS_RESOLVER";
  if ([configurationProperties containsKeyWithId:ADDRESS_RESOLVER_KEY]) {
    NSString *path = [configurationProperties getPropertyWithNSString:ADDRESS_RESOLVER_KEY];
    @try {
      IOSClass *clazz = IOSClass_forName_(path);
      JavaLangReflectConstructor *c = [((IOSClass *) nil_chk(clazz)) getConstructor:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
      JreStrongAssign(&self->addressResolver_, (id<AndroidGovNistCoreNetAddressResolver>) cast_check([((JavaLangReflectConstructor *) nil_chk(c)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], AndroidGovNistCoreNetAddressResolver_class_()));
    }
    @catch (JavaLangException *e) {
      @throw create_AndroidJavaxSipPeerUnavailableException_initWithNSString_withNSException_(JreStrcat("$$", @"can't find or instantiate AddressResolver implementation: ", path), e);
    }
  }
  NSString *maxConnections = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.MAX_CONNECTIONS"];
  if (maxConnections != nil) {
    @try {
      self->maxConnections_ = [create_JavaLangInteger_initWithNSString_(maxConnections) intValue];
    }
    @catch (JavaLangNumberFormatException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:JreStrcat("$$", @"max connections - bad value ", [((JavaLangNumberFormatException *) nil_chk(ex)) getMessage])];
    }
  }
  NSString *threadPoolSize = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.THREAD_POOL_SIZE"];
  if (threadPoolSize != nil) {
    @try {
      self->threadPoolSize_ = [create_JavaLangInteger_initWithNSString_(threadPoolSize) intValue];
    }
    @catch (JavaLangNumberFormatException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:JreStrcat("$$", @"thread pool size - bad value ", [((JavaLangNumberFormatException *) nil_chk(ex)) getMessage])];
    }
  }
  jint congetstionControlTimeout = JavaLangInteger_parseIntWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.CONGESTION_CONTROL_TIMEOUT" withNSString:@"8000"]);
  AndroidGovNistJavaxSipSipStackImpl_super$_setStackCongestionControlTimeoutWithInt_(self, @selector(setStackCongestionControlTimeoutWithInt:), congetstionControlTimeout);
  NSString *tcpTreadPoolSize = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.TCP_POST_PARSING_THREAD_POOL_SIZE"];
  if (tcpTreadPoolSize != nil) {
    @try {
      jint threads = [create_JavaLangInteger_initWithNSString_(tcpTreadPoolSize) intValue];
      AndroidGovNistJavaxSipSipStackImpl_super$_setTcpPostParsingThreadPoolSizeWithInt_(self, @selector(setTcpPostParsingThreadPoolSizeWithInt:), threads);
      AndroidGovNistJavaxSipParserPostParseExecutorServices_setPostParseExcutorSizeWithAndroidGovNistJavaxSipSipStackImpl_withInt_withInt_(self, threads, congetstionControlTimeout);
    }
    @catch (JavaLangNumberFormatException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:JreStrcat("$$$$", @"TCP post-parse thread pool size - bad value ", tcpTreadPoolSize, @" : ", [((JavaLangNumberFormatException *) nil_chk(ex)) getMessage])];
    }
  }
  NSString *serverTransactionTableSize = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.MAX_SERVER_TRANSACTIONS"];
  if (serverTransactionTableSize != nil) {
    @try {
      self->serverTransactionTableHighwaterMark_ = [create_JavaLangInteger_initWithNSString_(serverTransactionTableSize) intValue];
      self->serverTransactionTableLowaterMark_ = self->serverTransactionTableHighwaterMark_ * 80 / 100;
    }
    @catch (JavaLangNumberFormatException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:JreStrcat("$$", @"transaction table size - bad value ", [((JavaLangNumberFormatException *) nil_chk(ex)) getMessage])];
    }
  }
  else {
    self->unlimitedServerTransactionTableSize_ = true;
  }
  NSString *clientTransactionTableSize = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.MAX_CLIENT_TRANSACTIONS"];
  if (clientTransactionTableSize != nil) {
    @try {
      self->clientTransactionTableHiwaterMark_ = [create_JavaLangInteger_initWithNSString_(clientTransactionTableSize) intValue];
      self->clientTransactionTableLowaterMark_ = self->clientTransactionTableLowaterMark_ * 80 / 100;
    }
    @catch (JavaLangNumberFormatException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:JreStrcat("$$", @"transaction table size - bad value ", [((JavaLangNumberFormatException *) nil_chk(ex)) getMessage])];
    }
  }
  else {
    self->unlimitedClientTransactionTableSize_ = true;
  }
  NSString *SECURITY_MANAGER_PROVIDER_KEY = @"android.gov.nist.javax.sip.SECURITY_MANAGER_PROVIDER";
  if ([configurationProperties containsKeyWithId:SECURITY_MANAGER_PROVIDER_KEY]) {
    NSString *path = [configurationProperties getPropertyWithNSString:SECURITY_MANAGER_PROVIDER_KEY];
    @try {
      IOSClass *clazz = IOSClass_forName_(path);
      JavaLangReflectConstructor *c = [((IOSClass *) nil_chk(clazz)) getConstructor:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
      JreStrongAssign(&self->securityManagerProvider_, (id<AndroidGovNistCoreNetSecurityManagerProvider>) cast_check([((JavaLangReflectConstructor *) nil_chk(c)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], AndroidGovNistCoreNetSecurityManagerProvider_class_()));
    }
    @catch (JavaLangException *e) {
      @throw create_AndroidJavaxSipPeerUnavailableException_initWithNSString_withNSException_(JreStrcat("$$", @"can't find or instantiate SecurityManagerProvider implementation: ", path), e);
    }
  }
  else JreStrongAssignAndConsume(&self->securityManagerProvider_, new_AndroidGovNistCoreNetDefaultSecurityManagerProvider_init());
  @try {
    [((id<AndroidGovNistCoreNetSecurityManagerProvider>) nil_chk(self->securityManagerProvider_)) init__WithJavaUtilProperties:configurationProperties];
  }
  @catch (JavaSecurityGeneralSecurityException *ex) {
    @throw create_AndroidJavaxSipPeerUnavailableException_initWithNSString_withNSException_(@"Cannot initialize security manager provider", ex);
  }
  @catch (JavaIoIOException *ex) {
    @throw create_AndroidJavaxSipPeerUnavailableException_initWithNSString_withNSException_(@"Cannot initialize security manager provider", ex);
  }
  self->cacheServerConnections_ = true;
  NSString *flag = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.CACHE_SERVER_CONNECTIONS"];
  if (flag != nil && [@"false" java_equalsIgnoreCase:[flag java_trim]]) {
    self->cacheServerConnections_ = false;
  }
  self->cacheClientConnections_ = true;
  NSString *cacheflag = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.CACHE_CLIENT_CONNECTIONS"];
  if (cacheflag != nil && [@"false" java_equalsIgnoreCase:[cacheflag java_trim]]) {
    self->cacheClientConnections_ = false;
  }
  NSString *readTimeout = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.READ_TIMEOUT"];
  if (readTimeout != nil) {
    @try {
      jint rt = JavaLangInteger_parseIntWithNSString_(readTimeout);
      if (rt >= 100) {
        self->readTimeout_ = rt;
      }
      else {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Value too low ", readTimeout)];
      }
    }
    @catch (JavaLangNumberFormatException *nfe) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:JreStrcat("$$", @"Bad read timeout ", readTimeout)];
    }
  }
  NSString *stunAddr = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.STUN_SERVER"];
  if (stunAddr != nil) [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) warnWithNSString:@"Ignoring obsolete property android.gov.nist.javax.sip.STUN_SERVER"];
  NSString *maxMsgSize = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.MAX_MESSAGE_SIZE"];
  @try {
    if (maxMsgSize != nil) {
      self->maxMessageSize_ = [create_JavaLangInteger_initWithNSString_(maxMsgSize) intValue];
      if (self->maxMessageSize_ < 4096) self->maxMessageSize_ = 4096;
    }
    else {
      self->maxMessageSize_ = 0;
    }
  }
  @catch (JavaLangNumberFormatException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:JreStrcat("$$", @"maxMessageSize - bad value ", [((JavaLangNumberFormatException *) nil_chk(ex)) getMessage])];
  }
  NSString *rel = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.REENTRANT_LISTENER"];
  self->reEntrantListener_ = (rel != nil && [@"true" java_equalsIgnoreCase:rel]);
  NSString *interval = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.THREAD_AUDIT_INTERVAL_IN_MILLISECS"];
  if (interval != nil) {
    @try {
      JreStrongAssignAndConsume(&self->threadAuditor_, new_AndroidGovNistCoreThreadAuditor_init());
      [((AndroidGovNistCoreThreadAuditor *) nil_chk([self getThreadAuditor])) setPingIntervalInMillisecsWithLong:[((JavaLangLong *) nil_chk(JavaLangLong_valueOfWithNSString_(interval))) longLongValue] / 2];
    }
    @catch (JavaLangNumberFormatException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:JreStrcat("$$$$", @"THREAD_AUDIT_INTERVAL_IN_MILLISECS - bad value [", interval, @"] ", [((JavaLangNumberFormatException *) nil_chk(ex)) getMessage])];
    }
  }
  [self setNon2XXAckPassedToListenerWithBoolean:[((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.PASS_INVITE_NON_2XX_ACK_TO_LISTENER" withNSString:@"false"]))) booleanValue]];
  self->generateTimeStampHeader_ = [((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.AUTO_GENERATE_TIMESTAMP" withNSString:@"false"]))) booleanValue];
  NSString *messageLogFactoryClasspath = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.LOG_FACTORY"];
  if (messageLogFactoryClasspath != nil) {
    @try {
      IOSClass *clazz = IOSClass_forName_(messageLogFactoryClasspath);
      JavaLangReflectConstructor *c = [((IOSClass *) nil_chk(clazz)) getConstructor:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
      JreStrongAssign(&self->logRecordFactory_, (id<AndroidGovNistJavaxSipLogRecordFactory>) cast_check([((JavaLangReflectConstructor *) nil_chk(c)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], AndroidGovNistJavaxSipLogRecordFactory_class_()));
    }
    @catch (JavaLangException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:@"Bad configuration value for LOG_FACTORY -- using default logger"];
      JreStrongAssignAndConsume(&self->logRecordFactory_, new_AndroidGovNistJavaxSipStackDefaultMessageLogFactory_init());
    }
  }
  else {
    JreStrongAssignAndConsume(&self->logRecordFactory_, new_AndroidGovNistJavaxSipStackDefaultMessageLogFactory_init());
  }
  jboolean computeContentLength = [((NSString *) nil_chk([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.COMPUTE_CONTENT_LENGTH_FROM_MESSAGE_BODY" withNSString:@"false"])) java_equalsIgnoreCase:@"true"];
  AndroidGovNistJavaxSipParserStringMsgParser_setComputeContentLengthFromMessageWithBoolean_(computeContentLength);
  NSString *tlsClientProtocols = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.TLS_CLIENT_PROTOCOLS"];
  if (tlsClientProtocols != nil) {
    JavaUtilStringTokenizer *st = create_JavaUtilStringTokenizer_initWithNSString_withNSString_(tlsClientProtocols, @"\" ,");
    IOSObjectArray *protocols = [IOSObjectArray arrayWithLength:[st countTokens] type:NSString_class_()];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) debugWithNSString:@"TLS Client Protocols = "];
    jint i = 0;
    while ([st hasMoreTokens]) {
      IOSObjectArray_Set(protocols, i, [st nextToken]);
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) debugWithNSString:JreStrcat("$$", @"TLS Client Protocol = ", IOSObjectArray_Get(protocols, i))];
      i++;
    }
    JreStrongAssign(&self->enabledProtocols_, protocols);
  }
  self->rfc2543Supported_ = [((NSString *) nil_chk([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.RFC_2543_SUPPORT_ENABLED" withNSString:@"true"])) java_equalsIgnoreCase:@"true"];
  AndroidGovNistJavaxSipSipStackImpl_super$_setPatchWebSocketHeadersWithJavaLangBoolean_(self, @selector(setPatchWebSocketHeadersWithJavaLangBoolean:), JavaLangBoolean_valueOfWithBoolean_(JavaLangBoolean_parseBooleanWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.PATCH_SIP_WEBSOCKETS_HEADERS" withNSString:@"true"])));
  AndroidGovNistJavaxSipSipStackImpl_super$_setPatchRportWithJavaLangBoolean_(self, @selector(setPatchRportWithJavaLangBoolean:), JavaLangBoolean_valueOfWithBoolean_(JavaLangBoolean_parseBooleanWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.ALWAYS_ADD_RPORT" withNSString:@"false"])));
  self->cancelClientTransactionChecked_ = [((NSString *) nil_chk([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.CANCEL_CLIENT_TRANSACTION_CHECKED" withNSString:@"true"])) java_equalsIgnoreCase:@"true"];
  self->logStackTraceOnMessageSend_ = [((NSString *) nil_chk([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.LOG_STACK_TRACE_ON_MESSAGE_SEND" withNSString:@"false"])) java_equalsIgnoreCase:@"true"];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) debugWithNSString:JreStrcat("$@", @"created Sip stack. Properties = ", configurationProperties)];
  JavaIoInputStream *in = [[self java_getClass] getResourceAsStream:@"/TIMESTAMP"];
  if (in != nil) {
    JavaIoBufferedReader *streamReader = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_(in));
    @try {
      NSString *buildTimeStamp = [streamReader readLine];
      if (in != nil) {
        [in close];
      }
    }
    @catch (JavaIoIOException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:@"Could not open build timestamp."];
    }
  }
  NSString *bufferSize = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.RECEIVE_UDP_BUFFER_SIZE" withNSString:[((JavaLangInteger *) nil_chk(AndroidGovNistJavaxSipSipStackImpl_MAX_DATAGRAM_SIZE)) description]];
  jint bufferSizeInteger = [create_JavaLangInteger_initWithNSString_(bufferSize) intValue];
  AndroidGovNistJavaxSipSipStackImpl_super$_setReceiveUdpBufferSizeWithInt_(self, @selector(setReceiveUdpBufferSizeWithInt:), bufferSizeInteger);
  bufferSize = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.SEND_UDP_BUFFER_SIZE" withNSString:[AndroidGovNistJavaxSipSipStackImpl_MAX_DATAGRAM_SIZE description]];
  bufferSizeInteger = [create_JavaLangInteger_initWithNSString_(bufferSize) intValue];
  AndroidGovNistJavaxSipSipStackImpl_super$_setSendUdpBufferSizeWithInt_(self, @selector(setSendUdpBufferSizeWithInt:), bufferSizeInteger);
  AndroidGovNistJavaxSipSipStackImpl_super$_setConnectionLingerTimerWithInt_(self, @selector(setConnectionLingerTimerWithInt:), JavaLangInteger_parseIntWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.LINGER_TIMER" withNSString:@"8"]));
  self->isBackToBackUserAgent_ = JavaLangBoolean_parseBooleanWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.IS_BACK_TO_BACK_USER_AGENT" withNSString:[((JavaLangBoolean *) nil_chk(JreLoadStatic(JavaLangBoolean, FALSE))) description]]);
  self->checkBranchId_ = JavaLangBoolean_parseBooleanWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.REJECT_STRAY_RESPONSES" withNSString:[JreLoadStatic(JavaLangBoolean, FALSE) description]]);
  self->isDialogTerminatedEventDeliveredForNullDialog_ = (JavaLangBoolean_parseBooleanWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.DELIVER_TERMINATED_EVENT_FOR_NULL_DIALOG" withNSString:[JreLoadStatic(JavaLangBoolean, FALSE) description]]));
  self->maxForkTime_ = JavaLangInteger_parseIntWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.MAX_FORK_TIME_SECONDS" withNSString:@"0"]);
  self->earlyDialogTimeout_ = JavaLangInteger_parseIntWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.EARLY_DIALOG_TIMEOUT_SECONDS" withNSString:@"180"]);
  self->minKeepAliveInterval_ = JavaLangInteger_parseIntWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.MIN_KEEPALIVE_TIME_SECONDS" withNSString:@"-1"]);
  self->deliverRetransmittedAckToListener_ = JavaLangBoolean_parseBooleanWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.DELIVER_RETRANSMITTED_ACK_TO_LISTENER" withNSString:@"false"]);
  self->dialogTimeoutFactor_ = JavaLangInteger_parseIntWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.DIALOG_TIMEOUT_FACTOR" withNSString:@"64"]);
  NSString *messageParserFactoryName = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.MESSAGE_PARSER_FACTORY" withNSString:[AndroidGovNistJavaxSipParserStringMsgParserFactory_class_() getName]];
  @try {
    JreStrongAssign(&self->messageParserFactory_, (id<AndroidGovNistJavaxSipParserMessageParserFactory>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(messageParserFactoryName))) newInstance], AndroidGovNistJavaxSipParserMessageParserFactory_class_()));
  }
  @catch (JavaLangException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:@"Bad configuration value for android.gov.nist.javax.sip.MESSAGE_PARSER_FACTORY" withNSException:e];
  }
  NSString *messageProcessorFactoryName = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.MESSAGE_PROCESSOR_FACTORY" withNSString:[AndroidGovNistJavaxSipStackOIOMessageProcessorFactory_class_() getName]];
  @try {
    JreStrongAssign(&self->messageProcessorFactory_, (id<AndroidGovNistJavaxSipStackMessageProcessorFactory>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(messageProcessorFactoryName))) newInstance], AndroidGovNistJavaxSipStackMessageProcessorFactory_class_()));
  }
  @catch (JavaLangException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:@"Bad configuration value for android.gov.nist.javax.sip.MESSAGE_PROCESSOR_FACTORY" withNSException:e];
  }
  NSString *maxIdleTimeString = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.NIO_MAX_SOCKET_IDLE_TIME" withNSString:@"7200000"];
  @try {
    self->nioSocketMaxIdleTime_ = JavaLangLong_parseLongWithNSString_(maxIdleTimeString);
  }
  @catch (JavaLangException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:JreStrcat("$$", @"Bad configuration value for android.gov.nist.javax.sip.NIO_MAX_SOCKET_IDLE_TIME=", maxIdleTimeString) withNSException:e];
  }
  NSString *defaultTimerName = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.TIMER_CLASS_NAME" withNSString:[AndroidGovNistJavaxSipStackTimersDefaultSipTimer_class_() getName]];
  @try {
    [self setTimerWithAndroidGovNistJavaxSipStackTimersSipTimer:(id<AndroidGovNistJavaxSipStackTimersSipTimer>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(defaultTimerName))) newInstance], AndroidGovNistJavaxSipStackTimersSipTimer_class_())];
    [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([self getTimer])) startWithAndroidGovNistJavaxSipSipStackImpl:self withJavaUtilProperties:configurationProperties];
    if ([self getThreadAuditor] != nil && [((AndroidGovNistCoreThreadAuditor *) nil_chk([self getThreadAuditor])) isEnabled]) {
      [((id<AndroidGovNistJavaxSipStackTimersSipTimer>) nil_chk([self getTimer])) scheduleWithAndroidGovNistJavaxSipStackSIPStackTimerTask:create_AndroidGovNistJavaxSipStackSIPTransactionStack_PingTimer_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_withAndroidGovNistCoreThreadAuditor_ThreadHandle_(self, nil) withLong:0];
    }
  }
  @catch (JavaLangException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:@"Bad configuration value for android.gov.nist.javax.sip.TIMER_CLASS_NAME" withNSException:e];
  }
  jboolean aggressiveCleanup = JavaLangBoolean_parseBooleanWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.AGGRESSIVE_CLEANUP" withNSString:[JreLoadStatic(JavaLangBoolean, FALSE) description]]);
  if (aggressiveCleanup) {
    [self setReleaseReferencesStrategyWithAndroidGovNistJavaxSipReleaseReferencesStrategy:JreLoadEnum(AndroidGovNistJavaxSipReleaseReferencesStrategy, Normal)];
  }
  NSString *releaseReferencesStrategyString = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.RELEASE_REFERENCES_STRATEGY"];
  if (releaseReferencesStrategyString != nil) {
    [self setReleaseReferencesStrategyWithAndroidGovNistJavaxSipReleaseReferencesStrategy:AndroidGovNistJavaxSipReleaseReferencesStrategy_valueOfWithNSString_(releaseReferencesStrategyString)];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) debugWithNSString:JreStrcat("$@", @"Using following release references strategy ", [self getReleaseReferencesStrategy])];
  }
  NSString *valveClassName = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.SIP_MESSAGE_VALVE" withNSString:nil];
  if (valveClassName != nil && ![valveClassName isEqual:@""]) {
    @try {
      JreStrongAssign(&self->sipMessageValve_, (id<AndroidGovNistJavaxSipStackSIPMessageValve>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(valveClassName))) newInstance], AndroidGovNistJavaxSipStackSIPMessageValve_class_()));
      id<AndroidJavaxSipSipStack> thisStack = self;
      @try {
        JavaLangThread_sleepWithLong_(100);
        [((id<AndroidGovNistJavaxSipStackSIPMessageValve>) nil_chk(self->sipMessageValve_)) init__WithAndroidJavaxSipSipStack:thisStack];
      }
      @catch (JavaLangException *e) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:@"Error intializing SIPMessageValve" withNSException:e];
      }
    }
    @catch (JavaLangException *e) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:@"Bad configuration value for android.gov.nist.javax.sip.SIP_MESSAGE_VALVE" withNSException:e];
    }
  }
  NSString *interceptorClassName = [configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.SIP_EVENT_INTERCEPTOR" withNSString:nil];
  if (interceptorClassName != nil && ![interceptorClassName isEqual:@""]) {
    @try {
      JreStrongAssign(&self->sipEventInterceptor_, (id<AndroidGovNistJavaxSipStackSIPEventInterceptor>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(interceptorClassName))) newInstance], AndroidGovNistJavaxSipStackSIPEventInterceptor_class_()));
      id<AndroidJavaxSipSipStack> thisStack = self;
      [create_AndroidGovNistJavaxSipSipStackImpl_1_initWithAndroidGovNistJavaxSipSipStackImpl_withAndroidJavaxSipSipStack_(self, thisStack) start];
    }
    @catch (JavaLangException *e) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipSipStackImpl_logger)) errorWithNSString:@"Bad configuration value for android.gov.nist.javax.sip.SIP_EVENT_INTERCEPTOR" withNSException:e];
    }
  }
  jboolean sslRenegotiationEnabled = JavaLangBoolean_parseBooleanWithNSString_([configurationProperties getPropertyWithNSString:@"android.gov.nist.javax.sip.SSL_RENEGOTIATION_ENABLED" withNSString:@"true"]);
  [self setSslRenegotiationEnabledWithBoolean:sslRenegotiationEnabled];
}

AndroidGovNistJavaxSipSipStackImpl *new_AndroidGovNistJavaxSipSipStackImpl_initWithJavaUtilProperties_(JavaUtilProperties *configurationProperties) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipSipStackImpl, initWithJavaUtilProperties_, configurationProperties)
}

AndroidGovNistJavaxSipSipStackImpl *create_AndroidGovNistJavaxSipSipStackImpl_initWithJavaUtilProperties_(JavaUtilProperties *configurationProperties) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipSipStackImpl, initWithJavaUtilProperties_, configurationProperties)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipSipStackImpl)

@implementation AndroidGovNistJavaxSipSipStackImpl_1

- (instancetype)initWithAndroidGovNistJavaxSipSipStackImpl:(AndroidGovNistJavaxSipSipStackImpl *)outer$
                               withAndroidJavaxSipSipStack:(id<AndroidJavaxSipSipStack>)capture$0 {
  AndroidGovNistJavaxSipSipStackImpl_1_initWithAndroidGovNistJavaxSipSipStackImpl_withAndroidJavaxSipSipStack_(self, outer$, capture$0);
  return self;
}

- (void)run {
  @try {
    JavaLangThread_sleepWithLong_(100);
    [((id<AndroidGovNistJavaxSipStackSIPEventInterceptor>) nil_chk(this$0_->sipEventInterceptor_)) init__WithAndroidJavaxSipSipStack:val$thisStack_];
  }
  @catch (JavaLangException *e) {
    [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistJavaxSipSipStackImpl, logger))) errorWithNSString:@"Error intializing SIPEventInterceptor" withNSException:e];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$thisStack_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipSipStackImpl:withAndroidJavaxSipSipStack:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipSipStackImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$thisStack_", "LAndroidJavaxSipSipStack;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipSipStackImpl;", "initWithJavaUtilProperties:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipSipStackImpl_1 = { "", "android.gov.nist.javax.sip", ptrTable, methods, fields, 7, 0x8008, 2, 2, 0, -1, 1, -1, -1 };
  return &_AndroidGovNistJavaxSipSipStackImpl_1;
}

@end

void AndroidGovNistJavaxSipSipStackImpl_1_initWithAndroidGovNistJavaxSipSipStackImpl_withAndroidJavaxSipSipStack_(AndroidGovNistJavaxSipSipStackImpl_1 *self, AndroidGovNistJavaxSipSipStackImpl *outer$, id<AndroidJavaxSipSipStack> capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$thisStack_, capture$0);
  JavaLangThread_init(self);
}

AndroidGovNistJavaxSipSipStackImpl_1 *new_AndroidGovNistJavaxSipSipStackImpl_1_initWithAndroidGovNistJavaxSipSipStackImpl_withAndroidJavaxSipSipStack_(AndroidGovNistJavaxSipSipStackImpl *outer$, id<AndroidJavaxSipSipStack> capture$0) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipSipStackImpl_1, initWithAndroidGovNistJavaxSipSipStackImpl_withAndroidJavaxSipSipStack_, outer$, capture$0)
}

AndroidGovNistJavaxSipSipStackImpl_1 *create_AndroidGovNistJavaxSipSipStackImpl_1_initWithAndroidGovNistJavaxSipSipStackImpl_withAndroidJavaxSipSipStack_(AndroidGovNistJavaxSipSipStackImpl *outer$, id<AndroidJavaxSipSipStack> capture$0) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipSipStackImpl_1, initWithAndroidGovNistJavaxSipSipStackImpl_withAndroidJavaxSipSipStack_, outer$, capture$0)
}
