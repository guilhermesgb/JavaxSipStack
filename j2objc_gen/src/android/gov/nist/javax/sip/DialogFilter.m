//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/DialogFilter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/Host.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/javax/sip/ClientTransactionExt.h"
#include "android/gov/nist/javax/sip/DialogFilter.h"
#include "android/gov/nist/javax/sip/ListeningPointImpl.h"
#include "android/gov/nist/javax/sip/RequestEventExt.h"
#include "android/gov/nist/javax/sip/ResponseEventExt.h"
#include "android/gov/nist/javax/sip/SipProviderImpl.h"
#include "android/gov/nist/javax/sip/Utils.h"
#include "android/gov/nist/javax/sip/address/SipUri.h"
#include "android/gov/nist/javax/sip/header/Contact.h"
#include "android/gov/nist/javax/sip/header/Event.h"
#include "android/gov/nist/javax/sip/header/RetryAfter.h"
#include "android/gov/nist/javax/sip/header/Route.h"
#include "android/gov/nist/javax/sip/header/RouteList.h"
#include "android/gov/nist/javax/sip/message/MessageFactoryImpl.h"
#include "android/gov/nist/javax/sip/message/SIPRequest.h"
#include "android/gov/nist/javax/sip/message/SIPResponse.h"
#include "android/gov/nist/javax/sip/stack/MessageChannel.h"
#include "android/gov/nist/javax/sip/stack/SIPClientTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPDialog.h"
#include "android/gov/nist/javax/sip/stack/SIPServerTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPTransaction.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/javax/sip/ClientTransaction.h"
#include "android/javax/sip/Dialog.h"
#include "android/javax/sip/DialogState.h"
#include "android/javax/sip/ListeningPoint.h"
#include "android/javax/sip/ObjectInUseException.h"
#include "android/javax/sip/RequestEvent.h"
#include "android/javax/sip/ServerTransaction.h"
#include "android/javax/sip/SipException.h"
#include "android/javax/sip/SipListener.h"
#include "android/javax/sip/TransactionState.h"
#include "android/javax/sip/address/Address.h"
#include "android/javax/sip/address/URI.h"
#include "android/javax/sip/header/CSeqHeader.h"
#include "android/javax/sip/header/EventHeader.h"
#include "android/javax/sip/header/FromHeader.h"
#include "android/javax/sip/header/Header.h"
#include "android/javax/sip/header/ReferToHeader.h"
#include "android/javax/sip/header/RouteHeader.h"
#include "android/javax/sip/header/ServerHeader.h"
#include "android/javax/sip/header/ToHeader.h"
#include "android/javax/sip/message/Request.h"
#include "android/javax/sip/message/Response.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/net/InetAddress.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface AndroidGovNistJavaxSipDialogFilter () {
 @public
  AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack_;
}

- (void)sendRequestPendingResponseWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest
                          withAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)transaction;

- (void)sendBadRequestResponseWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest
                      withAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)transaction
                                                             withNSString:(NSString *)reasonPhrase;

- (void)sendCallOrTransactionDoesNotExistResponseWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest
                                         withAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)transaction;

- (void)sendLoopDetectedResponseWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest
                        withAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)transaction;

- (void)sendTryingResponseWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest
                  withAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)transaction;

- (void)sendServerInternalErrorResponseWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest
                               withAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)transaction;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipDialogFilter, sipStack_, AndroidGovNistJavaxSipStackSIPTransactionStack *)

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipDialogFilter_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipDialogFilter_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipDialogFilter_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipDialogFilter, logger, id<OrgSlf4jLogger>)

__attribute__((unused)) static void AndroidGovNistJavaxSipDialogFilter_sendRequestPendingResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(AndroidGovNistJavaxSipDialogFilter *self, AndroidGovNistJavaxSipMessageSIPRequest *sipRequest, id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction);

__attribute__((unused)) static void AndroidGovNistJavaxSipDialogFilter_sendBadRequestResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_withNSString_(AndroidGovNistJavaxSipDialogFilter *self, AndroidGovNistJavaxSipMessageSIPRequest *sipRequest, id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction, NSString *reasonPhrase);

__attribute__((unused)) static void AndroidGovNistJavaxSipDialogFilter_sendCallOrTransactionDoesNotExistResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(AndroidGovNistJavaxSipDialogFilter *self, AndroidGovNistJavaxSipMessageSIPRequest *sipRequest, id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction);

__attribute__((unused)) static void AndroidGovNistJavaxSipDialogFilter_sendLoopDetectedResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(AndroidGovNistJavaxSipDialogFilter *self, AndroidGovNistJavaxSipMessageSIPRequest *sipRequest, id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction);

__attribute__((unused)) static void AndroidGovNistJavaxSipDialogFilter_sendTryingResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(AndroidGovNistJavaxSipDialogFilter *self, AndroidGovNistJavaxSipMessageSIPRequest *sipRequest, id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction);

__attribute__((unused)) static void AndroidGovNistJavaxSipDialogFilter_sendServerInternalErrorResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(AndroidGovNistJavaxSipDialogFilter *self, AndroidGovNistJavaxSipMessageSIPRequest *sipRequest, id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipDialogFilter)

@implementation AndroidGovNistJavaxSipDialogFilter

- (instancetype)initWithAndroidGovNistJavaxSipStackSIPTransactionStack:(AndroidGovNistJavaxSipStackSIPTransactionStack *)sipStack {
  AndroidGovNistJavaxSipDialogFilter_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(self, sipStack);
  return self;
}

- (void)sendRequestPendingResponseWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest
                          withAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)transaction {
  AndroidGovNistJavaxSipDialogFilter_sendRequestPendingResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, sipRequest, transaction);
}

- (void)sendBadRequestResponseWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest
                      withAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)transaction
                                                             withNSString:(NSString *)reasonPhrase {
  AndroidGovNistJavaxSipDialogFilter_sendBadRequestResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_withNSString_(self, sipRequest, transaction, reasonPhrase);
}

- (void)sendCallOrTransactionDoesNotExistResponseWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest
                                         withAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)transaction {
  AndroidGovNistJavaxSipDialogFilter_sendCallOrTransactionDoesNotExistResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, sipRequest, transaction);
}

- (void)sendLoopDetectedResponseWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest
                        withAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)transaction {
  AndroidGovNistJavaxSipDialogFilter_sendLoopDetectedResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, sipRequest, transaction);
}

- (void)sendTryingResponseWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest
                  withAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)transaction {
  AndroidGovNistJavaxSipDialogFilter_sendTryingResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, sipRequest, transaction);
}

- (void)sendServerInternalErrorResponseWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest
                               withAndroidGovNistJavaxSipStackSIPServerTransaction:(id<AndroidGovNistJavaxSipStackSIPServerTransaction>)transaction {
  AndroidGovNistJavaxSipDialogFilter_sendServerInternalErrorResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, sipRequest, transaction);
}

- (void)processRequestWithAndroidGovNistJavaxSipMessageSIPRequest:(AndroidGovNistJavaxSipMessageSIPRequest *)sipRequest
                    withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)incomingMessageChannel {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@$@$$CI", @"PROCESSING INCOMING REQUEST ", sipRequest, @" transactionChannel = ", transactionChannel_, @" listening point = ", [((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(listeningPoint_)) getIPAddress], ':', [((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(listeningPoint_)) getPort])];
  if (listeningPoint_ == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Dropping message: No listening point registered!"];
    return;
  }
  AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack = [((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk(transactionChannel_)) getSIPStack];
  AndroidGovNistJavaxSipSipProviderImpl *sipProvider = [((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(listeningPoint_)) getProvider];
  if (sipProvider == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"No provider - dropping !!"];
    return;
  }
  if (sipStack == nil) AndroidGovNistCoreInternalErrorHandler_handleExceptionWithNSString_(@"Egads! no sip stack!");
  id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction = (id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check(self->transactionChannel_, AndroidGovNistJavaxSipStackSIPServerTransaction_class_());
  if (transaction != nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@", @"transaction state = ", [transaction getState])];
  }
  NSString *dialogId = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) getDialogIdWithBoolean:true];
  AndroidGovNistJavaxSipStackSIPDialog *dialog = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack)) getDialogWithNSString:dialogId];
  if (dialog != nil && sipProvider != [dialog getSipProvider]) {
    AndroidGovNistJavaxSipHeaderContact *contact = [dialog getMyContactHeader];
    if (contact != nil) {
      AndroidGovNistJavaxSipAddressSipUri *contactUri = (AndroidGovNistJavaxSipAddressSipUri *) cast_chk(([((id<AndroidJavaxSipAddressAddress>) nil_chk([contact getAddress])) getURI]), [AndroidGovNistJavaxSipAddressSipUri class]);
      NSString *ipAddress = [((AndroidGovNistJavaxSipAddressSipUri *) nil_chk(contactUri)) getHost];
      jint contactPort = [contactUri getPort];
      NSString *contactTransport = [contactUri getTransportParam];
      if (contactTransport == nil) contactTransport = @"udp";
      if (contactPort == -1) {
        if ([contactTransport isEqual:@"udp"] || [contactTransport isEqual:@"tcp"]) contactPort = 5060;
        else contactPort = 5061;
      }
      if (ipAddress != nil && (![ipAddress isEqual:[((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(listeningPoint_)) getIPAddress]] || contactPort != [((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(listeningPoint_)) getPort])) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$I$I", @"nulling dialog -- listening point mismatch!  ", contactPort, @"  lp port = ", [((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(listeningPoint_)) getPort])];
        dialog = nil;
      }
    }
  }
  if ([sipProvider isDialogErrorsAutomaticallyHandled] && [sipRequest getToTag] == nil) {
    if ([sipStack findMergedTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest]) {
      AndroidGovNistJavaxSipDialogFilter_sendLoopDetectedResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, sipRequest, transaction);
      return;
    }
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$$", @"dialogId = ", dialogId)];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@", @"dialog = ", dialog)];
  if ([sipRequest getHeaderWithNSString:AndroidJavaxSipHeaderRouteHeader_NAME] != nil && [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(transaction)) getDialog] != nil) {
    AndroidGovNistJavaxSipHeaderRouteList *routes = [sipRequest getRouteHeaders];
    AndroidGovNistJavaxSipHeaderRoute *route = (AndroidGovNistJavaxSipHeaderRoute *) cast_chk([((AndroidGovNistJavaxSipHeaderRouteList *) nil_chk(routes)) getFirst], [AndroidGovNistJavaxSipHeaderRoute class]);
    AndroidGovNistJavaxSipAddressSipUri *uri = (AndroidGovNistJavaxSipAddressSipUri *) cast_chk([((id<AndroidJavaxSipAddressAddress>) nil_chk([((AndroidGovNistJavaxSipHeaderRoute *) nil_chk(route)) getAddress])) getURI], [AndroidGovNistJavaxSipAddressSipUri class]);
    AndroidGovNistCoreHostPort *hostPort = [((AndroidGovNistJavaxSipAddressSipUri *) nil_chk(uri)) getHostPort];
    jint port;
    if ([((AndroidGovNistCoreHostPort *) nil_chk(hostPort)) hasPort]) {
      port = [hostPort getPort];
    }
    else {
      if ([((NSString *) nil_chk([((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(listeningPoint_)) getTransport])) java_equalsIgnoreCase:AndroidJavaxSipListeningPoint_TLS]) port = 5061;
      else port = 5060;
    }
    NSString *host = [((AndroidGovNistCoreHost *) nil_chk([hostPort getHost])) encode];
    if (([((NSString *) nil_chk(host)) isEqual:[((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(listeningPoint_)) getIPAddress]] || [host java_equalsIgnoreCase:[((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(listeningPoint_)) getSentBy]]) && port == [((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(listeningPoint_)) getPort]) {
      if ([routes size] == 1) [sipRequest removeHeaderWithNSString:AndroidJavaxSipHeaderRouteHeader_NAME];
      else [routes removeFirst];
    }
  }
  NSString *sipRequestMethod = [sipRequest getMethod];
  if ([((NSString *) nil_chk(sipRequestMethod)) isEqual:AndroidJavaxSipMessageRequest_REFER] && dialog != nil && [sipProvider isDialogErrorsAutomaticallyHandled]) {
    id<AndroidJavaxSipHeaderReferToHeader> sipHeader = (id<AndroidJavaxSipHeaderReferToHeader>) cast_check([sipRequest getHeaderWithNSString:AndroidJavaxSipHeaderReferToHeader_NAME], AndroidJavaxSipHeaderReferToHeader_class_());
    if (sipHeader == nil) {
      AndroidGovNistJavaxSipDialogFilter_sendBadRequestResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_withNSString_(self, sipRequest, transaction, @"Refer-To header is missing");
      return;
    }
    id<AndroidGovNistJavaxSipStackSIPTransaction> lastTransaction = [(dialog) getLastTransaction];
    if (lastTransaction != nil && [sipProvider isDialogErrorsAutomaticallyHandled]) {
      NSString *lastTransactionMethod = [lastTransaction getMethod];
      if ([AndroidGovNistJavaxSipStackSIPServerTransaction_class_() isInstance:lastTransaction]) {
        if (([lastTransaction getInternalState] == AndroidJavaxSipTransactionState__PROCEEDING || [lastTransaction getInternalState] == AndroidJavaxSipTransactionState__TRYING) && [((NSString *) nil_chk(lastTransactionMethod)) isEqual:AndroidJavaxSipMessageRequest_INVITE]) {
          AndroidGovNistJavaxSipDialogFilter_sendRequestPendingResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, sipRequest, transaction);
          return;
        }
      }
      else if ([AndroidGovNistJavaxSipStackSIPClientTransaction_class_() isInstance:lastTransaction]) {
        if ([((NSString *) nil_chk(lastTransactionMethod)) isEqual:AndroidJavaxSipMessageRequest_INVITE] && [lastTransaction getInternalState] != AndroidJavaxSipTransactionState__TERMINATED && [lastTransaction getInternalState] != AndroidJavaxSipTransactionState__COMPLETED) {
          AndroidGovNistJavaxSipDialogFilter_sendRequestPendingResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, sipRequest, transaction);
          return;
        }
      }
    }
  }
  else if ([sipRequestMethod isEqual:AndroidJavaxSipMessageRequest_UPDATE]) {
    if ([sipProvider isAutomaticDialogSupportEnabled] && dialog == nil) {
      AndroidGovNistJavaxSipDialogFilter_sendCallOrTransactionDoesNotExistResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, sipRequest, transaction);
      return;
    }
  }
  else if ([sipRequestMethod isEqual:AndroidJavaxSipMessageRequest_ACK]) {
    if (transaction != nil && [transaction isInviteTransaction]) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Processing ACK for INVITE Tx "];
    }
    else {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@", @"Processing ACK for dialog ", dialog)];
      if (dialog == nil) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$$$", @"Dialog does not exist ", [sipRequest getFirstLine], @" isServerTransaction = true")];
        id<AndroidGovNistJavaxSipStackSIPServerTransaction> st = [sipStack getRetransmissionAlertTransactionWithNSString:dialogId];
        if (st != nil && [st isRetransmissionAlertEnabled]) {
          [st disableRetransmissionAlerts];
        }
        id<AndroidGovNistJavaxSipStackSIPServerTransaction> ackTransaction = [sipStack findTransactionPendingAckWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
        if (ackTransaction != nil) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Found Tx pending ACK"];
          @try {
            [ackTransaction setAckSeen];
            [sipStack removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:ackTransaction];
            [sipStack removeTransactionPendingAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:ackTransaction];
          }
          @catch (JavaLangException *ex) {
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"Problem terminating transaction" withNSException:ex];
          }
          return;
        }
      }
      else {
        if (![dialog handleAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction]) {
          if (![dialog isSequenceNumberValidation]) {
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$$$$", @"Dialog exists with loose dialog validation ", [sipRequest getFirstLine], @" isServerTransaction = true dialog = ", [dialog getDialogId])];
            id<AndroidGovNistJavaxSipStackSIPServerTransaction> st = [sipStack getRetransmissionAlertTransactionWithNSString:dialogId];
            if (st != nil && [st isRetransmissionAlertEnabled]) {
              [st disableRetransmissionAlerts];
            }
            id<AndroidGovNistJavaxSipStackSIPServerTransaction> ackTransaction = [sipStack findTransactionPendingAckWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
            if (ackTransaction != nil) {
              [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Found Tx pending ACK"];
              @try {
                [ackTransaction setAckSeen];
                [sipStack removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:ackTransaction];
                [sipStack removeTransactionPendingAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:ackTransaction];
              }
              @catch (JavaLangException *ex) {
                [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"Problem terminating transaction" withNSException:ex];
              }
            }
          }
          else {
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Dropping ACK - cannot find a transaction or dialog"];
            id<AndroidGovNistJavaxSipStackSIPServerTransaction> ackTransaction = [sipStack findTransactionPendingAckWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
            if (ackTransaction != nil) {
              [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Found Tx pending ACK"];
              @try {
                [ackTransaction setAckSeen];
                [sipStack removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:ackTransaction];
                [sipStack removeTransactionPendingAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:ackTransaction];
              }
              @catch (JavaLangException *ex) {
                [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"Problem terminating transaction" withNSException:ex];
              }
            }
            if ((![sipStack isDeliverRetransmittedAckToListener]) || (ackTransaction != nil && ![sipStack isNon2XXAckPassedToListener])) {
              return;
            }
          }
        }
        else {
          [dialog addTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
          [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(transaction)) passToListener];
          [dialog addRouteWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
          [transaction setDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog withNSString:dialogId];
          if ([((NSString *) nil_chk([sipRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_INVITE] && [sipProvider isDialogErrorsAutomaticallyHandled]) {
            [sipStack putInMergeTableWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction withAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
          }
          if ([sipStack isDeliverTerminatedEventForAck]) {
            @try {
              [sipStack addTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
              [transaction scheduleAckRemoval];
            }
            @catch (JavaIoIOException *ex) {
            }
          }
          else {
            [transaction setMappedWithBoolean:true];
          }
        }
      }
    }
  }
  else if ([sipRequestMethod isEqual:AndroidJavaxSipMessageRequest_PRACK]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@", @"Processing PRACK for dialog ", dialog)];
    if (dialog == nil && [sipProvider isAutomaticDialogSupportEnabled]) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$$$", @"Dialog does not exist ", [sipRequest getFirstLine], @" isServerTransaction = true")];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Sending 481 for PRACK - automatic dialog support is enabled -- cant find dialog!"];
      AndroidGovNistJavaxSipMessageSIPResponse *notExist = [sipRequest createResponseWithInt:AndroidJavaxSipMessageResponse_CALL_OR_TRANSACTION_DOES_NOT_EXIST];
      @try {
        [sipProvider sendResponseWithAndroidJavaxSipMessageResponse:notExist];
      }
      @catch (AndroidJavaxSipSipException *e) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"error sending response" withNSException:e];
      }
      if (transaction != nil) {
        [sipStack removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
        [transaction releaseSem];
      }
      return;
    }
    else if (dialog != nil) {
      if (![dialog handlePrackWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest]) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Dropping out of sequence PRACK "];
        if (transaction != nil) {
          [sipStack removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
          [transaction releaseSem];
        }
        return;
      }
      else {
        @try {
          [sipStack addTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
          [dialog addTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
          [dialog addRouteWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
          [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(transaction)) setDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog withNSString:dialogId];
        }
        @catch (JavaLangException *ex) {
          AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
        }
      }
    }
    else {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Processing PRACK without a DIALOG -- this must be a proxy element"];
    }
  }
  else if ([sipRequestMethod isEqual:AndroidJavaxSipMessageRequest_BYE]) {
    if (dialog != nil && ![dialog isRequestConsumableWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest]) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$JCJ", @"Dropping out of sequence BYE ", [dialog getRemoteSeqNumber], ' ', [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipRequest getCSeq])) getSeqNumber])];
      if ([dialog getRemoteSeqNumber] > [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipRequest getCSeq])) getSeqNumber]) {
        AndroidGovNistJavaxSipDialogFilter_sendServerInternalErrorResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, sipRequest, transaction);
      }
      else if ([((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(transaction)) getInternalState] == AndroidJavaxSipTransactionState__PROCEEDING) {
        AndroidGovNistJavaxSipDialogFilter_sendTryingResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, sipRequest, transaction);
      }
      [sipStack removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
      return;
    }
    else if (dialog == nil && [sipProvider isAutomaticDialogSupportEnabled]) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"dropping request -- automatic dialog support enabled and dialog does not exist!"];
      AndroidGovNistJavaxSipDialogFilter_sendCallOrTransactionDoesNotExistResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, sipRequest, transaction);
      if (transaction != nil) {
        [sipStack removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
        [transaction releaseSem];
        transaction = nil;
      }
      return;
    }
    if (transaction != nil && dialog != nil) {
      @try {
        if (sipProvider == [dialog getSipProvider]) {
          [sipStack addTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
          [dialog addTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
          [transaction setDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog withNSString:dialogId];
        }
      }
      @catch (JavaIoIOException *ex) {
        AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
      }
    }
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@$Z", @"BYE Tx = ", transaction, @" isMapped =", [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(transaction)) isTransactionMapped])];
  }
  else if ([sipRequestMethod isEqual:AndroidJavaxSipMessageRequest_CANCEL]) {
    id<AndroidGovNistJavaxSipStackSIPServerTransaction> st = (id<AndroidGovNistJavaxSipStackSIPServerTransaction>) cast_check([sipStack findCancelTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest withBoolean:true], AndroidGovNistJavaxSipStackSIPServerTransaction_class_());
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@$@$Z", @"Got a CANCEL, InviteServerTx = ", st, @" cancel Server Tx ID = ", transaction, @" isMapped = ", [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(transaction)) isTransactionMapped])];
    if ([((NSString *) nil_chk([sipRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_CANCEL]) {
      if (st != nil && [st getInternalState] == AndroidJavaxSipTransactionState__TERMINATED) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Too late to cancel Transaction"];
        @try {
          [transaction sendResponseWithAndroidJavaxSipMessageResponse:[sipRequest createResponseWithInt:AndroidJavaxSipMessageResponse_OK]];
        }
        @catch (JavaLangException *ex) {
          if ([((JavaLangException *) nil_chk(ex)) getCause] != nil && [[ex getCause] isKindOfClass:[JavaIoIOException class]]) {
            [st raiseIOExceptionEvent];
          }
        }
        return;
      }
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@", @"Cancel transaction = ", st)];
    }
    if (transaction != nil && st != nil && [st getDialog] != nil) {
      [transaction setDialogWithAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *) cast_chk([st getDialog], [AndroidGovNistJavaxSipStackSIPDialog class]) withNSString:dialogId];
      dialog = (AndroidGovNistJavaxSipStackSIPDialog *) cast_chk([st getDialog], [AndroidGovNistJavaxSipStackSIPDialog class]);
    }
    else if (st == nil && [sipProvider isAutomaticDialogSupportEnabled] && transaction != nil) {
      AndroidGovNistJavaxSipMessageSIPResponse *response = [sipRequest createResponseWithInt:AndroidJavaxSipMessageResponse_CALL_OR_TRANSACTION_DOES_NOT_EXIST];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"dropping request -- automatic dialog support enabled and INVITE ST does not exist!"];
      @try {
        [sipProvider sendResponseWithAndroidJavaxSipMessageResponse:response];
      }
      @catch (AndroidJavaxSipSipException *ex) {
        AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
      }
      if (transaction != nil) {
        [sipStack removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
        [transaction releaseSem];
      }
      return;
    }
    if (st != nil) {
      [st setPassToListener];
      @try {
        if (transaction != nil) {
          [sipStack addTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
          [transaction setPassToListener];
          [transaction setInviteTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:st];
          [st acquireSem];
        }
      }
      @catch (JavaLangException *ex) {
        AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
      }
    }
  }
  else if ([sipRequestMethod isEqual:AndroidJavaxSipMessageRequest_INVITE]) {
    id<AndroidGovNistJavaxSipStackSIPTransaction> lastTransaction = dialog == nil ? nil : [dialog getInviteTransaction];
    if (dialog != nil && transaction != nil && lastTransaction != nil && [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipRequest getCSeq])) getSeqNumber] > [lastTransaction getCSeq] && [AndroidGovNistJavaxSipStackSIPServerTransaction_class_() isInstance:lastTransaction] && [sipProvider isDialogErrorsAutomaticallyHandled] && [dialog isSequenceNumberValidation] && [lastTransaction isInviteTransaction] && [lastTransaction getInternalState] != AndroidJavaxSipTransactionState__COMPLETED && [lastTransaction getInternalState] != AndroidJavaxSipTransactionState__TERMINATED && [lastTransaction getInternalState] != AndroidJavaxSipTransactionState__CONFIRMED) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Sending 500 response for out of sequence message"];
      AndroidGovNistJavaxSipDialogFilter_sendServerInternalErrorResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, sipRequest, transaction);
      return;
    }
    lastTransaction = (dialog == nil ? nil : [dialog getLastTransaction]);
    if (dialog != nil && [sipProvider isDialogErrorsAutomaticallyHandled] && lastTransaction != nil && [lastTransaction isInviteTransaction] && [AndroidJavaxSipClientTransaction_class_() isInstance:lastTransaction] && [lastTransaction getState] != JreLoadStatic(AndroidJavaxSipTransactionState, COMPLETED) && [lastTransaction getState] != JreLoadStatic(AndroidJavaxSipTransactionState, TERMINATED)) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@$", @"DialogFilter::processRequest:lastTransaction.getState(): ", [lastTransaction getState], @" Sending 491 response for clientTx.")];
      AndroidGovNistJavaxSipDialogFilter_sendRequestPendingResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, sipRequest, transaction);
      return;
    }
    if (dialog != nil && lastTransaction != nil && [sipProvider isDialogErrorsAutomaticallyHandled] && [lastTransaction isInviteTransaction] && [AndroidJavaxSipServerTransaction_class_() isInstance:lastTransaction] && [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipRequest getCSeq])) getSeqNumber] > [lastTransaction getCSeq] && ([lastTransaction getInternalState] == AndroidJavaxSipTransactionState__PROCEEDING || [lastTransaction getInternalState] == AndroidJavaxSipTransactionState__TRYING)) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Sending 491 response. Last transaction is in PROCEEDING state."];
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@$@", @"last Transaction state = ", lastTransaction, @" state ", [lastTransaction getState])];
      AndroidGovNistJavaxSipDialogFilter_sendRequestPendingResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, sipRequest, transaction);
      return;
    }
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@$@", @"CHECK FOR OUT OF SEQ MESSAGE ", dialog, @" transaction ", transaction)];
  if (dialog != nil && transaction != nil && ![sipRequestMethod isEqual:AndroidJavaxSipMessageRequest_BYE] && ![sipRequestMethod isEqual:AndroidJavaxSipMessageRequest_CANCEL] && ![sipRequestMethod isEqual:AndroidJavaxSipMessageRequest_ACK] && ![sipRequestMethod isEqual:AndroidJavaxSipMessageRequest_PRACK]) {
    if (![dialog isRequestConsumableWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest]) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$JC@", @"Dropping out of sequence message ", [dialog getRemoteSeqNumber], ' ', [sipRequest getCSeq])];
      if ([dialog getRemoteSeqNumber] > [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipRequest getCSeq])) getSeqNumber] && [sipProvider isDialogErrorsAutomaticallyHandled]) {
        AndroidGovNistJavaxSipDialogFilter_sendServerInternalErrorResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(self, sipRequest, transaction);
      }
      else {
        @try {
          [transaction terminate];
        }
        @catch (AndroidJavaxSipObjectInUseException *e) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"Unexpected exception" withNSException:e];
        }
      }
      return;
    }
    @try {
      if (sipProvider == [dialog getSipProvider]) {
        [sipStack addTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
        if (![dialog addTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction]) {
          return;
        }
        [dialog addRouteWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
        [transaction setDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog withNSString:dialogId];
      }
    }
    @catch (JavaIoIOException *ex) {
      [transaction raiseIOExceptionEvent];
      [sipStack removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
      return;
    }
  }
  AndroidJavaxSipRequestEvent *sipEvent;
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$$Z", [sipRequest getMethod], @" transaction.isMapped = ", [((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(transaction)) isTransactionMapped])];
  if (dialog == nil && [sipRequestMethod isEqual:AndroidJavaxSipMessageRequest_NOTIFY]) {
    id<AndroidGovNistJavaxSipStackSIPClientTransaction> pendingSubscribeClientTx = [sipStack findSubscribeTransactionWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest withAndroidGovNistJavaxSipListeningPointImpl:listeningPoint_];
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@", @"PROCESSING NOTIFY  DIALOG == null ", pendingSubscribeClientTx)];
    if ([sipProvider isAutomaticDialogSupportEnabled] && pendingSubscribeClientTx == nil && ![sipStack isDeliverUnsolicitedNotify]) {
      @try {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Could not find Subscription for Notify Tx."];
        id<AndroidJavaxSipMessageResponse> errorResponse = [sipRequest createResponseWithInt:AndroidJavaxSipMessageResponse_CALL_OR_TRANSACTION_DOES_NOT_EXIST];
        [((id<AndroidJavaxSipMessageResponse>) nil_chk(errorResponse)) setReasonPhraseWithNSString:@"Subscription does not exist"];
        [sipProvider sendResponseWithAndroidJavaxSipMessageResponse:errorResponse];
        return;
      }
      @catch (JavaLangException *ex) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"Exception while sending error response statelessly" withNSException:ex];
        return;
      }
    }
    if (pendingSubscribeClientTx != nil) {
      [transaction setPendingSubscribeWithAndroidGovNistJavaxSipStackSIPClientTransaction:pendingSubscribeClientTx];
      AndroidGovNistJavaxSipStackSIPDialog *subscriptionDialog = [pendingSubscribeClientTx getDefaultDialog];
      if (subscriptionDialog == nil || [subscriptionDialog getDialogId] == nil || ![((NSString *) nil_chk([subscriptionDialog getDialogId])) isEqual:dialogId]) {
        if (subscriptionDialog != nil && [subscriptionDialog getDialogId] == nil) {
          [subscriptionDialog setDialogIdWithNSString:dialogId];
        }
        else {
          subscriptionDialog = [pendingSubscribeClientTx getDialogWithNSString:dialogId];
        }
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@", @"PROCESSING NOTIFY Subscribe DIALOG ", subscriptionDialog)];
        if (subscriptionDialog == nil && ([sipProvider isAutomaticDialogSupportEnabled] || [pendingSubscribeClientTx getDefaultDialog] != nil)) {
          AndroidGovNistJavaxSipHeaderEvent *event = (AndroidGovNistJavaxSipHeaderEvent *) cast_chk([sipRequest getHeaderWithNSString:AndroidJavaxSipHeaderEventHeader_NAME], [AndroidGovNistJavaxSipHeaderEvent class]);
          if ([sipStack isEventForkedWithNSString:[((AndroidGovNistJavaxSipHeaderEvent *) nil_chk(event)) getEventType]]) {
            subscriptionDialog = [sipStack createDialogWithAndroidGovNistJavaxSipStackSIPClientTransaction:pendingSubscribeClientTx withAndroidGovNistJavaxSipStackSIPTransaction:transaction];
          }
        }
        if (subscriptionDialog != nil) {
          [transaction setDialogWithAndroidGovNistJavaxSipStackSIPDialog:subscriptionDialog withNSString:dialogId];
          if ([subscriptionDialog getState] != JreLoadStatic(AndroidJavaxSipDialogState, CONFIRMED)) {
            [subscriptionDialog setPendingRouteUpdateOn202ResponseWithAndroidGovNistJavaxSipMessageSIPRequest:sipRequest];
          }
          [subscriptionDialog setStateWithInt:[((AndroidJavaxSipDialogState *) nil_chk(JreLoadStatic(AndroidJavaxSipDialogState, CONFIRMED))) getValue]];
          [sipStack putDialogWithAndroidGovNistJavaxSipStackSIPDialog:subscriptionDialog];
          [pendingSubscribeClientTx setDialogWithAndroidGovNistJavaxSipStackSIPDialog:subscriptionDialog withNSString:dialogId];
          if (![transaction isTransactionMapped]) {
            [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) mapTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
            [transaction setPassToListener];
            @try {
              [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) addTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
            }
            @catch (JavaLangException *ex) {
            }
          }
        }
      }
      else {
        [transaction setDialogWithAndroidGovNistJavaxSipStackSIPDialog:subscriptionDialog withNSString:dialogId];
        dialog = subscriptionDialog;
        if (![transaction isTransactionMapped]) {
          [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) mapTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
          [transaction setPassToListener];
          @try {
            [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) addTransactionWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
          }
          @catch (JavaLangException *ex) {
          }
        }
        [sipStack putDialogWithAndroidGovNistJavaxSipStackSIPDialog:subscriptionDialog];
        if (pendingSubscribeClientTx != nil) {
          [subscriptionDialog addTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:pendingSubscribeClientTx];
          [pendingSubscribeClientTx setDialogWithAndroidGovNistJavaxSipStackSIPDialog:subscriptionDialog withNSString:dialogId];
        }
      }
      if (transaction != nil && [(transaction) isTransactionMapped]) {
        sipEvent = create_AndroidGovNistJavaxSipRequestEventExt_initWithId_withAndroidJavaxSipServerTransaction_withAndroidJavaxSipDialog_withAndroidJavaxSipMessageRequest_(sipProvider, transaction, subscriptionDialog, sipRequest);
      }
      else {
        sipEvent = create_AndroidGovNistJavaxSipRequestEventExt_initWithId_withAndroidJavaxSipServerTransaction_withAndroidJavaxSipDialog_withAndroidJavaxSipMessageRequest_(sipProvider, nil, subscriptionDialog, sipRequest);
      }
    }
    else {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"could not find subscribe tx"];
      sipEvent = create_AndroidGovNistJavaxSipRequestEventExt_initWithId_withAndroidJavaxSipServerTransaction_withAndroidJavaxSipDialog_withAndroidJavaxSipMessageRequest_(sipProvider, nil, nil, sipRequest);
    }
  }
  else {
    if (transaction != nil && ([(transaction) isTransactionMapped])) {
      sipEvent = create_AndroidGovNistJavaxSipRequestEventExt_initWithId_withAndroidJavaxSipServerTransaction_withAndroidJavaxSipDialog_withAndroidJavaxSipMessageRequest_(sipProvider, transaction, dialog, sipRequest);
    }
    else {
      sipEvent = create_AndroidGovNistJavaxSipRequestEventExt_initWithId_withAndroidJavaxSipServerTransaction_withAndroidJavaxSipDialog_withAndroidJavaxSipMessageRequest_(sipProvider, nil, dialog, sipRequest);
    }
  }
  [((AndroidGovNistJavaxSipRequestEventExt *) cast_chk(sipEvent, [AndroidGovNistJavaxSipRequestEventExt class])) setRemoteIpAddressWithNSString:[((JavaNetInetAddress *) nil_chk([sipRequest getRemoteAddress])) getHostAddress]];
  [((AndroidGovNistJavaxSipRequestEventExt *) cast_chk(sipEvent, [AndroidGovNistJavaxSipRequestEventExt class])) setRemotePortWithInt:[sipRequest getRemotePort]];
  [sipProvider handleEventWithJavaUtilEventObject:sipEvent withAndroidGovNistJavaxSipStackSIPTransaction:transaction];
}

- (void)processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)response
                      withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)incomingMessageChannel
                           withAndroidGovNistJavaxSipStackSIPDialog:(AndroidGovNistJavaxSipStackSIPDialog *)dialog {
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@", @"PROCESSING INCOMING RESPONSE", [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(response)) encodeMessageWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])];
  if (listeningPoint_ == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"Dropping message: No listening point registered!"];
    return;
  }
  if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) checkBranchId] && ![((AndroidGovNistJavaxSipUtils *) nil_chk(AndroidGovNistJavaxSipUtils_getInstance())) responseBelongsToUsWithAndroidGovNistJavaxSipMessageSIPResponse:response]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"Dropping response - topmost VIA header does not originate from this stack"];
    return;
  }
  AndroidGovNistJavaxSipSipProviderImpl *sipProvider = [((AndroidGovNistJavaxSipListeningPointImpl *) nil_chk(listeningPoint_)) getProvider];
  if (sipProvider == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"Dropping message:  no provider"];
    return;
  }
  if ([sipProvider getSipListener] == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"No listener -- dropping response!"];
    return;
  }
  id<AndroidGovNistJavaxSipStackSIPClientTransaction> transaction = (id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(self->transactionChannel_, AndroidGovNistJavaxSipStackSIPClientTransaction_class_());
  AndroidGovNistJavaxSipStackSIPTransactionStack *sipStackImpl = sipProvider->sipStack_;
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@", @"Transaction = ", transaction)];
  if (transaction == nil) {
    if (dialog != nil) {
      if ([response getStatusCode] / 100 != 2) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Response is not a final response and dialog is found for response -- dropping response!"];
        return;
      }
      else if ([dialog getState] == JreLoadStatic(AndroidJavaxSipDialogState, TERMINATED)) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Dialog is terminated -- dropping response!"];
        return;
      }
      else {
        jboolean ackAlreadySent = false;
        if ([dialog isAckSeen] && [dialog getLastAckSent] != nil) {
          if ([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk([dialog getLastAckSent])) getCSeq])) getSeqNumber] == [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([response getCSeq])) getSeqNumber]) {
            ackAlreadySent = true;
          }
        }
        if (ackAlreadySent && [((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([response getCSeq])) getMethod])) isEqual:[dialog getMethod]]) {
          @try {
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Retransmission of OK detected: Resending last ACK"];
            [dialog resendAck];
            return;
          }
          @catch (AndroidJavaxSipSipException *ex) {
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"could not resend ack" withNSException:ex];
          }
        }
      }
    }
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@", @"could not find tx, handling statelessly Dialog =  ", dialog)];
    AndroidGovNistJavaxSipResponseEventExt *sipEvent = create_AndroidGovNistJavaxSipResponseEventExt_initWithId_withAndroidGovNistJavaxSipClientTransactionExt_withAndroidJavaxSipDialog_withAndroidJavaxSipMessageResponse_(sipProvider, transaction, dialog, response);
    if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMaxForkTime] != 0 && AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([response getCSeqHeader])) getMethod])) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$$", @"Trying to find forked Transaction for forked id ", [response getForkId])];
      id<AndroidGovNistJavaxSipStackSIPClientTransaction> forked = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getForkedTransactionWithNSString:[response getForkId]];
      if (dialog != nil && forked != nil) {
        [dialog checkRetransmissionForForkingWithAndroidGovNistJavaxSipMessageSIPResponse:response];
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@$@", @"original dialog ", [forked getDefaultDialog], @" forked dialog ", dialog)];
        if ([forked getDefaultDialog] != nil && ![dialog isEqual:[forked getDefaultDialog]]) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$$$@$@$@", @"forkedId= ", [response getForkId], @" forked dialog ", dialog, @" original tx ", forked, @" original dialog ", [forked getDefaultDialog])];
          [sipEvent setOriginalTransactionWithAndroidGovNistJavaxSipClientTransactionExt:forked];
          [sipEvent setForkedResponseWithBoolean:true];
          if (transaction == nil && [dialog getState] == JreLoadStatic(AndroidJavaxSipDialogState, EARLY) && [response getStatusCode] >= 200 && [response getStatusCode] < 300) {
            [dialog setLastResponseWithAndroidGovNistJavaxSipStackSIPTransaction:transaction withAndroidGovNistJavaxSipMessageSIPResponse:response];
          }
        }
      }
    }
    [sipEvent setRetransmissionWithBoolean:[response isRetransmission]];
    [sipEvent setRemoteIpAddressWithNSString:[((JavaNetInetAddress *) nil_chk([response getRemoteAddress])) getHostAddress]];
    [sipEvent setRemotePortWithInt:[response getRemotePort]];
    [sipProvider handleEventWithJavaUtilEventObject:sipEvent withAndroidGovNistJavaxSipStackSIPTransaction:transaction];
    return;
  }
  AndroidGovNistJavaxSipResponseEventExt *responseEvent = create_AndroidGovNistJavaxSipResponseEventExt_initWithId_withAndroidGovNistJavaxSipClientTransactionExt_withAndroidJavaxSipDialog_withAndroidJavaxSipMessageResponse_(sipProvider, transaction, dialog, response);
  if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMaxForkTime] != 0 && AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([response getCSeqHeader])) getMethod])) {
    id<AndroidGovNistJavaxSipStackSIPClientTransaction> forked = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getForkedTransactionWithNSString:[response getForkId]];
    if (dialog != nil && forked != nil) {
      [dialog checkRetransmissionForForkingWithAndroidGovNistJavaxSipMessageSIPResponse:response];
      if ([forked getDefaultDialog] != nil && ![dialog isEqual:[forked getDefaultDialog]]) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$$$@$@$@", @"forkedId= ", [response getForkId], @" forked dialog ", dialog, @" original tx ", forked, @" original dialog ", [forked getDefaultDialog])];
        [responseEvent setOriginalTransactionWithAndroidGovNistJavaxSipClientTransactionExt:forked];
        [responseEvent setForkedResponseWithBoolean:true];
      }
    }
  }
  if (dialog != nil && [response getStatusCode] != 100) {
    [dialog setLastResponseWithAndroidGovNistJavaxSipStackSIPTransaction:transaction withAndroidGovNistJavaxSipMessageSIPResponse:response];
    [transaction setDialogWithAndroidGovNistJavaxSipStackSIPDialog:dialog withNSString:[dialog getDialogId]];
  }
  [responseEvent setRetransmissionWithBoolean:[response isRetransmission]];
  [responseEvent setRemoteIpAddressWithNSString:[((JavaNetInetAddress *) nil_chk([response getRemoteAddress])) getHostAddress]];
  [responseEvent setRemotePortWithInt:[response getRemotePort]];
  [sipProvider handleEventWithJavaUtilEventObject:responseEvent withAndroidGovNistJavaxSipStackSIPTransaction:transaction];
}

- (NSString *)getProcessingInfo {
  return nil;
}

- (void)processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)sipResponse
                      withAndroidGovNistJavaxSipStackMessageChannel:(AndroidGovNistJavaxSipStackMessageChannel *)incomingChannel {
  NSString *dialogID = [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) getDialogIdWithBoolean:false];
  AndroidGovNistJavaxSipStackSIPDialog *sipDialog = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getDialogWithNSString:dialogID];
  NSString *method = [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipResponse getCSeq])) getMethod];
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@", @"PROCESSING INCOMING RESPONSE: ", [sipResponse encodeMessageWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])];
  if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) checkBranchId] && ![((AndroidGovNistJavaxSipUtils *) nil_chk(AndroidGovNistJavaxSipUtils_getInstance())) responseBelongsToUsWithAndroidGovNistJavaxSipMessageSIPResponse:sipResponse]) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"Detected stray response -- dropping"];
    return;
  }
  if (listeningPoint_ == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Dropping message: No listening point registered!"];
    return;
  }
  AndroidGovNistJavaxSipSipProviderImpl *sipProvider = [listeningPoint_ getProvider];
  if (sipProvider == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Dropping message:  no provider"];
    return;
  }
  if ([sipProvider getSipListener] == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Dropping message:  no sipListener registered!"];
    return;
  }
  id<AndroidGovNistJavaxSipStackSIPClientTransaction> transaction = (id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(self->transactionChannel_, AndroidGovNistJavaxSipStackSIPClientTransaction_class_());
  if (sipDialog == nil && transaction != nil) {
    sipDialog = [transaction getDialogWithNSString:dialogID];
    if (sipDialog != nil && [sipDialog getState] == JreLoadStatic(AndroidJavaxSipDialogState, TERMINATED)) sipDialog = nil;
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@$@", @"Transaction = ", transaction, @" sipDialog = ", sipDialog)];
  if (self->transactionChannel_ != nil) {
    NSString *originalFrom = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([self->transactionChannel_ getRequest], [AndroidGovNistJavaxSipMessageSIPRequest class])))) getFromTag];
    if (originalFrom == nil ^ [((id<AndroidJavaxSipHeaderFromHeader>) nil_chk([sipResponse getFrom])) getTag] == nil) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"From tag mismatch -- dropping response"];
      return;
    }
    if (originalFrom != nil && ![originalFrom java_equalsIgnoreCase:[((id<AndroidJavaxSipHeaderFromHeader>) nil_chk([sipResponse getFrom])) getTag]]) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"From tag mismatch -- dropping response"];
      return;
    }
  }
  jboolean createDialog = false;
  if (AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_(method) && [sipResponse getStatusCode] != 100 && [((id<AndroidJavaxSipHeaderFromHeader>) nil_chk([sipResponse getFrom])) getTag] != nil && [((id<AndroidJavaxSipHeaderToHeader>) nil_chk([sipResponse getTo])) getTag] != nil && sipDialog == nil) {
    if ([sipProvider isAutomaticDialogSupportEnabled]) {
      createDialog = true;
    }
    else {
      id<AndroidGovNistJavaxSipClientTransactionExt> originalTx = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getForkedTransactionWithNSString:[sipResponse getForkId]];
      if (originalTx != nil && [originalTx getDefaultDialog] != nil) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@", @"Need to create dialog for response = ", sipResponse)];
        createDialog = true;
      }
    }
    if (createDialog) {
      if (self->transactionChannel_ != nil) {
        if (sipDialog == nil) {
          [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@", @"Creating dialog for forked response ", sipResponse)];
          sipDialog = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) createDialogWithAndroidGovNistJavaxSipStackSIPClientTransaction:(id<AndroidGovNistJavaxSipStackSIPClientTransaction>) cast_check(self->transactionChannel_, AndroidGovNistJavaxSipStackSIPClientTransaction_class_()) withAndroidGovNistJavaxSipMessageSIPResponse:sipResponse];
          [((id<AndroidGovNistJavaxSipStackSIPTransaction>) nil_chk(self->transactionChannel_)) setDialogWithAndroidGovNistJavaxSipStackSIPDialog:sipDialog withNSString:[sipResponse getDialogIdWithBoolean:false]];
        }
      }
      else {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$@", @"Creating dialog for forked response ", sipResponse)];
        sipDialog = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) createDialogWithAndroidGovNistJavaxSipSipProviderImpl:sipProvider withAndroidGovNistJavaxSipMessageSIPResponse:sipResponse];
      }
    }
  }
  else {
    if (sipDialog != nil && transaction == nil && [sipDialog getState] != JreLoadStatic(AndroidJavaxSipDialogState, TERMINATED)) {
      if ([sipResponse getStatusCode] / 100 != 2) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$I", @"status code != 200 ; statusCode = ", [sipResponse getStatusCode])];
      }
      else if ([sipDialog getState] == JreLoadStatic(AndroidJavaxSipDialogState, TERMINATED)) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Dialog is terminated -- dropping response!"];
        if ([sipResponse getStatusCode] / 100 == 2 && [((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipResponse getCSeq])) getMethod])) isEqual:AndroidJavaxSipMessageRequest_INVITE]) {
          @try {
            id<AndroidJavaxSipMessageRequest> ackRequest = [sipDialog createAckWithLong:[((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipResponse getCSeq])) getSeqNumber]];
            [sipDialog sendAckWithAndroidJavaxSipMessageRequest:ackRequest];
          }
          @catch (JavaLangException *ex) {
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"Error creating ack" withNSException:ex];
          }
        }
        return;
      }
      else {
        jboolean ackAlreadySent = false;
        if ([sipDialog getLastAckSent] != nil) {
          if ([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk([sipDialog getLastAckSent])) getCSeq])) getSeqNumber] == [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipResponse getCSeq])) getSeqNumber] && [((NSString *) nil_chk([sipResponse getDialogIdWithBoolean:false])) isEqual:[((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk([sipDialog getLastAckSent])) getDialogIdWithBoolean:false]]) {
            ackAlreadySent = true;
          }
        }
        if (ackAlreadySent && [((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipResponse getCSeq])) getMethod])) isEqual:[sipDialog getMethod]]) {
          @try {
            [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"resending ACK"];
            [sipDialog resendAck];
            return;
          }
          @catch (AndroidJavaxSipSipException *ex) {
          }
        }
      }
    }
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$$$", @"sending response ", [sipResponse description], @" to TU for processing ")];
  AndroidGovNistJavaxSipResponseEventExt *responseEvent = create_AndroidGovNistJavaxSipResponseEventExt_initWithId_withAndroidGovNistJavaxSipClientTransactionExt_withAndroidJavaxSipDialog_withAndroidJavaxSipMessageResponse_(sipProvider, transaction, sipDialog, sipResponse);
  [responseEvent setRemoteIpAddressWithNSString:[((JavaNetInetAddress *) nil_chk([sipResponse getRemoteAddress])) getHostAddress]];
  [responseEvent setRemotePortWithInt:[sipResponse getRemotePort]];
  if ([((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(sipStack_)) getMaxForkTime] != 0 && AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([sipResponse getCSeqHeader])) getMethod])) {
    id<AndroidGovNistJavaxSipClientTransactionExt> originalTx = [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) getForkedTransactionWithNSString:[sipResponse getForkId]];
    if (sipDialog != nil && originalTx != nil) {
      [sipDialog checkRetransmissionForForkingWithAndroidGovNistJavaxSipMessageSIPResponse:sipResponse];
      if ([originalTx getDefaultDialog] != nil && ![sipDialog isEqual:[originalTx getDefaultDialog]]) {
        [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:JreStrcat("$$$@$@$@", @"forkedId= ", [sipResponse getForkId], @" forked dialog ", sipDialog, @" original tx ", originalTx, @" original dialog ", [originalTx getDefaultDialog])];
        [responseEvent setOriginalTransactionWithAndroidGovNistJavaxSipClientTransactionExt:originalTx];
        [responseEvent setForkedResponseWithBoolean:true];
      }
    }
  }
  if (sipDialog != nil && [sipResponse getStatusCode] != 100 && [((id<AndroidJavaxSipHeaderToHeader>) nil_chk([sipResponse getTo])) getTag] != nil) {
    [sipDialog setLastResponseWithAndroidGovNistJavaxSipStackSIPTransaction:transaction withAndroidGovNistJavaxSipMessageSIPResponse:sipResponse];
  }
  [responseEvent setRetransmissionWithBoolean:[sipResponse isRetransmission]];
  [responseEvent setRemoteIpAddressWithNSString:[((JavaNetInetAddress *) nil_chk([sipResponse getRemoteAddress])) getHostAddress]];
  [sipProvider handleEventWithJavaUtilEventObject:responseEvent withAndroidGovNistJavaxSipStackSIPTransaction:transaction];
}

- (void)dealloc {
  RELEASE_(transactionChannel_);
  RELEASE_(listeningPoint_);
  RELEASE_(sipStack_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipStackSIPTransactionStack:);
  methods[1].selector = @selector(sendRequestPendingResponseWithAndroidGovNistJavaxSipMessageSIPRequest:withAndroidGovNistJavaxSipStackSIPServerTransaction:);
  methods[2].selector = @selector(sendBadRequestResponseWithAndroidGovNistJavaxSipMessageSIPRequest:withAndroidGovNistJavaxSipStackSIPServerTransaction:withNSString:);
  methods[3].selector = @selector(sendCallOrTransactionDoesNotExistResponseWithAndroidGovNistJavaxSipMessageSIPRequest:withAndroidGovNistJavaxSipStackSIPServerTransaction:);
  methods[4].selector = @selector(sendLoopDetectedResponseWithAndroidGovNistJavaxSipMessageSIPRequest:withAndroidGovNistJavaxSipStackSIPServerTransaction:);
  methods[5].selector = @selector(sendTryingResponseWithAndroidGovNistJavaxSipMessageSIPRequest:withAndroidGovNistJavaxSipStackSIPServerTransaction:);
  methods[6].selector = @selector(sendServerInternalErrorResponseWithAndroidGovNistJavaxSipMessageSIPRequest:withAndroidGovNistJavaxSipStackSIPServerTransaction:);
  methods[7].selector = @selector(processRequestWithAndroidGovNistJavaxSipMessageSIPRequest:withAndroidGovNistJavaxSipStackMessageChannel:);
  methods[8].selector = @selector(processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:withAndroidGovNistJavaxSipStackMessageChannel:withAndroidGovNistJavaxSipStackSIPDialog:);
  methods[9].selector = @selector(getProcessingInfo);
  methods[10].selector = @selector(processResponseWithAndroidGovNistJavaxSipMessageSIPResponse:withAndroidGovNistJavaxSipStackMessageChannel:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 14, -1, -1 },
    { "transactionChannel_", "LAndroidGovNistJavaxSipStackSIPTransaction;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "listeningPoint_", "LAndroidGovNistJavaxSipListeningPointImpl;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sipStack_", "LAndroidGovNistJavaxSipStackSIPTransactionStack;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipStackSIPTransactionStack;", "sendRequestPendingResponse", "LAndroidGovNistJavaxSipMessageSIPRequest;LAndroidGovNistJavaxSipStackSIPServerTransaction;", "sendBadRequestResponse", "LAndroidGovNistJavaxSipMessageSIPRequest;LAndroidGovNistJavaxSipStackSIPServerTransaction;LNSString;", "sendCallOrTransactionDoesNotExistResponse", "sendLoopDetectedResponse", "sendTryingResponse", "sendServerInternalErrorResponse", "processRequest", "LAndroidGovNistJavaxSipMessageSIPRequest;LAndroidGovNistJavaxSipStackMessageChannel;", "processResponse", "LAndroidGovNistJavaxSipMessageSIPResponse;LAndroidGovNistJavaxSipStackMessageChannel;LAndroidGovNistJavaxSipStackSIPDialog;", "LAndroidGovNistJavaxSipMessageSIPResponse;LAndroidGovNistJavaxSipStackMessageChannel;", &AndroidGovNistJavaxSipDialogFilter_logger };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipDialogFilter = { "DialogFilter", "android.gov.nist.javax.sip", ptrTable, methods, fields, 7, 0x0, 11, 4, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipDialogFilter;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipDialogFilter class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipDialogFilter_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipDialogFilter_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipDialogFilter)
  }
}

@end

void AndroidGovNistJavaxSipDialogFilter_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(AndroidGovNistJavaxSipDialogFilter *self, AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack) {
  NSObject_init(self);
  JreStrongAssign(&self->sipStack_, sipStack);
}

AndroidGovNistJavaxSipDialogFilter *new_AndroidGovNistJavaxSipDialogFilter_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipDialogFilter, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_, sipStack)
}

AndroidGovNistJavaxSipDialogFilter *create_AndroidGovNistJavaxSipDialogFilter_initWithAndroidGovNistJavaxSipStackSIPTransactionStack_(AndroidGovNistJavaxSipStackSIPTransactionStack *sipStack) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipDialogFilter, initWithAndroidGovNistJavaxSipStackSIPTransactionStack_, sipStack)
}

void AndroidGovNistJavaxSipDialogFilter_sendRequestPendingResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(AndroidGovNistJavaxSipDialogFilter *self, AndroidGovNistJavaxSipMessageSIPRequest *sipRequest, id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction) {
  if ([((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(transaction)) getState] != JreLoadStatic(AndroidJavaxSipTransactionState, TERMINATED)) {
    AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) createResponseWithInt:AndroidJavaxSipMessageResponse_REQUEST_PENDING];
    id<AndroidJavaxSipHeaderServerHeader> serverHeader = AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultServerHeader();
    if (serverHeader != nil) {
      [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) setHeaderWithAndroidJavaxSipHeaderHeader:serverHeader];
    }
    @try {
      AndroidGovNistJavaxSipHeaderRetryAfter *retryAfter = create_AndroidGovNistJavaxSipHeaderRetryAfter_init();
      [retryAfter setRetryAfterWithInt:1];
      [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) setHeaderWithAndroidJavaxSipHeaderHeader:retryAfter];
      if ([((NSString *) nil_chk([sipRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_INVITE]) {
        [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) addTransactionPendingAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
      }
      [transaction sendResponseWithAndroidJavaxSipMessageResponse:sipResponse];
      [transaction releaseSem];
    }
    @catch (JavaLangException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"Problem sending error response" withNSException:ex];
      [transaction releaseSem];
      [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
    }
  }
}

void AndroidGovNistJavaxSipDialogFilter_sendBadRequestResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_withNSString_(AndroidGovNistJavaxSipDialogFilter *self, AndroidGovNistJavaxSipMessageSIPRequest *sipRequest, id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction, NSString *reasonPhrase) {
  if ([((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(transaction)) getState] != JreLoadStatic(AndroidJavaxSipTransactionState, TERMINATED)) {
    AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) createResponseWithInt:AndroidJavaxSipMessageResponse_BAD_REQUEST];
    if (reasonPhrase != nil) [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) setReasonPhraseWithNSString:reasonPhrase];
    id<AndroidJavaxSipHeaderServerHeader> serverHeader = AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultServerHeader();
    if (serverHeader != nil) {
      [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) setHeaderWithAndroidJavaxSipHeaderHeader:serverHeader];
    }
    @try {
      if ([((NSString *) nil_chk([sipRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_INVITE]) {
        [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) addTransactionPendingAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
      }
      [transaction sendResponseWithAndroidJavaxSipMessageResponse:sipResponse];
      [transaction releaseSem];
    }
    @catch (JavaLangException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"Problem sending error response" withNSException:ex];
      [transaction releaseSem];
      [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
    }
  }
}

void AndroidGovNistJavaxSipDialogFilter_sendCallOrTransactionDoesNotExistResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(AndroidGovNistJavaxSipDialogFilter *self, AndroidGovNistJavaxSipMessageSIPRequest *sipRequest, id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction) {
  if ([((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(transaction)) getState] != JreLoadStatic(AndroidJavaxSipTransactionState, TERMINATED)) {
    AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) createResponseWithInt:AndroidJavaxSipMessageResponse_CALL_OR_TRANSACTION_DOES_NOT_EXIST];
    id<AndroidJavaxSipHeaderServerHeader> serverHeader = AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultServerHeader();
    if (serverHeader != nil) {
      [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) setHeaderWithAndroidJavaxSipHeaderHeader:serverHeader];
    }
    @try {
      if ([((NSString *) nil_chk([sipRequest getMethod])) isEqual:AndroidJavaxSipMessageRequest_INVITE]) {
        [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) addTransactionPendingAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
      }
      [transaction sendResponseWithAndroidJavaxSipMessageResponse:sipResponse];
      [transaction releaseSem];
    }
    @catch (JavaLangException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"Problem sending error response" withNSException:ex];
      [transaction releaseSem];
      [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
    }
  }
}

void AndroidGovNistJavaxSipDialogFilter_sendLoopDetectedResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(AndroidGovNistJavaxSipDialogFilter *self, AndroidGovNistJavaxSipMessageSIPRequest *sipRequest, id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction) {
  AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) createResponseWithInt:AndroidJavaxSipMessageResponse_LOOP_DETECTED];
  if ([((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(transaction)) getState] != JreLoadStatic(AndroidJavaxSipTransactionState, TERMINATED)) {
    id<AndroidJavaxSipHeaderServerHeader> serverHeader = AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultServerHeader();
    if (serverHeader != nil) {
      [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) setHeaderWithAndroidJavaxSipHeaderHeader:serverHeader];
    }
    @try {
      [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) addTransactionPendingAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
      [transaction sendResponseWithAndroidJavaxSipMessageResponse:sipResponse];
      [transaction releaseSem];
    }
    @catch (JavaLangException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"Problem sending error response" withNSException:ex];
      [transaction releaseSem];
      [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
    }
  }
}

void AndroidGovNistJavaxSipDialogFilter_sendTryingResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(AndroidGovNistJavaxSipDialogFilter *self, AndroidGovNistJavaxSipMessageSIPRequest *sipRequest, id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction) {
  AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) createResponseWithInt:AndroidJavaxSipMessageResponse_TRYING];
  if ([((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(transaction)) getState] != JreLoadStatic(AndroidJavaxSipTransactionState, TERMINATED)) {
    id<AndroidJavaxSipHeaderServerHeader> serverHeader = AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultServerHeader();
    if (serverHeader != nil) {
      [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) setHeaderWithAndroidJavaxSipHeaderHeader:serverHeader];
    }
    @try {
      [transaction sendResponseWithAndroidJavaxSipMessageResponse:sipResponse];
      [transaction releaseSem];
    }
    @catch (JavaLangException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"Problem sending error response" withNSException:ex];
      [transaction releaseSem];
      [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
    }
  }
}

void AndroidGovNistJavaxSipDialogFilter_sendServerInternalErrorResponseWithAndroidGovNistJavaxSipMessageSIPRequest_withAndroidGovNistJavaxSipStackSIPServerTransaction_(AndroidGovNistJavaxSipDialogFilter *self, AndroidGovNistJavaxSipMessageSIPRequest *sipRequest, id<AndroidGovNistJavaxSipStackSIPServerTransaction> transaction) {
  if ([((id<AndroidGovNistJavaxSipStackSIPServerTransaction>) nil_chk(transaction)) getState] != JreLoadStatic(AndroidJavaxSipTransactionState, TERMINATED)) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) debugWithNSString:@"Sending 500 response for out of sequence message"];
    AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(sipRequest)) createResponseWithInt:AndroidJavaxSipMessageResponse_SERVER_INTERNAL_ERROR];
    [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) setReasonPhraseWithNSString:@"Request out of order"];
    if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultServerHeader() != nil) {
      id<AndroidJavaxSipHeaderServerHeader> serverHeader = AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultServerHeader();
      [sipResponse setHeaderWithAndroidJavaxSipHeaderHeader:serverHeader];
    }
    @try {
      AndroidGovNistJavaxSipHeaderRetryAfter *retryAfter = create_AndroidGovNistJavaxSipHeaderRetryAfter_init();
      [retryAfter setRetryAfterWithInt:10];
      [sipResponse setHeaderWithAndroidJavaxSipHeaderHeader:retryAfter];
      [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) addTransactionPendingAckWithAndroidGovNistJavaxSipStackSIPServerTransaction:transaction];
      [transaction sendResponseWithAndroidJavaxSipMessageResponse:sipResponse];
      [transaction releaseSem];
    }
    @catch (JavaLangException *ex) {
      [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistJavaxSipDialogFilter_logger)) errorWithNSString:@"Problem sending response" withNSException:ex];
      [transaction releaseSem];
      [((AndroidGovNistJavaxSipStackSIPTransactionStack *) nil_chk(self->sipStack_)) removeTransactionWithAndroidGovNistJavaxSipStackSIPTransaction:transaction];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipDialogFilter)
