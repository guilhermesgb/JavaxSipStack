//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/message/SIPRequest.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/javax/sip/address/GenericURI.h"
#include "android/gov/nist/javax/sip/address/SipUri.h"
#include "android/gov/nist/javax/sip/header/CSeq.h"
#include "android/gov/nist/javax/sip/header/CallID.h"
#include "android/gov/nist/javax/sip/header/Contact.h"
#include "android/gov/nist/javax/sip/header/From.h"
#include "android/gov/nist/javax/sip/header/MaxForwards.h"
#include "android/gov/nist/javax/sip/header/RecordRouteList.h"
#include "android/gov/nist/javax/sip/header/RequestLine.h"
#include "android/gov/nist/javax/sip/header/RouteList.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderList.h"
#include "android/gov/nist/javax/sip/header/To.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/header/ViaList.h"
#include "android/gov/nist/javax/sip/message/MessageFactoryImpl.h"
#include "android/gov/nist/javax/sip/message/SIPDuplicateHeaderException.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/message/SIPRequest.h"
#include "android/gov/nist/javax/sip/message/SIPResponse.h"
#include "android/gov/nist/javax/sip/stack/SIPTransactionStack.h"
#include "android/javax/sip/SipException.h"
#include "android/javax/sip/address/URI.h"
#include "android/javax/sip/header/CSeqHeader.h"
#include "android/javax/sip/header/CallIdHeader.h"
#include "android/javax/sip/header/ContactHeader.h"
#include "android/javax/sip/header/ContentTypeHeader.h"
#include "android/javax/sip/header/EventHeader.h"
#include "android/javax/sip/header/ExpiresHeader.h"
#include "android/javax/sip/header/FromHeader.h"
#include "android/javax/sip/header/Header.h"
#include "android/javax/sip/header/MaxForwardsHeader.h"
#include "android/javax/sip/header/ProxyAuthorizationHeader.h"
#include "android/javax/sip/header/RecordRouteHeader.h"
#include "android/javax/sip/header/RouteHeader.h"
#include "android/javax/sip/header/ServerHeader.h"
#include "android/javax/sip/header/SubscriptionStateHeader.h"
#include "android/javax/sip/header/TimeStampHeader.h"
#include "android/javax/sip/header/ToHeader.h"
#include "android/javax/sip/header/UserAgentHeader.h"
#include "android/javax/sip/header/ViaHeader.h"
#include "android/javax/sip/message/Request.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/text/ParseException.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedList.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface AndroidGovNistJavaxSipMessageSIPRequest () {
 @public
  id transactionPointer_;
  id messageChannel_;
  id inviteTransaction_;
}

+ (void)putNameWithNSString:(NSString *)name;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipMessageSIPRequest, transactionPointer_, id)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipMessageSIPRequest, messageChannel_, id)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipMessageSIPRequest, inviteTransaction_, id)

inline jlong AndroidGovNistJavaxSipMessageSIPRequest_get_serialVersionUID();
#define AndroidGovNistJavaxSipMessageSIPRequest_serialVersionUID 3360720013577322927LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistJavaxSipMessageSIPRequest, serialVersionUID, jlong)

inline NSString *AndroidGovNistJavaxSipMessageSIPRequest_get_DEFAULT_USER();
static NSString *AndroidGovNistJavaxSipMessageSIPRequest_DEFAULT_USER = @"ip";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipMessageSIPRequest, DEFAULT_USER, NSString *)

inline NSString *AndroidGovNistJavaxSipMessageSIPRequest_get_DEFAULT_TRANSPORT();
static NSString *AndroidGovNistJavaxSipMessageSIPRequest_DEFAULT_TRANSPORT = @"udp";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipMessageSIPRequest, DEFAULT_TRANSPORT, NSString *)

inline id<JavaUtilSet> AndroidGovNistJavaxSipMessageSIPRequest_get_targetRefreshMethods();
static id<JavaUtilSet> AndroidGovNistJavaxSipMessageSIPRequest_targetRefreshMethods;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipMessageSIPRequest, targetRefreshMethods, id<JavaUtilSet>)

inline id<JavaUtilMap> AndroidGovNistJavaxSipMessageSIPRequest_get_nameTable();
static id<JavaUtilMap> AndroidGovNistJavaxSipMessageSIPRequest_nameTable;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipMessageSIPRequest, nameTable, id<JavaUtilMap>)

__attribute__((unused)) static void AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(NSString *name);

__attribute__((unused)) static jboolean AndroidGovNistJavaxSipMessageSIPRequest_mustCopyRRWithInt_(AndroidGovNistJavaxSipMessageSIPRequest *self, jint code);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipMessageSIPRequest)

id<JavaUtilSet> AndroidGovNistJavaxSipMessageSIPRequest_headersToIncludeInResponse;

@implementation AndroidGovNistJavaxSipMessageSIPRequest

+ (void)putNameWithNSString:(NSString *)name {
  AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(name);
}

+ (jboolean)isTargetRefreshWithNSString:(NSString *)ucaseMethod {
  return AndroidGovNistJavaxSipMessageSIPRequest_isTargetRefreshWithNSString_(ucaseMethod);
}

+ (jboolean)isDialogCreatingWithNSString:(NSString *)ucaseMethod {
  return AndroidGovNistJavaxSipMessageSIPRequest_isDialogCreatingWithNSString_(ucaseMethod);
}

+ (NSString *)getCannonicalNameWithNSString:(NSString *)method {
  return AndroidGovNistJavaxSipMessageSIPRequest_getCannonicalNameWithNSString_(method);
}

- (AndroidGovNistJavaxSipHeaderRequestLine *)getRequestLine {
  return requestLine_;
}

- (void)setRequestLineWithAndroidGovNistJavaxSipHeaderRequestLine:(AndroidGovNistJavaxSipHeaderRequestLine *)requestLine {
  JreStrongAssign(&self->requestLine_, requestLine);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipMessageSIPRequest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)debugDump {
  NSString *superstring = [super debugDump];
  JreStrongAssign(&stringRepresentation_, @"");
  [self sprintWithNSString:[AndroidGovNistJavaxSipMessageSIPRequest_class_() getName]];
  [self sprintWithNSString:@"{"];
  if (requestLine_ != nil) [self sprintWithNSString:[requestLine_ debugDump]];
  [self sprintWithNSString:superstring];
  [self sprintWithNSString:@"}"];
  return stringRepresentation_;
}

- (void)checkHeaders {
  NSString *prefix = @"Missing a required header : ";
  if ([self getCSeq] == nil) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", prefix, AndroidJavaxSipHeaderCSeqHeader_NAME), 0);
  }
  if ([self getTo] == nil) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", prefix, AndroidJavaxSipHeaderToHeader_NAME), 0);
  }
  if (self->callIdHeader_ == nil || [self->callIdHeader_ getCallId] == nil || [((NSString *) nil_chk([((AndroidGovNistJavaxSipHeaderCallID *) nil_chk(callIdHeader_)) getCallId])) isEqual:@""]) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", prefix, AndroidJavaxSipHeaderCallIdHeader_NAME), 0);
  }
  if ([self getFrom] == nil) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", prefix, AndroidJavaxSipHeaderFromHeader_NAME), 0);
  }
  if ([self getViaHeaders] == nil) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", prefix, AndroidJavaxSipHeaderViaHeader_NAME), 0);
  }
  if ([self getMaxForwards] == nil) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", prefix, AndroidJavaxSipHeaderMaxForwardsHeader_NAME), 0);
  }
  if ([self getTopmostVia] == nil) @throw create_JavaTextParseException_initWithNSString_withInt_(@"No via header in request! ", 0);
  if ([((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_NOTIFY]) {
    if ([self getHeaderWithNSString:AndroidJavaxSipHeaderSubscriptionStateHeader_NAME] == nil) @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", prefix, AndroidJavaxSipHeaderSubscriptionStateHeader_NAME), 0);
    if ([self getHeaderWithNSString:AndroidJavaxSipHeaderEventHeader_NAME] == nil) @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", prefix, AndroidJavaxSipHeaderEventHeader_NAME), 0);
  }
  else if ([((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_PUBLISH]) {
    if ([self getHeaderWithNSString:AndroidJavaxSipHeaderEventHeader_NAME] == nil) @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", prefix, AndroidJavaxSipHeaderEventHeader_NAME), 0);
  }
  NSString *method = [((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk(requestLine_)) getMethod];
  if (AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_(method)) {
    if ([self getContactHeader] == nil) {
      if ([self getToTag] == nil) @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", prefix, AndroidJavaxSipHeaderContactHeader_NAME), 0);
    }
  }
  if (requestLine_ != nil && method != nil && [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([self getCSeq])) getMethod] != nil && [method compareToWithId:[((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([self getCSeq])) getMethod]] != 0) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(@"CSEQ method mismatch with  Request-Line ", 0);
  }
}

- (void)setDefaults {
  if (requestLine_ == nil) return;
  NSString *method = [requestLine_ getMethod];
  if (method == nil) return;
  AndroidGovNistJavaxSipAddressGenericURI *u = [((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk(requestLine_)) getUri];
  if (u == nil) return;
  if ([method compareToWithId:AndroidJavaxSipMessageRequest_REGISTER] == 0 || [method compareToWithId:AndroidJavaxSipMessageRequest_INVITE] == 0) {
    if ([u isKindOfClass:[AndroidGovNistJavaxSipAddressSipUri class]]) {
      AndroidGovNistJavaxSipAddressSipUri *sipUri = (AndroidGovNistJavaxSipAddressSipUri *) cast_chk(u, [AndroidGovNistJavaxSipAddressSipUri class]);
      [sipUri setUserParamWithNSString:AndroidGovNistJavaxSipMessageSIPRequest_DEFAULT_USER];
      @try {
        [sipUri setTransportParamWithNSString:AndroidGovNistJavaxSipMessageSIPRequest_DEFAULT_TRANSPORT];
      }
      @catch (JavaTextParseException *ex) {
      }
    }
  }
}

- (void)setRequestLineDefaults {
  NSString *method = [((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk(requestLine_)) getMethod];
  if (method == nil) {
    AndroidGovNistJavaxSipHeaderCSeq *cseq = (AndroidGovNistJavaxSipHeaderCSeq *) cast_chk([self getCSeq], [AndroidGovNistJavaxSipHeaderCSeq class]);
    if (cseq != nil) {
      method = AndroidGovNistJavaxSipMessageSIPRequest_getCannonicalNameWithNSString_([cseq getMethod]);
      [((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk(requestLine_)) setMethodWithNSString:method];
    }
  }
}

- (id<AndroidJavaxSipAddressURI>)getRequestURI {
  if (self->requestLine_ == nil) return nil;
  else return [self->requestLine_ getUri];
}

- (void)setRequestURIWithAndroidJavaxSipAddressURI:(id<AndroidJavaxSipAddressURI>)uri {
  if (uri == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Null request URI");
  }
  if (self->requestLine_ == nil) {
    JreStrongAssignAndConsume(&self->requestLine_, new_AndroidGovNistJavaxSipHeaderRequestLine_init());
  }
  [self->requestLine_ setUriWithAndroidJavaxSipAddressURI:(AndroidGovNistJavaxSipAddressGenericURI *) cast_chk(uri, [AndroidGovNistJavaxSipAddressGenericURI class])];
  self->nullRequest_ = false;
}

- (void)setMethodWithNSString:(NSString *)method {
  if (method == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"null method");
  if (self->requestLine_ == nil) {
    JreStrongAssignAndConsume(&self->requestLine_, new_AndroidGovNistJavaxSipHeaderRequestLine_init());
  }
  NSString *meth = AndroidGovNistJavaxSipMessageSIPRequest_getCannonicalNameWithNSString_(method);
  [((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk(self->requestLine_)) setMethodWithNSString:meth];
  if (self->cSeqHeader_ != nil) {
    @try {
      [self->cSeqHeader_ setMethodWithNSString:meth];
    }
    @catch (JavaTextParseException *e) {
    }
  }
}

- (NSString *)getMethod {
  if (requestLine_ == nil) return nil;
  else return [requestLine_ getMethod];
}

- (NSString *)encode {
  NSString *retval;
  if (requestLine_ != nil) {
    [self setRequestLineDefaults];
    retval = JreStrcat("$$", [((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk(requestLine_)) encode], [super encode]);
  }
  else if ([self isNullRequest]) {
    retval = @"\x0d\n\x0d\n";
  }
  else {
    retval = [super encode];
  }
  return retval;
}

- (JavaLangStringBuilder *)encodeMessageWithJavaLangStringBuilder:(JavaLangStringBuilder *)retval {
  if (requestLine_ != nil) {
    [self setRequestLineDefaults];
    [((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk(requestLine_)) encodeWithJavaLangStringBuilder:retval];
    [self encodeSIPHeadersWithJavaLangStringBuilder:retval];
  }
  else if ([self isNullRequest]) {
    [((JavaLangStringBuilder *) nil_chk(retval)) appendWithNSString:@"\x0d\n\x0d\n"];
  }
  else retval = [self encodeSIPHeadersWithJavaLangStringBuilder:retval];
  return retval;
}

- (NSString *)description {
  return [self encode];
}

- (id)java_clone {
  AndroidGovNistJavaxSipMessageSIPRequest *retval = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([super java_clone], [AndroidGovNistJavaxSipMessageSIPRequest class]);
  JreStrongAssign(&((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(retval))->transactionPointer_, nil);
  if (self->requestLine_ != nil) JreStrongAssign(&retval->requestLine_, (AndroidGovNistJavaxSipHeaderRequestLine *) cast_chk([self->requestLine_ java_clone], [AndroidGovNistJavaxSipHeaderRequestLine class]));
  return retval;
}

- (jboolean)isEqual:(id)other {
  if (![[self java_getClass] isEqual:[nil_chk(other) java_getClass]]) return false;
  AndroidGovNistJavaxSipMessageSIPRequest *that = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(other, [AndroidGovNistJavaxSipMessageSIPRequest class]);
  return [((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk(requestLine_)) isEqual:that->requestLine_] && [super isEqual:other];
}

- (JavaUtilLinkedList *)getMessageAsEncodedStrings {
  JavaUtilLinkedList *retval = [super getMessageAsEncodedStrings];
  if (requestLine_ != nil) {
    [self setRequestLineDefaults];
    [((JavaUtilLinkedList *) nil_chk(retval)) addFirstWithId:[((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk(requestLine_)) encode]];
  }
  return retval;
}

- (jboolean)matchWithId:(id)matchObj {
  if (matchObj == nil) return true;
  else if (![[matchObj java_getClass] isEqual:[self java_getClass]]) return false;
  else if (matchObj == self) return true;
  AndroidGovNistJavaxSipMessageSIPRequest *that = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(matchObj, [AndroidGovNistJavaxSipMessageSIPRequest class]);
  AndroidGovNistJavaxSipHeaderRequestLine *rline = that->requestLine_;
  if (self->requestLine_ == nil && rline != nil) return false;
  else if (self->requestLine_ == rline) return [super matchWithId:matchObj];
  return [((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk(requestLine_)) matchWithId:that->requestLine_] && [super matchWithId:matchObj];
}

- (IOSByteArray *)encodeAsBytesWithNSString:(NSString *)transport {
  if ([self isNullRequest]) {
    return [@"\x0d\n\x0d\n" java_getBytes];
  }
  else if (self->requestLine_ == nil) {
    return [IOSByteArray arrayWithLength:0];
  }
  IOSByteArray *rlbytes = nil;
  if (requestLine_ != nil) {
    @try {
      rlbytes = [((NSString *) nil_chk([requestLine_ encode])) java_getBytesWithCharsetName:@"UTF-8"];
    }
    @catch (JavaIoUnsupportedEncodingException *ex) {
      AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
    }
  }
  IOSByteArray *superbytes = [super encodeAsBytesWithNSString:transport];
  IOSByteArray *retval = [IOSByteArray arrayWithLength:((IOSByteArray *) nil_chk(rlbytes))->size_ + ((IOSByteArray *) nil_chk(superbytes))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(rlbytes, 0, retval, 0, rlbytes->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(superbytes, 0, retval, rlbytes->size_, superbytes->size_);
  return retval;
}

- (AndroidGovNistJavaxSipMessageSIPResponse *)createResponseWithInt:(jint)statusCode {
  NSString *reasonPhrase = AndroidGovNistJavaxSipMessageSIPResponse_getReasonPhraseWithInt_(statusCode);
  return [self createResponseWithInt:statusCode withNSString:reasonPhrase];
}

- (AndroidGovNistJavaxSipMessageSIPResponse *)createResponseWithInt:(jint)statusCode
                                                       withNSString:(NSString *)reasonPhrase {
  AndroidGovNistJavaxSipMessageSIPResponse *newResponse;
  newResponse = create_AndroidGovNistJavaxSipMessageSIPResponse_init();
  @try {
    [newResponse setStatusCodeWithInt:statusCode];
  }
  @catch (JavaTextParseException *ex) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Bad code ", statusCode));
  }
  if (reasonPhrase != nil) [newResponse setReasonPhraseWithNSString:reasonPhrase];
  else [newResponse setReasonPhraseWithNSString:AndroidGovNistJavaxSipMessageSIPResponse_getReasonPhraseWithInt_(statusCode)];
  for (NSString * __strong headerName in nil_chk(AndroidGovNistJavaxSipMessageSIPRequest_headersToIncludeInResponse)) {
    AndroidGovNistJavaxSipHeaderSIPHeader *nextHeader = [((id<JavaUtilMap>) nil_chk(headerTable_)) getWithId:headerName];
    if (nextHeader != nil) {
      if (!([nextHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderRecordRouteList class]]) || ([nextHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderRecordRouteList class]] && AndroidGovNistJavaxSipMessageSIPRequest_mustCopyRRWithInt_(self, statusCode))) {
        @try {
          [newResponse attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:(AndroidGovNistJavaxSipHeaderSIPHeader *) cast_chk([nextHeader java_clone], [AndroidGovNistJavaxSipHeaderSIPHeader class]) withBoolean:false];
        }
        @catch (AndroidGovNistJavaxSipMessageSIPDuplicateHeaderException *e) {
          [((AndroidGovNistJavaxSipMessageSIPDuplicateHeaderException *) nil_chk(e)) printStackTrace];
        }
      }
    }
  }
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultServerHeader() != nil) {
    [newResponse setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultServerHeader()];
  }
  id<AndroidJavaxSipHeaderServerHeader> server = AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultServerHeader();
  if (server != nil) {
    [newResponse setHeaderWithAndroidJavaxSipHeaderHeader:server];
  }
  return newResponse;
}

- (jboolean)mustCopyRRWithInt:(jint)code {
  return AndroidGovNistJavaxSipMessageSIPRequest_mustCopyRRWithInt_(self, code);
}

- (AndroidGovNistJavaxSipMessageSIPRequest *)createCancelRequest {
  if (![((NSString *) nil_chk([self getMethod])) isEqual:AndroidJavaxSipMessageRequest_INVITE]) @throw create_AndroidJavaxSipSipException_initWithNSString_(JreStrcat("$$", @"Attempt to create CANCEL for ", [self getMethod]));
  AndroidGovNistJavaxSipMessageSIPRequest *cancel = create_AndroidGovNistJavaxSipMessageSIPRequest_init();
  [cancel setRequestLineWithAndroidGovNistJavaxSipHeaderRequestLine:(AndroidGovNistJavaxSipHeaderRequestLine *) cast_chk([((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk(self->requestLine_)) java_clone], [AndroidGovNistJavaxSipHeaderRequestLine class])];
  [cancel setMethodWithNSString:AndroidJavaxSipMessageRequest_CANCEL];
  [cancel setHeaderWithAndroidJavaxSipHeaderHeader:(id<AndroidJavaxSipHeaderHeader>) cast_check([((AndroidGovNistJavaxSipHeaderCallID *) nil_chk(self->callIdHeader_)) java_clone], AndroidJavaxSipHeaderHeader_class_())];
  [cancel setHeaderWithAndroidJavaxSipHeaderHeader:(id<AndroidJavaxSipHeaderHeader>) cast_check([((AndroidGovNistJavaxSipHeaderTo *) nil_chk(self->toHeader_)) java_clone], AndroidJavaxSipHeaderHeader_class_())];
  [cancel setHeaderWithAndroidJavaxSipHeaderHeader:(id<AndroidJavaxSipHeaderHeader>) cast_check([((AndroidGovNistJavaxSipHeaderCSeq *) nil_chk(cSeqHeader_)) java_clone], AndroidJavaxSipHeaderHeader_class_())];
  @try {
    [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([cancel getCSeq])) setMethodWithNSString:AndroidJavaxSipMessageRequest_CANCEL];
  }
  @catch (JavaTextParseException *e) {
    [((JavaTextParseException *) nil_chk(e)) printStackTrace];
  }
  [cancel setHeaderWithAndroidJavaxSipHeaderHeader:(id<AndroidJavaxSipHeaderHeader>) cast_check([((AndroidGovNistJavaxSipHeaderFrom *) nil_chk(self->fromHeader_)) java_clone], AndroidJavaxSipHeaderHeader_class_())];
  [cancel addFirstWithAndroidJavaxSipHeaderHeader:(id<AndroidJavaxSipHeaderHeader>) cast_check([((AndroidGovNistJavaxSipHeaderVia *) nil_chk([self getTopmostVia])) java_clone], AndroidJavaxSipHeaderHeader_class_())];
  [cancel setHeaderWithAndroidJavaxSipHeaderHeader:(id<AndroidJavaxSipHeaderHeader>) cast_check([((AndroidGovNistJavaxSipHeaderMaxForwards *) nil_chk(self->maxForwardsHeader_)) java_clone], AndroidJavaxSipHeaderHeader_class_())];
  if ([self getRouteHeaders] != nil) {
    [cancel setHeaderWithAndroidJavaxSipHeaderHeader:(AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk([((AndroidGovNistJavaxSipHeaderRouteList *) nil_chk([self getRouteHeaders])) java_clone], [AndroidGovNistJavaxSipHeaderSIPHeaderList class])];
  }
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultUserAgentHeader() != nil) {
    [cancel setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultUserAgentHeader()];
  }
  return cancel;
}

- (AndroidGovNistJavaxSipMessageSIPRequest *)createAckRequestWithAndroidGovNistJavaxSipHeaderTo:(AndroidGovNistJavaxSipHeaderTo *)responseToHeader {
  AndroidGovNistJavaxSipMessageSIPRequest *newRequest = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk([self java_clone], [AndroidGovNistJavaxSipMessageSIPRequest class]);
  [((AndroidGovNistJavaxSipMessageSIPRequest *) nil_chk(newRequest)) setMethodWithNSString:AndroidJavaxSipMessageRequest_ACK];
  [newRequest removeHeaderWithNSString:AndroidJavaxSipHeaderRouteHeader_NAME];
  [newRequest removeHeaderWithNSString:AndroidJavaxSipHeaderProxyAuthorizationHeader_NAME];
  [newRequest removeContent];
  [newRequest removeHeaderWithNSString:AndroidJavaxSipHeaderContentTypeHeader_NAME];
  @try {
    [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([newRequest getCSeq])) setMethodWithNSString:AndroidJavaxSipMessageRequest_ACK];
  }
  @catch (JavaTextParseException *e) {
  }
  if (responseToHeader != nil) {
    [newRequest setToWithAndroidJavaxSipHeaderToHeader:responseToHeader];
  }
  [newRequest removeHeaderWithNSString:AndroidJavaxSipHeaderContactHeader_NAME];
  [newRequest removeHeaderWithNSString:AndroidJavaxSipHeaderExpiresHeader_NAME];
  AndroidGovNistJavaxSipHeaderViaList *via = [newRequest getViaHeaders];
  if (via != nil && [via size] > 1) {
    for (jint i = 2; i < [via size]; i++) {
      [via removeWithInt:i];
    }
  }
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultUserAgentHeader() != nil) {
    [newRequest setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultUserAgentHeader()];
  }
  return newRequest;
}

- (AndroidGovNistJavaxSipMessageSIPRequest *)createErrorAckWithAndroidGovNistJavaxSipHeaderTo:(AndroidGovNistJavaxSipHeaderTo *)responseToHeader {
  AndroidGovNistJavaxSipMessageSIPRequest *newRequest = create_AndroidGovNistJavaxSipMessageSIPRequest_init();
  [newRequest setRequestLineWithAndroidGovNistJavaxSipHeaderRequestLine:(AndroidGovNistJavaxSipHeaderRequestLine *) cast_chk([((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk(self->requestLine_)) java_clone], [AndroidGovNistJavaxSipHeaderRequestLine class])];
  [newRequest setMethodWithNSString:AndroidJavaxSipMessageRequest_ACK];
  [newRequest setHeaderWithAndroidJavaxSipHeaderHeader:(id<AndroidJavaxSipHeaderHeader>) cast_check([((AndroidGovNistJavaxSipHeaderCallID *) nil_chk(self->callIdHeader_)) java_clone], AndroidJavaxSipHeaderHeader_class_())];
  [newRequest setHeaderWithAndroidJavaxSipHeaderHeader:(id<AndroidJavaxSipHeaderHeader>) cast_check([((AndroidGovNistJavaxSipHeaderMaxForwards *) nil_chk(self->maxForwardsHeader_)) java_clone], AndroidJavaxSipHeaderHeader_class_())];
  [newRequest setHeaderWithAndroidJavaxSipHeaderHeader:(id<AndroidJavaxSipHeaderHeader>) cast_check([((AndroidGovNistJavaxSipHeaderFrom *) nil_chk(self->fromHeader_)) java_clone], AndroidJavaxSipHeaderHeader_class_())];
  [newRequest setHeaderWithAndroidJavaxSipHeaderHeader:(id<AndroidJavaxSipHeaderHeader>) cast_check([((AndroidGovNistJavaxSipHeaderTo *) nil_chk(responseToHeader)) java_clone], AndroidJavaxSipHeaderHeader_class_())];
  [newRequest addFirstWithAndroidJavaxSipHeaderHeader:(id<AndroidJavaxSipHeaderHeader>) cast_check([((AndroidGovNistJavaxSipHeaderVia *) nil_chk([self getTopmostVia])) java_clone], AndroidJavaxSipHeaderHeader_class_())];
  [newRequest setHeaderWithAndroidJavaxSipHeaderHeader:(id<AndroidJavaxSipHeaderHeader>) cast_check([((AndroidGovNistJavaxSipHeaderCSeq *) nil_chk(cSeqHeader_)) java_clone], AndroidJavaxSipHeaderHeader_class_())];
  [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([newRequest getCSeq])) setMethodWithNSString:AndroidJavaxSipMessageRequest_ACK];
  if ([self getRouteHeaders] != nil) {
    [newRequest setHeaderWithAndroidGovNistJavaxSipHeaderSIPHeaderList:(AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk([((AndroidGovNistJavaxSipHeaderRouteList *) nil_chk([self getRouteHeaders])) java_clone], [AndroidGovNistJavaxSipHeaderSIPHeaderList class])];
  }
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultUserAgentHeader() != nil) {
    [newRequest setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultUserAgentHeader()];
  }
  return newRequest;
}

- (NSString *)getViaHost {
  AndroidGovNistJavaxSipHeaderVia *via = (AndroidGovNistJavaxSipHeaderVia *) cast_chk([((AndroidGovNistJavaxSipHeaderViaList *) nil_chk([self getViaHeaders])) getFirst], [AndroidGovNistJavaxSipHeaderVia class]);
  return [((AndroidGovNistJavaxSipHeaderVia *) nil_chk(via)) getHost];
}

- (jint)getViaPort {
  AndroidGovNistJavaxSipHeaderVia *via = (AndroidGovNistJavaxSipHeaderVia *) cast_chk([((AndroidGovNistJavaxSipHeaderViaList *) nil_chk([self getViaHeaders])) getFirst], [AndroidGovNistJavaxSipHeaderVia class]);
  if ([((AndroidGovNistJavaxSipHeaderVia *) nil_chk(via)) hasPort]) return [via getPort];
  else return 5060;
}

- (NSString *)getFirstLine {
  if (requestLine_ == nil) return nil;
  else return [self->requestLine_ encode];
}

- (void)setSIPVersionWithNSString:(NSString *)sipVersion {
  if (sipVersion == nil || ![sipVersion java_equalsIgnoreCase:@"SIP/2.0"]) @throw create_JavaTextParseException_initWithNSString_withInt_(@"sipVersion", 0);
  [((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk(self->requestLine_)) setSipVersionWithNSString:sipVersion];
}

- (NSString *)getSIPVersion {
  return [((AndroidGovNistJavaxSipHeaderRequestLine *) nil_chk(self->requestLine_)) getSipVersion];
}

- (id)getTransaction {
  return self->transactionPointer_;
}

- (void)setTransactionWithId:(id)transaction {
  JreStrongAssign(&self->transactionPointer_, transaction);
}

- (id)getMessageChannel {
  return self->messageChannel_;
}

- (void)setMessageChannelWithId:(id)messageChannel {
  JreStrongAssign(&self->messageChannel_, messageChannel);
}

- (NSString *)getMergeId {
  NSString *fromTag = [self getFromTag];
  NSString *cseq = [((AndroidGovNistJavaxSipHeaderCSeq *) nil_chk(self->cSeqHeader_)) description];
  NSString *callId = [((AndroidGovNistJavaxSipHeaderCallID *) nil_chk(self->callIdHeader_)) getCallId];
  NSString *requestUri = [((id<AndroidJavaxSipAddressURI>) nil_chk([self getRequestURI])) description];
  if (fromTag != nil) {
    return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_init() appendWithNSString:requestUri])) appendWithNSString:@":"])) appendWithNSString:fromTag])) appendWithNSString:@":"])) appendWithNSString:cseq])) appendWithNSString:@":"])) appendWithNSString:callId])) description];
  }
  else return nil;
}

- (void)setInviteTransactionWithId:(id)inviteTransaction {
  JreStrongAssign(&self->inviteTransaction_, inviteTransaction);
}

- (id)getInviteTransaction {
  return inviteTransaction_;
}

- (void)cleanUp {
  [super cleanUp];
}

- (void)dealloc {
  RELEASE_(transactionPointer_);
  RELEASE_(requestLine_);
  RELEASE_(messageChannel_);
  RELEASE_(inviteTransaction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderRequestLine;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipAddressURI;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLinkedList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipMessageSIPResponse;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipMessageSIPResponse;", 0x1, 19, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, 22, 20, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipMessageSIPRequest;", 0x1, -1, -1, 23, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipMessageSIPRequest;", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipMessageSIPRequest;", 0x11, 26, 25, 27, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(putNameWithNSString:);
  methods[1].selector = @selector(isTargetRefreshWithNSString:);
  methods[2].selector = @selector(isDialogCreatingWithNSString:);
  methods[3].selector = @selector(getCannonicalNameWithNSString:);
  methods[4].selector = @selector(getRequestLine);
  methods[5].selector = @selector(setRequestLineWithAndroidGovNistJavaxSipHeaderRequestLine:);
  methods[6].selector = @selector(init);
  methods[7].selector = @selector(debugDump);
  methods[8].selector = @selector(checkHeaders);
  methods[9].selector = @selector(setDefaults);
  methods[10].selector = @selector(setRequestLineDefaults);
  methods[11].selector = @selector(getRequestURI);
  methods[12].selector = @selector(setRequestURIWithAndroidJavaxSipAddressURI:);
  methods[13].selector = @selector(setMethodWithNSString:);
  methods[14].selector = @selector(getMethod);
  methods[15].selector = @selector(encode);
  methods[16].selector = @selector(encodeMessageWithJavaLangStringBuilder:);
  methods[17].selector = @selector(description);
  methods[18].selector = @selector(java_clone);
  methods[19].selector = @selector(isEqual:);
  methods[20].selector = @selector(getMessageAsEncodedStrings);
  methods[21].selector = @selector(matchWithId:);
  methods[22].selector = @selector(encodeAsBytesWithNSString:);
  methods[23].selector = @selector(createResponseWithInt:);
  methods[24].selector = @selector(createResponseWithInt:withNSString:);
  methods[25].selector = @selector(mustCopyRRWithInt:);
  methods[26].selector = @selector(createCancelRequest);
  methods[27].selector = @selector(createAckRequestWithAndroidGovNistJavaxSipHeaderTo:);
  methods[28].selector = @selector(createErrorAckWithAndroidGovNistJavaxSipHeaderTo:);
  methods[29].selector = @selector(getViaHost);
  methods[30].selector = @selector(getViaPort);
  methods[31].selector = @selector(getFirstLine);
  methods[32].selector = @selector(setSIPVersionWithNSString:);
  methods[33].selector = @selector(getSIPVersion);
  methods[34].selector = @selector(getTransaction);
  methods[35].selector = @selector(setTransactionWithId:);
  methods[36].selector = @selector(getMessageChannel);
  methods[37].selector = @selector(setMessageChannelWithId:);
  methods[38].selector = @selector(getMergeId);
  methods[39].selector = @selector(setInviteTransactionWithId:);
  methods[40].selector = @selector(getInviteTransaction);
  methods[41].selector = @selector(cleanUp);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistJavaxSipMessageSIPRequest_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_USER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "DEFAULT_TRANSPORT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "transactionPointer_", "LNSObject;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "requestLine_", "LAndroidGovNistJavaxSipHeaderRequestLine;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "messageChannel_", "LNSObject;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "inviteTransaction_", "LNSObject;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "targetRefreshMethods", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 34, 35, -1 },
    { "nameTable", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 36, 37, -1 },
    { "headersToIncludeInResponse", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1c, -1, 38, 35, -1 },
  };
  static const void *ptrTable[] = { "putName", "LNSString;", "isTargetRefresh", "isDialogCreating", "getCannonicalName", "setRequestLine", "LAndroidGovNistJavaxSipHeaderRequestLine;", "LJavaTextParseException;", "setRequestURI", "LAndroidJavaxSipAddressURI;", "setMethod", "encodeMessage", "LJavaLangStringBuilder;", "toString", "clone", "equals", "LNSObject;", "match", "encodeAsBytes", "createResponse", "I", "ILNSString;", "mustCopyRR", "LAndroidJavaxSipSipException;", "createAckRequest", "LAndroidGovNistJavaxSipHeaderTo;", "createErrorAck", "LAndroidJavaxSipSipException;LJavaTextParseException;", "setSIPVersion", "setTransaction", "setMessageChannel", "setInviteTransaction", &AndroidGovNistJavaxSipMessageSIPRequest_DEFAULT_USER, &AndroidGovNistJavaxSipMessageSIPRequest_DEFAULT_TRANSPORT, &AndroidGovNistJavaxSipMessageSIPRequest_targetRefreshMethods, "Ljava/util/Set<Ljava/lang/String;>;", &AndroidGovNistJavaxSipMessageSIPRequest_nameTable, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", &AndroidGovNistJavaxSipMessageSIPRequest_headersToIncludeInResponse };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipMessageSIPRequest = { "SIPRequest", "android.gov.nist.javax.sip.message", ptrTable, methods, fields, 7, 0x1, 42, 10, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipMessageSIPRequest;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipMessageSIPRequest class]) {
    JreStrongAssignAndConsume(&AndroidGovNistJavaxSipMessageSIPRequest_targetRefreshMethods, new_JavaUtilHashSet_init());
    JreStrongAssignAndConsume(&AndroidGovNistJavaxSipMessageSIPRequest_nameTable, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(15));
    JreStrongAssignAndConsume(&AndroidGovNistJavaxSipMessageSIPRequest_headersToIncludeInResponse, new_JavaUtilHashSet_initWithInt_(0));
    {
      [AndroidGovNistJavaxSipMessageSIPRequest_targetRefreshMethods addWithId:AndroidJavaxSipMessageRequest_INVITE];
      [AndroidGovNistJavaxSipMessageSIPRequest_targetRefreshMethods addWithId:AndroidJavaxSipMessageRequest_UPDATE];
      [AndroidGovNistJavaxSipMessageSIPRequest_targetRefreshMethods addWithId:AndroidJavaxSipMessageRequest_SUBSCRIBE];
      [AndroidGovNistJavaxSipMessageSIPRequest_targetRefreshMethods addWithId:AndroidJavaxSipMessageRequest_NOTIFY];
      [AndroidGovNistJavaxSipMessageSIPRequest_targetRefreshMethods addWithId:AndroidJavaxSipMessageRequest_REFER];
      AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(AndroidJavaxSipMessageRequest_INVITE);
      AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(AndroidJavaxSipMessageRequest_BYE);
      AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(AndroidJavaxSipMessageRequest_CANCEL);
      AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(AndroidJavaxSipMessageRequest_ACK);
      AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(AndroidJavaxSipMessageRequest_PRACK);
      AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(AndroidJavaxSipMessageRequest_INFO);
      AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(AndroidJavaxSipMessageRequest_MESSAGE);
      AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(AndroidJavaxSipMessageRequest_NOTIFY);
      AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(AndroidJavaxSipMessageRequest_OPTIONS);
      AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(AndroidJavaxSipMessageRequest_PRACK);
      AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(AndroidJavaxSipMessageRequest_PUBLISH);
      AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(AndroidJavaxSipMessageRequest_REFER);
      AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(AndroidJavaxSipMessageRequest_REGISTER);
      AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(AndroidJavaxSipMessageRequest_SUBSCRIBE);
      AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(AndroidJavaxSipMessageRequest_UPDATE);
      [AndroidGovNistJavaxSipMessageSIPRequest_headersToIncludeInResponse addWithId:[((NSString *) nil_chk(AndroidJavaxSipHeaderFromHeader_NAME)) lowercaseString]];
      [AndroidGovNistJavaxSipMessageSIPRequest_headersToIncludeInResponse addWithId:[((NSString *) nil_chk(AndroidJavaxSipHeaderToHeader_NAME)) lowercaseString]];
      [AndroidGovNistJavaxSipMessageSIPRequest_headersToIncludeInResponse addWithId:[((NSString *) nil_chk(AndroidJavaxSipHeaderViaHeader_NAME)) lowercaseString]];
      [AndroidGovNistJavaxSipMessageSIPRequest_headersToIncludeInResponse addWithId:[((NSString *) nil_chk(AndroidJavaxSipHeaderRecordRouteHeader_NAME)) lowercaseString]];
      [AndroidGovNistJavaxSipMessageSIPRequest_headersToIncludeInResponse addWithId:[((NSString *) nil_chk(AndroidJavaxSipHeaderCallIdHeader_NAME)) lowercaseString]];
      [AndroidGovNistJavaxSipMessageSIPRequest_headersToIncludeInResponse addWithId:[((NSString *) nil_chk(AndroidJavaxSipHeaderCSeqHeader_NAME)) lowercaseString]];
      [AndroidGovNistJavaxSipMessageSIPRequest_headersToIncludeInResponse addWithId:[((NSString *) nil_chk(AndroidJavaxSipHeaderTimeStampHeader_NAME)) lowercaseString]];
    }
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipMessageSIPRequest)
  }
}

@end

void AndroidGovNistJavaxSipMessageSIPRequest_putNameWithNSString_(NSString *name) {
  AndroidGovNistJavaxSipMessageSIPRequest_initialize();
  [((id<JavaUtilMap>) nil_chk(AndroidGovNistJavaxSipMessageSIPRequest_nameTable)) putWithId:name withId:name];
}

jboolean AndroidGovNistJavaxSipMessageSIPRequest_isTargetRefreshWithNSString_(NSString *ucaseMethod) {
  AndroidGovNistJavaxSipMessageSIPRequest_initialize();
  return [((id<JavaUtilSet>) nil_chk(AndroidGovNistJavaxSipMessageSIPRequest_targetRefreshMethods)) containsWithId:ucaseMethod];
}

jboolean AndroidGovNistJavaxSipMessageSIPRequest_isDialogCreatingWithNSString_(NSString *ucaseMethod) {
  AndroidGovNistJavaxSipMessageSIPRequest_initialize();
  return AndroidGovNistJavaxSipStackSIPTransactionStack_isDialogCreatedWithNSString_(ucaseMethod);
}

NSString *AndroidGovNistJavaxSipMessageSIPRequest_getCannonicalNameWithNSString_(NSString *method) {
  AndroidGovNistJavaxSipMessageSIPRequest_initialize();
  if ([((id<JavaUtilMap>) nil_chk(AndroidGovNistJavaxSipMessageSIPRequest_nameTable)) containsKeyWithId:method]) return [AndroidGovNistJavaxSipMessageSIPRequest_nameTable getWithId:method];
  else return method;
}

void AndroidGovNistJavaxSipMessageSIPRequest_init(AndroidGovNistJavaxSipMessageSIPRequest *self) {
  AndroidGovNistJavaxSipMessageSIPMessage_init(self);
}

AndroidGovNistJavaxSipMessageSIPRequest *new_AndroidGovNistJavaxSipMessageSIPRequest_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipMessageSIPRequest, init)
}

AndroidGovNistJavaxSipMessageSIPRequest *create_AndroidGovNistJavaxSipMessageSIPRequest_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipMessageSIPRequest, init)
}

jboolean AndroidGovNistJavaxSipMessageSIPRequest_mustCopyRRWithInt_(AndroidGovNistJavaxSipMessageSIPRequest *self, jint code) {
  if (code > 100 && code < 300) {
    return AndroidGovNistJavaxSipMessageSIPRequest_isDialogCreatingWithNSString_([self getMethod]) && [self getToTag] == nil;
  }
  else return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipMessageSIPRequest)
