//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/message/MessageFactoryImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/header/CSeq.h"
#include "android/gov/nist/javax/sip/header/CallID.h"
#include "android/gov/nist/javax/sip/header/ContentType.h"
#include "android/gov/nist/javax/sip/header/From.h"
#include "android/gov/nist/javax/sip/header/MaxForwards.h"
#include "android/gov/nist/javax/sip/header/RequestLine.h"
#include "android/gov/nist/javax/sip/header/StatusLine.h"
#include "android/gov/nist/javax/sip/header/To.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/message/ContentImpl.h"
#include "android/gov/nist/javax/sip/message/MessageFactoryImpl.h"
#include "android/gov/nist/javax/sip/message/MultipartMimeContent.h"
#include "android/gov/nist/javax/sip/message/MultipartMimeContentImpl.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/message/SIPRequest.h"
#include "android/gov/nist/javax/sip/message/SIPResponse.h"
#include "android/gov/nist/javax/sip/parser/ParseExceptionListener.h"
#include "android/gov/nist/javax/sip/parser/StringMsgParser.h"
#include "android/javax/sip/address/URI.h"
#include "android/javax/sip/header/CSeqHeader.h"
#include "android/javax/sip/header/CallIdHeader.h"
#include "android/javax/sip/header/ContentTypeHeader.h"
#include "android/javax/sip/header/FromHeader.h"
#include "android/javax/sip/header/MaxForwardsHeader.h"
#include "android/javax/sip/header/ServerHeader.h"
#include "android/javax/sip/header/ToHeader.h"
#include "android/javax/sip/header/UserAgentHeader.h"
#include "android/javax/sip/message/Request.h"
#include "android/javax/sip/message/Response.h"
#include "java/lang/NullPointerException.h"
#include "java/text/ParseException.h"
#include "java/util/List.h"

@interface AndroidGovNistJavaxSipMessageMessageFactoryImpl () {
 @public
  jboolean testing_;
  jboolean strict_;
}

@end

inline NSString *AndroidGovNistJavaxSipMessageMessageFactoryImpl_get_defaultContentEncodingCharset();
inline NSString *AndroidGovNistJavaxSipMessageMessageFactoryImpl_set_defaultContentEncodingCharset(NSString *value);
static NSString *AndroidGovNistJavaxSipMessageMessageFactoryImpl_defaultContentEncodingCharset = @"UTF-8";
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipMessageMessageFactoryImpl, defaultContentEncodingCharset, NSString *)

inline id<AndroidJavaxSipHeaderUserAgentHeader> AndroidGovNistJavaxSipMessageMessageFactoryImpl_get_userAgent();
inline id<AndroidJavaxSipHeaderUserAgentHeader> AndroidGovNistJavaxSipMessageMessageFactoryImpl_set_userAgent(id<AndroidJavaxSipHeaderUserAgentHeader> value);
static id<AndroidJavaxSipHeaderUserAgentHeader> AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipMessageMessageFactoryImpl, userAgent, id<AndroidJavaxSipHeaderUserAgentHeader>)

inline id<AndroidJavaxSipHeaderServerHeader> AndroidGovNistJavaxSipMessageMessageFactoryImpl_get_server();
inline id<AndroidJavaxSipHeaderServerHeader> AndroidGovNistJavaxSipMessageMessageFactoryImpl_set_server(id<AndroidJavaxSipHeaderServerHeader> value);
static id<AndroidJavaxSipHeaderServerHeader> AndroidGovNistJavaxSipMessageMessageFactoryImpl_server;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipMessageMessageFactoryImpl, server, id<AndroidJavaxSipHeaderServerHeader>)

@interface AndroidGovNistJavaxSipMessageMessageFactoryImpl_1 : NSObject < AndroidGovNistJavaxSipParserParseExceptionListener > {
 @public
  AndroidGovNistJavaxSipMessageMessageFactoryImpl *this$0_;
}

- (instancetype)initWithAndroidGovNistJavaxSipMessageMessageFactoryImpl:(AndroidGovNistJavaxSipMessageMessageFactoryImpl *)outer$;

- (void)handleExceptionWithJavaTextParseException:(JavaTextParseException *)ex
      withAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage
                                     withIOSClass:(IOSClass *)headerClass
                                     withNSString:(NSString *)headerText
                                     withNSString:(NSString *)messageText;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipMessageMessageFactoryImpl_1)

__attribute__((unused)) static void AndroidGovNistJavaxSipMessageMessageFactoryImpl_1_initWithAndroidGovNistJavaxSipMessageMessageFactoryImpl_(AndroidGovNistJavaxSipMessageMessageFactoryImpl_1 *self, AndroidGovNistJavaxSipMessageMessageFactoryImpl *outer$);

__attribute__((unused)) static AndroidGovNistJavaxSipMessageMessageFactoryImpl_1 *new_AndroidGovNistJavaxSipMessageMessageFactoryImpl_1_initWithAndroidGovNistJavaxSipMessageMessageFactoryImpl_(AndroidGovNistJavaxSipMessageMessageFactoryImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipMessageMessageFactoryImpl_1 *create_AndroidGovNistJavaxSipMessageMessageFactoryImpl_1_initWithAndroidGovNistJavaxSipMessageMessageFactoryImpl_(AndroidGovNistJavaxSipMessageMessageFactoryImpl *outer$);

@implementation AndroidGovNistJavaxSipMessageMessageFactoryImpl

- (void)setStrictWithBoolean:(jboolean)strict {
  self->strict_ = strict;
}

- (void)setTestWithBoolean:(jboolean)flag {
  self->testing_ = flag;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipMessageMessageFactoryImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<AndroidJavaxSipMessageRequest>)createRequestWithAndroidJavaxSipAddressURI:(id<AndroidJavaxSipAddressURI>)requestURI
                                                                   withNSString:(NSString *)method
                                          withAndroidJavaxSipHeaderCallIdHeader:(id<AndroidJavaxSipHeaderCallIdHeader>)callId
                                            withAndroidJavaxSipHeaderCSeqHeader:(id<AndroidJavaxSipHeaderCSeqHeader>)cSeq
                                            withAndroidJavaxSipHeaderFromHeader:(id<AndroidJavaxSipHeaderFromHeader>)from
                                              withAndroidJavaxSipHeaderToHeader:(id<AndroidJavaxSipHeaderToHeader>)to
                                                               withJavaUtilList:(id<JavaUtilList>)via
                                     withAndroidJavaxSipHeaderMaxForwardsHeader:(id<AndroidJavaxSipHeaderMaxForwardsHeader>)maxForwards
                                     withAndroidJavaxSipHeaderContentTypeHeader:(id<AndroidJavaxSipHeaderContentTypeHeader>)contentType
                                                                         withId:(id)content {
  if (requestURI == nil || method == nil || callId == nil || cSeq == nil || from == nil || to == nil || via == nil || maxForwards == nil || content == nil || contentType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Null parameters");
  AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = create_AndroidGovNistJavaxSipMessageSIPRequest_init();
  [sipRequest setRequestURIWithAndroidJavaxSipAddressURI:requestURI];
  [sipRequest setMethodWithNSString:method];
  [sipRequest setCallIdWithAndroidJavaxSipHeaderCallIdHeader:callId];
  [sipRequest setCSeqWithAndroidJavaxSipHeaderCSeqHeader:cSeq];
  [sipRequest setFromWithAndroidJavaxSipHeaderFromHeader:from];
  [sipRequest setToWithAndroidJavaxSipHeaderToHeader:to];
  [sipRequest setViaWithJavaUtilList:via];
  [sipRequest setMaxForwardsWithAndroidJavaxSipHeaderMaxForwardsHeader:maxForwards];
  [sipRequest setContentWithId:content withAndroidJavaxSipHeaderContentTypeHeader:contentType];
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent != nil) {
    [sipRequest setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent];
  }
  return sipRequest;
}

- (id<AndroidJavaxSipMessageRequest>)createRequestWithAndroidJavaxSipAddressURI:(id<AndroidJavaxSipAddressURI>)requestURI
                                                                   withNSString:(NSString *)method
                                          withAndroidJavaxSipHeaderCallIdHeader:(id<AndroidJavaxSipHeaderCallIdHeader>)callId
                                            withAndroidJavaxSipHeaderCSeqHeader:(id<AndroidJavaxSipHeaderCSeqHeader>)cSeq
                                            withAndroidJavaxSipHeaderFromHeader:(id<AndroidJavaxSipHeaderFromHeader>)from
                                              withAndroidJavaxSipHeaderToHeader:(id<AndroidJavaxSipHeaderToHeader>)to
                                                               withJavaUtilList:(id<JavaUtilList>)via
                                     withAndroidJavaxSipHeaderMaxForwardsHeader:(id<AndroidJavaxSipHeaderMaxForwardsHeader>)maxForwards
                                                                  withByteArray:(IOSByteArray *)content
                                     withAndroidJavaxSipHeaderContentTypeHeader:(id<AndroidJavaxSipHeaderContentTypeHeader>)contentType {
  if (requestURI == nil || method == nil || callId == nil || cSeq == nil || from == nil || to == nil || via == nil || maxForwards == nil || content == nil || contentType == nil) @throw create_JavaTextParseException_initWithNSString_withInt_(@"JAIN-SIP Exception, some parameters are missing, unable to create the request", 0);
  AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = create_AndroidGovNistJavaxSipMessageSIPRequest_init();
  [sipRequest setRequestURIWithAndroidJavaxSipAddressURI:requestURI];
  [sipRequest setMethodWithNSString:method];
  [sipRequest setCallIdWithAndroidJavaxSipHeaderCallIdHeader:callId];
  [sipRequest setCSeqWithAndroidJavaxSipHeaderCSeqHeader:cSeq];
  [sipRequest setFromWithAndroidJavaxSipHeaderFromHeader:from];
  [sipRequest setToWithAndroidJavaxSipHeaderToHeader:to];
  [sipRequest setViaWithJavaUtilList:via];
  [sipRequest setMaxForwardsWithAndroidJavaxSipHeaderMaxForwardsHeader:maxForwards];
  [sipRequest setHeaderWithAndroidJavaxSipHeaderHeader:(AndroidGovNistJavaxSipHeaderContentType *) cast_chk(contentType, [AndroidGovNistJavaxSipHeaderContentType class])];
  [sipRequest setMessageContentWithByteArray:content];
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent != nil) {
    [sipRequest setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent];
  }
  return sipRequest;
}

- (id<AndroidJavaxSipMessageRequest>)createRequestWithAndroidJavaxSipAddressURI:(id<AndroidJavaxSipAddressURI>)requestURI
                                                                   withNSString:(NSString *)method
                                          withAndroidJavaxSipHeaderCallIdHeader:(id<AndroidJavaxSipHeaderCallIdHeader>)callId
                                            withAndroidJavaxSipHeaderCSeqHeader:(id<AndroidJavaxSipHeaderCSeqHeader>)cSeq
                                            withAndroidJavaxSipHeaderFromHeader:(id<AndroidJavaxSipHeaderFromHeader>)from
                                              withAndroidJavaxSipHeaderToHeader:(id<AndroidJavaxSipHeaderToHeader>)to
                                                               withJavaUtilList:(id<JavaUtilList>)via
                                     withAndroidJavaxSipHeaderMaxForwardsHeader:(id<AndroidJavaxSipHeaderMaxForwardsHeader>)maxForwards {
  if (requestURI == nil || method == nil || callId == nil || cSeq == nil || from == nil || to == nil || via == nil || maxForwards == nil) @throw create_JavaTextParseException_initWithNSString_withInt_(@"JAIN-SIP Exception, some parameters are missing, unable to create the request", 0);
  AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = create_AndroidGovNistJavaxSipMessageSIPRequest_init();
  [sipRequest setRequestURIWithAndroidJavaxSipAddressURI:requestURI];
  [sipRequest setMethodWithNSString:method];
  [sipRequest setCallIdWithAndroidJavaxSipHeaderCallIdHeader:callId];
  [sipRequest setCSeqWithAndroidJavaxSipHeaderCSeqHeader:cSeq];
  [sipRequest setFromWithAndroidJavaxSipHeaderFromHeader:from];
  [sipRequest setToWithAndroidJavaxSipHeaderToHeader:to];
  [sipRequest setViaWithJavaUtilList:via];
  [sipRequest setMaxForwardsWithAndroidJavaxSipHeaderMaxForwardsHeader:maxForwards];
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent != nil) {
    [sipRequest setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent];
  }
  return sipRequest;
}

- (id<AndroidJavaxSipMessageResponse>)createResponseWithInt:(jint)statusCode
                      withAndroidJavaxSipHeaderCallIdHeader:(id<AndroidJavaxSipHeaderCallIdHeader>)callId
                        withAndroidJavaxSipHeaderCSeqHeader:(id<AndroidJavaxSipHeaderCSeqHeader>)cSeq
                        withAndroidJavaxSipHeaderFromHeader:(id<AndroidJavaxSipHeaderFromHeader>)from
                          withAndroidJavaxSipHeaderToHeader:(id<AndroidJavaxSipHeaderToHeader>)to
                                           withJavaUtilList:(id<JavaUtilList>)via
                 withAndroidJavaxSipHeaderMaxForwardsHeader:(id<AndroidJavaxSipHeaderMaxForwardsHeader>)maxForwards
                                                     withId:(id)content
                 withAndroidJavaxSipHeaderContentTypeHeader:(id<AndroidJavaxSipHeaderContentTypeHeader>)contentType {
  if (callId == nil || cSeq == nil || from == nil || to == nil || via == nil || maxForwards == nil || content == nil || contentType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@" unable to create the response");
  AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = create_AndroidGovNistJavaxSipMessageSIPResponse_init();
  AndroidGovNistJavaxSipHeaderStatusLine *statusLine = create_AndroidGovNistJavaxSipHeaderStatusLine_init();
  [statusLine setStatusCodeWithInt:statusCode];
  NSString *reasonPhrase = AndroidGovNistJavaxSipMessageSIPResponse_getReasonPhraseWithInt_(statusCode);
  [statusLine setReasonPhraseWithNSString:reasonPhrase];
  [sipResponse setStatusLineWithAndroidGovNistJavaxSipHeaderStatusLine:statusLine];
  [sipResponse setCallIdWithAndroidJavaxSipHeaderCallIdHeader:callId];
  [sipResponse setCSeqWithAndroidJavaxSipHeaderCSeqHeader:cSeq];
  [sipResponse setFromWithAndroidJavaxSipHeaderFromHeader:from];
  [sipResponse setToWithAndroidJavaxSipHeaderToHeader:to];
  [sipResponse setViaWithJavaUtilList:via];
  [sipResponse setMaxForwardsWithAndroidJavaxSipHeaderMaxForwardsHeader:maxForwards];
  [sipResponse setContentWithId:content withAndroidJavaxSipHeaderContentTypeHeader:contentType];
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent != nil) {
    [sipResponse setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent];
  }
  return sipResponse;
}

- (id<AndroidJavaxSipMessageResponse>)createResponseWithInt:(jint)statusCode
                      withAndroidJavaxSipHeaderCallIdHeader:(id<AndroidJavaxSipHeaderCallIdHeader>)callId
                        withAndroidJavaxSipHeaderCSeqHeader:(id<AndroidJavaxSipHeaderCSeqHeader>)cSeq
                        withAndroidJavaxSipHeaderFromHeader:(id<AndroidJavaxSipHeaderFromHeader>)from
                          withAndroidJavaxSipHeaderToHeader:(id<AndroidJavaxSipHeaderToHeader>)to
                                           withJavaUtilList:(id<JavaUtilList>)via
                 withAndroidJavaxSipHeaderMaxForwardsHeader:(id<AndroidJavaxSipHeaderMaxForwardsHeader>)maxForwards
                                              withByteArray:(IOSByteArray *)content
                 withAndroidJavaxSipHeaderContentTypeHeader:(id<AndroidJavaxSipHeaderContentTypeHeader>)contentType {
  if (callId == nil || cSeq == nil || from == nil || to == nil || via == nil || maxForwards == nil || content == nil || contentType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Null params ");
  AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = create_AndroidGovNistJavaxSipMessageSIPResponse_init();
  [sipResponse setStatusCodeWithInt:statusCode];
  [sipResponse setCallIdWithAndroidJavaxSipHeaderCallIdHeader:callId];
  [sipResponse setCSeqWithAndroidJavaxSipHeaderCSeqHeader:cSeq];
  [sipResponse setFromWithAndroidJavaxSipHeaderFromHeader:from];
  [sipResponse setToWithAndroidJavaxSipHeaderToHeader:to];
  [sipResponse setViaWithJavaUtilList:via];
  [sipResponse setMaxForwardsWithAndroidJavaxSipHeaderMaxForwardsHeader:maxForwards];
  [sipResponse setHeaderWithAndroidJavaxSipHeaderHeader:(AndroidGovNistJavaxSipHeaderContentType *) cast_chk(contentType, [AndroidGovNistJavaxSipHeaderContentType class])];
  [sipResponse setMessageContentWithByteArray:content];
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent != nil) {
    [sipResponse setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent];
  }
  return sipResponse;
}

- (id<AndroidJavaxSipMessageResponse>)createResponseWithInt:(jint)statusCode
                      withAndroidJavaxSipHeaderCallIdHeader:(id<AndroidJavaxSipHeaderCallIdHeader>)callId
                        withAndroidJavaxSipHeaderCSeqHeader:(id<AndroidJavaxSipHeaderCSeqHeader>)cSeq
                        withAndroidJavaxSipHeaderFromHeader:(id<AndroidJavaxSipHeaderFromHeader>)from
                          withAndroidJavaxSipHeaderToHeader:(id<AndroidJavaxSipHeaderToHeader>)to
                                           withJavaUtilList:(id<JavaUtilList>)via
                 withAndroidJavaxSipHeaderMaxForwardsHeader:(id<AndroidJavaxSipHeaderMaxForwardsHeader>)maxForwards {
  if (callId == nil || cSeq == nil || from == nil || to == nil || via == nil || maxForwards == nil) @throw create_JavaTextParseException_initWithNSString_withInt_(@"JAIN-SIP Exception, some parameters are missing, unable to create the response", 0);
  AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = create_AndroidGovNistJavaxSipMessageSIPResponse_init();
  [sipResponse setStatusCodeWithInt:statusCode];
  [sipResponse setCallIdWithAndroidJavaxSipHeaderCallIdHeader:callId];
  [sipResponse setCSeqWithAndroidJavaxSipHeaderCSeqHeader:cSeq];
  [sipResponse setFromWithAndroidJavaxSipHeaderFromHeader:from];
  [sipResponse setToWithAndroidJavaxSipHeaderToHeader:to];
  [sipResponse setViaWithJavaUtilList:via];
  [sipResponse setMaxForwardsWithAndroidJavaxSipHeaderMaxForwardsHeader:maxForwards];
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent != nil) {
    [sipResponse setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent];
  }
  return sipResponse;
}

- (id<AndroidJavaxSipMessageResponse>)createResponseWithInt:(jint)statusCode
                          withAndroidJavaxSipMessageRequest:(id<AndroidJavaxSipMessageRequest>)request
                 withAndroidJavaxSipHeaderContentTypeHeader:(id<AndroidJavaxSipHeaderContentTypeHeader>)contentType
                                                     withId:(id)content {
  if (request == nil || content == nil || contentType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null parameters");
  AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class]);
  AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = [sipRequest createResponseWithInt:statusCode];
  [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) setContentWithId:content withAndroidJavaxSipHeaderContentTypeHeader:contentType];
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_server != nil) {
    [sipResponse setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_server];
  }
  return sipResponse;
}

- (id<AndroidJavaxSipMessageResponse>)createResponseWithInt:(jint)statusCode
                          withAndroidJavaxSipMessageRequest:(id<AndroidJavaxSipMessageRequest>)request
                 withAndroidJavaxSipHeaderContentTypeHeader:(id<AndroidJavaxSipHeaderContentTypeHeader>)contentType
                                              withByteArray:(IOSByteArray *)content {
  if (request == nil || content == nil || contentType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null Parameters");
  AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class]);
  AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = [sipRequest createResponseWithInt:statusCode];
  [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) setHeaderWithAndroidJavaxSipHeaderHeader:(AndroidGovNistJavaxSipHeaderContentType *) cast_chk(contentType, [AndroidGovNistJavaxSipHeaderContentType class])];
  [sipResponse setMessageContentWithByteArray:content];
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_server != nil) {
    [sipResponse setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_server];
  }
  return sipResponse;
}

- (id<AndroidJavaxSipMessageResponse>)createResponseWithInt:(jint)statusCode
                          withAndroidJavaxSipMessageRequest:(id<AndroidJavaxSipMessageRequest>)request {
  if (request == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null parameters");
  AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(request, [AndroidGovNistJavaxSipMessageSIPRequest class]);
  AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = [sipRequest createResponseWithInt:statusCode];
  [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(sipResponse)) removeContent];
  [sipResponse removeHeaderWithNSString:AndroidJavaxSipHeaderContentTypeHeader_NAME];
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_server != nil) {
    [sipResponse setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_server];
  }
  return sipResponse;
}

- (id<AndroidJavaxSipMessageRequest>)createRequestWithAndroidJavaxSipAddressURI:(id<AndroidJavaxSipAddressURI>)requestURI
                                                                   withNSString:(NSString *)method
                                          withAndroidJavaxSipHeaderCallIdHeader:(id<AndroidJavaxSipHeaderCallIdHeader>)callId
                                            withAndroidJavaxSipHeaderCSeqHeader:(id<AndroidJavaxSipHeaderCSeqHeader>)cSeq
                                            withAndroidJavaxSipHeaderFromHeader:(id<AndroidJavaxSipHeaderFromHeader>)from
                                              withAndroidJavaxSipHeaderToHeader:(id<AndroidJavaxSipHeaderToHeader>)to
                                                               withJavaUtilList:(id<JavaUtilList>)via
                                     withAndroidJavaxSipHeaderMaxForwardsHeader:(id<AndroidJavaxSipHeaderMaxForwardsHeader>)maxForwards
                                     withAndroidJavaxSipHeaderContentTypeHeader:(id<AndroidJavaxSipHeaderContentTypeHeader>)contentType
                                                                  withByteArray:(IOSByteArray *)content {
  if (requestURI == nil || method == nil || callId == nil || cSeq == nil || from == nil || to == nil || via == nil || maxForwards == nil || content == nil || contentType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"missing parameters");
  AndroidGovNistJavaxSipMessageSIPRequest *sipRequest = create_AndroidGovNistJavaxSipMessageSIPRequest_init();
  [sipRequest setRequestURIWithAndroidJavaxSipAddressURI:requestURI];
  [sipRequest setMethodWithNSString:method];
  [sipRequest setCallIdWithAndroidJavaxSipHeaderCallIdHeader:callId];
  [sipRequest setCSeqWithAndroidJavaxSipHeaderCSeqHeader:cSeq];
  [sipRequest setFromWithAndroidJavaxSipHeaderFromHeader:from];
  [sipRequest setToWithAndroidJavaxSipHeaderToHeader:to];
  [sipRequest setViaWithJavaUtilList:via];
  [sipRequest setMaxForwardsWithAndroidJavaxSipHeaderMaxForwardsHeader:maxForwards];
  [sipRequest setContentWithId:content withAndroidJavaxSipHeaderContentTypeHeader:contentType];
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent != nil) {
    [sipRequest setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent];
  }
  return sipRequest;
}

- (id<AndroidJavaxSipMessageResponse>)createResponseWithInt:(jint)statusCode
                      withAndroidJavaxSipHeaderCallIdHeader:(id<AndroidJavaxSipHeaderCallIdHeader>)callId
                        withAndroidJavaxSipHeaderCSeqHeader:(id<AndroidJavaxSipHeaderCSeqHeader>)cSeq
                        withAndroidJavaxSipHeaderFromHeader:(id<AndroidJavaxSipHeaderFromHeader>)from
                          withAndroidJavaxSipHeaderToHeader:(id<AndroidJavaxSipHeaderToHeader>)to
                                           withJavaUtilList:(id<JavaUtilList>)via
                 withAndroidJavaxSipHeaderMaxForwardsHeader:(id<AndroidJavaxSipHeaderMaxForwardsHeader>)maxForwards
                 withAndroidJavaxSipHeaderContentTypeHeader:(id<AndroidJavaxSipHeaderContentTypeHeader>)contentType
                                                     withId:(id)content {
  if (callId == nil || cSeq == nil || from == nil || to == nil || via == nil || maxForwards == nil || content == nil || contentType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"missing parameters");
  AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = create_AndroidGovNistJavaxSipMessageSIPResponse_init();
  AndroidGovNistJavaxSipHeaderStatusLine *statusLine = create_AndroidGovNistJavaxSipHeaderStatusLine_init();
  [statusLine setStatusCodeWithInt:statusCode];
  NSString *reason = AndroidGovNistJavaxSipMessageSIPResponse_getReasonPhraseWithInt_(statusCode);
  if (reason == nil) @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("I$", statusCode, @" Unknown"), 0);
  [statusLine setReasonPhraseWithNSString:reason];
  [sipResponse setStatusLineWithAndroidGovNistJavaxSipHeaderStatusLine:statusLine];
  [sipResponse setCallIdWithAndroidJavaxSipHeaderCallIdHeader:callId];
  [sipResponse setCSeqWithAndroidJavaxSipHeaderCSeqHeader:cSeq];
  [sipResponse setFromWithAndroidJavaxSipHeaderFromHeader:from];
  [sipResponse setToWithAndroidJavaxSipHeaderToHeader:to];
  [sipResponse setViaWithJavaUtilList:via];
  [sipResponse setContentWithId:content withAndroidJavaxSipHeaderContentTypeHeader:contentType];
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent != nil) {
    [sipResponse setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent];
  }
  return sipResponse;
}

- (id<AndroidJavaxSipMessageResponse>)createResponseWithInt:(jint)statusCode
                      withAndroidJavaxSipHeaderCallIdHeader:(id<AndroidJavaxSipHeaderCallIdHeader>)callId
                        withAndroidJavaxSipHeaderCSeqHeader:(id<AndroidJavaxSipHeaderCSeqHeader>)cSeq
                        withAndroidJavaxSipHeaderFromHeader:(id<AndroidJavaxSipHeaderFromHeader>)from
                          withAndroidJavaxSipHeaderToHeader:(id<AndroidJavaxSipHeaderToHeader>)to
                                           withJavaUtilList:(id<JavaUtilList>)via
                 withAndroidJavaxSipHeaderMaxForwardsHeader:(id<AndroidJavaxSipHeaderMaxForwardsHeader>)maxForwards
                 withAndroidJavaxSipHeaderContentTypeHeader:(id<AndroidJavaxSipHeaderContentTypeHeader>)contentType
                                              withByteArray:(IOSByteArray *)content {
  if (callId == nil || cSeq == nil || from == nil || to == nil || via == nil || maxForwards == nil || content == nil || contentType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"missing parameters");
  AndroidGovNistJavaxSipMessageSIPResponse *sipResponse = create_AndroidGovNistJavaxSipMessageSIPResponse_init();
  AndroidGovNistJavaxSipHeaderStatusLine *statusLine = create_AndroidGovNistJavaxSipHeaderStatusLine_init();
  [statusLine setStatusCodeWithInt:statusCode];
  NSString *reason = AndroidGovNistJavaxSipMessageSIPResponse_getReasonPhraseWithInt_(statusCode);
  if (reason == nil) @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("I$", statusCode, @" : Unknown"), 0);
  [statusLine setReasonPhraseWithNSString:reason];
  [sipResponse setStatusLineWithAndroidGovNistJavaxSipHeaderStatusLine:statusLine];
  [sipResponse setCallIdWithAndroidJavaxSipHeaderCallIdHeader:callId];
  [sipResponse setCSeqWithAndroidJavaxSipHeaderCSeqHeader:cSeq];
  [sipResponse setFromWithAndroidJavaxSipHeaderFromHeader:from];
  [sipResponse setToWithAndroidJavaxSipHeaderToHeader:to];
  [sipResponse setViaWithJavaUtilList:via];
  [sipResponse setContentWithId:content withAndroidJavaxSipHeaderContentTypeHeader:contentType];
  if (AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent != nil) {
    [sipResponse setHeaderWithAndroidJavaxSipHeaderHeader:AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent];
  }
  return sipResponse;
}

- (id<AndroidJavaxSipMessageRequest>)createRequestWithNSString:(NSString *)requestString {
  if (requestString == nil || [requestString isEqual:@""]) {
    AndroidGovNistJavaxSipMessageSIPRequest *retval = create_AndroidGovNistJavaxSipMessageSIPRequest_init();
    [retval setNullRequest];
    return retval;
  }
  AndroidGovNistJavaxSipParserStringMsgParser *smp = create_AndroidGovNistJavaxSipParserStringMsgParser_init();
  id<AndroidGovNistJavaxSipParserParseExceptionListener> parseExceptionListener = create_AndroidGovNistJavaxSipMessageMessageFactoryImpl_1_initWithAndroidGovNistJavaxSipMessageMessageFactoryImpl_(self);
  id<AndroidGovNistJavaxSipParserParseExceptionListener> exHandler = nil;
  if (self->testing_) exHandler = parseExceptionListener;
  AndroidGovNistJavaxSipMessageSIPMessage *sipMessage = [smp parseSIPMessageWithByteArray:[requestString java_getBytes] withBoolean:true withBoolean:self->strict_ withAndroidGovNistJavaxSipParserParseExceptionListener:exHandler];
  if (!([sipMessage isKindOfClass:[AndroidGovNistJavaxSipMessageSIPRequest class]])) @throw create_JavaTextParseException_initWithNSString_withInt_(requestString, 0);
  return (AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(sipMessage, [AndroidGovNistJavaxSipMessageSIPRequest class]);
}

- (id<AndroidJavaxSipMessageResponse>)createResponseWithNSString:(NSString *)responseString {
  if (responseString == nil) return create_AndroidGovNistJavaxSipMessageSIPResponse_init();
  AndroidGovNistJavaxSipParserStringMsgParser *smp = create_AndroidGovNistJavaxSipParserStringMsgParser_init();
  AndroidGovNistJavaxSipMessageSIPMessage *sipMessage = [smp parseSIPMessageWithByteArray:[responseString java_getBytes] withBoolean:true withBoolean:false withAndroidGovNistJavaxSipParserParseExceptionListener:nil];
  if (!([sipMessage isKindOfClass:[AndroidGovNistJavaxSipMessageSIPResponse class]])) @throw create_JavaTextParseException_initWithNSString_withInt_(responseString, 0);
  return (AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(sipMessage, [AndroidGovNistJavaxSipMessageSIPResponse class]);
}

- (void)setDefaultUserAgentHeaderWithAndroidJavaxSipHeaderUserAgentHeader:(id<AndroidJavaxSipHeaderUserAgentHeader>)userAgent {
  JreStrongAssign(&AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent, userAgent);
}

- (void)setDefaultServerHeaderWithAndroidJavaxSipHeaderServerHeader:(id<AndroidJavaxSipHeaderServerHeader>)server {
  JreStrongAssign(&AndroidGovNistJavaxSipMessageMessageFactoryImpl_server, server);
}

+ (id<AndroidJavaxSipHeaderUserAgentHeader>)getDefaultUserAgentHeader {
  return AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultUserAgentHeader();
}

+ (id<AndroidJavaxSipHeaderServerHeader>)getDefaultServerHeader {
  return AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultServerHeader();
}

- (void)setDefaultContentEncodingCharsetWithNSString:(NSString *)charset {
  if (charset == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Null argument!");
  JreStrongAssign(&AndroidGovNistJavaxSipMessageMessageFactoryImpl_defaultContentEncodingCharset, charset);
}

+ (NSString *)getDefaultContentEncodingCharset {
  return AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultContentEncodingCharset();
}

- (id<AndroidGovNistJavaxSipMessageMultipartMimeContent>)createMultipartMimeContentWithAndroidJavaxSipHeaderContentTypeHeader:(id<AndroidJavaxSipHeaderContentTypeHeader>)multipartMimeCth
                                                                                                            withNSStringArray:(IOSObjectArray *)contentType
                                                                                                            withNSStringArray:(IOSObjectArray *)contentSubtype
                                                                                                            withNSStringArray:(IOSObjectArray *)contentBody {
  NSString *boundary = [((id<AndroidJavaxSipHeaderContentTypeHeader>) nil_chk(multipartMimeCth)) getParameterWithNSString:@"boundary"];
  AndroidGovNistJavaxSipMessageMultipartMimeContentImpl *retval = create_AndroidGovNistJavaxSipMessageMultipartMimeContentImpl_initWithAndroidJavaxSipHeaderContentTypeHeader_(multipartMimeCth);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(contentType))->size_; i++) {
    id<AndroidJavaxSipHeaderContentTypeHeader> cth = create_AndroidGovNistJavaxSipHeaderContentType_initWithNSString_withNSString_(IOSObjectArray_Get(contentType, i), IOSObjectArray_Get(nil_chk(contentSubtype), i));
    AndroidGovNistJavaxSipMessageContentImpl *contentImpl = create_AndroidGovNistJavaxSipMessageContentImpl_initWithNSString_(IOSObjectArray_Get(nil_chk(contentBody), i));
    [contentImpl setContentTypeHeaderWithAndroidJavaxSipHeaderContentTypeHeader:cth];
    [retval addWithAndroidGovNistJavaxSipMessageContent:contentImpl];
  }
  return retval;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageRequest;", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageRequest;", 0x1, 3, 6, 5, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageRequest;", 0x1, 3, 7, 5, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageResponse;", 0x1, 8, 9, 5, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageResponse;", 0x1, 8, 10, 5, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageResponse;", 0x1, 8, 11, 5, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageResponse;", 0x1, 8, 12, 5, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageResponse;", 0x1, 8, 13, 5, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageResponse;", 0x1, 8, 14, 5, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageRequest;", 0x1, 3, 15, 5, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageResponse;", 0x1, 8, 16, 5, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageResponse;", 0x1, 8, 17, 5, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageRequest;", 0x1, 3, 18, 5, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipMessageResponse;", 0x1, 8, 18, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderUserAgentHeader;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderServerHeader;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 18, 24, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipMessageMultipartMimeContent;", 0x1, 25, 26, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setStrictWithBoolean:);
  methods[1].selector = @selector(setTestWithBoolean:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(createRequestWithAndroidJavaxSipAddressURI:withNSString:withAndroidJavaxSipHeaderCallIdHeader:withAndroidJavaxSipHeaderCSeqHeader:withAndroidJavaxSipHeaderFromHeader:withAndroidJavaxSipHeaderToHeader:withJavaUtilList:withAndroidJavaxSipHeaderMaxForwardsHeader:withAndroidJavaxSipHeaderContentTypeHeader:withId:);
  methods[4].selector = @selector(createRequestWithAndroidJavaxSipAddressURI:withNSString:withAndroidJavaxSipHeaderCallIdHeader:withAndroidJavaxSipHeaderCSeqHeader:withAndroidJavaxSipHeaderFromHeader:withAndroidJavaxSipHeaderToHeader:withJavaUtilList:withAndroidJavaxSipHeaderMaxForwardsHeader:withByteArray:withAndroidJavaxSipHeaderContentTypeHeader:);
  methods[5].selector = @selector(createRequestWithAndroidJavaxSipAddressURI:withNSString:withAndroidJavaxSipHeaderCallIdHeader:withAndroidJavaxSipHeaderCSeqHeader:withAndroidJavaxSipHeaderFromHeader:withAndroidJavaxSipHeaderToHeader:withJavaUtilList:withAndroidJavaxSipHeaderMaxForwardsHeader:);
  methods[6].selector = @selector(createResponseWithInt:withAndroidJavaxSipHeaderCallIdHeader:withAndroidJavaxSipHeaderCSeqHeader:withAndroidJavaxSipHeaderFromHeader:withAndroidJavaxSipHeaderToHeader:withJavaUtilList:withAndroidJavaxSipHeaderMaxForwardsHeader:withId:withAndroidJavaxSipHeaderContentTypeHeader:);
  methods[7].selector = @selector(createResponseWithInt:withAndroidJavaxSipHeaderCallIdHeader:withAndroidJavaxSipHeaderCSeqHeader:withAndroidJavaxSipHeaderFromHeader:withAndroidJavaxSipHeaderToHeader:withJavaUtilList:withAndroidJavaxSipHeaderMaxForwardsHeader:withByteArray:withAndroidJavaxSipHeaderContentTypeHeader:);
  methods[8].selector = @selector(createResponseWithInt:withAndroidJavaxSipHeaderCallIdHeader:withAndroidJavaxSipHeaderCSeqHeader:withAndroidJavaxSipHeaderFromHeader:withAndroidJavaxSipHeaderToHeader:withJavaUtilList:withAndroidJavaxSipHeaderMaxForwardsHeader:);
  methods[9].selector = @selector(createResponseWithInt:withAndroidJavaxSipMessageRequest:withAndroidJavaxSipHeaderContentTypeHeader:withId:);
  methods[10].selector = @selector(createResponseWithInt:withAndroidJavaxSipMessageRequest:withAndroidJavaxSipHeaderContentTypeHeader:withByteArray:);
  methods[11].selector = @selector(createResponseWithInt:withAndroidJavaxSipMessageRequest:);
  methods[12].selector = @selector(createRequestWithAndroidJavaxSipAddressURI:withNSString:withAndroidJavaxSipHeaderCallIdHeader:withAndroidJavaxSipHeaderCSeqHeader:withAndroidJavaxSipHeaderFromHeader:withAndroidJavaxSipHeaderToHeader:withJavaUtilList:withAndroidJavaxSipHeaderMaxForwardsHeader:withAndroidJavaxSipHeaderContentTypeHeader:withByteArray:);
  methods[13].selector = @selector(createResponseWithInt:withAndroidJavaxSipHeaderCallIdHeader:withAndroidJavaxSipHeaderCSeqHeader:withAndroidJavaxSipHeaderFromHeader:withAndroidJavaxSipHeaderToHeader:withJavaUtilList:withAndroidJavaxSipHeaderMaxForwardsHeader:withAndroidJavaxSipHeaderContentTypeHeader:withId:);
  methods[14].selector = @selector(createResponseWithInt:withAndroidJavaxSipHeaderCallIdHeader:withAndroidJavaxSipHeaderCSeqHeader:withAndroidJavaxSipHeaderFromHeader:withAndroidJavaxSipHeaderToHeader:withJavaUtilList:withAndroidJavaxSipHeaderMaxForwardsHeader:withAndroidJavaxSipHeaderContentTypeHeader:withByteArray:);
  methods[15].selector = @selector(createRequestWithNSString:);
  methods[16].selector = @selector(createResponseWithNSString:);
  methods[17].selector = @selector(setDefaultUserAgentHeaderWithAndroidJavaxSipHeaderUserAgentHeader:);
  methods[18].selector = @selector(setDefaultServerHeaderWithAndroidJavaxSipHeaderServerHeader:);
  methods[19].selector = @selector(getDefaultUserAgentHeader);
  methods[20].selector = @selector(getDefaultServerHeader);
  methods[21].selector = @selector(setDefaultContentEncodingCharsetWithNSString:);
  methods[22].selector = @selector(getDefaultContentEncodingCharset);
  methods[23].selector = @selector(createMultipartMimeContentWithAndroidJavaxSipHeaderContentTypeHeader:withNSStringArray:withNSStringArray:withNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "testing_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strict_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultContentEncodingCharset", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 27, -1, -1 },
    { "userAgent", "LAndroidJavaxSipHeaderUserAgentHeader;", .constantValue.asLong = 0, 0xa, -1, 28, -1, -1 },
    { "server", "LAndroidJavaxSipHeaderServerHeader;", .constantValue.asLong = 0, 0xa, -1, 29, -1, -1 },
  };
  static const void *ptrTable[] = { "setStrict", "Z", "setTest", "createRequest", "LAndroidJavaxSipAddressURI;LNSString;LAndroidJavaxSipHeaderCallIdHeader;LAndroidJavaxSipHeaderCSeqHeader;LAndroidJavaxSipHeaderFromHeader;LAndroidJavaxSipHeaderToHeader;LJavaUtilList;LAndroidJavaxSipHeaderMaxForwardsHeader;LAndroidJavaxSipHeaderContentTypeHeader;LNSObject;", "LJavaTextParseException;", "LAndroidJavaxSipAddressURI;LNSString;LAndroidJavaxSipHeaderCallIdHeader;LAndroidJavaxSipHeaderCSeqHeader;LAndroidJavaxSipHeaderFromHeader;LAndroidJavaxSipHeaderToHeader;LJavaUtilList;LAndroidJavaxSipHeaderMaxForwardsHeader;[BLAndroidJavaxSipHeaderContentTypeHeader;", "LAndroidJavaxSipAddressURI;LNSString;LAndroidJavaxSipHeaderCallIdHeader;LAndroidJavaxSipHeaderCSeqHeader;LAndroidJavaxSipHeaderFromHeader;LAndroidJavaxSipHeaderToHeader;LJavaUtilList;LAndroidJavaxSipHeaderMaxForwardsHeader;", "createResponse", "ILAndroidJavaxSipHeaderCallIdHeader;LAndroidJavaxSipHeaderCSeqHeader;LAndroidJavaxSipHeaderFromHeader;LAndroidJavaxSipHeaderToHeader;LJavaUtilList;LAndroidJavaxSipHeaderMaxForwardsHeader;LNSObject;LAndroidJavaxSipHeaderContentTypeHeader;", "ILAndroidJavaxSipHeaderCallIdHeader;LAndroidJavaxSipHeaderCSeqHeader;LAndroidJavaxSipHeaderFromHeader;LAndroidJavaxSipHeaderToHeader;LJavaUtilList;LAndroidJavaxSipHeaderMaxForwardsHeader;[BLAndroidJavaxSipHeaderContentTypeHeader;", "ILAndroidJavaxSipHeaderCallIdHeader;LAndroidJavaxSipHeaderCSeqHeader;LAndroidJavaxSipHeaderFromHeader;LAndroidJavaxSipHeaderToHeader;LJavaUtilList;LAndroidJavaxSipHeaderMaxForwardsHeader;", "ILAndroidJavaxSipMessageRequest;LAndroidJavaxSipHeaderContentTypeHeader;LNSObject;", "ILAndroidJavaxSipMessageRequest;LAndroidJavaxSipHeaderContentTypeHeader;[B", "ILAndroidJavaxSipMessageRequest;", "LAndroidJavaxSipAddressURI;LNSString;LAndroidJavaxSipHeaderCallIdHeader;LAndroidJavaxSipHeaderCSeqHeader;LAndroidJavaxSipHeaderFromHeader;LAndroidJavaxSipHeaderToHeader;LJavaUtilList;LAndroidJavaxSipHeaderMaxForwardsHeader;LAndroidJavaxSipHeaderContentTypeHeader;[B", "ILAndroidJavaxSipHeaderCallIdHeader;LAndroidJavaxSipHeaderCSeqHeader;LAndroidJavaxSipHeaderFromHeader;LAndroidJavaxSipHeaderToHeader;LJavaUtilList;LAndroidJavaxSipHeaderMaxForwardsHeader;LAndroidJavaxSipHeaderContentTypeHeader;LNSObject;", "ILAndroidJavaxSipHeaderCallIdHeader;LAndroidJavaxSipHeaderCSeqHeader;LAndroidJavaxSipHeaderFromHeader;LAndroidJavaxSipHeaderToHeader;LJavaUtilList;LAndroidJavaxSipHeaderMaxForwardsHeader;LAndroidJavaxSipHeaderContentTypeHeader;[B", "LNSString;", "setDefaultUserAgentHeader", "LAndroidJavaxSipHeaderUserAgentHeader;", "setDefaultServerHeader", "LAndroidJavaxSipHeaderServerHeader;", "setDefaultContentEncodingCharset", "LJavaLangNullPointerException;LJavaLangIllegalArgumentException;", "createMultipartMimeContent", "LAndroidJavaxSipHeaderContentTypeHeader;[LNSString;[LNSString;[LNSString;", &AndroidGovNistJavaxSipMessageMessageFactoryImpl_defaultContentEncodingCharset, &AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent, &AndroidGovNistJavaxSipMessageMessageFactoryImpl_server };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipMessageMessageFactoryImpl = { "MessageFactoryImpl", "android.gov.nist.javax.sip.message", ptrTable, methods, fields, 7, 0x1, 24, 5, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipMessageMessageFactoryImpl;
}

@end

void AndroidGovNistJavaxSipMessageMessageFactoryImpl_init(AndroidGovNistJavaxSipMessageMessageFactoryImpl *self) {
  NSObject_init(self);
  self->testing_ = false;
  self->strict_ = true;
}

AndroidGovNistJavaxSipMessageMessageFactoryImpl *new_AndroidGovNistJavaxSipMessageMessageFactoryImpl_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipMessageMessageFactoryImpl, init)
}

AndroidGovNistJavaxSipMessageMessageFactoryImpl *create_AndroidGovNistJavaxSipMessageMessageFactoryImpl_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipMessageMessageFactoryImpl, init)
}

id<AndroidJavaxSipHeaderUserAgentHeader> AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultUserAgentHeader() {
  AndroidGovNistJavaxSipMessageMessageFactoryImpl_initialize();
  return AndroidGovNistJavaxSipMessageMessageFactoryImpl_userAgent;
}

id<AndroidJavaxSipHeaderServerHeader> AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultServerHeader() {
  AndroidGovNistJavaxSipMessageMessageFactoryImpl_initialize();
  return AndroidGovNistJavaxSipMessageMessageFactoryImpl_server;
}

NSString *AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultContentEncodingCharset() {
  AndroidGovNistJavaxSipMessageMessageFactoryImpl_initialize();
  return AndroidGovNistJavaxSipMessageMessageFactoryImpl_defaultContentEncodingCharset;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipMessageMessageFactoryImpl)

@implementation AndroidGovNistJavaxSipMessageMessageFactoryImpl_1

- (instancetype)initWithAndroidGovNistJavaxSipMessageMessageFactoryImpl:(AndroidGovNistJavaxSipMessageMessageFactoryImpl *)outer$ {
  AndroidGovNistJavaxSipMessageMessageFactoryImpl_1_initWithAndroidGovNistJavaxSipMessageMessageFactoryImpl_(self, outer$);
  return self;
}

- (void)handleExceptionWithJavaTextParseException:(JavaTextParseException *)ex
      withAndroidGovNistJavaxSipMessageSIPMessage:(AndroidGovNistJavaxSipMessageSIPMessage *)sipMessage
                                     withIOSClass:(IOSClass *)headerClass
                                     withNSString:(NSString *)headerText
                                     withNSString:(NSString *)messageText {
  if (this$0_->testing_) {
    if (headerClass == AndroidGovNistJavaxSipHeaderFrom_class_() || headerClass == AndroidGovNistJavaxSipHeaderTo_class_() || headerClass == AndroidGovNistJavaxSipHeaderCallID_class_() || headerClass == AndroidGovNistJavaxSipHeaderMaxForwards_class_() || headerClass == AndroidGovNistJavaxSipHeaderVia_class_() || headerClass == AndroidGovNistJavaxSipHeaderRequestLine_class_() || headerClass == AndroidGovNistJavaxSipHeaderStatusLine_class_() || headerClass == AndroidGovNistJavaxSipHeaderCSeq_class_()) @throw ex;
    [((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(sipMessage)) addUnparsedWithNSString:headerText];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipMessageMessageFactoryImpl:);
  methods[1].selector = @selector(handleExceptionWithJavaTextParseException:withAndroidGovNistJavaxSipMessageSIPMessage:withIOSClass:withNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidGovNistJavaxSipMessageMessageFactoryImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "handleException", "LJavaTextParseException;LAndroidGovNistJavaxSipMessageSIPMessage;LIOSClass;LNSString;LNSString;", "LJavaTextParseException;", "LAndroidGovNistJavaxSipMessageMessageFactoryImpl;", "createRequestWithNSString:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipMessageMessageFactoryImpl_1 = { "", "android.gov.nist.javax.sip.message", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_AndroidGovNistJavaxSipMessageMessageFactoryImpl_1;
}

@end

void AndroidGovNistJavaxSipMessageMessageFactoryImpl_1_initWithAndroidGovNistJavaxSipMessageMessageFactoryImpl_(AndroidGovNistJavaxSipMessageMessageFactoryImpl_1 *self, AndroidGovNistJavaxSipMessageMessageFactoryImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

AndroidGovNistJavaxSipMessageMessageFactoryImpl_1 *new_AndroidGovNistJavaxSipMessageMessageFactoryImpl_1_initWithAndroidGovNistJavaxSipMessageMessageFactoryImpl_(AndroidGovNistJavaxSipMessageMessageFactoryImpl *outer$) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipMessageMessageFactoryImpl_1, initWithAndroidGovNistJavaxSipMessageMessageFactoryImpl_, outer$)
}

AndroidGovNistJavaxSipMessageMessageFactoryImpl_1 *create_AndroidGovNistJavaxSipMessageMessageFactoryImpl_1_initWithAndroidGovNistJavaxSipMessageMessageFactoryImpl_(AndroidGovNistJavaxSipMessageMessageFactoryImpl *outer$) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipMessageMessageFactoryImpl_1, initWithAndroidGovNistJavaxSipMessageMessageFactoryImpl_, outer$)
}
