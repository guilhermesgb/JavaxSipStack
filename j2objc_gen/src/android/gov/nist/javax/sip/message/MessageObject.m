//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/message/MessageObject.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/core/GenericObjectList.h"
#include "android/gov/nist/javax/sip/message/MessageObject.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Modifier.h"

@implementation AndroidGovNistJavaxSipMessageMessageObject

- (NSString *)encode {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dbgPrint {
  [super dbgPrint];
}

- (NSString *)debugDump {
  JreStrongAssign(&stringRepresentation_, @"");
  IOSClass *myclass = [self java_getClass];
  [self sprintWithNSString:[myclass getName]];
  [self sprintWithNSString:@"{"];
  IOSObjectArray *fields = [myclass getDeclaredFields];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
    JavaLangReflectField *f = IOSObjectArray_Get(fields, i);
    jint modifier = [((JavaLangReflectField *) nil_chk(f)) getModifiers];
    if (modifier == JavaLangReflectModifier_PRIVATE) continue;
    IOSClass *fieldType = [f getType];
    NSString *fieldName = [f getName];
    if ([((NSString *) nil_chk(fieldName)) compareToWithId:@"stringRepresentation"] == 0) {
      continue;
    }
    if ([fieldName compareToWithId:@"indentation"] == 0) {
      continue;
    }
    [self sprintWithNSString:JreStrcat("$C", fieldName, ':')];
    @try {
      if ([((IOSClass *) nil_chk(fieldType)) isPrimitive]) {
        NSString *fname = [fieldType description];
        [self sprintWithNSString:JreStrcat("$C", fname, ':')];
        if ([((NSString *) nil_chk(fname)) compareToWithId:@"int"] == 0) {
          jint intfield = [f getIntWithId:self];
          [self sprintWithInt:intfield];
        }
        else if ([fname compareToWithId:@"short"] == 0) {
          jshort shortField = [f getShortWithId:self];
          [self sprintWithShort:shortField];
        }
        else if ([fname compareToWithId:@"char"] == 0) {
          jchar charField = [f getCharWithId:self];
          [self sprintWithChar:charField];
        }
        else if ([fname compareToWithId:@"long"] == 0) {
          jlong longField = [f getLongWithId:self];
          [self sprintWithLong:longField];
        }
        else if ([fname compareToWithId:@"boolean"] == 0) {
          jboolean booleanField = [f getBooleanWithId:self];
          [self sprintWithBoolean:booleanField];
        }
        else if ([fname compareToWithId:@"double"] == 0) {
          jdouble doubleField = [f getDoubleWithId:self];
          [self sprintWithDouble:doubleField];
        }
        else if ([fname compareToWithId:@"float"] == 0) {
          jfloat floatField = [f getFloatWithId:self];
          [self sprintWithFloat:floatField];
        }
      }
      else if ([AndroidGovNistCoreGenericObject_class_() isAssignableFrom:fieldType]) {
        if ([f getWithId:self] != nil) {
          [self sprintWithNSString:[((AndroidGovNistCoreGenericObject *) nil_chk(((AndroidGovNistCoreGenericObject *) cast_chk([f getWithId:self], [AndroidGovNistCoreGenericObject class])))) debugDumpWithInt:self->indentation_ + 1]];
        }
        else {
          [self sprintWithNSString:@"<null>"];
        }
      }
      else if ([AndroidGovNistCoreGenericObjectList_class_() isAssignableFrom:fieldType]) {
        if ([f getWithId:self] != nil) {
          [self sprintWithNSString:[((AndroidGovNistCoreGenericObjectList *) nil_chk(((AndroidGovNistCoreGenericObjectList *) cast_chk([f getWithId:self], [AndroidGovNistCoreGenericObjectList class])))) debugDumpWithInt:indentation_ + 1]];
        }
        else {
          [self sprintWithNSString:@"<null>"];
        }
      }
      else {
        if ([f getWithId:self] != nil) {
          [self sprintWithNSString:JreStrcat("$C", [[nil_chk([f getWithId:self]) java_getClass] getName], ':')];
        }
        else {
          [self sprintWithNSString:JreStrcat("$C", [fieldType getName], ':')];
        }
        [self sprintWithNSString:@"{"];
        if ([f getWithId:self] != nil) {
          [self sprintWithNSString:[nil_chk([f getWithId:self]) description]];
        }
        else {
          [self sprintWithNSString:@"<null>"];
        }
        [self sprintWithNSString:@"}"];
      }
    }
    @catch (JavaLangIllegalAccessException *ex1) {
      continue;
    }
  }
  [self sprintWithNSString:@"}"];
  return stringRepresentation_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipMessageMessageObject_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)dbgPrintWithInt:(jint)indent {
  jint save = indentation_;
  indentation_ = indent;
  NSString *retval = [self description];
  indentation_ = save;
  return retval;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(encode);
  methods[1].selector = @selector(dbgPrint);
  methods[2].selector = @selector(debugDump);
  methods[3].selector = @selector(init);
  methods[4].selector = @selector(dbgPrintWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "dbgPrint", "I" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipMessageMessageObject = { "MessageObject", "android.gov.nist.javax.sip.message", ptrTable, methods, NULL, 7, 0x401, 5, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipMessageMessageObject;
}

@end

void AndroidGovNistJavaxSipMessageMessageObject_init(AndroidGovNistJavaxSipMessageMessageObject *self) {
  AndroidGovNistCoreGenericObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipMessageMessageObject)
