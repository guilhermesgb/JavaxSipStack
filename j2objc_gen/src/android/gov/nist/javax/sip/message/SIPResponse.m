//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/message/SIPResponse.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/javax/sip/header/StatusLine.h"
#include "android/gov/nist/javax/sip/header/ViaList.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/message/SIPResponse.h"
#include "android/javax/sip/header/CSeqHeader.h"
#include "android/javax/sip/header/CallIdHeader.h"
#include "android/javax/sip/header/FromHeader.h"
#include "android/javax/sip/header/ToHeader.h"
#include "android/javax/sip/header/ViaHeader.h"
#include "android/javax/sip/message/Response.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/text/ParseException.h"
#include "java/util/LinkedList.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface AndroidGovNistJavaxSipMessageSIPResponse () {
 @public
  jboolean isRetransmission_;
}

@end

@implementation AndroidGovNistJavaxSipMessageSIPResponse

+ (NSString *)getReasonPhraseWithInt:(jint)rc {
  return AndroidGovNistJavaxSipMessageSIPResponse_getReasonPhraseWithInt_(rc);
}

- (void)setStatusCodeWithInt:(jint)statusCode {
  if (statusCode < 100 || statusCode > 699) @throw create_JavaTextParseException_initWithNSString_withInt_(@"bad status code", 0);
  if (self->statusLine_ == nil) JreStrongAssignAndConsume(&self->statusLine_, new_AndroidGovNistJavaxSipHeaderStatusLine_init());
  [self->statusLine_ setStatusCodeWithInt:statusCode];
}

- (AndroidGovNistJavaxSipHeaderStatusLine *)getStatusLine {
  return statusLine_;
}

- (jint)getStatusCode {
  return [((AndroidGovNistJavaxSipHeaderStatusLine *) nil_chk(statusLine_)) getStatusCode];
}

- (void)setReasonPhraseWithNSString:(NSString *)reasonPhrase {
  if (reasonPhrase == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Bad reason phrase");
  if (self->statusLine_ == nil) JreStrongAssignAndConsume(&self->statusLine_, new_AndroidGovNistJavaxSipHeaderStatusLine_init());
  [self->statusLine_ setReasonPhraseWithNSString:reasonPhrase];
}

- (NSString *)getReasonPhrase {
  if (statusLine_ == nil || [statusLine_ getReasonPhrase] == nil) return @"";
  else return [statusLine_ getReasonPhrase];
}

+ (jboolean)isFinalResponseWithInt:(jint)rc {
  return AndroidGovNistJavaxSipMessageSIPResponse_isFinalResponseWithInt_(rc);
}

- (jboolean)isFinalResponse {
  return AndroidGovNistJavaxSipMessageSIPResponse_isFinalResponseWithInt_([((AndroidGovNistJavaxSipHeaderStatusLine *) nil_chk(statusLine_)) getStatusCode]);
}

- (void)setStatusLineWithAndroidGovNistJavaxSipHeaderStatusLine:(AndroidGovNistJavaxSipHeaderStatusLine *)sl {
  JreStrongAssign(&statusLine_, sl);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipMessageSIPResponse_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)debugDump {
  NSString *superstring = [super debugDump];
  JreStrongAssign(&stringRepresentation_, @"");
  [self sprintWithNSString:[AndroidGovNistJavaxSipMessageSIPResponse_class_() getCanonicalName]];
  [self sprintWithNSString:@"{"];
  if (statusLine_ != nil) {
    [self sprintWithNSString:[statusLine_ debugDump]];
  }
  [self sprintWithNSString:superstring];
  [self sprintWithNSString:@"}"];
  return stringRepresentation_;
}

- (void)checkHeaders {
  if ([self getCSeq] == nil) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", AndroidJavaxSipHeaderCSeqHeader_NAME, @" Is missing "), 0);
  }
  if ([self getTo] == nil) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", AndroidJavaxSipHeaderToHeader_NAME, @" Is missing "), 0);
  }
  if ([self getFrom] == nil) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", AndroidJavaxSipHeaderFromHeader_NAME, @" Is missing "), 0);
  }
  if ([self getViaHeaders] == nil) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", AndroidJavaxSipHeaderViaHeader_NAME, @" Is missing "), 0);
  }
  if ([self getCallId] == nil) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", AndroidJavaxSipHeaderCallIdHeader_NAME, @" Is missing "), 0);
  }
  if ([self getStatusCode] > 699) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$I", @"Unknown error code!", [self getStatusCode]), 0);
  }
}

- (NSString *)encode {
  NSString *retval;
  if (statusLine_ != nil) retval = JreStrcat("$$", [statusLine_ encode], [super encode]);
  else retval = [super encode];
  return retval;
}

- (JavaLangStringBuilder *)encodeMessageWithJavaLangStringBuilder:(JavaLangStringBuilder *)retval {
  if (statusLine_ != nil) {
    [statusLine_ encodeWithJavaLangStringBuilder:retval];
    [super encodeSIPHeadersWithJavaLangStringBuilder:retval];
  }
  else {
    retval = [super encodeSIPHeadersWithJavaLangStringBuilder:retval];
  }
  return retval;
}

- (JavaUtilLinkedList *)getMessageAsEncodedStrings {
  JavaUtilLinkedList *retval = [super getMessageAsEncodedStrings];
  if (statusLine_ != nil) [((JavaUtilLinkedList *) nil_chk(retval)) addFirstWithId:[statusLine_ encode]];
  return retval;
}

- (id)java_clone {
  AndroidGovNistJavaxSipMessageSIPResponse *retval = (AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk([super java_clone], [AndroidGovNistJavaxSipMessageSIPResponse class]);
  if (self->statusLine_ != nil) JreStrongAssign(&((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(retval))->statusLine_, (AndroidGovNistJavaxSipHeaderStatusLine *) cast_chk([self->statusLine_ java_clone], [AndroidGovNistJavaxSipHeaderStatusLine class]));
  return retval;
}

- (jboolean)isEqual:(id)other {
  if (![[self java_getClass] isEqual:[nil_chk(other) java_getClass]]) return false;
  AndroidGovNistJavaxSipMessageSIPResponse *that = (AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(other, [AndroidGovNistJavaxSipMessageSIPResponse class]);
  return [((AndroidGovNistJavaxSipHeaderStatusLine *) nil_chk(statusLine_)) isEqual:that->statusLine_] && [super isEqual:other];
}

- (jboolean)matchWithId:(id)matchObj {
  if (matchObj == nil) return true;
  else if (![[matchObj java_getClass] isEqual:[self java_getClass]]) {
    return false;
  }
  else if (matchObj == self) return true;
  AndroidGovNistJavaxSipMessageSIPResponse *that = (AndroidGovNistJavaxSipMessageSIPResponse *) cast_chk(matchObj, [AndroidGovNistJavaxSipMessageSIPResponse class]);
  AndroidGovNistJavaxSipHeaderStatusLine *rline = that->statusLine_;
  if (self->statusLine_ == nil && rline != nil) return false;
  else if (self->statusLine_ == rline) return [super matchWithId:matchObj];
  else {
    return [((AndroidGovNistJavaxSipHeaderStatusLine *) nil_chk(statusLine_)) matchWithId:that->statusLine_] && [super matchWithId:matchObj];
  }
}

- (IOSByteArray *)encodeAsBytesWithNSString:(NSString *)transport {
  IOSByteArray *slbytes = nil;
  if (statusLine_ != nil) {
    @try {
      slbytes = [((NSString *) nil_chk([statusLine_ encode])) java_getBytesWithCharsetName:@"UTF-8"];
    }
    @catch (JavaIoUnsupportedEncodingException *ex) {
      AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
    }
  }
  IOSByteArray *superbytes = [super encodeAsBytesWithNSString:transport];
  IOSByteArray *retval = [IOSByteArray arrayWithLength:((IOSByteArray *) nil_chk(slbytes))->size_ + ((IOSByteArray *) nil_chk(superbytes))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(slbytes, 0, retval, 0, slbytes->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(superbytes, 0, retval, slbytes->size_, superbytes->size_);
  return retval;
}

- (NSString *)getFirstLine {
  if (self->statusLine_ == nil) return nil;
  else return [self->statusLine_ encode];
}

- (void)setSIPVersionWithNSString:(NSString *)sipVersion {
  [((AndroidGovNistJavaxSipHeaderStatusLine *) nil_chk(self->statusLine_)) setSipVersionWithNSString:sipVersion];
}

- (NSString *)getSIPVersion {
  return [((AndroidGovNistJavaxSipHeaderStatusLine *) nil_chk(self->statusLine_)) getSipVersion];
}

- (NSString *)description {
  if (statusLine_ == nil) return @"";
  else return JreStrcat("$$", [statusLine_ encode], [super encode]);
}

- (void)cleanUp {
  [super cleanUp];
}

- (void)setRetransmissionWithBoolean:(jboolean)isRetransmission {
  self->isRetransmission_ = isRetransmission;
}

- (jboolean)isRetransmission {
  return isRetransmission_;
}

- (void)dealloc {
  RELEASE_(statusLine_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, 3, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderStatusLine;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 6, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLinkedList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 15, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getReasonPhraseWithInt:);
  methods[1].selector = @selector(setStatusCodeWithInt:);
  methods[2].selector = @selector(getStatusLine);
  methods[3].selector = @selector(getStatusCode);
  methods[4].selector = @selector(setReasonPhraseWithNSString:);
  methods[5].selector = @selector(getReasonPhrase);
  methods[6].selector = @selector(isFinalResponseWithInt:);
  methods[7].selector = @selector(isFinalResponse);
  methods[8].selector = @selector(setStatusLineWithAndroidGovNistJavaxSipHeaderStatusLine:);
  methods[9].selector = @selector(init);
  methods[10].selector = @selector(debugDump);
  methods[11].selector = @selector(checkHeaders);
  methods[12].selector = @selector(encode);
  methods[13].selector = @selector(encodeMessageWithJavaLangStringBuilder:);
  methods[14].selector = @selector(getMessageAsEncodedStrings);
  methods[15].selector = @selector(java_clone);
  methods[16].selector = @selector(isEqual:);
  methods[17].selector = @selector(matchWithId:);
  methods[18].selector = @selector(encodeAsBytesWithNSString:);
  methods[19].selector = @selector(getFirstLine);
  methods[20].selector = @selector(setSIPVersionWithNSString:);
  methods[21].selector = @selector(getSIPVersion);
  methods[22].selector = @selector(description);
  methods[23].selector = @selector(cleanUp);
  methods[24].selector = @selector(setRetransmissionWithBoolean:);
  methods[25].selector = @selector(isRetransmission);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "statusLine_", "LAndroidGovNistJavaxSipHeaderStatusLine;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "isRetransmission_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getReasonPhrase", "I", "setStatusCode", "LJavaTextParseException;", "setReasonPhrase", "LNSString;", "isFinalResponse", "setStatusLine", "LAndroidGovNistJavaxSipHeaderStatusLine;", "encodeMessage", "LJavaLangStringBuilder;", "clone", "equals", "LNSObject;", "match", "encodeAsBytes", "setSIPVersion", "toString", "setRetransmission", "Z" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipMessageSIPResponse = { "SIPResponse", "android.gov.nist.javax.sip.message", ptrTable, methods, fields, 7, 0x1, 26, 2, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipMessageSIPResponse;
}

@end

NSString *AndroidGovNistJavaxSipMessageSIPResponse_getReasonPhraseWithInt_(jint rc) {
  AndroidGovNistJavaxSipMessageSIPResponse_initialize();
  NSString *retval = nil;
  switch (rc) {
    case AndroidJavaxSipMessageResponse_TRYING:
    retval = @"Trying";
    break;
    case AndroidJavaxSipMessageResponse_RINGING:
    retval = @"Ringing";
    break;
    case AndroidJavaxSipMessageResponse_CALL_IS_BEING_FORWARDED:
    retval = @"Call is being forwarded";
    break;
    case AndroidJavaxSipMessageResponse_QUEUED:
    retval = @"Queued";
    break;
    case AndroidJavaxSipMessageResponse_SESSION_PROGRESS:
    retval = @"Session progress";
    break;
    case AndroidJavaxSipMessageResponse_OK:
    retval = @"OK";
    break;
    case AndroidJavaxSipMessageResponse_ACCEPTED:
    retval = @"Accepted";
    break;
    case AndroidJavaxSipMessageResponse_MULTIPLE_CHOICES:
    retval = @"Multiple choices";
    break;
    case AndroidJavaxSipMessageResponse_MOVED_PERMANENTLY:
    retval = @"Moved permanently";
    break;
    case AndroidJavaxSipMessageResponse_MOVED_TEMPORARILY:
    retval = @"Moved Temporarily";
    break;
    case AndroidJavaxSipMessageResponse_USE_PROXY:
    retval = @"Use proxy";
    break;
    case AndroidJavaxSipMessageResponse_ALTERNATIVE_SERVICE:
    retval = @"Alternative service";
    break;
    case AndroidJavaxSipMessageResponse_BAD_REQUEST:
    retval = @"Bad request";
    break;
    case AndroidJavaxSipMessageResponse_UNAUTHORIZED:
    retval = @"Unauthorized";
    break;
    case AndroidJavaxSipMessageResponse_PAYMENT_REQUIRED:
    retval = @"Payment required";
    break;
    case AndroidJavaxSipMessageResponse_FORBIDDEN:
    retval = @"Forbidden";
    break;
    case AndroidJavaxSipMessageResponse_NOT_FOUND:
    retval = @"Not found";
    break;
    case AndroidJavaxSipMessageResponse_METHOD_NOT_ALLOWED:
    retval = @"Method not allowed";
    break;
    case AndroidJavaxSipMessageResponse_NOT_ACCEPTABLE:
    retval = @"Not acceptable";
    break;
    case AndroidJavaxSipMessageResponse_PROXY_AUTHENTICATION_REQUIRED:
    retval = @"Proxy Authentication required";
    break;
    case AndroidJavaxSipMessageResponse_REQUEST_TIMEOUT:
    retval = @"Request timeout";
    break;
    case AndroidJavaxSipMessageResponse_GONE:
    retval = @"Gone";
    break;
    case AndroidJavaxSipMessageResponse_TEMPORARILY_UNAVAILABLE:
    retval = @"Temporarily Unavailable";
    break;
    case AndroidJavaxSipMessageResponse_REQUEST_ENTITY_TOO_LARGE:
    retval = @"Request entity too large";
    break;
    case AndroidJavaxSipMessageResponse_REQUEST_URI_TOO_LONG:
    retval = @"Request-URI too large";
    break;
    case AndroidJavaxSipMessageResponse_UNSUPPORTED_MEDIA_TYPE:
    retval = @"Unsupported media type";
    break;
    case AndroidJavaxSipMessageResponse_UNSUPPORTED_URI_SCHEME:
    retval = @"Unsupported URI Scheme";
    break;
    case AndroidJavaxSipMessageResponse_BAD_EXTENSION:
    retval = @"Bad extension";
    break;
    case AndroidJavaxSipMessageResponse_EXTENSION_REQUIRED:
    retval = @"Etension Required";
    break;
    case AndroidJavaxSipMessageResponse_INTERVAL_TOO_BRIEF:
    retval = @"Interval too brief";
    break;
    case AndroidJavaxSipMessageResponse_CALL_OR_TRANSACTION_DOES_NOT_EXIST:
    retval = @"Call leg/Transaction does not exist";
    break;
    case AndroidJavaxSipMessageResponse_LOOP_DETECTED:
    retval = @"Loop detected";
    break;
    case AndroidJavaxSipMessageResponse_TOO_MANY_HOPS:
    retval = @"Too many hops";
    break;
    case AndroidJavaxSipMessageResponse_ADDRESS_INCOMPLETE:
    retval = @"Address incomplete";
    break;
    case AndroidJavaxSipMessageResponse_AMBIGUOUS:
    retval = @"Ambiguous";
    break;
    case AndroidJavaxSipMessageResponse_BUSY_HERE:
    retval = @"Busy here";
    break;
    case AndroidJavaxSipMessageResponse_REQUEST_TERMINATED:
    retval = @"Request Terminated";
    break;
    case AndroidJavaxSipMessageResponse_NOT_ACCEPTABLE_HERE:
    retval = @"Not Acceptable here";
    break;
    case AndroidJavaxSipMessageResponse_BAD_EVENT:
    retval = @"Bad Event";
    break;
    case AndroidJavaxSipMessageResponse_REQUEST_PENDING:
    retval = @"Request Pending";
    break;
    case AndroidJavaxSipMessageResponse_SERVER_INTERNAL_ERROR:
    retval = @"Server Internal Error";
    break;
    case AndroidJavaxSipMessageResponse_UNDECIPHERABLE:
    retval = @"Undecipherable";
    break;
    case AndroidJavaxSipMessageResponse_NOT_IMPLEMENTED:
    retval = @"Not implemented";
    break;
    case AndroidJavaxSipMessageResponse_BAD_GATEWAY:
    retval = @"Bad gateway";
    break;
    case AndroidJavaxSipMessageResponse_SERVICE_UNAVAILABLE:
    retval = @"Service unavailable";
    break;
    case AndroidJavaxSipMessageResponse_SERVER_TIMEOUT:
    retval = @"Gateway timeout";
    break;
    case AndroidJavaxSipMessageResponse_VERSION_NOT_SUPPORTED:
    retval = @"SIP version not supported";
    break;
    case AndroidJavaxSipMessageResponse_MESSAGE_TOO_LARGE:
    retval = @"Message Too Large";
    break;
    case AndroidJavaxSipMessageResponse_BUSY_EVERYWHERE:
    retval = @"Busy everywhere";
    break;
    case AndroidJavaxSipMessageResponse_DECLINE:
    retval = @"Decline";
    break;
    case AndroidJavaxSipMessageResponse_DOES_NOT_EXIST_ANYWHERE:
    retval = @"Does not exist anywhere";
    break;
    case AndroidJavaxSipMessageResponse_SESSION_NOT_ACCEPTABLE:
    retval = @"Session Not acceptable";
    break;
    case AndroidJavaxSipMessageResponse_CONDITIONAL_REQUEST_FAILED:
    retval = @"Conditional request failed";
    break;
    default:
    retval = @"Unknown Status";
  }
  return retval;
}

jboolean AndroidGovNistJavaxSipMessageSIPResponse_isFinalResponseWithInt_(jint rc) {
  AndroidGovNistJavaxSipMessageSIPResponse_initialize();
  return rc >= 200 && rc < 700;
}

void AndroidGovNistJavaxSipMessageSIPResponse_init(AndroidGovNistJavaxSipMessageSIPResponse *self) {
  AndroidGovNistJavaxSipMessageSIPMessage_init(self);
  self->isRetransmission_ = true;
}

AndroidGovNistJavaxSipMessageSIPResponse *new_AndroidGovNistJavaxSipMessageSIPResponse_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipMessageSIPResponse, init)
}

AndroidGovNistJavaxSipMessageSIPResponse *create_AndroidGovNistJavaxSipMessageSIPResponse_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipMessageSIPResponse, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipMessageSIPResponse)
