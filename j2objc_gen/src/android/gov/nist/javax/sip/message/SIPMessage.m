//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/message/SIPMessage.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/core/Separators.h"
#include "android/gov/nist/javax/sip/SIPConstants.h"
#include "android/gov/nist/javax/sip/Utils.h"
#include "android/gov/nist/javax/sip/header/AlertInfo.h"
#include "android/gov/nist/javax/sip/header/Authorization.h"
#include "android/gov/nist/javax/sip/header/CSeq.h"
#include "android/gov/nist/javax/sip/header/CallID.h"
#include "android/gov/nist/javax/sip/header/Contact.h"
#include "android/gov/nist/javax/sip/header/ContactList.h"
#include "android/gov/nist/javax/sip/header/ContentLength.h"
#include "android/gov/nist/javax/sip/header/ContentType.h"
#include "android/gov/nist/javax/sip/header/ErrorInfo.h"
#include "android/gov/nist/javax/sip/header/ErrorInfoList.h"
#include "android/gov/nist/javax/sip/header/From.h"
#include "android/gov/nist/javax/sip/header/InReplyTo.h"
#include "android/gov/nist/javax/sip/header/MaxForwards.h"
#include "android/gov/nist/javax/sip/header/Priority.h"
#include "android/gov/nist/javax/sip/header/ProxyAuthenticate.h"
#include "android/gov/nist/javax/sip/header/ProxyAuthorization.h"
#include "android/gov/nist/javax/sip/header/ProxyRequire.h"
#include "android/gov/nist/javax/sip/header/ProxyRequireList.h"
#include "android/gov/nist/javax/sip/header/RSeq.h"
#include "android/gov/nist/javax/sip/header/RecordRouteList.h"
#include "android/gov/nist/javax/sip/header/RetryAfter.h"
#include "android/gov/nist/javax/sip/header/Route.h"
#include "android/gov/nist/javax/sip/header/RouteList.h"
#include "android/gov/nist/javax/sip/header/SIPETag.h"
#include "android/gov/nist/javax/sip/header/SIPHeader.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderList.h"
#include "android/gov/nist/javax/sip/header/SIPHeaderNamesCache.h"
#include "android/gov/nist/javax/sip/header/SIPIfMatch.h"
#include "android/gov/nist/javax/sip/header/Server.h"
#include "android/gov/nist/javax/sip/header/Subject.h"
#include "android/gov/nist/javax/sip/header/To.h"
#include "android/gov/nist/javax/sip/header/Unsupported.h"
#include "android/gov/nist/javax/sip/header/UserAgent.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/header/ViaList.h"
#include "android/gov/nist/javax/sip/header/WWWAuthenticate.h"
#include "android/gov/nist/javax/sip/header/Warning.h"
#include "android/gov/nist/javax/sip/message/HeaderIterator.h"
#include "android/gov/nist/javax/sip/message/ListMap.h"
#include "android/gov/nist/javax/sip/message/MessageFactoryImpl.h"
#include "android/gov/nist/javax/sip/message/MessageObject.h"
#include "android/gov/nist/javax/sip/message/MultipartMimeContent.h"
#include "android/gov/nist/javax/sip/message/MultipartMimeContentImpl.h"
#include "android/gov/nist/javax/sip/message/SIPDuplicateHeaderException.h"
#include "android/gov/nist/javax/sip/message/SIPMessage.h"
#include "android/gov/nist/javax/sip/message/SIPRequest.h"
#include "android/gov/nist/javax/sip/parser/HeaderParser.h"
#include "android/gov/nist/javax/sip/parser/ParserFactory.h"
#include "android/javax/sip/InvalidArgumentException.h"
#include "android/javax/sip/SipException.h"
#include "android/javax/sip/header/AuthorizationHeader.h"
#include "android/javax/sip/header/CSeqHeader.h"
#include "android/javax/sip/header/CallIdHeader.h"
#include "android/javax/sip/header/ContactHeader.h"
#include "android/javax/sip/header/ContentDispositionHeader.h"
#include "android/javax/sip/header/ContentEncodingHeader.h"
#include "android/javax/sip/header/ContentLanguageHeader.h"
#include "android/javax/sip/header/ContentLengthHeader.h"
#include "android/javax/sip/header/ContentTypeHeader.h"
#include "android/javax/sip/header/ErrorInfoHeader.h"
#include "android/javax/sip/header/ExpiresHeader.h"
#include "android/javax/sip/header/FromHeader.h"
#include "android/javax/sip/header/Header.h"
#include "android/javax/sip/header/MaxForwardsHeader.h"
#include "android/javax/sip/header/RecordRouteHeader.h"
#include "android/javax/sip/header/RouteHeader.h"
#include "android/javax/sip/header/ToHeader.h"
#include "android/javax/sip/header/ViaHeader.h"
#include "android/javax/sip/message/Request.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Field.h"
#include "java/net/InetAddress.h"
#include "java/text/ParseException.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"

@interface AndroidGovNistJavaxSipMessageSIPMessage () {
 @public
  NSString *contentEncodingCharset_;
  JavaNetInetAddress *remoteAddress_;
  jint remotePort_;
  JavaNetInetAddress *localAddress_;
  jint localPort_;
  JavaNetInetAddress *peerPacketSourceAddress_;
  jint peerPacketSourcePort_;
}

- (void)attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:(AndroidGovNistJavaxSipHeaderSIPHeader *)h;

- (void)computeContentLengthWithId:(id)content;

- (id<JavaUtilList>)getHeaderListWithNSString:(NSString *)headerName;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipMessageSIPMessage, contentEncodingCharset_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipMessageSIPMessage, remoteAddress_, JavaNetInetAddress *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipMessageSIPMessage, localAddress_, JavaNetInetAddress *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSipMessageSIPMessage, peerPacketSourceAddress_, JavaNetInetAddress *)

inline NSString *AndroidGovNistJavaxSipMessageSIPMessage_get_CONTENT_TYPE_LOWERCASE();
static NSString *AndroidGovNistJavaxSipMessageSIPMessage_CONTENT_TYPE_LOWERCASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipMessageSIPMessage, CONTENT_TYPE_LOWERCASE, NSString *)

inline NSString *AndroidGovNistJavaxSipMessageSIPMessage_get_ERROR_LOWERCASE();
static NSString *AndroidGovNistJavaxSipMessageSIPMessage_ERROR_LOWERCASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipMessageSIPMessage, ERROR_LOWERCASE, NSString *)

inline NSString *AndroidGovNistJavaxSipMessageSIPMessage_get_CONTACT_LOWERCASE();
static NSString *AndroidGovNistJavaxSipMessageSIPMessage_CONTACT_LOWERCASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipMessageSIPMessage, CONTACT_LOWERCASE, NSString *)

inline NSString *AndroidGovNistJavaxSipMessageSIPMessage_get_VIA_LOWERCASE();
static NSString *AndroidGovNistJavaxSipMessageSIPMessage_VIA_LOWERCASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipMessageSIPMessage, VIA_LOWERCASE, NSString *)

inline NSString *AndroidGovNistJavaxSipMessageSIPMessage_get_AUTHORIZATION_LOWERCASE();
static NSString *AndroidGovNistJavaxSipMessageSIPMessage_AUTHORIZATION_LOWERCASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipMessageSIPMessage, AUTHORIZATION_LOWERCASE, NSString *)

inline NSString *AndroidGovNistJavaxSipMessageSIPMessage_get_ROUTE_LOWERCASE();
static NSString *AndroidGovNistJavaxSipMessageSIPMessage_ROUTE_LOWERCASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipMessageSIPMessage, ROUTE_LOWERCASE, NSString *)

inline NSString *AndroidGovNistJavaxSipMessageSIPMessage_get_RECORDROUTE_LOWERCASE();
static NSString *AndroidGovNistJavaxSipMessageSIPMessage_RECORDROUTE_LOWERCASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipMessageSIPMessage, RECORDROUTE_LOWERCASE, NSString *)

inline NSString *AndroidGovNistJavaxSipMessageSIPMessage_get_CONTENT_DISPOSITION_LOWERCASE();
static NSString *AndroidGovNistJavaxSipMessageSIPMessage_CONTENT_DISPOSITION_LOWERCASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipMessageSIPMessage, CONTENT_DISPOSITION_LOWERCASE, NSString *)

inline NSString *AndroidGovNistJavaxSipMessageSIPMessage_get_CONTENT_ENCODING_LOWERCASE();
static NSString *AndroidGovNistJavaxSipMessageSIPMessage_CONTENT_ENCODING_LOWERCASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipMessageSIPMessage, CONTENT_ENCODING_LOWERCASE, NSString *)

inline NSString *AndroidGovNistJavaxSipMessageSIPMessage_get_CONTENT_LANGUAGE_LOWERCASE();
static NSString *AndroidGovNistJavaxSipMessageSIPMessage_CONTENT_LANGUAGE_LOWERCASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipMessageSIPMessage, CONTENT_LANGUAGE_LOWERCASE, NSString *)

inline NSString *AndroidGovNistJavaxSipMessageSIPMessage_get_EXPIRES_LOWERCASE();
static NSString *AndroidGovNistJavaxSipMessageSIPMessage_EXPIRES_LOWERCASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipMessageSIPMessage, EXPIRES_LOWERCASE, NSString *)

__attribute__((unused)) static NSString *AndroidGovNistJavaxSipMessageSIPMessage_getDialogIdWithBoolean_withNSString_(AndroidGovNistJavaxSipMessageSIPMessage *self, jboolean isServer, NSString *toTag);

__attribute__((unused)) static void AndroidGovNistJavaxSipMessageSIPMessage_attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader_(AndroidGovNistJavaxSipMessageSIPMessage *self, AndroidGovNistJavaxSipHeaderSIPHeader *h);

__attribute__((unused)) static void AndroidGovNistJavaxSipMessageSIPMessage_computeContentLengthWithId_(AndroidGovNistJavaxSipMessageSIPMessage *self, id content);

__attribute__((unused)) static id<JavaUtilList> AndroidGovNistJavaxSipMessageSIPMessage_getHeaderListWithNSString_(AndroidGovNistJavaxSipMessageSIPMessage *self, NSString *headerName);

__attribute__((unused)) static NSString *AndroidGovNistJavaxSipMessageSIPMessage_getCharset(AndroidGovNistJavaxSipMessageSIPMessage *self);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipMessageSIPMessage)

@implementation AndroidGovNistJavaxSipMessageSIPMessage

+ (jboolean)isRequestHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:(AndroidGovNistJavaxSipHeaderSIPHeader *)sipHeader {
  return AndroidGovNistJavaxSipMessageSIPMessage_isRequestHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader_(sipHeader);
}

+ (jboolean)isResponseHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:(AndroidGovNistJavaxSipHeaderSIPHeader *)sipHeader {
  return AndroidGovNistJavaxSipMessageSIPMessage_isResponseHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader_(sipHeader);
}

- (JavaUtilLinkedList *)getMessageAsEncodedStrings {
  JavaUtilLinkedList *retval = create_JavaUtilLinkedList_init();
  id<JavaUtilIterator> li = [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(headers_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(li)) hasNext]) {
    AndroidGovNistJavaxSipHeaderSIPHeader *sipHeader = [li next];
    if ([sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderSIPHeaderList class]]) {
      AndroidGovNistJavaxSipHeaderSIPHeaderList *shl = (AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk(sipHeader, [AndroidGovNistJavaxSipHeaderSIPHeaderList class]);
      [retval addAllWithJavaUtilCollection:[((AndroidGovNistJavaxSipHeaderSIPHeaderList *) nil_chk(shl)) getHeadersAsEncodedStrings]];
    }
    else {
      [retval addWithId:[((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(sipHeader)) encode]];
    }
  }
  return retval;
}

- (JavaLangStringBuilder *)encodeSIPHeadersWithJavaLangStringBuilder:(JavaLangStringBuilder *)encoding {
  id<JavaUtilIterator> it = [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(self->headers_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    AndroidGovNistJavaxSipHeaderSIPHeader *siphdr = [it next];
    if (!([siphdr isKindOfClass:[AndroidGovNistJavaxSipHeaderContentLength class]])) [((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(siphdr)) encodeWithJavaLangStringBuilder:encoding];
  }
  return [((JavaLangStringBuilder *) nil_chk([((AndroidGovNistJavaxSipHeaderContentLength *) nil_chk(contentLengthHeader_)) encodeWithJavaLangStringBuilder:encoding])) appendWithNSString:AndroidGovNistCoreGenericObject_NEWLINE];
}

- (JavaLangStringBuilder *)encodeMessageWithJavaLangStringBuilder:(JavaLangStringBuilder *)retval {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getDialogIdWithBoolean:(jboolean)isServer {
  AndroidGovNistJavaxSipHeaderTo *to = (AndroidGovNistJavaxSipHeaderTo *) cast_chk([self getTo], [AndroidGovNistJavaxSipHeaderTo class]);
  return AndroidGovNistJavaxSipMessageSIPMessage_getDialogIdWithBoolean_withNSString_(self, isServer, [((AndroidGovNistJavaxSipHeaderTo *) nil_chk(to)) getTag]);
}

- (NSString *)getDialogIdWithBoolean:(jboolean)isServer
                        withNSString:(NSString *)toTag {
  return AndroidGovNistJavaxSipMessageSIPMessage_getDialogIdWithBoolean_withNSString_(self, isServer, toTag);
}

- (jboolean)matchWithId:(id)other {
  if (other == nil) return true;
  if (![[other java_getClass] isEqual:[self java_getClass]]) return false;
  AndroidGovNistJavaxSipMessageSIPMessage *matchObj = (AndroidGovNistJavaxSipMessageSIPMessage *) cast_chk(other, [AndroidGovNistJavaxSipMessageSIPMessage class]);
  id<JavaUtilIterator> li = [matchObj getHeaders];
  while ([((id<JavaUtilIterator>) nil_chk(li)) hasNext]) {
    AndroidGovNistJavaxSipHeaderSIPHeader *hisHeaders = [li next];
    id<JavaUtilList> myHeaders = AndroidGovNistJavaxSipMessageSIPMessage_getHeaderListWithNSString_(self, [((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(hisHeaders)) getHeaderName]);
    if (myHeaders == nil || [myHeaders size] == 0) return false;
    if ([hisHeaders isKindOfClass:[AndroidGovNistJavaxSipHeaderSIPHeaderList class]]) {
      id<JavaUtilListIterator> outerIterator = [((AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk(hisHeaders, [AndroidGovNistJavaxSipHeaderSIPHeaderList class])) listIterator];
      while ([((id<JavaUtilListIterator>) nil_chk(outerIterator)) hasNext]) {
        AndroidGovNistJavaxSipHeaderSIPHeader *hisHeader = (AndroidGovNistJavaxSipHeaderSIPHeader *) cast_chk([outerIterator next], [AndroidGovNistJavaxSipHeaderSIPHeader class]);
        if ([hisHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderContentLength class]]) continue;
        id<JavaUtilListIterator> innerIterator = [myHeaders listIterator];
        jboolean found = false;
        while ([((id<JavaUtilListIterator>) nil_chk(innerIterator)) hasNext]) {
          AndroidGovNistJavaxSipHeaderSIPHeader *myHeader = (AndroidGovNistJavaxSipHeaderSIPHeader *) cast_chk([innerIterator next], [AndroidGovNistJavaxSipHeaderSIPHeader class]);
          if ([((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(myHeader)) matchWithId:hisHeader]) {
            found = true;
            break;
          }
        }
        if (!found) return false;
      }
    }
    else {
      AndroidGovNistJavaxSipHeaderSIPHeader *hisHeader = hisHeaders;
      id<JavaUtilListIterator> innerIterator = [myHeaders listIterator];
      jboolean found = false;
      while ([((id<JavaUtilListIterator>) nil_chk(innerIterator)) hasNext]) {
        AndroidGovNistJavaxSipHeaderSIPHeader *myHeader = [innerIterator next];
        if ([((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(myHeader)) matchWithId:hisHeader]) {
          found = true;
          break;
        }
      }
      if (!found) return false;
    }
  }
  return true;
}

- (void)mergeWithId:(id)template_ {
  if (![[nil_chk(template_) java_getClass] isEqual:[self java_getClass]]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Bad class ", [template_ java_getClass]));
  AndroidGovNistJavaxSipMessageSIPMessage *templateMessage = (AndroidGovNistJavaxSipMessageSIPMessage *) cast_chk(template_, [AndroidGovNistJavaxSipMessageSIPMessage class]);
  IOSObjectArray *templateHeaders = [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(templateMessage->headers_)) toArray];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(templateHeaders))->size_; i++) {
    AndroidGovNistJavaxSipHeaderSIPHeader *hdr = (AndroidGovNistJavaxSipHeaderSIPHeader *) cast_chk(IOSObjectArray_Get(templateHeaders, i), [AndroidGovNistJavaxSipHeaderSIPHeader class]);
    NSString *hdrName = [((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(hdr)) getHeaderName];
    id<JavaUtilList> myHdrs = AndroidGovNistJavaxSipMessageSIPMessage_getHeaderListWithNSString_(self, hdrName);
    if (myHdrs == nil) {
      AndroidGovNistJavaxSipMessageSIPMessage_attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader_(self, hdr);
    }
    else {
      id<JavaUtilListIterator> it = [myHdrs listIterator];
      while ([((id<JavaUtilListIterator>) nil_chk(it)) hasNext]) {
        AndroidGovNistJavaxSipHeaderSIPHeader *sipHdr = [it next];
        [((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(sipHdr)) mergeWithId:hdr];
      }
    }
  }
}

- (NSString *)encode {
  JavaLangStringBuilder *encoding = create_JavaLangStringBuilder_init();
  id<JavaUtilIterator> it = [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(self->headers_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    AndroidGovNistJavaxSipHeaderSIPHeader *siphdr = [it next];
    if (!([siphdr isKindOfClass:[AndroidGovNistJavaxSipHeaderContentLength class]])) [((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(siphdr)) encodeWithJavaLangStringBuilder:encoding];
  }
  if (unrecognizedHeaders_ != nil) {
    for (NSString * __strong unrecognized in unrecognizedHeaders_) {
      [((JavaLangStringBuilder *) nil_chk([encoding appendWithNSString:unrecognized])) appendWithNSString:AndroidGovNistCoreGenericObject_NEWLINE];
    }
  }
  [((JavaLangStringBuilder *) nil_chk([((AndroidGovNistJavaxSipHeaderContentLength *) nil_chk(contentLengthHeader_)) encodeWithJavaLangStringBuilder:encoding])) appendWithNSString:AndroidGovNistCoreGenericObject_NEWLINE];
  if (self->messageContentObject_ != nil) {
    NSString *mbody = [nil_chk([self getContent]) description];
    [encoding appendWithNSString:mbody];
  }
  else if (self->messageContent_ != nil || self->messageContentBytes_ != nil) {
    NSString *content = nil;
    @try {
      if (messageContent_ != nil) content = messageContent_;
      else {
        content = [NSString java_stringWithBytes:messageContentBytes_ charsetName:AndroidGovNistJavaxSipMessageSIPMessage_getCharset(self)];
      }
    }
    @catch (JavaIoUnsupportedEncodingException *ex) {
      AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
    }
    [encoding appendWithNSString:content];
  }
  return [encoding description];
}

- (IOSByteArray *)encodeAsBytesWithNSString:(NSString *)transport {
  if ([self isKindOfClass:[AndroidGovNistJavaxSipMessageSIPRequest class]] && [((AndroidGovNistJavaxSipMessageSIPRequest *) cast_chk(self, [AndroidGovNistJavaxSipMessageSIPRequest class])) isNullRequest]) {
    return [@"\x0d\n\x0d\n" java_getBytes];
  }
  id<AndroidJavaxSipHeaderViaHeader> topVia = (id<AndroidJavaxSipHeaderViaHeader>) cast_check([self getHeaderWithNSString:AndroidJavaxSipHeaderViaHeader_NAME], AndroidJavaxSipHeaderViaHeader_class_());
  @try {
    [((id<AndroidJavaxSipHeaderViaHeader>) nil_chk(topVia)) setTransportWithNSString:transport];
  }
  @catch (JavaTextParseException *e) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(e);
  }
  JavaLangStringBuilder *encoding = create_JavaLangStringBuilder_init();
  @synchronized(self->headers_) {
    id<JavaUtilIterator> it = [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(self->headers_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      AndroidGovNistJavaxSipHeaderSIPHeader *siphdr = [it next];
      if (!([siphdr isKindOfClass:[AndroidGovNistJavaxSipHeaderContentLength class]])) [((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(siphdr)) encodeWithJavaLangStringBuilder:encoding];
    }
  }
  [((AndroidGovNistJavaxSipHeaderContentLength *) nil_chk(contentLengthHeader_)) encodeWithJavaLangStringBuilder:encoding];
  [encoding appendWithNSString:AndroidGovNistCoreGenericObject_NEWLINE];
  IOSByteArray *retval = nil;
  IOSByteArray *content = [self getRawContent];
  if (content != nil) {
    IOSByteArray *msgarray = nil;
    @try {
      msgarray = [((NSString *) nil_chk([encoding description])) java_getBytesWithCharsetName:AndroidGovNistJavaxSipMessageSIPMessage_getCharset(self)];
    }
    @catch (JavaIoUnsupportedEncodingException *ex) {
      AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
    }
    retval = [IOSByteArray arrayWithLength:((IOSByteArray *) nil_chk(msgarray))->size_ + content->size_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(msgarray, 0, retval, 0, msgarray->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(content, 0, retval, msgarray->size_, content->size_);
  }
  else {
    @try {
      retval = [((NSString *) nil_chk([encoding description])) java_getBytesWithCharsetName:AndroidGovNistJavaxSipMessageSIPMessage_getCharset(self)];
    }
    @catch (JavaIoUnsupportedEncodingException *ex) {
      AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
    }
  }
  return retval;
}

- (id)java_clone {
  AndroidGovNistJavaxSipMessageSIPMessage *retval = (AndroidGovNistJavaxSipMessageSIPMessage *) cast_chk([super java_clone], [AndroidGovNistJavaxSipMessageSIPMessage class]);
  JreStrongAssignAndConsume(&((AndroidGovNistJavaxSipMessageSIPMessage *) nil_chk(retval))->headerTable_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssign(&retval->fromHeader_, nil);
  JreStrongAssign(&retval->toHeader_, nil);
  JreStrongAssign(&retval->cSeqHeader_, nil);
  JreStrongAssign(&retval->callIdHeader_, nil);
  JreStrongAssign(&retval->contentLengthHeader_, nil);
  JreStrongAssign(&retval->maxForwardsHeader_, nil);
  JreStrongAssign(&retval->forkId_, nil);
  if (self->headers_ != nil) {
    JreStrongAssignAndConsume(&retval->headers_, new_JavaUtilConcurrentConcurrentLinkedQueue_init());
    for (id<JavaUtilIterator> iter = [headers_ iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      AndroidGovNistJavaxSipHeaderSIPHeader *hdr = [iter next];
      AndroidGovNistJavaxSipMessageSIPMessage_attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader_(retval, (AndroidGovNistJavaxSipHeaderSIPHeader *) cast_chk([((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(hdr)) java_clone], [AndroidGovNistJavaxSipHeaderSIPHeader class]));
    }
  }
  if (self->messageContentBytes_ != nil) JreStrongAssign(&retval->messageContentBytes_, [self->messageContentBytes_ java_clone]);
  if (self->messageContentObject_ != nil) JreStrongAssign(&retval->messageContentObject_, AndroidGovNistCoreGenericObject_makeCloneWithId_(messageContentObject_));
  JreStrongAssign(&retval->unrecognizedHeaders_, self->unrecognizedHeaders_);
  JreStrongAssign(&retval->remoteAddress_, self->remoteAddress_);
  retval->remotePort_ = self->remotePort_;
  return retval;
}

- (NSString *)debugDump {
  JreStrongAssign(&stringRepresentation_, @"");
  [self sprintWithNSString:@"SIPMessage:"];
  [self sprintWithNSString:@"{"];
  @try {
    IOSObjectArray *fields = [[self java_getClass] getDeclaredFields];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
      JavaLangReflectField *f = IOSObjectArray_Get(fields, i);
      IOSClass *fieldType = [((JavaLangReflectField *) nil_chk(f)) getType];
      NSString *fieldName = [f getName];
      if ([f getWithId:self] != nil && [AndroidGovNistJavaxSipHeaderSIPHeader_class_() isAssignableFrom:fieldType] && [((NSString *) nil_chk(fieldName)) compareToWithId:@"headers"] != 0) {
        [self sprintWithNSString:JreStrcat("$$", fieldName, AndroidGovNistCoreSeparators_EQUALS)];
        [self sprintWithNSString:[((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(((AndroidGovNistJavaxSipHeaderSIPHeader *) cast_chk([f getWithId:self], [AndroidGovNistJavaxSipHeaderSIPHeader class])))) debugDump]];
      }
    }
  }
  @catch (JavaLangException *ex) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
  }
  [self sprintWithNSString:@"List of headers : "];
  [self sprintWithNSString:[((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(headers_)) description]];
  [self sprintWithNSString:@"messageContent = "];
  [self sprintWithNSString:@"{"];
  [self sprintWithNSString:messageContent_];
  [self sprintWithNSString:@"}"];
  if ([self getContent] != nil) {
    [self sprintWithNSString:[nil_chk([self getContent]) description]];
  }
  [self sprintWithNSString:@"}"];
  return stringRepresentation_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipMessageSIPMessage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:(AndroidGovNistJavaxSipHeaderSIPHeader *)h {
  AndroidGovNistJavaxSipMessageSIPMessage_attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader_(self, h);
}

- (void)setHeaderWithAndroidJavaxSipHeaderHeader:(id<AndroidJavaxSipHeaderHeader>)sipHeader {
  AndroidGovNistJavaxSipHeaderSIPHeader *header = (AndroidGovNistJavaxSipHeaderSIPHeader *) cast_chk(sipHeader, [AndroidGovNistJavaxSipHeaderSIPHeader class]);
  if (header == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"null header!");
  @try {
    if ([header isKindOfClass:[AndroidGovNistJavaxSipHeaderSIPHeaderList class]]) {
      AndroidGovNistJavaxSipHeaderSIPHeaderList *hl = (AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk(header, [AndroidGovNistJavaxSipHeaderSIPHeaderList class]);
      if ([hl isEmpty]) return;
    }
    [self removeHeaderWithNSString:[header getHeaderName]];
    [self attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:header withBoolean:true withBoolean:false];
  }
  @catch (AndroidGovNistJavaxSipMessageSIPDuplicateHeaderException *ex) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
  }
}

- (void)setHeadersWithJavaUtilList:(id<JavaUtilList>)headers {
  id<JavaUtilListIterator> listIterator = [((id<JavaUtilList>) nil_chk(headers)) listIterator];
  while ([((id<JavaUtilListIterator>) nil_chk(listIterator)) hasNext]) {
    AndroidGovNistJavaxSipHeaderSIPHeader *sipHeader = [listIterator next];
    @try {
      [self attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:sipHeader withBoolean:false];
    }
    @catch (AndroidGovNistJavaxSipMessageSIPDuplicateHeaderException *ex) {
    }
  }
}

- (void)attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:(AndroidGovNistJavaxSipHeaderSIPHeader *)h
                                                  withBoolean:(jboolean)replaceflag {
  [self attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:h withBoolean:replaceflag withBoolean:false];
}

- (void)attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:(AndroidGovNistJavaxSipHeaderSIPHeader *)header
                                                  withBoolean:(jboolean)replaceFlag
                                                  withBoolean:(jboolean)top {
  if (header == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"null header");
  }
  AndroidGovNistJavaxSipHeaderSIPHeader *h;
  if (AndroidGovNistJavaxSipMessageListMap_hasListWithAndroidGovNistJavaxSipHeaderSIPHeader_(header) && ![AndroidGovNistJavaxSipHeaderSIPHeaderList_class_() isAssignableFrom:[header java_getClass]]) {
    AndroidGovNistJavaxSipHeaderSIPHeaderList *hdrList = AndroidGovNistJavaxSipMessageListMap_getListWithAndroidGovNistJavaxSipHeaderSIPHeader_(header);
    [((AndroidGovNistJavaxSipHeaderSIPHeaderList *) nil_chk(hdrList)) addWithId:header];
    h = hdrList;
  }
  else {
    h = header;
  }
  NSString *headerNameLowerCase = AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_([h getName]);
  if (replaceFlag) {
    [((id<JavaUtilMap>) nil_chk(headerTable_)) removeWithId:headerNameLowerCase];
  }
  else if ([((id<JavaUtilMap>) nil_chk(headerTable_)) containsKeyWithId:headerNameLowerCase] && !([h isKindOfClass:[AndroidGovNistJavaxSipHeaderSIPHeaderList class]])) {
    if ([h isKindOfClass:[AndroidGovNistJavaxSipHeaderContentLength class]]) {
      @try {
        AndroidGovNistJavaxSipHeaderContentLength *cl = (AndroidGovNistJavaxSipHeaderContentLength *) cast_chk(h, [AndroidGovNistJavaxSipHeaderContentLength class]);
        [((AndroidGovNistJavaxSipHeaderContentLength *) nil_chk(contentLengthHeader_)) setContentLengthWithInt:[cl getContentLength]];
      }
      @catch (AndroidJavaxSipInvalidArgumentException *e) {
      }
    }
    return;
  }
  AndroidGovNistJavaxSipHeaderSIPHeader *originalHeader = (AndroidGovNistJavaxSipHeaderSIPHeader *) cast_chk([self getHeaderWithNSString:[header getName]], [AndroidGovNistJavaxSipHeaderSIPHeader class]);
  if (originalHeader != nil) {
    id<JavaUtilIterator> li = [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(headers_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(li)) hasNext]) {
      AndroidGovNistJavaxSipHeaderSIPHeader *next = [li next];
      if ([((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(next)) isEqual:originalHeader]) {
        [li remove];
      }
    }
  }
  if (![((id<JavaUtilMap>) nil_chk(headerTable_)) containsKeyWithId:headerNameLowerCase]) {
    [((id<JavaUtilMap>) nil_chk(headerTable_)) putWithId:headerNameLowerCase withId:h];
    [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(headers_)) addWithId:h];
  }
  else {
    if ([h isKindOfClass:[AndroidGovNistJavaxSipHeaderSIPHeaderList class]]) {
      AndroidGovNistJavaxSipHeaderSIPHeaderList *hdrlist = (AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk([((id<JavaUtilMap>) nil_chk(headerTable_)) getWithId:headerNameLowerCase], [AndroidGovNistJavaxSipHeaderSIPHeaderList class]);
      if (hdrlist != nil) [hdrlist concatenateWithAndroidGovNistJavaxSipHeaderSIPHeaderList:(AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk(h, [AndroidGovNistJavaxSipHeaderSIPHeaderList class]) withBoolean:top];
      else [((id<JavaUtilMap>) nil_chk(headerTable_)) putWithId:headerNameLowerCase withId:h];
    }
    else {
      [((id<JavaUtilMap>) nil_chk(headerTable_)) putWithId:headerNameLowerCase withId:h];
    }
  }
  if ([h isKindOfClass:[AndroidGovNistJavaxSipHeaderFrom class]]) {
    JreStrongAssign(&self->fromHeader_, (AndroidGovNistJavaxSipHeaderFrom *) cast_chk(h, [AndroidGovNistJavaxSipHeaderFrom class]));
  }
  else if ([h isKindOfClass:[AndroidGovNistJavaxSipHeaderContentLength class]]) {
    JreStrongAssign(&self->contentLengthHeader_, (AndroidGovNistJavaxSipHeaderContentLength *) cast_chk(h, [AndroidGovNistJavaxSipHeaderContentLength class]));
  }
  else if ([h isKindOfClass:[AndroidGovNistJavaxSipHeaderTo class]]) {
    JreStrongAssign(&self->toHeader_, (AndroidGovNistJavaxSipHeaderTo *) cast_chk(h, [AndroidGovNistJavaxSipHeaderTo class]));
  }
  else if ([h isKindOfClass:[AndroidGovNistJavaxSipHeaderCSeq class]]) {
    JreStrongAssign(&self->cSeqHeader_, (AndroidGovNistJavaxSipHeaderCSeq *) cast_chk(h, [AndroidGovNistJavaxSipHeaderCSeq class]));
  }
  else if ([h isKindOfClass:[AndroidGovNistJavaxSipHeaderCallID class]]) {
    JreStrongAssign(&self->callIdHeader_, (AndroidGovNistJavaxSipHeaderCallID *) cast_chk(h, [AndroidGovNistJavaxSipHeaderCallID class]));
  }
  else if ([h isKindOfClass:[AndroidGovNistJavaxSipHeaderMaxForwards class]]) {
    JreStrongAssign(&self->maxForwardsHeader_, (AndroidGovNistJavaxSipHeaderMaxForwards *) cast_chk(h, [AndroidGovNistJavaxSipHeaderMaxForwards class]));
  }
}

- (void)removeHeaderWithNSString:(NSString *)headerName
                     withBoolean:(jboolean)top {
  NSString *headerNameLowerCase = AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(headerName);
  AndroidGovNistJavaxSipHeaderSIPHeader *toRemove = [((id<JavaUtilMap>) nil_chk(headerTable_)) getWithId:headerNameLowerCase];
  if (toRemove == nil) return;
  if ([toRemove isKindOfClass:[AndroidGovNistJavaxSipHeaderSIPHeaderList class]]) {
    AndroidGovNistJavaxSipHeaderSIPHeaderList *hdrList = (AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk(toRemove, [AndroidGovNistJavaxSipHeaderSIPHeaderList class]);
    if (top) [hdrList removeFirst];
    else [hdrList removeLast];
    if ([hdrList isEmpty]) {
      id<JavaUtilIterator> li = [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(self->headers_)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(li)) hasNext]) {
        AndroidGovNistJavaxSipHeaderSIPHeader *sipHeader = [li next];
        if ([((NSString *) nil_chk([((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(sipHeader)) getName])) java_equalsIgnoreCase:headerNameLowerCase]) [li remove];
      }
      [((id<JavaUtilMap>) nil_chk(headerTable_)) removeWithId:headerNameLowerCase];
    }
  }
  else {
    [((id<JavaUtilMap>) nil_chk(self->headerTable_)) removeWithId:headerNameLowerCase];
    if ([toRemove isKindOfClass:[AndroidGovNistJavaxSipHeaderFrom class]]) {
      JreStrongAssign(&self->fromHeader_, nil);
    }
    else if ([toRemove isKindOfClass:[AndroidGovNistJavaxSipHeaderTo class]]) {
      JreStrongAssign(&self->toHeader_, nil);
    }
    else if ([toRemove isKindOfClass:[AndroidGovNistJavaxSipHeaderCSeq class]]) {
      JreStrongAssign(&self->cSeqHeader_, nil);
    }
    else if ([toRemove isKindOfClass:[AndroidGovNistJavaxSipHeaderCallID class]]) {
      JreStrongAssign(&self->callIdHeader_, nil);
    }
    else if ([toRemove isKindOfClass:[AndroidGovNistJavaxSipHeaderMaxForwards class]]) {
      JreStrongAssign(&self->maxForwardsHeader_, nil);
    }
    else if ([toRemove isKindOfClass:[AndroidGovNistJavaxSipHeaderContentLength class]]) {
      JreStrongAssign(&self->contentLengthHeader_, nil);
    }
    id<JavaUtilIterator> li = [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(self->headers_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(li)) hasNext]) {
      AndroidGovNistJavaxSipHeaderSIPHeader *sipHeader = [li next];
      if ([((NSString *) nil_chk([((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(sipHeader)) getName])) java_equalsIgnoreCase:headerName]) [li remove];
    }
  }
}

- (void)removeHeaderWithNSString:(NSString *)headerName {
  if (headerName == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg");
  NSString *headerNameLowerCase = AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(headerName);
  AndroidGovNistJavaxSipHeaderSIPHeader *removed = [((id<JavaUtilMap>) nil_chk(headerTable_)) removeWithId:headerNameLowerCase];
  if (removed == nil) return;
  if ([removed isKindOfClass:[AndroidGovNistJavaxSipHeaderFrom class]]) {
    JreStrongAssign(&self->fromHeader_, nil);
  }
  else if ([removed isKindOfClass:[AndroidGovNistJavaxSipHeaderTo class]]) {
    JreStrongAssign(&self->toHeader_, nil);
  }
  else if ([removed isKindOfClass:[AndroidGovNistJavaxSipHeaderCSeq class]]) {
    JreStrongAssign(&self->cSeqHeader_, nil);
  }
  else if ([removed isKindOfClass:[AndroidGovNistJavaxSipHeaderCallID class]]) {
    JreStrongAssign(&self->callIdHeader_, nil);
  }
  else if ([removed isKindOfClass:[AndroidGovNistJavaxSipHeaderMaxForwards class]]) {
    JreStrongAssign(&self->maxForwardsHeader_, nil);
  }
  else if ([removed isKindOfClass:[AndroidGovNistJavaxSipHeaderContentLength class]]) {
    JreStrongAssign(&self->contentLengthHeader_, nil);
  }
  id<JavaUtilIterator> li = [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(self->headers_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(li)) hasNext]) {
    AndroidGovNistJavaxSipHeaderSIPHeader *sipHeader = [li next];
    if ([((NSString *) nil_chk([((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(sipHeader)) getName])) java_equalsIgnoreCase:headerNameLowerCase]) [li remove];
  }
}

- (NSString *)getTransactionId {
  AndroidGovNistJavaxSipHeaderVia *topVia = [self getTopmostVia];
  if (topVia != nil && [topVia getBranch] != nil && [((NSString *) nil_chk([((NSString *) nil_chk([topVia getBranch])) uppercaseString])) hasPrefix:AndroidGovNistJavaxSipSIPConstants_BRANCH_MAGIC_COOKIE_UPPER_CASE]) {
    if ([((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([self getCSeq])) getMethod])) isEqual:AndroidJavaxSipMessageRequest_CANCEL]) return [(JreStrcat("$C$", [topVia getBranch], ':', [((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([self getCSeq])) getMethod])) lowercaseString];
    else return [((NSString *) nil_chk([topVia getBranch])) lowercaseString];
  }
  else {
    JavaLangStringBuilder *retval = create_JavaLangStringBuilder_init();
    AndroidGovNistJavaxSipHeaderFrom *from = (AndroidGovNistJavaxSipHeaderFrom *) cast_chk([self getFrom], [AndroidGovNistJavaxSipHeaderFrom class]);
    AndroidGovNistJavaxSipHeaderTo *to = (AndroidGovNistJavaxSipHeaderTo *) cast_chk([self getTo], [AndroidGovNistJavaxSipHeaderTo class]);
    if ([((AndroidGovNistJavaxSipHeaderFrom *) nil_chk(from)) hasTag]) [((JavaLangStringBuilder *) nil_chk([retval appendWithNSString:[from getTag]])) appendWithNSString:@"-"];
    NSString *cid = [((AndroidGovNistJavaxSipHeaderCallID *) nil_chk(self->callIdHeader_)) getCallId];
    [((JavaLangStringBuilder *) nil_chk([retval appendWithNSString:cid])) appendWithNSString:@"-"];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([retval appendWithInt:[((AndroidGovNistJavaxSipHeaderCSeq *) nil_chk(self->cSeqHeader_)) getSequenceNumber]])) appendWithNSString:@"-"])) appendWithNSString:[((AndroidGovNistJavaxSipHeaderCSeq *) nil_chk(self->cSeqHeader_)) getMethod]];
    if (topVia != nil) {
      [((JavaLangStringBuilder *) nil_chk([retval appendWithNSString:@"-"])) appendWithNSString:[((AndroidGovNistCoreHostPort *) nil_chk([topVia getSentBy])) encode]];
      if (![((AndroidGovNistCoreHostPort *) nil_chk([topVia getSentBy])) hasPort]) {
        [((JavaLangStringBuilder *) nil_chk([retval appendWithNSString:@"-"])) appendWithInt:5060];
      }
    }
    if ([((NSString *) nil_chk([((id<AndroidJavaxSipHeaderCSeqHeader>) nil_chk([self getCSeq])) getMethod])) isEqual:AndroidJavaxSipMessageRequest_CANCEL]) {
      [retval appendWithNSString:AndroidJavaxSipMessageRequest_CANCEL];
    }
    return JreStrcat("$$", [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([retval description])) lowercaseString])) java_replace:@":" withSequence:@"-"])) java_replace:@"@" withSequence:@"-"], AndroidGovNistJavaxSipUtils_getSignature());
  }
}

- (NSUInteger)hash {
  if (self->callIdHeader_ == nil) @throw create_JavaLangRuntimeException_initWithNSString_(@"Invalid message! Cannot compute hashcode! call-id header is missing !");
  else return ((jint) [((NSString *) nil_chk([self->callIdHeader_ getCallId])) hash]);
}

- (jboolean)hasContent {
  return messageContent_ != nil || messageContentBytes_ != nil;
}

- (id<JavaUtilIterator>)getHeaders {
  return [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(headers_)) iterator];
}

- (id<AndroidJavaxSipHeaderHeader>)getHeaderWithNSString:(NSString *)headerName {
  return [self getHeaderLowerCaseWithNSString:AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(headerName)];
}

- (id<AndroidJavaxSipHeaderHeader>)getHeaderLowerCaseWithNSString:(NSString *)lowerCaseHeaderName {
  if (lowerCaseHeaderName == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"bad name");
  AndroidGovNistJavaxSipHeaderSIPHeader *sipHeader = [((id<JavaUtilMap>) nil_chk(headerTable_)) getWithId:lowerCaseHeaderName];
  if ([sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderSIPHeaderList class]]) return [((AndroidGovNistJavaxSipHeaderSIPHeaderList *) nil_chk(((AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk(sipHeader, [AndroidGovNistJavaxSipHeaderSIPHeaderList class])))) getFirst];
  else return sipHeader;
}

- (AndroidGovNistJavaxSipHeaderContentType *)getContentTypeHeader {
  return (AndroidGovNistJavaxSipHeaderContentType *) cast_chk([self getHeaderLowerCaseWithNSString:AndroidGovNistJavaxSipMessageSIPMessage_CONTENT_TYPE_LOWERCASE], [AndroidGovNistJavaxSipHeaderContentType class]);
}

- (id<AndroidJavaxSipHeaderContentLengthHeader>)getContentLengthHeader {
  return [self getContentLength];
}

- (id<AndroidJavaxSipHeaderFromHeader>)getFrom {
  return fromHeader_;
}

- (AndroidGovNistJavaxSipHeaderErrorInfoList *)getErrorInfoHeaders {
  return (AndroidGovNistJavaxSipHeaderErrorInfoList *) cast_chk([self getSIPHeaderListLowerCaseWithNSString:AndroidGovNistJavaxSipMessageSIPMessage_ERROR_LOWERCASE], [AndroidGovNistJavaxSipHeaderErrorInfoList class]);
}

- (AndroidGovNistJavaxSipHeaderContactList *)getContactHeaders {
  return (AndroidGovNistJavaxSipHeaderContactList *) cast_chk([self getSIPHeaderListLowerCaseWithNSString:AndroidGovNistJavaxSipMessageSIPMessage_CONTACT_LOWERCASE], [AndroidGovNistJavaxSipHeaderContactList class]);
}

- (AndroidGovNistJavaxSipHeaderContact *)getContactHeader {
  AndroidGovNistJavaxSipHeaderContactList *clist = [self getContactHeaders];
  if (clist != nil) {
    return (AndroidGovNistJavaxSipHeaderContact *) cast_chk([clist getFirst], [AndroidGovNistJavaxSipHeaderContact class]);
  }
  else {
    return nil;
  }
}

- (AndroidGovNistJavaxSipHeaderViaList *)getViaHeaders {
  return (AndroidGovNistJavaxSipHeaderViaList *) cast_chk([self getSIPHeaderListLowerCaseWithNSString:AndroidGovNistJavaxSipMessageSIPMessage_VIA_LOWERCASE], [AndroidGovNistJavaxSipHeaderViaList class]);
}

- (void)setViaWithJavaUtilList:(id<JavaUtilList>)viaList {
  AndroidGovNistJavaxSipHeaderViaList *vList = create_AndroidGovNistJavaxSipHeaderViaList_init();
  id<JavaUtilListIterator> it = [((id<JavaUtilList>) nil_chk(viaList)) listIterator];
  while ([((id<JavaUtilListIterator>) nil_chk(it)) hasNext]) {
    AndroidGovNistJavaxSipHeaderVia *via = (AndroidGovNistJavaxSipHeaderVia *) cast_chk([it next], [AndroidGovNistJavaxSipHeaderVia class]);
    [vList addWithId:via];
  }
  [self setHeaderWithAndroidGovNistJavaxSipHeaderSIPHeaderList:vList];
}

- (void)setHeaderWithAndroidGovNistJavaxSipHeaderSIPHeaderList:(AndroidGovNistJavaxSipHeaderSIPHeaderList *)sipHeaderList {
  [self setHeaderWithAndroidJavaxSipHeaderHeader:sipHeaderList];
}

- (AndroidGovNistJavaxSipHeaderVia *)getTopmostVia {
  if ([self getViaHeaders] == nil) return nil;
  else return (AndroidGovNistJavaxSipHeaderVia *) cast_chk(([((AndroidGovNistJavaxSipHeaderViaList *) nil_chk([self getViaHeaders])) getFirst]), [AndroidGovNistJavaxSipHeaderVia class]);
}

- (id<AndroidJavaxSipHeaderCSeqHeader>)getCSeq {
  return cSeqHeader_;
}

- (AndroidGovNistJavaxSipHeaderAuthorization *)getAuthorization {
  return (AndroidGovNistJavaxSipHeaderAuthorization *) cast_chk([self getHeaderLowerCaseWithNSString:AndroidGovNistJavaxSipMessageSIPMessage_AUTHORIZATION_LOWERCASE], [AndroidGovNistJavaxSipHeaderAuthorization class]);
}

- (id<AndroidJavaxSipHeaderMaxForwardsHeader>)getMaxForwards {
  return maxForwardsHeader_;
}

- (void)setMaxForwardsWithAndroidJavaxSipHeaderMaxForwardsHeader:(id<AndroidJavaxSipHeaderMaxForwardsHeader>)maxForwards {
  [self setHeaderWithAndroidJavaxSipHeaderHeader:maxForwards];
}

- (AndroidGovNistJavaxSipHeaderRouteList *)getRouteHeaders {
  return (AndroidGovNistJavaxSipHeaderRouteList *) cast_chk([self getSIPHeaderListLowerCaseWithNSString:AndroidGovNistJavaxSipMessageSIPMessage_ROUTE_LOWERCASE], [AndroidGovNistJavaxSipHeaderRouteList class]);
}

- (id<AndroidJavaxSipHeaderCallIdHeader>)getCallId {
  return callIdHeader_;
}

- (void)setCallIdWithAndroidJavaxSipHeaderCallIdHeader:(id<AndroidJavaxSipHeaderCallIdHeader>)callId {
  [self setHeaderWithAndroidJavaxSipHeaderHeader:callId];
}

- (void)setCallIdWithNSString:(NSString *)callId {
  if (callIdHeader_ == nil) {
    [self setHeaderWithAndroidJavaxSipHeaderHeader:create_AndroidGovNistJavaxSipHeaderCallID_init()];
  }
  [((AndroidGovNistJavaxSipHeaderCallID *) nil_chk(callIdHeader_)) setCallIdWithNSString:callId];
}

- (AndroidGovNistJavaxSipHeaderRecordRouteList *)getRecordRouteHeaders {
  return (AndroidGovNistJavaxSipHeaderRecordRouteList *) cast_chk([self getSIPHeaderListLowerCaseWithNSString:AndroidGovNistJavaxSipMessageSIPMessage_RECORDROUTE_LOWERCASE], [AndroidGovNistJavaxSipHeaderRecordRouteList class]);
}

- (id<AndroidJavaxSipHeaderToHeader>)getTo {
  return toHeader_;
}

- (void)setToWithAndroidJavaxSipHeaderToHeader:(id<AndroidJavaxSipHeaderToHeader>)to {
  [self setHeaderWithAndroidJavaxSipHeaderHeader:to];
}

- (void)setFromWithAndroidJavaxSipHeaderFromHeader:(id<AndroidJavaxSipHeaderFromHeader>)from {
  [self setHeaderWithAndroidJavaxSipHeaderHeader:from];
}

- (id<AndroidJavaxSipHeaderContentLengthHeader>)getContentLength {
  return self->contentLengthHeader_;
}

- (NSString *)getMessageContent {
  if (self->messageContent_ == nil && self->messageContentBytes_ == nil) return nil;
  else if (self->messageContent_ == nil) {
    JreStrongAssign(&self->messageContent_, [NSString java_stringWithBytes:messageContentBytes_ charsetName:AndroidGovNistJavaxSipMessageSIPMessage_getCharset(self)]);
  }
  return self->messageContent_;
}

- (IOSByteArray *)getRawContent {
  @try {
    if (self->messageContentBytes_ != nil) {
    }
    else if (self->messageContentObject_ != nil) {
      NSString *messageContent = [self->messageContentObject_ description];
      JreStrongAssign(&self->messageContentBytes_, [((NSString *) nil_chk(messageContent)) java_getBytesWithCharsetName:AndroidGovNistJavaxSipMessageSIPMessage_getCharset(self)]);
    }
    else if (self->messageContent_ != nil) {
      JreStrongAssign(&self->messageContentBytes_, [messageContent_ java_getBytesWithCharsetName:AndroidGovNistJavaxSipMessageSIPMessage_getCharset(self)]);
    }
    return self->messageContentBytes_;
  }
  @catch (JavaIoUnsupportedEncodingException *ex) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
    return nil;
  }
}

- (void)setMessageContentWithNSString:(NSString *)type
                         withNSString:(NSString *)subType
                         withNSString:(NSString *)messageContent {
  if (messageContent == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"messgeContent is null");
  AndroidGovNistJavaxSipHeaderContentType *ct = create_AndroidGovNistJavaxSipHeaderContentType_initWithNSString_withNSString_(type, subType);
  [self setHeaderWithAndroidJavaxSipHeaderHeader:ct];
  JreStrongAssign(&self->messageContent_, messageContent);
  JreStrongAssign(&self->messageContentBytes_, nil);
  JreStrongAssign(&self->messageContentObject_, nil);
  AndroidGovNistJavaxSipMessageSIPMessage_computeContentLengthWithId_(self, messageContent);
}

- (void)setContentWithId:(id)content
withAndroidJavaxSipHeaderContentTypeHeader:(id<AndroidJavaxSipHeaderContentTypeHeader>)contentTypeHeader {
  if (content == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null content");
  [self setHeaderWithAndroidJavaxSipHeaderHeader:contentTypeHeader];
  JreStrongAssign(&self->messageContent_, nil);
  JreStrongAssign(&self->messageContentBytes_, nil);
  JreStrongAssign(&self->messageContentObject_, nil);
  if ([content isKindOfClass:[NSString class]]) {
    JreStrongAssign(&self->messageContent_, (NSString *) cast_chk(content, [NSString class]));
  }
  else if ([content isKindOfClass:[IOSByteArray class]]) {
    JreStrongAssign(&self->messageContentBytes_, (IOSByteArray *) cast_chk(content, [IOSByteArray class]));
  }
  else JreStrongAssign(&self->messageContentObject_, content);
  AndroidGovNistJavaxSipMessageSIPMessage_computeContentLengthWithId_(self, content);
}

- (id)getContent {
  if (self->messageContentObject_ != nil) return messageContentObject_;
  else if (self->messageContent_ != nil) return self->messageContent_;
  else if (self->messageContentBytes_ != nil) return self->messageContentBytes_;
  else return nil;
}

- (void)setMessageContentWithNSString:(NSString *)type
                         withNSString:(NSString *)subType
                        withByteArray:(IOSByteArray *)messageContent {
  AndroidGovNistJavaxSipHeaderContentType *ct = create_AndroidGovNistJavaxSipHeaderContentType_initWithNSString_withNSString_(type, subType);
  [self setHeaderWithAndroidJavaxSipHeaderHeader:ct];
  [self setMessageContentWithByteArray:messageContent];
  AndroidGovNistJavaxSipMessageSIPMessage_computeContentLengthWithId_(self, messageContent);
}

- (void)setMessageContentWithByteArray:(IOSByteArray *)content
                           withBoolean:(jboolean)strict
                           withBoolean:(jboolean)computeContentLength
                               withInt:(jint)givenLength {
  AndroidGovNistJavaxSipMessageSIPMessage_computeContentLengthWithId_(self, content);
  if ((!computeContentLength)) {
    if ((!strict && [((AndroidGovNistJavaxSipHeaderContentLength *) nil_chk(self->contentLengthHeader_)) getContentLength] != givenLength) || [((AndroidGovNistJavaxSipHeaderContentLength *) nil_chk(self->contentLengthHeader_)) getContentLength] < givenLength) {
      @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$I$I", @"Invalid content length ", [((AndroidGovNistJavaxSipHeaderContentLength *) nil_chk(self->contentLengthHeader_)) getContentLength], @" / ", givenLength), 0);
    }
  }
  JreStrongAssign(&messageContent_, nil);
  JreStrongAssign(&messageContentBytes_, content);
  JreStrongAssign(&messageContentObject_, nil);
}

- (void)setMessageContentWithByteArray:(IOSByteArray *)content {
  AndroidGovNistJavaxSipMessageSIPMessage_computeContentLengthWithId_(self, content);
  JreStrongAssign(&messageContentBytes_, content);
  JreStrongAssign(&messageContent_, nil);
  JreStrongAssign(&messageContentObject_, nil);
}

- (void)setMessageContentWithByteArray:(IOSByteArray *)content
                           withBoolean:(jboolean)computeContentLength
                               withInt:(jint)givenLength {
  AndroidGovNistJavaxSipMessageSIPMessage_computeContentLengthWithId_(self, content);
  if ((!computeContentLength) && [((AndroidGovNistJavaxSipHeaderContentLength *) nil_chk(self->contentLengthHeader_)) getContentLength] < givenLength) {
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$I$I", @"Invalid content length ", [((AndroidGovNistJavaxSipHeaderContentLength *) nil_chk(self->contentLengthHeader_)) getContentLength], @" / ", givenLength), 0);
  }
  JreStrongAssign(&messageContentBytes_, content);
  JreStrongAssign(&messageContent_, nil);
  JreStrongAssign(&messageContentObject_, nil);
}

- (void)computeContentLengthWithId:(id)content {
  AndroidGovNistJavaxSipMessageSIPMessage_computeContentLengthWithId_(self, content);
}

- (void)removeContent {
  JreStrongAssign(&messageContent_, nil);
  JreStrongAssign(&messageContentBytes_, nil);
  JreStrongAssign(&messageContentObject_, nil);
  @try {
    [((AndroidGovNistJavaxSipHeaderContentLength *) nil_chk(self->contentLengthHeader_)) setContentLengthWithInt:0];
  }
  @catch (AndroidJavaxSipInvalidArgumentException *ex) {
  }
}

- (id<JavaUtilListIterator>)getHeadersWithNSString:(NSString *)headerName {
  if (headerName == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null headerName");
  AndroidGovNistJavaxSipHeaderSIPHeader *sipHeader = [((id<JavaUtilMap>) nil_chk(headerTable_)) getWithId:AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(headerName)];
  if (sipHeader == nil) return [create_JavaUtilLinkedList_init() listIterator];
  if ([sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderSIPHeaderList class]]) {
    return [((AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk(sipHeader, [AndroidGovNistJavaxSipHeaderSIPHeaderList class])) listIterator];
  }
  else {
    return create_AndroidGovNistJavaxSipMessageHeaderIterator_initWithAndroidGovNistJavaxSipMessageSIPMessage_withAndroidGovNistJavaxSipHeaderSIPHeader_(self, sipHeader);
  }
}

- (NSString *)getHeaderAsFormattedStringWithNSString:(NSString *)name {
  NSString *lowerCaseName = AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(name);
  if ([((id<JavaUtilMap>) nil_chk(self->headerTable_)) containsKeyWithId:lowerCaseName]) {
    return [((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk([((id<JavaUtilMap>) nil_chk(self->headerTable_)) getWithId:lowerCaseName])) description];
  }
  else {
    return [((id<AndroidJavaxSipHeaderHeader>) nil_chk([self getHeaderWithNSString:name])) description];
  }
}

- (AndroidGovNistJavaxSipHeaderSIPHeader *)getSIPHeaderListLowerCaseWithNSString:(NSString *)lowerCaseHeaderName {
  return [((id<JavaUtilMap>) nil_chk(headerTable_)) getWithId:lowerCaseHeaderName];
}

- (id<JavaUtilList>)getHeaderListWithNSString:(NSString *)headerName {
  return AndroidGovNistJavaxSipMessageSIPMessage_getHeaderListWithNSString_(self, headerName);
}

- (jboolean)hasHeaderWithNSString:(NSString *)headerName {
  return [((id<JavaUtilMap>) nil_chk(headerTable_)) containsKeyWithId:AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(headerName)];
}

- (jboolean)hasFromTag {
  return fromHeader_ != nil && [fromHeader_ getTag] != nil;
}

- (jboolean)hasToTag {
  return toHeader_ != nil && [toHeader_ getTag] != nil;
}

- (NSString *)getFromTag {
  return fromHeader_ == nil ? nil : [fromHeader_ getTag];
}

- (void)setFromTagWithNSString:(NSString *)tag {
  @try {
    [((AndroidGovNistJavaxSipHeaderFrom *) nil_chk(fromHeader_)) setTagWithNSString:tag];
  }
  @catch (JavaTextParseException *e) {
  }
}

- (void)setToTagWithNSString:(NSString *)tag {
  @try {
    [((AndroidGovNistJavaxSipHeaderTo *) nil_chk(toHeader_)) setTagWithNSString:tag];
  }
  @catch (JavaTextParseException *e) {
  }
}

- (NSString *)getToTag {
  return toHeader_ == nil ? nil : [toHeader_ getTag];
}

- (NSString *)getFirstLine {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addHeaderWithAndroidJavaxSipHeaderHeader:(id<AndroidJavaxSipHeaderHeader>)sipHeader {
  AndroidGovNistJavaxSipHeaderSIPHeader *sh = (AndroidGovNistJavaxSipHeaderSIPHeader *) cast_chk(sipHeader, [AndroidGovNistJavaxSipHeaderSIPHeader class]);
  @try {
    if (([AndroidJavaxSipHeaderViaHeader_class_() isInstance:sipHeader]) || ([AndroidJavaxSipHeaderRecordRouteHeader_class_() isInstance:sipHeader])) {
      [self attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:sh withBoolean:false withBoolean:true];
    }
    else {
      [self attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:sh withBoolean:false withBoolean:false];
    }
  }
  @catch (AndroidGovNistJavaxSipMessageSIPDuplicateHeaderException *ex) {
    @try {
      if ([sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderContentLength class]]) {
        AndroidGovNistJavaxSipHeaderContentLength *cl = (AndroidGovNistJavaxSipHeaderContentLength *) cast_chk(sipHeader, [AndroidGovNistJavaxSipHeaderContentLength class]);
        [((AndroidGovNistJavaxSipHeaderContentLength *) nil_chk(contentLengthHeader_)) setContentLengthWithInt:[((AndroidGovNistJavaxSipHeaderContentLength *) nil_chk(cl)) getContentLength]];
      }
    }
    @catch (AndroidJavaxSipInvalidArgumentException *e) {
    }
  }
}

- (void)addUnparsedWithNSString:(NSString *)unparsed {
  [((JavaUtilLinkedList *) nil_chk([self getUnrecognizedHeadersList])) addWithId:unparsed];
}

- (void)addHeaderWithNSString:(NSString *)sipHeader {
  NSString *hdrString = JreStrcat("$C", [((NSString *) nil_chk(sipHeader)) java_trim], 0x000a);
  @try {
    AndroidGovNistJavaxSipParserHeaderParser *parser = AndroidGovNistJavaxSipParserParserFactory_createParserWithNSString_(sipHeader);
    AndroidGovNistJavaxSipHeaderSIPHeader *sh = [((AndroidGovNistJavaxSipParserHeaderParser *) nil_chk(parser)) parse];
    [self attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:sh withBoolean:false];
  }
  @catch (JavaTextParseException *ex) {
    [((JavaUtilLinkedList *) nil_chk([self getUnrecognizedHeadersList])) addWithId:hdrString];
  }
}

- (id<JavaUtilListIterator>)getUnrecognizedHeaders {
  return [((JavaUtilLinkedList *) nil_chk([self getUnrecognizedHeadersList])) listIterator];
}

- (id<JavaUtilListIterator>)getHeaderNames {
  id<JavaUtilIterator> li = [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(self->headers_)) iterator];
  JavaUtilLinkedList *retval = create_JavaUtilLinkedList_init();
  while ([((id<JavaUtilIterator>) nil_chk(li)) hasNext]) {
    AndroidGovNistJavaxSipHeaderSIPHeader *sipHeader = [li next];
    NSString *name = [((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(sipHeader)) getName];
    [retval addWithId:name];
  }
  return [retval listIterator];
}

- (jboolean)isEqual:(id)other {
  if (![[nil_chk(other) java_getClass] isEqual:[self java_getClass]]) {
    return false;
  }
  AndroidGovNistJavaxSipMessageSIPMessage *otherMessage = (AndroidGovNistJavaxSipMessageSIPMessage *) cast_chk(other, [AndroidGovNistJavaxSipMessageSIPMessage class]);
  id<JavaUtilCollection> values = [((id<JavaUtilMap>) nil_chk(self->headerTable_)) values];
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(values)) iterator];
  if ([((id<JavaUtilMap>) nil_chk(headerTable_)) size] != [((id<JavaUtilMap>) nil_chk(otherMessage->headerTable_)) size]) {
    return false;
  }
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    AndroidGovNistJavaxSipHeaderSIPHeader *mine = [it next];
    AndroidGovNistJavaxSipHeaderSIPHeader *his = ([((id<JavaUtilMap>) nil_chk(otherMessage->headerTable_)) getWithId:AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_([((AndroidGovNistJavaxSipHeaderSIPHeader *) nil_chk(mine)) getName])]);
    if (his == nil) {
      return false;
    }
    else if (![his isEqual:mine]) {
      return false;
    }
  }
  return true;
}

- (id<AndroidJavaxSipHeaderContentDispositionHeader>)getContentDisposition {
  return (id<AndroidJavaxSipHeaderContentDispositionHeader>) cast_check([self getHeaderLowerCaseWithNSString:AndroidGovNistJavaxSipMessageSIPMessage_CONTENT_DISPOSITION_LOWERCASE], AndroidJavaxSipHeaderContentDispositionHeader_class_());
}

- (id<AndroidJavaxSipHeaderContentEncodingHeader>)getContentEncoding {
  return (id<AndroidJavaxSipHeaderContentEncodingHeader>) cast_check([self getHeaderLowerCaseWithNSString:AndroidGovNistJavaxSipMessageSIPMessage_CONTENT_ENCODING_LOWERCASE], AndroidJavaxSipHeaderContentEncodingHeader_class_());
}

- (id<AndroidJavaxSipHeaderContentLanguageHeader>)getContentLanguage {
  return (id<AndroidJavaxSipHeaderContentLanguageHeader>) cast_check([self getHeaderLowerCaseWithNSString:AndroidGovNistJavaxSipMessageSIPMessage_CONTENT_LANGUAGE_LOWERCASE], AndroidJavaxSipHeaderContentLanguageHeader_class_());
}

- (id<AndroidJavaxSipHeaderExpiresHeader>)getExpires {
  return (id<AndroidJavaxSipHeaderExpiresHeader>) cast_check([self getHeaderLowerCaseWithNSString:AndroidGovNistJavaxSipMessageSIPMessage_EXPIRES_LOWERCASE], AndroidJavaxSipHeaderExpiresHeader_class_());
}

- (void)setExpiresWithAndroidJavaxSipHeaderExpiresHeader:(id<AndroidJavaxSipHeaderExpiresHeader>)expiresHeader {
  [self setHeaderWithAndroidJavaxSipHeaderHeader:expiresHeader];
}

- (void)setContentDispositionWithAndroidJavaxSipHeaderContentDispositionHeader:(id<AndroidJavaxSipHeaderContentDispositionHeader>)contentDispositionHeader {
  [self setHeaderWithAndroidJavaxSipHeaderHeader:contentDispositionHeader];
}

- (void)setContentEncodingWithAndroidJavaxSipHeaderContentEncodingHeader:(id<AndroidJavaxSipHeaderContentEncodingHeader>)contentEncodingHeader {
  [self setHeaderWithAndroidJavaxSipHeaderHeader:contentEncodingHeader];
}

- (void)setContentLanguageWithAndroidJavaxSipHeaderContentLanguageHeader:(id<AndroidJavaxSipHeaderContentLanguageHeader>)contentLanguageHeader {
  [self setHeaderWithAndroidJavaxSipHeaderHeader:contentLanguageHeader];
}

- (void)setContentLengthWithAndroidJavaxSipHeaderContentLengthHeader:(id<AndroidJavaxSipHeaderContentLengthHeader>)contentLength {
  @try {
    [((AndroidGovNistJavaxSipHeaderContentLength *) nil_chk(self->contentLengthHeader_)) setContentLengthWithInt:[((id<AndroidJavaxSipHeaderContentLengthHeader>) nil_chk(contentLength)) getContentLength]];
  }
  @catch (AndroidJavaxSipInvalidArgumentException *ex) {
  }
}

- (void)setSizeWithInt:(jint)size {
  self->size_ = size;
}

- (jint)getSize {
  return self->size_;
}

- (void)addLastWithAndroidJavaxSipHeaderHeader:(id<AndroidJavaxSipHeaderHeader>)header {
  if (header == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg!");
  @try {
    [self attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:(AndroidGovNistJavaxSipHeaderSIPHeader *) cast_chk(header, [AndroidGovNistJavaxSipHeaderSIPHeader class]) withBoolean:false withBoolean:false];
  }
  @catch (AndroidGovNistJavaxSipMessageSIPDuplicateHeaderException *ex) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Cannot add header - header already exists");
  }
}

- (void)addFirstWithAndroidJavaxSipHeaderHeader:(id<AndroidJavaxSipHeaderHeader>)header {
  if (header == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"null arg!");
  @try {
    [self attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:(AndroidGovNistJavaxSipHeaderSIPHeader *) cast_chk(header, [AndroidGovNistJavaxSipHeaderSIPHeader class]) withBoolean:false withBoolean:true];
  }
  @catch (AndroidGovNistJavaxSipMessageSIPDuplicateHeaderException *ex) {
    @throw create_AndroidJavaxSipSipException_initWithNSString_(@"Cannot add header - header already exists");
  }
}

- (void)removeFirstWithNSString:(NSString *)headerName {
  if (headerName == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Null argument Provided!");
  [self removeHeaderWithNSString:headerName withBoolean:true];
}

- (void)removeLastWithNSString:(NSString *)headerName {
  if (headerName == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Null argument Provided!");
  [self removeHeaderWithNSString:headerName withBoolean:false];
}

- (void)setCSeqWithAndroidJavaxSipHeaderCSeqHeader:(id<AndroidJavaxSipHeaderCSeqHeader>)cseqHeader {
  [self setHeaderWithAndroidJavaxSipHeaderHeader:cseqHeader];
}

- (void)setApplicationDataWithId:(id)applicationData {
  JreStrongAssign(&self->applicationData_, applicationData);
}

- (id)getApplicationData {
  return self->applicationData_;
}

- (id<AndroidGovNistJavaxSipMessageMultipartMimeContent>)getMultipartMimeContent {
  if ([((AndroidGovNistJavaxSipHeaderContentLength *) nil_chk(self->contentLengthHeader_)) getContentLength] == 0) {
    return nil;
  }
  AndroidGovNistJavaxSipMessageMultipartMimeContentImpl *retval = create_AndroidGovNistJavaxSipMessageMultipartMimeContentImpl_initWithAndroidJavaxSipHeaderContentTypeHeader_([self getContentTypeHeader]);
  IOSByteArray *rawContent = [self getRawContent];
  @try {
    NSString *body = [NSString java_stringWithBytes:rawContent charsetName:AndroidGovNistJavaxSipMessageSIPMessage_getCharset(self)];
    [retval createContentListWithNSString:body];
    return retval;
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(e);
    return nil;
  }
}

- (id<AndroidJavaxSipHeaderCallIdHeader>)getCallIdHeader {
  return self->callIdHeader_;
}

- (id<AndroidJavaxSipHeaderFromHeader>)getFromHeader {
  return self->fromHeader_;
}

- (id<AndroidJavaxSipHeaderToHeader>)getToHeader {
  return self->toHeader_;
}

- (id<AndroidJavaxSipHeaderViaHeader>)getTopmostViaHeader {
  return [self getTopmostVia];
}

- (id<AndroidJavaxSipHeaderCSeqHeader>)getCSeqHeader {
  return self->cSeqHeader_;
}

- (NSString *)getCharset {
  return AndroidGovNistJavaxSipMessageSIPMessage_getCharset(self);
}

- (jboolean)isNullRequest {
  return self->nullRequest_;
}

- (void)setNullRequest {
  self->nullRequest_ = true;
}

- (NSString *)getForkId {
  if (self->forkId_ != nil) {
    return forkId_;
  }
  else {
    NSString *callId = [((id<AndroidJavaxSipHeaderCallIdHeader>) nil_chk([self getCallId])) getCallId];
    NSString *fromTag = [self getFromTag];
    if (fromTag == nil) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"From tag is not yet set. Cannot compute forkId");
    }
    JreStrongAssign(&self->forkId_, [(JreStrcat("$C$", callId, ':', fromTag)) lowercaseString]);
    return self->forkId_;
  }
}

- (void)setSIPVersionWithNSString:(NSString *)sipVersion {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)getSIPVersion {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)description {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)cleanUp {
}

- (void)setUnrecognizedHeadersListWithJavaUtilLinkedList:(JavaUtilLinkedList *)unrecognizedHeaders {
  JreStrongAssign(&self->unrecognizedHeaders_, unrecognizedHeaders);
}

- (JavaUtilLinkedList *)getUnrecognizedHeadersList {
  if (unrecognizedHeaders_ == nil) {
    JreStrongAssignAndConsume(&unrecognizedHeaders_, new_JavaUtilLinkedList_init());
  }
  return unrecognizedHeaders_;
}

- (void)setRemoteAddressWithJavaNetInetAddress:(JavaNetInetAddress *)remoteAddress {
  JreStrongAssign(&self->remoteAddress_, remoteAddress);
}

- (JavaNetInetAddress *)getRemoteAddress {
  return remoteAddress_;
}

- (void)setRemotePortWithInt:(jint)remotePort {
  self->remotePort_ = remotePort;
}

- (jint)getRemotePort {
  return remotePort_;
}

- (void)setLocalAddressWithJavaNetInetAddress:(JavaNetInetAddress *)localAddress {
  JreStrongAssign(&self->localAddress_, localAddress);
}

- (JavaNetInetAddress *)getLocalAddress {
  return localAddress_;
}

- (void)setLocalPortWithInt:(jint)localPort {
  self->localPort_ = localPort;
}

- (jint)getLocalPort {
  return localPort_;
}

- (void)setPeerPacketSourceAddressWithJavaNetInetAddress:(JavaNetInetAddress *)peerPacketSourceAddress {
  JreStrongAssign(&self->peerPacketSourceAddress_, peerPacketSourceAddress);
}

- (JavaNetInetAddress *)getPeerPacketSourceAddress {
  return self->peerPacketSourceAddress_;
}

- (void)setPeerPacketSourcePortWithInt:(jint)peerPacketSourcePort {
  self->peerPacketSourcePort_ = peerPacketSourcePort;
}

- (jint)getPeerPacketSourcePort {
  return self->peerPacketSourcePort_;
}

- (void)dealloc {
  RELEASE_(contentEncodingCharset_);
  RELEASE_(unrecognizedHeaders_);
  RELEASE_(headers_);
  RELEASE_(fromHeader_);
  RELEASE_(toHeader_);
  RELEASE_(cSeqHeader_);
  RELEASE_(callIdHeader_);
  RELEASE_(contentLengthHeader_);
  RELEASE_(maxForwardsHeader_);
  RELEASE_(messageContent_);
  RELEASE_(messageContentBytes_);
  RELEASE_(messageContentObject_);
  RELEASE_(headerTable_);
  RELEASE_(applicationData_);
  RELEASE_(forkId_);
  RELEASE_(remoteAddress_);
  RELEASE_(localAddress_);
  RELEASE_(peerPacketSourceAddress_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLinkedList;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x401, 6, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 7, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x1, 16, 22, 23, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 24, 23, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 28, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderHeader;", 0x1, 29, 14, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderHeader;", 0x4, 30, 14, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderContentType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContentLengthHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderFromHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderErrorInfoList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderContactList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderContact;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderViaList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 32, -1, 33, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderVia;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderCSeqHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderAuthorization;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderMaxForwardsHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderRouteList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderCallIdHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 14, 38, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderRecordRouteList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderToHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContentLengthHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 43, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 47, 38, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 49, 38, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 51, 38, -1, -1, -1 },
    { NULL, "V", 0x2, 52, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilListIterator;", 0x1, 53, 14, -1, 54, -1, -1 },
    { NULL, "LNSString;", 0x1, 55, 14, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderSIPHeader;", 0x1, 56, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 57, 14, -1, 58, -1, -1 },
    { NULL, "Z", 0x1, 59, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 61, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 62, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 62, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilListIterator;", 0x1, -1, -1, -1, 64, -1, -1 },
    { NULL, "LJavaUtilListIterator;", 0x1, -1, -1, -1, 64, -1, -1 },
    { NULL, "Z", 0x1, 65, 11, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContentDispositionHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContentEncodingHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContentLanguageHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderExpiresHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 66, 67, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 69, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 70, 71, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 72, 73, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 75, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 76, 77, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 78, 18, 79, -1, -1, -1 },
    { NULL, "V", 0x1, 80, 18, 79, -1, -1, -1 },
    { NULL, "V", 0x1, 81, 14, 82, -1, -1, -1 },
    { NULL, "V", 0x1, 83, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 84, 85, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 86, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipMessageMultipartMimeContent;", 0x1, -1, -1, 38, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderCallIdHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderFromHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderToHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderViaHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderCSeqHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 87, 14, 38, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 88, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 89, 90, -1, 91, -1, -1 },
    { NULL, "LJavaUtilLinkedList;", 0x4, -1, -1, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 92, 93, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 94, 77, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 95, 93, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 96, 77, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 97, 93, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 98, 77, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(isRequestHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:);
  methods[1].selector = @selector(isResponseHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:);
  methods[2].selector = @selector(getMessageAsEncodedStrings);
  methods[3].selector = @selector(encodeSIPHeadersWithJavaLangStringBuilder:);
  methods[4].selector = @selector(encodeMessageWithJavaLangStringBuilder:);
  methods[5].selector = @selector(getDialogIdWithBoolean:);
  methods[6].selector = @selector(getDialogIdWithBoolean:withNSString:);
  methods[7].selector = @selector(matchWithId:);
  methods[8].selector = @selector(mergeWithId:);
  methods[9].selector = @selector(encode);
  methods[10].selector = @selector(encodeAsBytesWithNSString:);
  methods[11].selector = @selector(java_clone);
  methods[12].selector = @selector(debugDump);
  methods[13].selector = @selector(init);
  methods[14].selector = @selector(attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:);
  methods[15].selector = @selector(setHeaderWithAndroidJavaxSipHeaderHeader:);
  methods[16].selector = @selector(setHeadersWithJavaUtilList:);
  methods[17].selector = @selector(attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:withBoolean:);
  methods[18].selector = @selector(attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:withBoolean:withBoolean:);
  methods[19].selector = @selector(removeHeaderWithNSString:withBoolean:);
  methods[20].selector = @selector(removeHeaderWithNSString:);
  methods[21].selector = @selector(getTransactionId);
  methods[22].selector = @selector(hash);
  methods[23].selector = @selector(hasContent);
  methods[24].selector = @selector(getHeaders);
  methods[25].selector = @selector(getHeaderWithNSString:);
  methods[26].selector = @selector(getHeaderLowerCaseWithNSString:);
  methods[27].selector = @selector(getContentTypeHeader);
  methods[28].selector = @selector(getContentLengthHeader);
  methods[29].selector = @selector(getFrom);
  methods[30].selector = @selector(getErrorInfoHeaders);
  methods[31].selector = @selector(getContactHeaders);
  methods[32].selector = @selector(getContactHeader);
  methods[33].selector = @selector(getViaHeaders);
  methods[34].selector = @selector(setViaWithJavaUtilList:);
  methods[35].selector = @selector(setHeaderWithAndroidGovNistJavaxSipHeaderSIPHeaderList:);
  methods[36].selector = @selector(getTopmostVia);
  methods[37].selector = @selector(getCSeq);
  methods[38].selector = @selector(getAuthorization);
  methods[39].selector = @selector(getMaxForwards);
  methods[40].selector = @selector(setMaxForwardsWithAndroidJavaxSipHeaderMaxForwardsHeader:);
  methods[41].selector = @selector(getRouteHeaders);
  methods[42].selector = @selector(getCallId);
  methods[43].selector = @selector(setCallIdWithAndroidJavaxSipHeaderCallIdHeader:);
  methods[44].selector = @selector(setCallIdWithNSString:);
  methods[45].selector = @selector(getRecordRouteHeaders);
  methods[46].selector = @selector(getTo);
  methods[47].selector = @selector(setToWithAndroidJavaxSipHeaderToHeader:);
  methods[48].selector = @selector(setFromWithAndroidJavaxSipHeaderFromHeader:);
  methods[49].selector = @selector(getContentLength);
  methods[50].selector = @selector(getMessageContent);
  methods[51].selector = @selector(getRawContent);
  methods[52].selector = @selector(setMessageContentWithNSString:withNSString:withNSString:);
  methods[53].selector = @selector(setContentWithId:withAndroidJavaxSipHeaderContentTypeHeader:);
  methods[54].selector = @selector(getContent);
  methods[55].selector = @selector(setMessageContentWithNSString:withNSString:withByteArray:);
  methods[56].selector = @selector(setMessageContentWithByteArray:withBoolean:withBoolean:withInt:);
  methods[57].selector = @selector(setMessageContentWithByteArray:);
  methods[58].selector = @selector(setMessageContentWithByteArray:withBoolean:withInt:);
  methods[59].selector = @selector(computeContentLengthWithId:);
  methods[60].selector = @selector(removeContent);
  methods[61].selector = @selector(getHeadersWithNSString:);
  methods[62].selector = @selector(getHeaderAsFormattedStringWithNSString:);
  methods[63].selector = @selector(getSIPHeaderListLowerCaseWithNSString:);
  methods[64].selector = @selector(getHeaderListWithNSString:);
  methods[65].selector = @selector(hasHeaderWithNSString:);
  methods[66].selector = @selector(hasFromTag);
  methods[67].selector = @selector(hasToTag);
  methods[68].selector = @selector(getFromTag);
  methods[69].selector = @selector(setFromTagWithNSString:);
  methods[70].selector = @selector(setToTagWithNSString:);
  methods[71].selector = @selector(getToTag);
  methods[72].selector = @selector(getFirstLine);
  methods[73].selector = @selector(addHeaderWithAndroidJavaxSipHeaderHeader:);
  methods[74].selector = @selector(addUnparsedWithNSString:);
  methods[75].selector = @selector(addHeaderWithNSString:);
  methods[76].selector = @selector(getUnrecognizedHeaders);
  methods[77].selector = @selector(getHeaderNames);
  methods[78].selector = @selector(isEqual:);
  methods[79].selector = @selector(getContentDisposition);
  methods[80].selector = @selector(getContentEncoding);
  methods[81].selector = @selector(getContentLanguage);
  methods[82].selector = @selector(getExpires);
  methods[83].selector = @selector(setExpiresWithAndroidJavaxSipHeaderExpiresHeader:);
  methods[84].selector = @selector(setContentDispositionWithAndroidJavaxSipHeaderContentDispositionHeader:);
  methods[85].selector = @selector(setContentEncodingWithAndroidJavaxSipHeaderContentEncodingHeader:);
  methods[86].selector = @selector(setContentLanguageWithAndroidJavaxSipHeaderContentLanguageHeader:);
  methods[87].selector = @selector(setContentLengthWithAndroidJavaxSipHeaderContentLengthHeader:);
  methods[88].selector = @selector(setSizeWithInt:);
  methods[89].selector = @selector(getSize);
  methods[90].selector = @selector(addLastWithAndroidJavaxSipHeaderHeader:);
  methods[91].selector = @selector(addFirstWithAndroidJavaxSipHeaderHeader:);
  methods[92].selector = @selector(removeFirstWithNSString:);
  methods[93].selector = @selector(removeLastWithNSString:);
  methods[94].selector = @selector(setCSeqWithAndroidJavaxSipHeaderCSeqHeader:);
  methods[95].selector = @selector(setApplicationDataWithId:);
  methods[96].selector = @selector(getApplicationData);
  methods[97].selector = @selector(getMultipartMimeContent);
  methods[98].selector = @selector(getCallIdHeader);
  methods[99].selector = @selector(getFromHeader);
  methods[100].selector = @selector(getToHeader);
  methods[101].selector = @selector(getTopmostViaHeader);
  methods[102].selector = @selector(getCSeqHeader);
  methods[103].selector = @selector(getCharset);
  methods[104].selector = @selector(isNullRequest);
  methods[105].selector = @selector(setNullRequest);
  methods[106].selector = @selector(getForkId);
  methods[107].selector = @selector(setSIPVersionWithNSString:);
  methods[108].selector = @selector(getSIPVersion);
  methods[109].selector = @selector(description);
  methods[110].selector = @selector(cleanUp);
  methods[111].selector = @selector(setUnrecognizedHeadersListWithJavaUtilLinkedList:);
  methods[112].selector = @selector(getUnrecognizedHeadersList);
  methods[113].selector = @selector(setRemoteAddressWithJavaNetInetAddress:);
  methods[114].selector = @selector(getRemoteAddress);
  methods[115].selector = @selector(setRemotePortWithInt:);
  methods[116].selector = @selector(getRemotePort);
  methods[117].selector = @selector(setLocalAddressWithJavaNetInetAddress:);
  methods[118].selector = @selector(getLocalAddress);
  methods[119].selector = @selector(setLocalPortWithInt:);
  methods[120].selector = @selector(getLocalPort);
  methods[121].selector = @selector(setPeerPacketSourceAddressWithJavaNetInetAddress:);
  methods[122].selector = @selector(getPeerPacketSourceAddress);
  methods[123].selector = @selector(setPeerPacketSourcePortWithInt:);
  methods[124].selector = @selector(getPeerPacketSourcePort);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "contentEncodingCharset_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nullRequest_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "unrecognizedHeaders_", "LJavaUtilLinkedList;", .constantValue.asLong = 0, 0x4, -1, -1, 99, -1 },
    { "headers_", "LJavaUtilConcurrentConcurrentLinkedQueue;", .constantValue.asLong = 0, 0x4, -1, -1, 100, -1 },
    { "fromHeader_", "LAndroidGovNistJavaxSipHeaderFrom;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "toHeader_", "LAndroidGovNistJavaxSipHeaderTo;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "cSeqHeader_", "LAndroidGovNistJavaxSipHeaderCSeq;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "callIdHeader_", "LAndroidGovNistJavaxSipHeaderCallID;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "contentLengthHeader_", "LAndroidGovNistJavaxSipHeaderContentLength;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "maxForwardsHeader_", "LAndroidGovNistJavaxSipHeaderMaxForwards;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "messageContent_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "messageContentBytes_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "messageContentObject_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "headerTable_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x4, -1, -1, 101, -1 },
    { "applicationData_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "forkId_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "remoteAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "remotePort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "localAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "localPort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "peerPacketSourceAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "peerPacketSourcePort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CONTENT_TYPE_LOWERCASE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 102, -1, -1 },
    { "ERROR_LOWERCASE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 103, -1, -1 },
    { "CONTACT_LOWERCASE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 104, -1, -1 },
    { "VIA_LOWERCASE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 105, -1, -1 },
    { "AUTHORIZATION_LOWERCASE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 106, -1, -1 },
    { "ROUTE_LOWERCASE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 107, -1, -1 },
    { "RECORDROUTE_LOWERCASE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 108, -1, -1 },
    { "CONTENT_DISPOSITION_LOWERCASE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 109, -1, -1 },
    { "CONTENT_ENCODING_LOWERCASE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 110, -1, -1 },
    { "CONTENT_LANGUAGE_LOWERCASE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 111, -1, -1 },
    { "EXPIRES_LOWERCASE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 112, -1, -1 },
  };
  static const void *ptrTable[] = { "isRequestHeader", "LAndroidGovNistJavaxSipHeaderSIPHeader;", "isResponseHeader", "()Ljava/util/LinkedList<Ljava/lang/String;>;", "encodeSIPHeaders", "LJavaLangStringBuilder;", "encodeMessage", "getDialogId", "Z", "ZLNSString;", "match", "LNSObject;", "merge", "encodeAsBytes", "LNSString;", "clone", "attachHeader", "setHeader", "LAndroidJavaxSipHeaderHeader;", "setHeaders", "LJavaUtilList;", "(Ljava/util/List<Landroid/gov/nist/javax/sip/header/SIPHeader;>;)V", "LAndroidGovNistJavaxSipHeaderSIPHeader;Z", "LAndroidGovNistJavaxSipMessageSIPDuplicateHeaderException;", "LAndroidGovNistJavaxSipHeaderSIPHeader;ZZ", "removeHeader", "LNSString;Z", "hashCode", "()Ljava/util/Iterator<Landroid/gov/nist/javax/sip/header/SIPHeader;>;", "getHeader", "getHeaderLowerCase", "setVia", "LAndroidGovNistJavaxSipHeaderSIPHeaderList;", "(Landroid/gov/nist/javax/sip/header/SIPHeaderList<Landroid/gov/nist/javax/sip/header/Via;>;)V", "setMaxForwards", "LAndroidJavaxSipHeaderMaxForwardsHeader;", "setCallId", "LAndroidJavaxSipHeaderCallIdHeader;", "LJavaTextParseException;", "setTo", "LAndroidJavaxSipHeaderToHeader;", "setFrom", "LAndroidJavaxSipHeaderFromHeader;", "LJavaIoUnsupportedEncodingException;", "setMessageContent", "LNSString;LNSString;LNSString;", "setContent", "LNSObject;LAndroidJavaxSipHeaderContentTypeHeader;", "LNSString;LNSString;[B", "[BZZI", "[B", "[BZI", "computeContentLength", "getHeaders", "(Ljava/lang/String;)Ljava/util/ListIterator<Landroid/gov/nist/javax/sip/header/SIPHeader;>;", "getHeaderAsFormattedString", "getSIPHeaderListLowerCase", "getHeaderList", "(Ljava/lang/String;)Ljava/util/List<Landroid/gov/nist/javax/sip/header/SIPHeader;>;", "hasHeader", "setFromTag", "setToTag", "addHeader", "addUnparsed", "()Ljava/util/ListIterator<Ljava/lang/String;>;", "equals", "setExpires", "LAndroidJavaxSipHeaderExpiresHeader;", "setContentDisposition", "LAndroidJavaxSipHeaderContentDispositionHeader;", "setContentEncoding", "LAndroidJavaxSipHeaderContentEncodingHeader;", "setContentLanguage", "LAndroidJavaxSipHeaderContentLanguageHeader;", "setContentLength", "LAndroidJavaxSipHeaderContentLengthHeader;", "setSize", "I", "addLast", "LAndroidJavaxSipSipException;LJavaLangNullPointerException;", "addFirst", "removeFirst", "LJavaLangNullPointerException;", "removeLast", "setCSeq", "LAndroidJavaxSipHeaderCSeqHeader;", "setApplicationData", "setSIPVersion", "toString", "setUnrecognizedHeadersList", "LJavaUtilLinkedList;", "(Ljava/util/LinkedList<Ljava/lang/String;>;)V", "setRemoteAddress", "LJavaNetInetAddress;", "setRemotePort", "setLocalAddress", "setLocalPort", "setPeerPacketSourceAddress", "setPeerPacketSourcePort", "Ljava/util/LinkedList<Ljava/lang/String;>;", "Ljava/util/concurrent/ConcurrentLinkedQueue<Landroid/gov/nist/javax/sip/header/SIPHeader;>;", "Ljava/util/Map<Ljava/lang/String;Landroid/gov/nist/javax/sip/header/SIPHeader;>;", &AndroidGovNistJavaxSipMessageSIPMessage_CONTENT_TYPE_LOWERCASE, &AndroidGovNistJavaxSipMessageSIPMessage_ERROR_LOWERCASE, &AndroidGovNistJavaxSipMessageSIPMessage_CONTACT_LOWERCASE, &AndroidGovNistJavaxSipMessageSIPMessage_VIA_LOWERCASE, &AndroidGovNistJavaxSipMessageSIPMessage_AUTHORIZATION_LOWERCASE, &AndroidGovNistJavaxSipMessageSIPMessage_ROUTE_LOWERCASE, &AndroidGovNistJavaxSipMessageSIPMessage_RECORDROUTE_LOWERCASE, &AndroidGovNistJavaxSipMessageSIPMessage_CONTENT_DISPOSITION_LOWERCASE, &AndroidGovNistJavaxSipMessageSIPMessage_CONTENT_ENCODING_LOWERCASE, &AndroidGovNistJavaxSipMessageSIPMessage_CONTENT_LANGUAGE_LOWERCASE, &AndroidGovNistJavaxSipMessageSIPMessage_EXPIRES_LOWERCASE };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipMessageSIPMessage = { "SIPMessage", "android.gov.nist.javax.sip.message", ptrTable, methods, fields, 7, 0x401, 125, 34, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipMessageSIPMessage;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipMessageSIPMessage class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipMessageSIPMessage_CONTENT_TYPE_LOWERCASE, AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(AndroidJavaxSipHeaderContentTypeHeader_NAME));
    JreStrongAssign(&AndroidGovNistJavaxSipMessageSIPMessage_ERROR_LOWERCASE, AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(AndroidJavaxSipHeaderErrorInfoHeader_NAME));
    JreStrongAssign(&AndroidGovNistJavaxSipMessageSIPMessage_CONTACT_LOWERCASE, AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(AndroidJavaxSipHeaderContactHeader_NAME));
    JreStrongAssign(&AndroidGovNistJavaxSipMessageSIPMessage_VIA_LOWERCASE, AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(AndroidJavaxSipHeaderViaHeader_NAME));
    JreStrongAssign(&AndroidGovNistJavaxSipMessageSIPMessage_AUTHORIZATION_LOWERCASE, AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(AndroidJavaxSipHeaderAuthorizationHeader_NAME));
    JreStrongAssign(&AndroidGovNistJavaxSipMessageSIPMessage_ROUTE_LOWERCASE, AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(AndroidJavaxSipHeaderRouteHeader_NAME));
    JreStrongAssign(&AndroidGovNistJavaxSipMessageSIPMessage_RECORDROUTE_LOWERCASE, AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(AndroidJavaxSipHeaderRecordRouteHeader_NAME));
    JreStrongAssign(&AndroidGovNistJavaxSipMessageSIPMessage_CONTENT_DISPOSITION_LOWERCASE, AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(AndroidJavaxSipHeaderContentDispositionHeader_NAME));
    JreStrongAssign(&AndroidGovNistJavaxSipMessageSIPMessage_CONTENT_ENCODING_LOWERCASE, AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(AndroidJavaxSipHeaderContentEncodingHeader_NAME));
    JreStrongAssign(&AndroidGovNistJavaxSipMessageSIPMessage_CONTENT_LANGUAGE_LOWERCASE, AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(AndroidJavaxSipHeaderContentLanguageHeader_NAME));
    JreStrongAssign(&AndroidGovNistJavaxSipMessageSIPMessage_EXPIRES_LOWERCASE, AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(AndroidJavaxSipHeaderExpiresHeader_NAME));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipMessageSIPMessage)
  }
}

@end

jboolean AndroidGovNistJavaxSipMessageSIPMessage_isRequestHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader_(AndroidGovNistJavaxSipHeaderSIPHeader *sipHeader) {
  AndroidGovNistJavaxSipMessageSIPMessage_initialize();
  return [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderAlertInfo class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderInReplyTo class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderAuthorization class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderMaxForwards class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderUserAgent class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderPriority class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderProxyAuthorization class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderProxyRequire class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderProxyRequireList class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderRoute class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderRouteList class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderSubject class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderSIPIfMatch class]];
}

jboolean AndroidGovNistJavaxSipMessageSIPMessage_isResponseHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader_(AndroidGovNistJavaxSipHeaderSIPHeader *sipHeader) {
  AndroidGovNistJavaxSipMessageSIPMessage_initialize();
  return [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderErrorInfo class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderProxyAuthenticate class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderServer class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderUnsupported class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderRetryAfter class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderWarning class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderWWWAuthenticate class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderSIPETag class]] || [sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderRSeq class]];
}

NSString *AndroidGovNistJavaxSipMessageSIPMessage_getDialogIdWithBoolean_withNSString_(AndroidGovNistJavaxSipMessageSIPMessage *self, jboolean isServer, NSString *toTag) {
  AndroidGovNistJavaxSipHeaderFrom *from = (AndroidGovNistJavaxSipHeaderFrom *) cast_chk([self getFrom], [AndroidGovNistJavaxSipHeaderFrom class]);
  AndroidGovNistJavaxSipHeaderCallID *cid = (AndroidGovNistJavaxSipHeaderCallID *) cast_chk([self getCallId], [AndroidGovNistJavaxSipHeaderCallID class]);
  JavaLangStringBuffer *retval = create_JavaLangStringBuffer_initWithNSString_([((AndroidGovNistJavaxSipHeaderCallID *) nil_chk(cid)) getCallId]);
  if (!isServer) {
    if ([((AndroidGovNistJavaxSipHeaderFrom *) nil_chk(from)) getTag] != nil) {
      [retval appendWithNSString:AndroidGovNistCoreGenericObject_COLON];
      [retval appendWithNSString:[from getTag]];
    }
    if (toTag != nil) {
      [retval appendWithNSString:AndroidGovNistCoreGenericObject_COLON];
      [retval appendWithNSString:toTag];
    }
  }
  else {
    if (toTag != nil) {
      [retval appendWithNSString:AndroidGovNistCoreGenericObject_COLON];
      [retval appendWithNSString:toTag];
    }
    if ([((AndroidGovNistJavaxSipHeaderFrom *) nil_chk(from)) getTag] != nil) {
      [retval appendWithNSString:AndroidGovNistCoreGenericObject_COLON];
      [retval appendWithNSString:[from getTag]];
    }
  }
  return [((NSString *) nil_chk([retval description])) lowercaseString];
}

void AndroidGovNistJavaxSipMessageSIPMessage_init(AndroidGovNistJavaxSipMessageSIPMessage *self) {
  AndroidGovNistJavaxSipMessageMessageObject_init(self);
  JreStrongAssign(&self->contentEncodingCharset_, AndroidGovNistJavaxSipMessageMessageFactoryImpl_getDefaultContentEncodingCharset());
  JreStrongAssignAndConsume(&self->unrecognizedHeaders_, new_JavaUtilLinkedList_init());
  JreStrongAssignAndConsume(&self->headers_, new_JavaUtilConcurrentConcurrentLinkedQueue_init());
  JreStrongAssignAndConsume(&self->headerTable_, new_JavaUtilConcurrentConcurrentHashMap_init());
  @try {
    [self attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:create_AndroidGovNistJavaxSipHeaderContentLength_initWithInt_(0) withBoolean:false];
  }
  @catch (JavaLangException *ex) {
  }
}

void AndroidGovNistJavaxSipMessageSIPMessage_attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader_(AndroidGovNistJavaxSipMessageSIPMessage *self, AndroidGovNistJavaxSipHeaderSIPHeader *h) {
  if (h == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"null header!");
  @try {
    if ([h isKindOfClass:[AndroidGovNistJavaxSipHeaderSIPHeaderList class]]) {
      AndroidGovNistJavaxSipHeaderSIPHeaderList *hl = (AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk(h, [AndroidGovNistJavaxSipHeaderSIPHeaderList class]);
      if ([hl isEmpty]) {
        return;
      }
    }
    [self attachHeaderWithAndroidGovNistJavaxSipHeaderSIPHeader:h withBoolean:false withBoolean:false];
  }
  @catch (AndroidGovNistJavaxSipMessageSIPDuplicateHeaderException *ex) {
  }
}

void AndroidGovNistJavaxSipMessageSIPMessage_computeContentLengthWithId_(AndroidGovNistJavaxSipMessageSIPMessage *self, id content) {
  jint length = 0;
  if (content != nil) {
    if ([content isKindOfClass:[NSString class]]) {
      @try {
        length = ((IOSByteArray *) nil_chk([((NSString *) cast_chk(content, [NSString class])) java_getBytesWithCharsetName:AndroidGovNistJavaxSipMessageSIPMessage_getCharset(self)]))->size_;
      }
      @catch (JavaIoUnsupportedEncodingException *ex) {
        AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
      }
    }
    else if ([content isKindOfClass:[IOSByteArray class]]) {
      length = ((IOSByteArray *) cast_chk(content, [IOSByteArray class]))->size_;
    }
    else {
      length = ((jint) [((NSString *) nil_chk([content description])) length]);
    }
  }
  @try {
    [((AndroidGovNistJavaxSipHeaderContentLength *) nil_chk(self->contentLengthHeader_)) setContentLengthWithInt:length];
  }
  @catch (AndroidJavaxSipInvalidArgumentException *e) {
  }
}

id<JavaUtilList> AndroidGovNistJavaxSipMessageSIPMessage_getHeaderListWithNSString_(AndroidGovNistJavaxSipMessageSIPMessage *self, NSString *headerName) {
  AndroidGovNistJavaxSipHeaderSIPHeader *sipHeader = [((id<JavaUtilMap>) nil_chk(self->headerTable_)) getWithId:AndroidGovNistJavaxSipHeaderSIPHeaderNamesCache_toLowerCaseWithNSString_(headerName)];
  if (sipHeader == nil) return nil;
  else if ([sipHeader isKindOfClass:[AndroidGovNistJavaxSipHeaderSIPHeaderList class]]) return ([((AndroidGovNistJavaxSipHeaderSIPHeaderList *) cast_chk(sipHeader, [AndroidGovNistJavaxSipHeaderSIPHeaderList class])) getHeaderList]);
  else {
    JavaUtilLinkedList *ll = create_JavaUtilLinkedList_init();
    [ll addWithId:sipHeader];
    return ll;
  }
}

NSString *AndroidGovNistJavaxSipMessageSIPMessage_getCharset(AndroidGovNistJavaxSipMessageSIPMessage *self) {
  AndroidGovNistJavaxSipHeaderContentType *ct = [self getContentTypeHeader];
  if (ct != nil) {
    NSString *c = [ct getCharset];
    return c != nil ? c : self->contentEncodingCharset_;
  }
  else return self->contentEncodingCharset_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipMessageSIPMessage)
