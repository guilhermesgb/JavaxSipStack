//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/Utils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sip/SIPConstants.h"
#include "android/gov/nist/javax/sip/Utils.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/message/SIPResponse.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/security/MessageDigest.h"
#include "java/util/HashSet.h"
#include "java/util/Locale.h"
#include "java/util/Random.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"

inline jint AndroidGovNistJavaxSipUtils_get_digesterPoolsSize();
inline jint AndroidGovNistJavaxSipUtils_set_digesterPoolsSize(jint value);
inline jint *AndroidGovNistJavaxSipUtils_getRef_digesterPoolsSize();
static jint AndroidGovNistJavaxSipUtils_digesterPoolsSize = 20;
J2OBJC_STATIC_FIELD_PRIMITIVE(AndroidGovNistJavaxSipUtils, digesterPoolsSize, jint)

inline IOSObjectArray *AndroidGovNistJavaxSipUtils_get_digesterPool();
inline IOSObjectArray *AndroidGovNistJavaxSipUtils_set_digesterPool(IOSObjectArray *value);
static IOSObjectArray *AndroidGovNistJavaxSipUtils_digesterPool;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipUtils, digesterPool, IOSObjectArray *)

inline JavaUtilRandom *AndroidGovNistJavaxSipUtils_get_rand();
inline JavaUtilRandom *AndroidGovNistJavaxSipUtils_set_rand(JavaUtilRandom *value);
static JavaUtilRandom *AndroidGovNistJavaxSipUtils_rand;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipUtils, rand, JavaUtilRandom *)

inline jlong AndroidGovNistJavaxSipUtils_get_counter();
inline jlong AndroidGovNistJavaxSipUtils_set_counter(jlong value);
inline jlong *AndroidGovNistJavaxSipUtils_getRef_counter();
static jlong AndroidGovNistJavaxSipUtils_counter = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(AndroidGovNistJavaxSipUtils, counter, jlong)

inline jint AndroidGovNistJavaxSipUtils_get_callIDCounter();
inline jint AndroidGovNistJavaxSipUtils_set_callIDCounter(jint value);
inline jint *AndroidGovNistJavaxSipUtils_getRef_callIDCounter();
static jint AndroidGovNistJavaxSipUtils_callIDCounter;
J2OBJC_STATIC_FIELD_PRIMITIVE(AndroidGovNistJavaxSipUtils, callIDCounter, jint)

inline NSString *AndroidGovNistJavaxSipUtils_get_signature();
inline NSString *AndroidGovNistJavaxSipUtils_set_signature(NSString *value);
static NSString *AndroidGovNistJavaxSipUtils_signature;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipUtils, signature, NSString *)

inline AndroidGovNistJavaxSipUtils *AndroidGovNistJavaxSipUtils_get_instance();
inline AndroidGovNistJavaxSipUtils *AndroidGovNistJavaxSipUtils_set_instance(AndroidGovNistJavaxSipUtils *value);
static AndroidGovNistJavaxSipUtils *AndroidGovNistJavaxSipUtils_instance;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipUtils, instance, AndroidGovNistJavaxSipUtils *)

inline IOSCharArray *AndroidGovNistJavaxSipUtils_get_toHex();
static IOSCharArray *AndroidGovNistJavaxSipUtils_toHex;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistJavaxSipUtils, toHex, IOSCharArray *)

@interface AndroidGovNistJavaxSipUtils_1 : NSObject < JavaLangRunnable > {
 @public
  JavaUtilHashSet *val$branchIds_;
}

- (instancetype)initWithJavaUtilHashSet:(JavaUtilHashSet *)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistJavaxSipUtils_1)

__attribute__((unused)) static void AndroidGovNistJavaxSipUtils_1_initWithJavaUtilHashSet_(AndroidGovNistJavaxSipUtils_1 *self, JavaUtilHashSet *capture$0);

__attribute__((unused)) static AndroidGovNistJavaxSipUtils_1 *new_AndroidGovNistJavaxSipUtils_1_initWithJavaUtilHashSet_(JavaUtilHashSet *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistJavaxSipUtils_1 *create_AndroidGovNistJavaxSipUtils_1_initWithJavaUtilHashSet_(JavaUtilHashSet *capture$0);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipUtils)

@implementation AndroidGovNistJavaxSipUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSipUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (AndroidGovNistJavaxSipUtils *)getInstance {
  return AndroidGovNistJavaxSipUtils_getInstance();
}

+ (NSString *)toHexStringWithByteArray:(IOSByteArray *)b {
  return AndroidGovNistJavaxSipUtils_toHexStringWithByteArray_(b);
}

+ (NSString *)getQuotedStringWithNSString:(NSString *)str {
  return AndroidGovNistJavaxSipUtils_getQuotedStringWithNSString_(str);
}

+ (NSString *)reduceStringWithNSString:(NSString *)input {
  return AndroidGovNistJavaxSipUtils_reduceStringWithNSString_(input);
}

+ (NSString *)toUpperCaseWithNSString:(NSString *)str {
  return AndroidGovNistJavaxSipUtils_toUpperCaseWithNSString_(str);
}

- (NSString *)generateCallIdentifierWithNSString:(NSString *)address {
  jlong random = [((JavaUtilRandom *) nil_chk(AndroidGovNistJavaxSipUtils_rand)) nextLong];
  jint hash_ = (jint) JavaLangMath_absWithLong_(random % AndroidGovNistJavaxSipUtils_digesterPoolsSize);
  JavaSecurityMessageDigest *md = IOSObjectArray_Get(nil_chk(AndroidGovNistJavaxSipUtils_digesterPool), hash_);
  @synchronized(md) {
    NSString *date = JavaLangLong_toStringWithLong_(JavaLangSystem_nanoTime() + JavaLangSystem_currentTimeMillis() + AndroidGovNistJavaxSipUtils_callIDCounter++ + random);
    IOSByteArray *cid = [((JavaSecurityMessageDigest *) nil_chk(md)) digestWithByteArray:[((NSString *) nil_chk(date)) java_getBytes]];
    NSString *cidString = AndroidGovNistJavaxSipUtils_toHexStringWithByteArray_(cid);
    return JreStrcat("$C$", cidString, '@', address);
  }
}

- (NSString *)generateTag {
  @synchronized(self) {
    return JavaLangInteger_toHexStringWithInt_([((JavaUtilRandom *) nil_chk(AndroidGovNistJavaxSipUtils_rand)) nextInt]);
  }
}

- (NSString *)generateBranchId {
  jlong num = [((JavaUtilRandom *) nil_chk(AndroidGovNistJavaxSipUtils_rand)) nextLong] + AndroidGovNistJavaxSipUtils_counter++ + JavaLangSystem_currentTimeMillis() + JavaLangSystem_nanoTime();
  jint hash_ = (jint) JavaLangMath_absWithLong_(num % AndroidGovNistJavaxSipUtils_digesterPoolsSize);
  JavaSecurityMessageDigest *digester = IOSObjectArray_Get(nil_chk(AndroidGovNistJavaxSipUtils_digesterPool), hash_);
  @synchronized(digester) {
    IOSByteArray *bid = [((JavaSecurityMessageDigest *) nil_chk(digester)) digestWithByteArray:[((NSString *) nil_chk(JavaLangLong_toStringWithLong_(num))) java_getBytes]];
    return JreStrcat("$C$C$", AndroidGovNistJavaxSipSIPConstants_BRANCH_MAGIC_COOKIE, '-', AndroidGovNistJavaxSipUtils_signature, '-', AndroidGovNistJavaxSipUtils_toHexStringWithByteArray_(bid));
  }
}

- (jboolean)responseBelongsToUsWithAndroidGovNistJavaxSipMessageSIPResponse:(AndroidGovNistJavaxSipMessageSIPResponse *)response {
  AndroidGovNistJavaxSipHeaderVia *topmostVia = [((AndroidGovNistJavaxSipMessageSIPResponse *) nil_chk(response)) getTopmostVia];
  NSString *branch = [((AndroidGovNistJavaxSipHeaderVia *) nil_chk(topmostVia)) getBranch];
  return branch != nil && [branch hasPrefix:JreStrcat("$C$", AndroidGovNistJavaxSipSIPConstants_BRANCH_MAGIC_COOKIE, '-', AndroidGovNistJavaxSipUtils_signature)];
}

+ (NSString *)getSignature {
  return AndroidGovNistJavaxSipUtils_getSignature();
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  AndroidGovNistJavaxSipUtils_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipUtils;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xc, 4, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getInstance);
  methods[2].selector = @selector(toHexStringWithByteArray:);
  methods[3].selector = @selector(getQuotedStringWithNSString:);
  methods[4].selector = @selector(reduceStringWithNSString:);
  methods[5].selector = @selector(toUpperCaseWithNSString:);
  methods[6].selector = @selector(generateCallIdentifierWithNSString:);
  methods[7].selector = @selector(generateTag);
  methods[8].selector = @selector(generateBranchId);
  methods[9].selector = @selector(responseBelongsToUsWithAndroidGovNistJavaxSipMessageSIPResponse:);
  methods[10].selector = @selector(getSignature);
  methods[11].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digesterPoolsSize", "I", .constantValue.asLong = 0, 0xa, -1, 11, -1, -1 },
    { "digesterPool", "[LJavaSecurityMessageDigest;", .constantValue.asLong = 0, 0xa, -1, 12, -1, -1 },
    { "rand", "LJavaUtilRandom;", .constantValue.asLong = 0, 0xa, -1, 13, -1, -1 },
    { "counter", "J", .constantValue.asLong = 0, 0xa, -1, 14, -1, -1 },
    { "callIDCounter", "I", .constantValue.asLong = 0, 0xa, -1, 15, -1, -1 },
    { "signature", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 16, -1, -1 },
    { "instance", "LAndroidGovNistJavaxSipUtils;", .constantValue.asLong = 0, 0xa, -1, 17, -1, -1 },
    { "toHex", "[C", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
  };
  static const void *ptrTable[] = { "toHexString", "[B", "getQuotedString", "LNSString;", "reduceString", "toUpperCase", "generateCallIdentifier", "responseBelongsToUs", "LAndroidGovNistJavaxSipMessageSIPResponse;", "main", "[LNSString;", &AndroidGovNistJavaxSipUtils_digesterPoolsSize, &AndroidGovNistJavaxSipUtils_digesterPool, &AndroidGovNistJavaxSipUtils_rand, &AndroidGovNistJavaxSipUtils_counter, &AndroidGovNistJavaxSipUtils_callIDCounter, &AndroidGovNistJavaxSipUtils_signature, &AndroidGovNistJavaxSipUtils_instance, &AndroidGovNistJavaxSipUtils_toHex };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipUtils = { "Utils", "android.gov.nist.javax.sip", ptrTable, methods, fields, 7, 0x1, 12, 8, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipUtils;
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipUtils class]) {
    JreStrongAssignAndConsume(&AndroidGovNistJavaxSipUtils_digesterPool, [IOSObjectArray newArrayWithLength:AndroidGovNistJavaxSipUtils_digesterPoolsSize type:JavaSecurityMessageDigest_class_()]);
    JreStrongAssignAndConsume(&AndroidGovNistJavaxSipUtils_instance, new_AndroidGovNistJavaxSipUtils_init());
    JreStrongAssignAndConsume(&AndroidGovNistJavaxSipUtils_toHex, [IOSCharArray newArrayWithChars:(jchar[]){ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' } count:16]);
    {
      @try {
        for (jint q = 0; q < AndroidGovNistJavaxSipUtils_digesterPoolsSize; q++) IOSObjectArray_Set(nil_chk(AndroidGovNistJavaxSipUtils_digesterPool), q, JavaSecurityMessageDigest_getInstanceWithNSString_(@"MD5"));
      }
      @catch (JavaLangException *ex) {
        @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(@"Could not intialize Digester ", ex);
      }
      JreStrongAssignAndConsume(&AndroidGovNistJavaxSipUtils_rand, new_JavaUtilRandom_initWithLong_(JavaLangSystem_nanoTime()));
      JreStrongAssign(&AndroidGovNistJavaxSipUtils_signature, AndroidGovNistJavaxSipUtils_toHexStringWithByteArray_([((NSString *) nil_chk(JavaLangInteger_toStringWithInt_(JavaLangMath_absWithInt_([AndroidGovNistJavaxSipUtils_rand nextInt] % 1000)))) java_getBytes]));
    }
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipUtils)
  }
}

@end

void AndroidGovNistJavaxSipUtils_init(AndroidGovNistJavaxSipUtils *self) {
  NSObject_init(self);
}

AndroidGovNistJavaxSipUtils *new_AndroidGovNistJavaxSipUtils_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipUtils, init)
}

AndroidGovNistJavaxSipUtils *create_AndroidGovNistJavaxSipUtils_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipUtils, init)
}

AndroidGovNistJavaxSipUtils *AndroidGovNistJavaxSipUtils_getInstance() {
  AndroidGovNistJavaxSipUtils_initialize();
  return AndroidGovNistJavaxSipUtils_instance;
}

NSString *AndroidGovNistJavaxSipUtils_toHexStringWithByteArray_(IOSByteArray *b) {
  AndroidGovNistJavaxSipUtils_initialize();
  jint pos = 0;
  IOSCharArray *c = [IOSCharArray arrayWithLength:((IOSByteArray *) nil_chk(b))->size_ * 2];
  for (jint i = 0; i < b->size_; i++) {
    *IOSCharArray_GetRef(c, pos++) = IOSCharArray_Get(nil_chk(AndroidGovNistJavaxSipUtils_toHex), (JreRShift32(IOSByteArray_Get(b, i), 4)) & (jint) 0x0F);
    *IOSCharArray_GetRef(c, pos++) = IOSCharArray_Get(AndroidGovNistJavaxSipUtils_toHex, IOSByteArray_Get(b, i) & (jint) 0x0f);
  }
  return [NSString java_stringWithCharacters:c];
}

NSString *AndroidGovNistJavaxSipUtils_getQuotedStringWithNSString_(NSString *str) {
  AndroidGovNistJavaxSipUtils_initialize();
  return JreStrcat("C$C", '"', [((NSString *) nil_chk(str)) java_replace:@"\"" withSequence:@"\\\""], '"');
}

NSString *AndroidGovNistJavaxSipUtils_reduceStringWithNSString_(NSString *input) {
  AndroidGovNistJavaxSipUtils_initialize();
  NSString *newString = [((NSString *) nil_chk(input)) lowercaseString];
  jint len = ((jint) [((NSString *) nil_chk(newString)) length]);
  NSString *retval = @"";
  for (jint i = 0; i < len; i++) {
    if ([newString charAtWithInt:i] == ' ' || [newString charAtWithInt:i] == 0x0009) continue;
    else JreStrAppend(&retval, "C", [newString charAtWithInt:i]);
  }
  return retval;
}

NSString *AndroidGovNistJavaxSipUtils_toUpperCaseWithNSString_(NSString *str) {
  AndroidGovNistJavaxSipUtils_initialize();
  return [((NSString *) nil_chk(str)) java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)];
}

NSString *AndroidGovNistJavaxSipUtils_getSignature() {
  AndroidGovNistJavaxSipUtils_initialize();
  return AndroidGovNistJavaxSipUtils_signature;
}

void AndroidGovNistJavaxSipUtils_mainWithNSStringArray_(IOSObjectArray *args) {
  AndroidGovNistJavaxSipUtils_initialize();
  JavaUtilHashSet *branchIds = create_JavaUtilHashSet_init();
  id<JavaUtilConcurrentExecutor> e = JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_(100);
  for (jint q = 0; q < 100; q++) {
    [((id<JavaUtilConcurrentExecutor>) nil_chk(e)) executeWithJavaLangRunnable:create_AndroidGovNistJavaxSipUtils_1_initWithJavaUtilHashSet_(branchIds)];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Done!!"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipUtils)

@implementation AndroidGovNistJavaxSipUtils_1

- (instancetype)initWithJavaUtilHashSet:(JavaUtilHashSet *)capture$0 {
  AndroidGovNistJavaxSipUtils_1_initWithJavaUtilHashSet_(self, capture$0);
  return self;
}

- (void)run {
  for (jint b = 0; b < 1000000; b++) {
    NSString *bid = [((AndroidGovNistJavaxSipUtils *) nil_chk(AndroidGovNistJavaxSipUtils_getInstance())) generateBranchId];
    if ([((JavaUtilHashSet *) nil_chk(val$branchIds_)) containsWithId:bid]) {
      @throw create_JavaLangRuntimeException_initWithNSString_(@"Duplicate Branch ID");
    }
    else {
      [val$branchIds_ addWithId:bid];
    }
  }
}

- (void)dealloc {
  RELEASE_(val$branchIds_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilHashSet:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$branchIds_", "LJavaUtilHashSet;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipUtils;", "mainWithNSStringArray:" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipUtils_1 = { "", "android.gov.nist.javax.sip", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_AndroidGovNistJavaxSipUtils_1;
}

@end

void AndroidGovNistJavaxSipUtils_1_initWithJavaUtilHashSet_(AndroidGovNistJavaxSipUtils_1 *self, JavaUtilHashSet *capture$0) {
  JreStrongAssign(&self->val$branchIds_, capture$0);
  NSObject_init(self);
}

AndroidGovNistJavaxSipUtils_1 *new_AndroidGovNistJavaxSipUtils_1_initWithJavaUtilHashSet_(JavaUtilHashSet *capture$0) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipUtils_1, initWithJavaUtilHashSet_, capture$0)
}

AndroidGovNistJavaxSipUtils_1 *create_AndroidGovNistJavaxSipUtils_1_initWithJavaUtilHashSet_(JavaUtilHashSet *capture$0) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipUtils_1, initWithJavaUtilHashSet_, capture$0)
}
