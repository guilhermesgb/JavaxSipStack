//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sip/ListeningPointImpl.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/Host.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "android/gov/nist/javax/sip/ListeningPointImpl.h"
#include "android/gov/nist/javax/sip/SipProviderImpl.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/address/AddressImpl.h"
#include "android/gov/nist/javax/sip/address/SipUri.h"
#include "android/gov/nist/javax/sip/header/Contact.h"
#include "android/gov/nist/javax/sip/header/Via.h"
#include "android/gov/nist/javax/sip/message/SIPRequest.h"
#include "android/gov/nist/javax/sip/stack/ConnectionOrientedMessageChannel.h"
#include "android/gov/nist/javax/sip/stack/MessageChannel.h"
#include "android/gov/nist/javax/sip/stack/MessageProcessor.h"
#include "android/javax/sip/SipStack.h"
#include "android/javax/sip/address/SipURI.h"
#include "android/javax/sip/header/ContactHeader.h"
#include "android/javax/sip/header/ViaHeader.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/net/InetAddress.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

#pragma clang diagnostic ignored "-Wprotocol"

inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipListeningPointImpl_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistJavaxSipListeningPointImpl_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistJavaxSipListeningPointImpl_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistJavaxSipListeningPointImpl, logger, id<OrgSlf4jLogger>)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistJavaxSipListeningPointImpl)

@implementation AndroidGovNistJavaxSipListeningPointImpl

+ (NSString *)makeKeyWithNSString:(NSString *)host
                          withInt:(jint)port
                     withNSString:(NSString *)transport {
  return AndroidGovNistJavaxSipListeningPointImpl_makeKeyWithNSString_withInt_withNSString_(host, port, transport);
}

- (NSString *)getKey {
  return AndroidGovNistJavaxSipListeningPointImpl_makeKeyWithNSString_withInt_withNSString_([self getIPAddress], port_, transport_);
}

- (void)setSipProviderWithAndroidGovNistJavaxSipSipProviderImpl:(AndroidGovNistJavaxSipSipProviderImpl *)sipProviderImpl {
  JreStrongAssign(&self->sipProvider_, sipProviderImpl);
}

- (void)removeSipProvider {
  JreStrongAssign(&self->sipProvider_, nil);
}

- (instancetype)initWithAndroidJavaxSipSipStack:(id<AndroidJavaxSipSipStack>)sipStack
                                        withInt:(jint)port
                                   withNSString:(NSString *)transport {
  AndroidGovNistJavaxSipListeningPointImpl_initWithAndroidJavaxSipSipStack_withInt_withNSString_(self, sipStack, port, transport);
  return self;
}

- (id)java_clone {
  AndroidGovNistJavaxSipListeningPointImpl *lip = create_AndroidGovNistJavaxSipListeningPointImpl_initWithAndroidJavaxSipSipStack_withInt_withNSString_(self->sipStack_, self->port_, nil);
  JreStrongAssign(&lip->sipStack_, self->sipStack_);
  return lip;
}

- (jint)getPort {
  return [((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(messageProcessor_)) getPort];
}

- (NSString *)getTransport {
  return [((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(messageProcessor_)) getTransport];
}

- (AndroidGovNistJavaxSipSipProviderImpl *)getProvider {
  return self->sipProvider_;
}

- (NSString *)getIPAddress {
  return [((JavaNetInetAddress *) nil_chk([((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(self->messageProcessor_)) getIpAddress])) getHostAddress];
}

- (void)setSentByWithNSString:(NSString *)sentBy {
  [((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(self->messageProcessor_)) setSentByWithNSString:sentBy];
}

- (NSString *)getSentBy {
  return [((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(self->messageProcessor_)) getSentBy];
}

- (jboolean)isSentBySet {
  return [((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(self->messageProcessor_)) isSentBySet];
}

- (AndroidGovNistJavaxSipHeaderVia *)getViaHeader {
  return [((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(self->messageProcessor_)) getViaHeader];
}

- (AndroidGovNistJavaxSipStackMessageProcessor *)getMessageProcessor {
  return self->messageProcessor_;
}

- (id<AndroidJavaxSipHeaderContactHeader>)createContactHeader {
  @try {
    NSString *ipAddress = [self getIPAddress];
    jint port = [self getPort];
    id<AndroidJavaxSipAddressSipURI> sipURI = create_AndroidGovNistJavaxSipAddressSipUri_init();
    [sipURI setHostWithNSString:ipAddress];
    [sipURI setPortWithInt:port];
    [sipURI setTransportParamWithNSString:self->transport_];
    AndroidGovNistJavaxSipHeaderContact *contact = create_AndroidGovNistJavaxSipHeaderContact_init();
    AndroidGovNistJavaxSipAddressAddressImpl *address = create_AndroidGovNistJavaxSipAddressAddressImpl_init();
    [address setURIWithAndroidJavaxSipAddressURI:sipURI];
    [contact setAddressWithAndroidJavaxSipAddressAddress:address];
    return contact;
  }
  @catch (JavaLangException *ex) {
    AndroidGovNistCoreInternalErrorHandler_handleExceptionWithNSString_withOrgSlf4jLogger_(@"Unexpected exception", AndroidGovNistJavaxSipListeningPointImpl_logger);
    return nil;
  }
}

- (void)sendHeartbeatWithNSString:(NSString *)ipAddress
                          withInt:(jint)port {
  if (![((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack_)) isAlive]) return;
  AndroidGovNistCoreHostPort *targetHostPort = create_AndroidGovNistCoreHostPort_init();
  [targetHostPort setHostWithAndroidGovNistCoreHost:create_AndroidGovNistCoreHost_initWithNSString_(ipAddress)];
  [targetHostPort setPortWithInt:port];
  AndroidGovNistJavaxSipStackMessageChannel *messageChannel = [((AndroidGovNistJavaxSipStackMessageProcessor *) nil_chk(self->messageProcessor_)) createMessageChannelWithAndroidGovNistCoreHostPort:targetHostPort];
  AndroidGovNistJavaxSipMessageSIPRequest *siprequest = create_AndroidGovNistJavaxSipMessageSIPRequest_init();
  [siprequest setNullRequest];
  if ([messageChannel isKindOfClass:[AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel class]]) {
    AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *connectionOrientedMessageChannel = (AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *) cast_chk(messageChannel, [AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel class]);
    jlong keepaliveTimeout = [((AndroidGovNistJavaxSipStackConnectionOrientedMessageChannel *) nil_chk(connectionOrientedMessageChannel)) getKeepAliveTimeout];
    if (keepaliveTimeout > 0) {
      [connectionOrientedMessageChannel rescheduleKeepAliveTimeoutWithLong:keepaliveTimeout];
    }
  }
  [((AndroidGovNistJavaxSipStackMessageChannel *) nil_chk(messageChannel)) sendMessageWithAndroidGovNistJavaxSipMessageSIPMessage:siprequest];
}

- (id<AndroidJavaxSipHeaderViaHeader>)createViaHeader {
  return [self getViaHeader];
}

- (void)dealloc {
  RELEASE_(transport_);
  RELEASE_(messageProcessor_);
  RELEASE_(sipProvider_);
  RELEASE_(sipStack_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipSipProviderImpl;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipHeaderVia;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSipStackMessageProcessor;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContactHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 11, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderViaHeader;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(makeKeyWithNSString:withInt:withNSString:);
  methods[1].selector = @selector(getKey);
  methods[2].selector = @selector(setSipProviderWithAndroidGovNistJavaxSipSipProviderImpl:);
  methods[3].selector = @selector(removeSipProvider);
  methods[4].selector = @selector(initWithAndroidJavaxSipSipStack:withInt:withNSString:);
  methods[5].selector = @selector(java_clone);
  methods[6].selector = @selector(getPort);
  methods[7].selector = @selector(getTransport);
  methods[8].selector = @selector(getProvider);
  methods[9].selector = @selector(getIPAddress);
  methods[10].selector = @selector(setSentByWithNSString:);
  methods[11].selector = @selector(getSentBy);
  methods[12].selector = @selector(isSentBySet);
  methods[13].selector = @selector(getViaHeader);
  methods[14].selector = @selector(getMessageProcessor);
  methods[15].selector = @selector(createContactHeader);
  methods[16].selector = @selector(sendHeartbeatWithNSString:withInt:);
  methods[17].selector = @selector(createViaHeader);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 12, -1, -1 },
    { "transport_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "messageProcessor_", "LAndroidGovNistJavaxSipStackMessageProcessor;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sipProvider_", "LAndroidGovNistJavaxSipSipProviderImpl;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sipStack_", "LAndroidGovNistJavaxSipSipStackImpl;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "makeKey", "LNSString;ILNSString;", "setSipProvider", "LAndroidGovNistJavaxSipSipProviderImpl;", "LAndroidJavaxSipSipStack;ILNSString;", "clone", "setSentBy", "LNSString;", "LJavaTextParseException;", "sendHeartbeat", "LNSString;I", "LJavaIoIOException;", &AndroidGovNistJavaxSipListeningPointImpl_logger };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSipListeningPointImpl = { "ListeningPointImpl", "android.gov.nist.javax.sip", ptrTable, methods, fields, 7, 0x1, 18, 6, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSipListeningPointImpl;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

+ (void)initialize {
  if (self == [AndroidGovNistJavaxSipListeningPointImpl class]) {
    JreStrongAssign(&AndroidGovNistJavaxSipListeningPointImpl_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistJavaxSipListeningPointImpl_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistJavaxSipListeningPointImpl)
  }
}

@end

NSString *AndroidGovNistJavaxSipListeningPointImpl_makeKeyWithNSString_withInt_withNSString_(NSString *host, jint port, NSString *transport) {
  AndroidGovNistJavaxSipListeningPointImpl_initialize();
  return [((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_initWithNSString_(host) appendWithNSString:@":"])) appendWithInt:port])) appendWithNSString:@"/"])) appendWithNSString:transport])) description])) lowercaseString];
}

void AndroidGovNistJavaxSipListeningPointImpl_initWithAndroidJavaxSipSipStack_withInt_withNSString_(AndroidGovNistJavaxSipListeningPointImpl *self, id<AndroidJavaxSipSipStack> sipStack, jint port, NSString *transport) {
  NSObject_init(self);
  JreStrongAssign(&self->sipStack_, (AndroidGovNistJavaxSipSipStackImpl *) cast_chk(sipStack, [AndroidGovNistJavaxSipSipStackImpl class]));
  self->port_ = port;
  JreStrongAssign(&self->transport_, transport);
}

AndroidGovNistJavaxSipListeningPointImpl *new_AndroidGovNistJavaxSipListeningPointImpl_initWithAndroidJavaxSipSipStack_withInt_withNSString_(id<AndroidJavaxSipSipStack> sipStack, jint port, NSString *transport) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSipListeningPointImpl, initWithAndroidJavaxSipSipStack_withInt_withNSString_, sipStack, port, transport)
}

AndroidGovNistJavaxSipListeningPointImpl *create_AndroidGovNistJavaxSipListeningPointImpl_initWithAndroidJavaxSipSipStack_withInt_withNSString_(id<AndroidJavaxSipSipStack> sipStack, jint port, NSString *transport) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSipListeningPointImpl, initWithAndroidJavaxSipSipStack_withInt_withNSString_, sipStack, port, transport)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSipListeningPointImpl)
