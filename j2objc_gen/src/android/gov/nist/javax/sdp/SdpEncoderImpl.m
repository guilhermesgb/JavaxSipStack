//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sdp/SdpEncoderImpl.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/javax/sdp/SdpEncoderImpl.h"
#include "android/javax/sdp/SessionDescription.h"
#include "java/io/IOException.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/UnsupportedEncodingException.h"

@implementation AndroidGovNistJavaxSdpSdpEncoderImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSdpSdpEncoderImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setEncodingWithNSString:(NSString *)enc {
  @throw create_JavaIoUnsupportedEncodingException_initWithNSString_(@"Method not supported");
}

- (void)setTypedTimeWithBoolean:(jboolean)flag {
}

- (void)setRtpmapAttributeWithBoolean:(jboolean)flag {
}

- (void)outputWithAndroidJavaxSdpSessionDescription:(id<AndroidJavaxSdpSessionDescription>)sd
                             withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if ([outArg isKindOfClass:[JavaIoObjectOutputStream class]]) {
    JavaIoObjectOutputStream *output = (JavaIoObjectOutputStream *) cast_chk(outArg, [JavaIoObjectOutputStream class]);
    if (sd != nil) [((JavaIoObjectOutputStream *) nil_chk(output)) writeObjectWithId:sd];
    else @throw create_JavaIoIOException_initWithNSString_(@"The parameter is null");
  }
  else @throw create_JavaIoIOException_initWithNSString_(@"The output stream has to be an instance of ObjectOutputStream");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setEncodingWithNSString:);
  methods[2].selector = @selector(setTypedTimeWithBoolean:);
  methods[3].selector = @selector(setRtpmapAttributeWithBoolean:);
  methods[4].selector = @selector(outputWithAndroidJavaxSdpSessionDescription:withJavaIoOutputStream:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setEncoding", "LNSString;", "LJavaIoUnsupportedEncodingException;", "setTypedTime", "Z", "setRtpmapAttribute", "output", "LAndroidJavaxSdpSessionDescription;LJavaIoOutputStream;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSdpSdpEncoderImpl = { "SdpEncoderImpl", "android.gov.nist.javax.sdp", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSdpSdpEncoderImpl;
}

@end

void AndroidGovNistJavaxSdpSdpEncoderImpl_init(AndroidGovNistJavaxSdpSdpEncoderImpl *self) {
  NSObject_init(self);
}

AndroidGovNistJavaxSdpSdpEncoderImpl *new_AndroidGovNistJavaxSdpSdpEncoderImpl_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSdpSdpEncoderImpl, init)
}

AndroidGovNistJavaxSdpSdpEncoderImpl *create_AndroidGovNistJavaxSdpSdpEncoderImpl_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSdpSdpEncoderImpl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSdpSdpEncoderImpl)
