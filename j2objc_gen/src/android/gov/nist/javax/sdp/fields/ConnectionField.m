//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sdp/fields/ConnectionField.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/Host.h"
#include "android/gov/nist/core/Separators.h"
#include "android/gov/nist/javax/sdp/fields/ConnectionAddress.h"
#include "android/gov/nist/javax/sdp/fields/ConnectionField.h"
#include "android/gov/nist/javax/sdp/fields/SDPField.h"
#include "android/gov/nist/javax/sdp/fields/SDPFieldNames.h"
#include "android/javax/sdp/SdpException.h"

@implementation AndroidGovNistJavaxSdpFieldsConnectionField

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSdpFieldsConnectionField_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getNettype {
  return nettype_;
}

- (NSString *)getAddrtype {
  return addrtype_;
}

- (AndroidGovNistJavaxSdpFieldsConnectionAddress *)getConnectionAddress {
  return address_;
}

- (void)setNettypeWithNSString:(NSString *)n {
  JreStrongAssign(&nettype_, n);
}

- (void)setAddrTypeWithNSString:(NSString *)a {
  JreStrongAssign(&addrtype_, a);
}

- (void)setAddressWithAndroidGovNistJavaxSdpFieldsConnectionAddress:(AndroidGovNistJavaxSdpFieldsConnectionAddress *)a {
  JreStrongAssign(&address_, a);
}

- (NSString *)encode {
  NSString *encoded_string = AndroidGovNistJavaxSdpFieldsSDPFieldNames_CONNECTION_FIELD;
  if (nettype_ != nil) JreStrAppend(&encoded_string, "$", nettype_);
  if (addrtype_ != nil) JreStrAppend(&encoded_string, "$$", AndroidGovNistCoreSeparators_SP, addrtype_);
  if (address_ != nil) JreStrAppend(&encoded_string, "$$", AndroidGovNistCoreSeparators_SP, [address_ encode]);
  return JreStrAppend(&encoded_string, "$", AndroidGovNistCoreSeparators_NEWLINE);
}

- (NSString *)description {
  return [self encode];
}

- (NSString *)getAddress {
  AndroidGovNistJavaxSdpFieldsConnectionAddress *connectionAddress = [self getConnectionAddress];
  if (connectionAddress == nil) return nil;
  else {
    AndroidGovNistCoreHost *host = [connectionAddress getAddress];
    if (host == nil) return nil;
    else return [host getAddress];
  }
}

- (NSString *)getAddressType {
  return [self getAddrtype];
}

- (NSString *)getNetworkType {
  return [self getNettype];
}

- (void)setAddressWithNSString:(NSString *)addr {
  if (addr == nil) @throw create_AndroidJavaxSdpSdpException_initWithNSString_(@"the addr is null");
  else {
    if (address_ == nil) {
      JreStrongAssignAndConsume(&address_, new_AndroidGovNistJavaxSdpFieldsConnectionAddress_init());
      AndroidGovNistCoreHost *host = create_AndroidGovNistCoreHost_initWithNSString_(addr);
      [((AndroidGovNistJavaxSdpFieldsConnectionAddress *) nil_chk(address_)) setAddressWithAndroidGovNistCoreHost:host];
    }
    else {
      AndroidGovNistCoreHost *host = [address_ getAddress];
      if (host == nil) {
        host = create_AndroidGovNistCoreHost_initWithNSString_(addr);
        [((AndroidGovNistJavaxSdpFieldsConnectionAddress *) nil_chk(address_)) setAddressWithAndroidGovNistCoreHost:host];
      }
      else [host setAddressWithNSString:addr];
    }
    [self setAddressWithAndroidGovNistJavaxSdpFieldsConnectionAddress:address_];
  }
}

- (void)setAddressTypeWithNSString:(NSString *)type {
  if (type == nil) @throw create_AndroidJavaxSdpSdpException_initWithNSString_(@"the type is null");
  JreStrongAssign(&self->addrtype_, type);
}

- (void)setNetworkTypeWithNSString:(NSString *)type {
  if (type == nil) @throw create_AndroidJavaxSdpSdpException_initWithNSString_(@"the type is null");
  else [self setNettypeWithNSString:type];
}

- (id)java_clone {
  AndroidGovNistJavaxSdpFieldsConnectionField *retval = (AndroidGovNistJavaxSdpFieldsConnectionField *) cast_chk([super java_clone], [AndroidGovNistJavaxSdpFieldsConnectionField class]);
  if (self->address_ != nil) JreStrongAssign(&((AndroidGovNistJavaxSdpFieldsConnectionField *) nil_chk(retval))->address_, (AndroidGovNistJavaxSdpFieldsConnectionAddress *) cast_chk([self->address_ java_clone], [AndroidGovNistJavaxSdpFieldsConnectionAddress class]));
  return retval;
}

- (void)dealloc {
  RELEASE_(nettype_);
  RELEASE_(addrtype_);
  RELEASE_(address_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSdpFieldsConnectionAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 1, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 1, 7, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getNettype);
  methods[2].selector = @selector(getAddrtype);
  methods[3].selector = @selector(getConnectionAddress);
  methods[4].selector = @selector(setNettypeWithNSString:);
  methods[5].selector = @selector(setAddrTypeWithNSString:);
  methods[6].selector = @selector(setAddressWithAndroidGovNistJavaxSdpFieldsConnectionAddress:);
  methods[7].selector = @selector(encode);
  methods[8].selector = @selector(description);
  methods[9].selector = @selector(getAddress);
  methods[10].selector = @selector(getAddressType);
  methods[11].selector = @selector(getNetworkType);
  methods[12].selector = @selector(setAddressWithNSString:);
  methods[13].selector = @selector(setAddressTypeWithNSString:);
  methods[14].selector = @selector(setNetworkTypeWithNSString:);
  methods[15].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nettype_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "addrtype_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "address_", "LAndroidGovNistJavaxSdpFieldsConnectionAddress;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setNettype", "LNSString;", "setAddrType", "setAddress", "LAndroidGovNistJavaxSdpFieldsConnectionAddress;", "toString", "LAndroidJavaxSdpSdpParseException;", "LAndroidJavaxSdpSdpException;", "setAddressType", "setNetworkType", "clone" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSdpFieldsConnectionField = { "ConnectionField", "android.gov.nist.javax.sdp.fields", ptrTable, methods, fields, 7, 0x1, 16, 3, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSdpFieldsConnectionField;
}

@end

void AndroidGovNistJavaxSdpFieldsConnectionField_init(AndroidGovNistJavaxSdpFieldsConnectionField *self) {
  AndroidGovNistJavaxSdpFieldsSDPField_initWithNSString_(self, AndroidGovNistJavaxSdpFieldsSDPFieldNames_CONNECTION_FIELD);
}

AndroidGovNistJavaxSdpFieldsConnectionField *new_AndroidGovNistJavaxSdpFieldsConnectionField_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSdpFieldsConnectionField, init)
}

AndroidGovNistJavaxSdpFieldsConnectionField *create_AndroidGovNistJavaxSdpFieldsConnectionField_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSdpFieldsConnectionField, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSdpFieldsConnectionField)
