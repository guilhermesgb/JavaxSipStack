//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sdp/fields/ConnectionAddress.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/Host.h"
#include "android/gov/nist/core/Separators.h"
#include "android/gov/nist/javax/sdp/fields/ConnectionAddress.h"
#include "android/gov/nist/javax/sdp/fields/SDPObject.h"

@implementation AndroidGovNistJavaxSdpFieldsConnectionAddress

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSdpFieldsConnectionAddress_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (AndroidGovNistCoreHost *)getAddress {
  return address_;
}

- (jint)getTtl {
  return ttl_;
}

- (jint)getPort {
  return port_;
}

- (void)setAddressWithAndroidGovNistCoreHost:(AndroidGovNistCoreHost *)a {
  JreStrongAssign(&address_, a);
}

- (void)setTtlWithInt:(jint)ttl {
  self->ttl_ = ttl;
}

- (void)setPortWithInt:(jint)p {
  port_ = p;
}

- (NSString *)encode {
  NSString *encoded_string = @"";
  if (address_ != nil) {
    encoded_string = [address_ encode];
    if (AndroidGovNistCoreHost_isIPv6ReferenceWithNSString_(encoded_string)) {
      encoded_string = [((NSString *) nil_chk(encoded_string)) java_substring:1 endIndex:((jint) [encoded_string length]) - 1];
    }
  }
  if (ttl_ != 0 && port_ != 0) {
    JreStrAppend(&encoded_string, "$I$I", AndroidGovNistCoreSeparators_SLASH, ttl_, AndroidGovNistCoreSeparators_SLASH, port_);
  }
  else if (ttl_ != 0) {
    JreStrAppend(&encoded_string, "$I", AndroidGovNistCoreSeparators_SLASH, ttl_);
  }
  return encoded_string;
}

- (id)java_clone {
  AndroidGovNistJavaxSdpFieldsConnectionAddress *retval = (AndroidGovNistJavaxSdpFieldsConnectionAddress *) cast_chk([super java_clone], [AndroidGovNistJavaxSdpFieldsConnectionAddress class]);
  if (self->address_ != nil) JreStrongAssign(&((AndroidGovNistJavaxSdpFieldsConnectionAddress *) nil_chk(retval))->address_, (AndroidGovNistCoreHost *) cast_chk([self->address_ java_clone], [AndroidGovNistCoreHost class]));
  return retval;
}

- (void)dealloc {
  RELEASE_(address_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreHost;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAddress);
  methods[2].selector = @selector(getTtl);
  methods[3].selector = @selector(getPort);
  methods[4].selector = @selector(setAddressWithAndroidGovNistCoreHost:);
  methods[5].selector = @selector(setTtlWithInt:);
  methods[6].selector = @selector(setPortWithInt:);
  methods[7].selector = @selector(encode);
  methods[8].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "address_", "LAndroidGovNistCoreHost;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ttl_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setAddress", "LAndroidGovNistCoreHost;", "setTtl", "I", "setPort", "clone" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSdpFieldsConnectionAddress = { "ConnectionAddress", "android.gov.nist.javax.sdp.fields", ptrTable, methods, fields, 7, 0x1, 9, 3, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSdpFieldsConnectionAddress;
}

@end

void AndroidGovNistJavaxSdpFieldsConnectionAddress_init(AndroidGovNistJavaxSdpFieldsConnectionAddress *self) {
  AndroidGovNistJavaxSdpFieldsSDPObject_init(self);
}

AndroidGovNistJavaxSdpFieldsConnectionAddress *new_AndroidGovNistJavaxSdpFieldsConnectionAddress_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSdpFieldsConnectionAddress, init)
}

AndroidGovNistJavaxSdpFieldsConnectionAddress *create_AndroidGovNistJavaxSdpFieldsConnectionAddress_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSdpFieldsConnectionAddress, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSdpFieldsConnectionAddress)
