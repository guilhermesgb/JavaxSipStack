//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sdp/fields/OriginField.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/Host.h"
#include "android/gov/nist/core/Separators.h"
#include "android/gov/nist/javax/sdp/fields/OriginField.h"
#include "android/gov/nist/javax/sdp/fields/SDPField.h"
#include "android/gov/nist/javax/sdp/fields/SDPFieldNames.h"
#include "android/javax/sdp/SdpException.h"
#include "java/lang/Long.h"

@interface AndroidGovNistJavaxSdpFieldsOriginField () {
 @public
  NSString *sessIdString_;
  NSString *sessVersionString_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSdpFieldsOriginField, sessIdString_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistJavaxSdpFieldsOriginField, sessVersionString_, NSString *)

@implementation AndroidGovNistJavaxSdpFieldsOriginField

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistJavaxSdpFieldsOriginField_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getUsername {
  return username_;
}

- (jlong)getSessId {
  return [((JavaLangLong *) nil_chk(JavaLangLong_valueOfWithNSString_(self->sessIdString_))) longLongValue];
}

- (NSString *)getSessIdAsString {
  return self->sessIdString_;
}

- (jlong)getSessVersion {
  return [((JavaLangLong *) nil_chk(JavaLangLong_valueOfWithNSString_(sessVersionString_))) longLongValue];
}

- (NSString *)getSessVersionAsString {
  return self->sessVersionString_;
}

- (NSString *)getNettype {
  return nettype_;
}

- (NSString *)getAddrtype {
  return addrtype_;
}

- (AndroidGovNistCoreHost *)getHost {
  return address_;
}

- (void)setSessIdWithLong:(jlong)s {
  JreStrongAssign(&self->sessIdString_, JavaLangLong_toStringWithLong_(s));
}

- (void)setSessionIdWithNSString:(NSString *)sessId {
  JreStrongAssign(&self->sessIdString_, sessId);
}

- (void)setSessVersionWithLong:(jlong)s {
  JreStrongAssign(&sessVersionString_, JavaLangLong_toStringWithLong_(s));
}

- (void)setSessVersionWithNSString:(NSString *)s {
  JreStrongAssign(&self->sessVersionString_, s);
}

- (void)setNettypeWithNSString:(NSString *)n {
  JreStrongAssign(&nettype_, n);
}

- (void)setAddrtypeWithNSString:(NSString *)a {
  JreStrongAssign(&addrtype_, a);
}

- (void)setAddressWithAndroidGovNistCoreHost:(AndroidGovNistCoreHost *)a {
  JreStrongAssign(&address_, a);
}

- (void)setUsernameWithNSString:(NSString *)user {
  if (user == nil) @throw create_AndroidJavaxSdpSdpException_initWithNSString_(@"The user parameter is null");
  else {
    JreStrongAssign(&self->username_, user);
  }
}

- (jlong)getSessionId {
  return [self getSessId];
}

- (void)setSessionIdWithLong:(jlong)id_ {
  if (id_ < 0) @throw create_AndroidJavaxSdpSdpException_initWithNSString_(@"The is parameter is <0");
  else [self setSessIdWithLong:id_];
}

- (jlong)getSessionVersion {
  return [self getSessVersion];
}

- (void)setSessionVersionWithLong:(jlong)version_ {
  if (version_ < 0) @throw create_AndroidJavaxSdpSdpException_initWithNSString_(@"The version parameter is <0");
  else [self setSessVersionWithLong:version_];
}

- (NSString *)getAddress {
  AndroidGovNistCoreHost *addr = [self getHost];
  if (addr == nil) return nil;
  else return [addr getAddress];
}

- (NSString *)getAddressType {
  return [self getAddrtype];
}

- (NSString *)getNetworkType {
  return [self getNettype];
}

- (void)setAddressWithNSString:(NSString *)addr {
  if (addr == nil) @throw create_AndroidJavaxSdpSdpException_initWithNSString_(@"The addr parameter is null");
  else {
    AndroidGovNistCoreHost *host = [self getHost];
    if (host == nil) host = create_AndroidGovNistCoreHost_init();
    [host setAddressWithNSString:addr];
    [self setAddressWithAndroidGovNistCoreHost:host];
  }
}

- (void)setAddressTypeWithNSString:(NSString *)type {
  if (type == nil) @throw create_AndroidJavaxSdpSdpException_initWithNSString_(@"The type parameter is <0");
  else [self setAddrtypeWithNSString:type];
}

- (void)setNetworkTypeWithNSString:(NSString *)type {
  if (type == nil) @throw create_AndroidJavaxSdpSdpException_initWithNSString_(@"The type parameter is <0");
  else [self setNettypeWithNSString:type];
}

- (NSString *)encode {
  NSString *addressStr = nil;
  if (address_ != nil) {
    addressStr = [address_ encode];
    if (AndroidGovNistCoreHost_isIPv6ReferenceWithNSString_(addressStr)) {
      addressStr = [((NSString *) nil_chk(addressStr)) java_substring:1 endIndex:((jint) [addressStr length]) - 1];
    }
  }
  return JreStrcat("$$$$$$$$$$$$$", AndroidGovNistJavaxSdpFieldsSDPFieldNames_ORIGIN_FIELD, username_, AndroidGovNistCoreSeparators_SP, sessIdString_, AndroidGovNistCoreSeparators_SP, sessVersionString_, AndroidGovNistCoreSeparators_SP, nettype_, AndroidGovNistCoreSeparators_SP, addrtype_, AndroidGovNistCoreSeparators_SP, addressStr, AndroidGovNistCoreSeparators_NEWLINE);
}

- (id)java_clone {
  AndroidGovNistJavaxSdpFieldsOriginField *retval = (AndroidGovNistJavaxSdpFieldsOriginField *) cast_chk([super java_clone], [AndroidGovNistJavaxSdpFieldsOriginField class]);
  if (self->address_ != nil) JreStrongAssign(&((AndroidGovNistJavaxSdpFieldsOriginField *) nil_chk(retval))->address_, (AndroidGovNistCoreHost *) cast_chk([self->address_ java_clone], [AndroidGovNistCoreHost class]));
  return retval;
}

- (void)dealloc {
  RELEASE_(username_);
  RELEASE_(nettype_);
  RELEASE_(addrtype_);
  RELEASE_(address_);
  RELEASE_(sessIdString_);
  RELEASE_(sessVersionString_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreHost;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 4, 11, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, 11, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, 11, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 4, 11, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 4, 11, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 4, 11, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getUsername);
  methods[2].selector = @selector(getSessId);
  methods[3].selector = @selector(getSessIdAsString);
  methods[4].selector = @selector(getSessVersion);
  methods[5].selector = @selector(getSessVersionAsString);
  methods[6].selector = @selector(getNettype);
  methods[7].selector = @selector(getAddrtype);
  methods[8].selector = @selector(getHost);
  methods[9].selector = @selector(setSessIdWithLong:);
  methods[10].selector = @selector(setSessionIdWithNSString:);
  methods[11].selector = @selector(setSessVersionWithLong:);
  methods[12].selector = @selector(setSessVersionWithNSString:);
  methods[13].selector = @selector(setNettypeWithNSString:);
  methods[14].selector = @selector(setAddrtypeWithNSString:);
  methods[15].selector = @selector(setAddressWithAndroidGovNistCoreHost:);
  methods[16].selector = @selector(setUsernameWithNSString:);
  methods[17].selector = @selector(getSessionId);
  methods[18].selector = @selector(setSessionIdWithLong:);
  methods[19].selector = @selector(getSessionVersion);
  methods[20].selector = @selector(setSessionVersionWithLong:);
  methods[21].selector = @selector(getAddress);
  methods[22].selector = @selector(getAddressType);
  methods[23].selector = @selector(getNetworkType);
  methods[24].selector = @selector(setAddressWithNSString:);
  methods[25].selector = @selector(setAddressTypeWithNSString:);
  methods[26].selector = @selector(setNetworkTypeWithNSString:);
  methods[27].selector = @selector(encode);
  methods[28].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "username_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "nettype_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "addrtype_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "address_", "LAndroidGovNistCoreHost;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sessIdString_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sessVersionString_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidJavaxSdpSdpParseException;", "setSessId", "J", "setSessionId", "LNSString;", "setSessVersion", "setNettype", "setAddrtype", "setAddress", "LAndroidGovNistCoreHost;", "setUsername", "LAndroidJavaxSdpSdpException;", "setSessionVersion", "setAddressType", "setNetworkType", "clone" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSdpFieldsOriginField = { "OriginField", "android.gov.nist.javax.sdp.fields", ptrTable, methods, fields, 7, 0x1, 29, 6, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSdpFieldsOriginField;
}

@end

void AndroidGovNistJavaxSdpFieldsOriginField_init(AndroidGovNistJavaxSdpFieldsOriginField *self) {
  AndroidGovNistJavaxSdpFieldsSDPField_initWithNSString_(self, AndroidGovNistJavaxSdpFieldsSDPFieldNames_ORIGIN_FIELD);
}

AndroidGovNistJavaxSdpFieldsOriginField *new_AndroidGovNistJavaxSdpFieldsOriginField_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSdpFieldsOriginField, init)
}

AndroidGovNistJavaxSdpFieldsOriginField *create_AndroidGovNistJavaxSdpFieldsOriginField_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSdpFieldsOriginField, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSdpFieldsOriginField)
