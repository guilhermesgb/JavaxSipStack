//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/javax/sdp/parser/SDPAnnounceParser.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/javax/sdp/SessionDescriptionImpl.h"
#include "android/gov/nist/javax/sdp/fields/SDPField.h"
#include "android/gov/nist/javax/sdp/parser/Lexer.h"
#include "android/gov/nist/javax/sdp/parser/ParserFactory.h"
#include "android/gov/nist/javax/sdp/parser/SDPAnnounceParser.h"
#include "android/gov/nist/javax/sdp/parser/SDPParser.h"
#include "java/util/Vector.h"

@implementation AndroidGovNistJavaxSdpParserSDPAnnounceParser

- (instancetype)initWithJavaUtilVector:(JavaUtilVector *)sdpMessage {
  AndroidGovNistJavaxSdpParserSDPAnnounceParser_initWithJavaUtilVector_(self, sdpMessage);
  return self;
}

- (instancetype)initWithNSString:(NSString *)message {
  AndroidGovNistJavaxSdpParserSDPAnnounceParser_initWithNSString_(self, message);
  return self;
}

- (AndroidGovNistJavaxSdpSessionDescriptionImpl *)parse {
  AndroidGovNistJavaxSdpSessionDescriptionImpl *retval = create_AndroidGovNistJavaxSdpSessionDescriptionImpl_init();
  for (jint i = 0; i < [((JavaUtilVector *) nil_chk(sdpMessage_)) size]; i++) {
    NSString *field = (NSString *) cast_chk([((JavaUtilVector *) nil_chk(sdpMessage_)) elementAtWithInt:i], [NSString class]);
    AndroidGovNistJavaxSdpParserSDPParser *sdpParser = AndroidGovNistJavaxSdpParserParserFactory_createParserWithNSString_(field);
    AndroidGovNistJavaxSdpFieldsSDPField *sdpField = nil;
    if (sdpParser != nil) {
      sdpField = [sdpParser parse];
    }
    [retval addFieldWithAndroidGovNistJavaxSdpFieldsSDPField:sdpField];
  }
  return retval;
}

- (void)dealloc {
  RELEASE_(lexer_SDPAnnounceParser_);
  RELEASE_(sdpMessage_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistJavaxSdpSessionDescriptionImpl;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilVector:);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lexer_SDPAnnounceParser_", "LAndroidGovNistJavaxSdpParserLexer;", .constantValue.asLong = 0, 0x4, 3, -1, -1, -1 },
    { "sdpMessage_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilVector;", "LNSString;", "LJavaTextParseException;", "lexer" };
  static const J2ObjcClassInfo _AndroidGovNistJavaxSdpParserSDPAnnounceParser = { "SDPAnnounceParser", "android.gov.nist.javax.sdp.parser", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistJavaxSdpParserSDPAnnounceParser;
}

@end

void AndroidGovNistJavaxSdpParserSDPAnnounceParser_initWithJavaUtilVector_(AndroidGovNistJavaxSdpParserSDPAnnounceParser *self, JavaUtilVector *sdpMessage) {
  AndroidGovNistCoreParserCore_init(self);
  JreStrongAssign(&self->sdpMessage_, sdpMessage);
}

AndroidGovNistJavaxSdpParserSDPAnnounceParser *new_AndroidGovNistJavaxSdpParserSDPAnnounceParser_initWithJavaUtilVector_(JavaUtilVector *sdpMessage) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSdpParserSDPAnnounceParser, initWithJavaUtilVector_, sdpMessage)
}

AndroidGovNistJavaxSdpParserSDPAnnounceParser *create_AndroidGovNistJavaxSdpParserSDPAnnounceParser_initWithJavaUtilVector_(JavaUtilVector *sdpMessage) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSdpParserSDPAnnounceParser, initWithJavaUtilVector_, sdpMessage)
}

void AndroidGovNistJavaxSdpParserSDPAnnounceParser_initWithNSString_(AndroidGovNistJavaxSdpParserSDPAnnounceParser *self, NSString *message) {
  AndroidGovNistCoreParserCore_init(self);
  jint start = 0;
  NSString *line = nil;
  if (message == nil) return;
  JreStrongAssignAndConsume(&self->sdpMessage_, new_JavaUtilVector_init());
  NSString *sdpAnnounce = JreStrcat("$$", [message java_trim], @"\x0d\n");
  while (start < ((jint) [sdpAnnounce length])) {
    jint lfPos = [sdpAnnounce java_indexOfString:@"\n" fromIndex:start];
    jint crPos = [sdpAnnounce java_indexOfString:@"\x0d" fromIndex:start];
    if (lfPos >= 0 && crPos < 0) {
      line = [sdpAnnounce java_substring:start endIndex:lfPos];
      start = lfPos + 1;
    }
    else if (lfPos < 0 && crPos >= 0) {
      line = [sdpAnnounce java_substring:start endIndex:crPos];
      start = crPos + 1;
    }
    else if (lfPos >= 0 && crPos >= 0) {
      if (lfPos > crPos) {
        line = [sdpAnnounce java_substring:start endIndex:crPos];
        if (lfPos == crPos + 1) {
          start = lfPos + 1;
        }
        else {
          start = crPos + 1;
        }
      }
      else {
        line = [sdpAnnounce java_substring:start endIndex:lfPos];
        if (crPos == lfPos + 1) {
          start = crPos + 1;
        }
        else {
          start = lfPos + 1;
        }
      }
    }
    else if (lfPos < 0 && crPos < 0) {
      break;
    }
    [((JavaUtilVector *) nil_chk(self->sdpMessage_)) addElementWithId:line];
  }
}

AndroidGovNistJavaxSdpParserSDPAnnounceParser *new_AndroidGovNistJavaxSdpParserSDPAnnounceParser_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(AndroidGovNistJavaxSdpParserSDPAnnounceParser, initWithNSString_, message)
}

AndroidGovNistJavaxSdpParserSDPAnnounceParser *create_AndroidGovNistJavaxSdpParserSDPAnnounceParser_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(AndroidGovNistJavaxSdpParserSDPAnnounceParser, initWithNSString_, message)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistJavaxSdpParserSDPAnnounceParser)
