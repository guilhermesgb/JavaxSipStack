//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/core/NameValueList.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/core/NameValue.h"
#include "android/gov/nist/core/NameValueList.h"
#include "android/gov/nist/core/Separators.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/function/BiConsumer.h"
#include "java/util/function/BiFunction.h"
#include "java/util/function/Function.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface AndroidGovNistCoreNameValueList () {
 @public
  id<JavaUtilMap> hmap_;
  NSString *separator_;
  jboolean sync_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistCoreNameValueList, hmap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(AndroidGovNistCoreNameValueList, separator_, NSString *)

inline jlong AndroidGovNistCoreNameValueList_get_serialVersionUID();
#define AndroidGovNistCoreNameValueList_serialVersionUID -6998271876574260243LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistCoreNameValueList, serialVersionUID, jlong)

@implementation AndroidGovNistCoreNameValueList

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistCoreNameValueList_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBoolean:(jboolean)sync {
  AndroidGovNistCoreNameValueList_initWithBoolean_(self, sync);
  return self;
}

- (void)setSeparatorWithNSString:(NSString *)separator {
  JreStrongAssign(&self->separator_, separator);
}

- (NSString *)encode {
  return [((JavaLangStringBuilder *) nil_chk([self encodeWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])) description];
}

- (JavaLangStringBuilder *)encodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  if (![self isEmpty]) {
    id<JavaUtilIterator> iterator = [self iterator];
    if ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      while (true) {
        id obj = [iterator next];
        if ([obj isKindOfClass:[AndroidGovNistCoreGenericObject class]]) {
          AndroidGovNistCoreGenericObject *gobj = (AndroidGovNistCoreGenericObject *) cast_chk(obj, [AndroidGovNistCoreGenericObject class]);
          [((AndroidGovNistCoreGenericObject *) nil_chk(gobj)) encodeWithJavaLangStringBuilder:buffer];
        }
        else {
          [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:[nil_chk(obj) description]];
        }
        if ([iterator hasNext]) [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:separator_];
        else break;
      }
    }
  }
  return buffer;
}

- (NSString *)description {
  return [self encode];
}

- (void)setWithAndroidGovNistCoreNameValue:(AndroidGovNistCoreNameValue *)nv {
  [self putWithId:[((NSString *) nil_chk([((AndroidGovNistCoreNameValue *) nil_chk(nv)) getName])) lowercaseString] withId:nv];
}

- (void)setWithNSString:(NSString *)name
                 withId:(id)value {
  AndroidGovNistCoreNameValue *nameValue = create_AndroidGovNistCoreNameValue_initWithNSString_withId_(name, value);
  [self putWithId:[((NSString *) nil_chk(name)) lowercaseString] withId:nameValue];
}

- (jboolean)isEqual:(id)otherObject {
  if (otherObject == nil) {
    return false;
  }
  if (![[otherObject java_getClass] isEqual:[self java_getClass]]) {
    return false;
  }
  AndroidGovNistCoreNameValueList *other = (AndroidGovNistCoreNameValueList *) cast_chk(otherObject, [AndroidGovNistCoreNameValueList class]);
  if ([self size] != [self size]) {
    return false;
  }
  id<JavaUtilIterator> li = [self getNames];
  while ([((id<JavaUtilIterator>) nil_chk(li)) hasNext]) {
    NSString *key = [li next];
    AndroidGovNistCoreNameValue *nv1 = [self getNameValueWithNSString:key];
    AndroidGovNistCoreNameValue *nv2 = [other getWithId:key];
    if (nv2 == nil) return false;
    else if (![nv2 isEqual:nv1]) return false;
  }
  return true;
}

- (id)getValueWithNSString:(NSString *)name {
  return [self getValueWithNSString:name withBoolean:true];
}

- (id)getValueWithNSString:(NSString *)name
               withBoolean:(jboolean)stripQuotes {
  AndroidGovNistCoreNameValue *nv = [self getNameValueWithNSString:[((NSString *) nil_chk(name)) lowercaseString]];
  if (nv != nil) return [nv getValueAsObjectWithBoolean:stripQuotes];
  else return nil;
}

- (AndroidGovNistCoreNameValue *)getNameValueWithNSString:(NSString *)name {
  if (hmap_ == nil) {
    return nil;
  }
  return [hmap_ getWithId:[((NSString *) nil_chk(name)) lowercaseString]];
}

- (jboolean)hasNameValueWithNSString:(NSString *)name {
  return [self containsKeyWithId:[((NSString *) nil_chk(name)) lowercaseString]];
}

- (jboolean)delete__WithNSString:(NSString *)name {
  NSString *lcName = [((NSString *) nil_chk(name)) lowercaseString];
  if ([self containsKeyWithId:lcName]) {
    [self removeWithId:lcName];
    return true;
  }
  else {
    return false;
  }
}

- (id)java_clone {
  AndroidGovNistCoreNameValueList *retval = create_AndroidGovNistCoreNameValueList_init();
  [retval setSeparatorWithNSString:self->separator_];
  if (hmap_ != nil) {
    id<JavaUtilIterator> it = [self iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      [retval setWithAndroidGovNistCoreNameValue:(AndroidGovNistCoreNameValue *) cast_chk([((AndroidGovNistCoreNameValue *) nil_chk(([it next]))) java_clone], [AndroidGovNistCoreNameValue class])];
    }
  }
  return retval;
}

- (jint)size {
  if (hmap_ == nil) {
    return 0;
  }
  return [hmap_ size];
}

- (jboolean)isEmpty {
  if (hmap_ == nil) {
    return true;
  }
  return [hmap_ isEmpty];
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk([self getMap])) values])) iterator];
}

- (id<JavaUtilIterator>)getNames {
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk([self getMap])) keySet])) iterator];
}

- (NSString *)getParameterWithNSString:(NSString *)name {
  return [self getParameterWithNSString:name withBoolean:true];
}

- (NSString *)getParameterWithNSString:(NSString *)name
                           withBoolean:(jboolean)stripQuotes {
  id val = [self getValueWithNSString:name withBoolean:stripQuotes];
  if (val == nil) return nil;
  if ([val isKindOfClass:[AndroidGovNistCoreGenericObject class]]) return [((AndroidGovNistCoreGenericObject *) cast_chk(val, [AndroidGovNistCoreGenericObject class])) encode];
  else return [val description];
}

- (void)clear {
  if (hmap_ != nil) {
    [hmap_ clear];
  }
}

- (jboolean)containsKeyWithId:(id)key {
  if (hmap_ == nil) {
    return false;
  }
  return [hmap_ containsKeyWithId:[((NSString *) nil_chk([nil_chk(key) description])) lowercaseString]];
}

- (jboolean)containsValueWithId:(id)value {
  if (hmap_ == nil) {
    return false;
  }
  return [hmap_ containsValueWithId:value];
}

- (id<JavaUtilSet>)entrySet {
  if (hmap_ == nil) {
    return create_JavaUtilHashSet_init();
  }
  return [hmap_ entrySet];
}

- (AndroidGovNistCoreNameValue *)getWithId:(id)key {
  if (hmap_ == nil) {
    return nil;
  }
  return [hmap_ getWithId:[((NSString *) nil_chk([nil_chk(key) description])) lowercaseString]];
}

- (id<JavaUtilSet>)keySet {
  if (hmap_ == nil) {
    return create_JavaUtilHashSet_init();
  }
  return [hmap_ keySet];
}

- (AndroidGovNistCoreNameValue *)putWithId:(NSString *)name
                                    withId:(AndroidGovNistCoreNameValue *)nameValue {
  return [((id<JavaUtilMap>) nil_chk([self getMap])) putWithId:name withId:nameValue];
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map {
  [((id<JavaUtilMap>) nil_chk([self getMap])) putAllWithJavaUtilMap:map];
}

- (AndroidGovNistCoreNameValue *)removeWithId:(id)key {
  if (hmap_ == nil) {
    return nil;
  }
  return [((id<JavaUtilMap>) nil_chk([self getMap])) removeWithId:[((NSString *) nil_chk([nil_chk(key) description])) lowercaseString]];
}

- (id<JavaUtilCollection>)values {
  return [((id<JavaUtilMap>) nil_chk([self getMap])) values];
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk([self getMap])) keySet])) hash]);
}

- (id<JavaUtilMap>)getMap {
  if (self->hmap_ == nil) {
    if (sync_) {
      JreStrongAssignAndConsume(&self->hmap_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(0));
    }
    else {
      JreStrongAssignAndConsume(&self->hmap_, new_JavaUtilLinkedHashMap_initWithInt_(0));
    }
  }
  return hmap_;
}

- (AndroidGovNistCoreNameValue *)computeWithId:(NSString *)arg0
                withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1 {
  return JavaUtilMap_computeWithId_withJavaUtilFunctionBiFunction_(self, arg0, arg1);
}

- (AndroidGovNistCoreNameValue *)computeIfAbsentWithId:(NSString *)arg0
                          withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg1 {
  return JavaUtilMap_computeIfAbsentWithId_withJavaUtilFunctionFunction_(self, arg0, arg1);
}

- (AndroidGovNistCoreNameValue *)computeIfPresentWithId:(NSString *)arg0
                         withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1 {
  return JavaUtilMap_computeIfPresentWithId_withJavaUtilFunctionBiFunction_(self, arg0, arg1);
}

- (void)forEachWithJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)arg0 {
  JavaUtilMap_forEachWithJavaUtilFunctionBiConsumer_(self, arg0);
}

- (AndroidGovNistCoreNameValue *)getOrDefaultWithId:(id)arg0
                                             withId:(AndroidGovNistCoreNameValue *)arg1 {
  return JavaUtilMap_getOrDefaultWithId_withId_(self, arg0, arg1);
}

- (AndroidGovNistCoreNameValue *)mergeWithId:(NSString *)arg0
                                      withId:(AndroidGovNistCoreNameValue *)arg1
              withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg2 {
  return JavaUtilMap_mergeWithId_withId_withJavaUtilFunctionBiFunction_(self, arg0, arg1, arg2);
}

- (AndroidGovNistCoreNameValue *)putIfAbsentWithId:(NSString *)arg0
                                            withId:(AndroidGovNistCoreNameValue *)arg1 {
  return JavaUtilMap_putIfAbsentWithId_withId_(self, arg0, arg1);
}

- (jboolean)removeWithId:(id)arg0
                  withId:(id)arg1 {
  return JavaUtilMap_removeWithId_withId_(self, arg0, arg1);
}

- (AndroidGovNistCoreNameValue *)replaceWithId:(NSString *)arg0
                                        withId:(AndroidGovNistCoreNameValue *)arg1 {
  return JavaUtilMap_replaceWithId_withId_(self, arg0, arg1);
}

- (jboolean)replaceWithId:(NSString *)arg0
                   withId:(AndroidGovNistCoreNameValue *)arg1
                   withId:(AndroidGovNistCoreNameValue *)arg2 {
  return JavaUtilMap_replaceWithId_withId_withId_(self, arg0, arg1, arg2);
}

- (void)replaceAllWithJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg0 {
  JavaUtilMap_replaceAllWithJavaUtilFunctionBiFunction_(self, arg0);
}

- (void)dealloc {
  RELEASE_(hmap_);
  RELEASE_(separator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValue;", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 17, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 18, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 22, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValue;", 0x1, 23, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 24, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValue;", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, 29, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValue;", 0x1, 30, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 31, -1, -1 },
    { NULL, "I", 0x1, 32, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x4, -1, -1, -1, 33, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithBoolean:);
  methods[2].selector = @selector(setSeparatorWithNSString:);
  methods[3].selector = @selector(encode);
  methods[4].selector = @selector(encodeWithJavaLangStringBuilder:);
  methods[5].selector = @selector(description);
  methods[6].selector = @selector(setWithAndroidGovNistCoreNameValue:);
  methods[7].selector = @selector(setWithNSString:withId:);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(getValueWithNSString:);
  methods[10].selector = @selector(getValueWithNSString:withBoolean:);
  methods[11].selector = @selector(getNameValueWithNSString:);
  methods[12].selector = @selector(hasNameValueWithNSString:);
  methods[13].selector = @selector(delete__WithNSString:);
  methods[14].selector = @selector(java_clone);
  methods[15].selector = @selector(size);
  methods[16].selector = @selector(isEmpty);
  methods[17].selector = @selector(iterator);
  methods[18].selector = @selector(getNames);
  methods[19].selector = @selector(getParameterWithNSString:);
  methods[20].selector = @selector(getParameterWithNSString:withBoolean:);
  methods[21].selector = @selector(clear);
  methods[22].selector = @selector(containsKeyWithId:);
  methods[23].selector = @selector(containsValueWithId:);
  methods[24].selector = @selector(entrySet);
  methods[25].selector = @selector(getWithId:);
  methods[26].selector = @selector(keySet);
  methods[27].selector = @selector(putWithId:withId:);
  methods[28].selector = @selector(putAllWithJavaUtilMap:);
  methods[29].selector = @selector(removeWithId:);
  methods[30].selector = @selector(values);
  methods[31].selector = @selector(hash);
  methods[32].selector = @selector(getMap);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistCoreNameValueList_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "hmap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 34, -1 },
    { "separator_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sync_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "setSeparator", "LNSString;", "encode", "LJavaLangStringBuilder;", "toString", "set", "LAndroidGovNistCoreNameValue;", "LNSString;LNSObject;", "equals", "LNSObject;", "getValue", "LNSString;Z", "getNameValue", "hasNameValue", "delete", "clone", "()Ljava/util/Iterator<Landroid/gov/nist/core/NameValue;>;", "()Ljava/util/Iterator<Ljava/lang/String;>;", "getParameter", "containsKey", "containsValue", "()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Landroid/gov/nist/core/NameValue;>;>;", "get", "()Ljava/util/Set<Ljava/lang/String;>;", "put", "LNSString;LAndroidGovNistCoreNameValue;", "putAll", "LJavaUtilMap;", "(Ljava/util/Map<+Ljava/lang/String;+Landroid/gov/nist/core/NameValue;>;)V", "remove", "()Ljava/util/Collection<Landroid/gov/nist/core/NameValue;>;", "hashCode", "()Ljava/util/Map<Ljava/lang/String;Landroid/gov/nist/core/NameValue;>;", "Ljava/util/Map<Ljava/lang/String;Landroid/gov/nist/core/NameValue;>;", "Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Cloneable;Ljava/util/Map<Ljava/lang/String;Landroid/gov/nist/core/NameValue;>;" };
  static const J2ObjcClassInfo _AndroidGovNistCoreNameValueList = { "NameValueList", "android.gov.nist.core", ptrTable, methods, fields, 7, 0x1, 33, 4, -1, -1, -1, 35, -1 };
  return &_AndroidGovNistCoreNameValueList;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void AndroidGovNistCoreNameValueList_init(AndroidGovNistCoreNameValueList *self) {
  NSObject_init(self);
  self->sync_ = false;
  JreStrongAssign(&self->separator_, AndroidGovNistCoreSeparators_SEMICOLON);
}

AndroidGovNistCoreNameValueList *new_AndroidGovNistCoreNameValueList_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreNameValueList, init)
}

AndroidGovNistCoreNameValueList *create_AndroidGovNistCoreNameValueList_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreNameValueList, init)
}

void AndroidGovNistCoreNameValueList_initWithBoolean_(AndroidGovNistCoreNameValueList *self, jboolean sync) {
  NSObject_init(self);
  self->sync_ = false;
  JreStrongAssign(&self->separator_, AndroidGovNistCoreSeparators_SEMICOLON);
  self->sync_ = sync;
}

AndroidGovNistCoreNameValueList *new_AndroidGovNistCoreNameValueList_initWithBoolean_(jboolean sync) {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreNameValueList, initWithBoolean_, sync)
}

AndroidGovNistCoreNameValueList *create_AndroidGovNistCoreNameValueList_initWithBoolean_(jboolean sync) {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreNameValueList, initWithBoolean_, sync)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistCoreNameValueList)
