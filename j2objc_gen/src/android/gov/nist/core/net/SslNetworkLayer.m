//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/core/net/SslNetworkLayer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/net/SslNetworkLayer.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "android/gov/nist/javax/sip/stack/ClientAuthType.h"
#include "java/io/FileInputStream.h"
#include "java/net/ConnectException.h"
#include "java/net/DatagramSocket.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/ServerSocket.h"
#include "java/net/Socket.h"
#include "java/net/SocketTimeoutException.h"
#include "java/security/KeyStore.h"
#include "java/security/SecureRandom.h"
#include "java/security/cert/X509Certificate.h"
#include "javax/net/ssl/KeyManagerFactory.h"
#include "javax/net/ssl/SSLContext.h"
#include "javax/net/ssl/SSLServerSocket.h"
#include "javax/net/ssl/SSLServerSocketFactory.h"
#include "javax/net/ssl/SSLSocket.h"
#include "javax/net/ssl/SSLSocketFactory.h"
#include "javax/net/ssl/TrustManager.h"
#include "javax/net/ssl/TrustManagerFactory.h"
#include "javax/net/ssl/X509TrustManager.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface AndroidGovNistCoreNetSslNetworkLayer () {
 @public
  JavaxNetSslSSLSocketFactory *sslSocketFactory_;
  JavaxNetSslSSLServerSocketFactory *sslServerSocketFactory_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistCoreNetSslNetworkLayer, sslSocketFactory_, JavaxNetSslSSLSocketFactory *)
J2OBJC_FIELD_SETTER(AndroidGovNistCoreNetSslNetworkLayer, sslServerSocketFactory_, JavaxNetSslSSLServerSocketFactory *)

inline id<OrgSlf4jLogger> AndroidGovNistCoreNetSslNetworkLayer_get_logger();
inline id<OrgSlf4jLogger> AndroidGovNistCoreNetSslNetworkLayer_set_logger(id<OrgSlf4jLogger> value);
static id<OrgSlf4jLogger> AndroidGovNistCoreNetSslNetworkLayer_logger;
J2OBJC_STATIC_FIELD_OBJ(AndroidGovNistCoreNetSslNetworkLayer, logger, id<OrgSlf4jLogger>)

@interface AndroidGovNistCoreNetSslNetworkLayer_1 : NSObject < JavaxNetSslX509TrustManager >

- (instancetype)init;

- (IOSObjectArray *)getAcceptedIssuers;

- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certs
                                                      withNSString:(NSString *)authType;

- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certs
                                                      withNSString:(NSString *)authType;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidGovNistCoreNetSslNetworkLayer_1)

__attribute__((unused)) static void AndroidGovNistCoreNetSslNetworkLayer_1_init(AndroidGovNistCoreNetSslNetworkLayer_1 *self);

__attribute__((unused)) static AndroidGovNistCoreNetSslNetworkLayer_1 *new_AndroidGovNistCoreNetSslNetworkLayer_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistCoreNetSslNetworkLayer_1 *create_AndroidGovNistCoreNetSslNetworkLayer_1_init();

J2OBJC_INITIALIZED_DEFN(AndroidGovNistCoreNetSslNetworkLayer)

@implementation AndroidGovNistCoreNetSslNetworkLayer

- (instancetype)initWithAndroidGovNistJavaxSipSipStackImpl:(AndroidGovNistJavaxSipSipStackImpl *)sipStack
                                              withNSString:(NSString *)trustStoreFile
                                              withNSString:(NSString *)keyStoreFile
                                             withCharArray:(IOSCharArray *)keyStorePassword
                                             withCharArray:(IOSCharArray *)trustStorePassword
                                              withNSString:(NSString *)keyStoreType
                                              withNSString:(NSString *)trustStoreType {
  AndroidGovNistCoreNetSslNetworkLayer_initWithAndroidGovNistJavaxSipSipStackImpl_withNSString_withNSString_withCharArray_withCharArray_withNSString_withNSString_(self, sipStack, trustStoreFile, keyStoreFile, keyStorePassword, trustStorePassword, keyStoreType, trustStoreType);
  return self;
}

- (JavaNetServerSocket *)createServerSocketWithInt:(jint)port
                                           withInt:(jint)backlog
                            withJavaNetInetAddress:(JavaNetInetAddress *)bindAddress {
  return create_JavaNetServerSocket_initWithInt_withInt_withJavaNetInetAddress_(port, backlog, bindAddress);
}

- (JavaNetSocket *)createSocketWithJavaNetInetAddress:(JavaNetInetAddress *)address
                                              withInt:(jint)port {
  return create_JavaNetSocket_initWithJavaNetInetAddress_withInt_(address, port);
}

- (JavaNetDatagramSocket *)createDatagramSocket {
  return create_JavaNetDatagramSocket_init();
}

- (JavaNetDatagramSocket *)createDatagramSocketWithInt:(jint)port
                                withJavaNetInetAddress:(JavaNetInetAddress *)laddr {
  return create_JavaNetDatagramSocket_initWithInt_withJavaNetInetAddress_(port, laddr);
}

- (JavaxNetSslSSLServerSocket *)createSSLServerSocketWithInt:(jint)port
                                                     withInt:(jint)backlog
                                      withJavaNetInetAddress:(JavaNetInetAddress *)bindAddress {
  return (JavaxNetSslSSLServerSocket *) cast_chk([((JavaxNetSslSSLServerSocketFactory *) nil_chk(sslServerSocketFactory_)) createServerSocketWithInt:port withInt:backlog withJavaNetInetAddress:bindAddress], [JavaxNetSslSSLServerSocket class]);
}

- (JavaxNetSslSSLSocket *)createSSLSocketWithJavaNetInetAddress:(JavaNetInetAddress *)address
                                                        withInt:(jint)port {
  return [self createSSLSocketWithJavaNetInetAddress:address withInt:port withJavaNetInetAddress:nil];
}

- (JavaxNetSslSSLSocket *)createSSLSocketWithJavaNetInetAddress:(JavaNetInetAddress *)address
                                                        withInt:(jint)port
                                         withJavaNetInetAddress:(JavaNetInetAddress *)myAddress {
  JavaxNetSslSSLSocket *sock = (JavaxNetSslSSLSocket *) cast_chk([((JavaxNetSslSSLSocketFactory *) nil_chk(sslSocketFactory_)) createSocket], [JavaxNetSslSSLSocket class]);
  if (myAddress != nil) {
    [((JavaxNetSslSSLSocket *) nil_chk(sock)) bindWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(myAddress, 0)];
  }
  @try {
    [((JavaxNetSslSSLSocket *) nil_chk(sock)) connectWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(address, port) withInt:8000];
  }
  @catch (JavaNetSocketTimeoutException *e) {
    @throw create_JavaNetConnectException_initWithNSString_(JreStrcat("$@CI", @"Socket timeout error (8sec)", address, ':', port));
  }
  return sock;
}

- (JavaNetSocket *)createSocketWithJavaNetInetAddress:(JavaNetInetAddress *)address
                                              withInt:(jint)port
                               withJavaNetInetAddress:(JavaNetInetAddress *)myAddress {
  if (myAddress != nil) {
    JavaNetSocket *sock = create_JavaNetSocket_init();
    [sock bindWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(myAddress, 0)];
    @try {
      [sock connectWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(address, port) withInt:8000];
    }
    @catch (JavaNetSocketTimeoutException *e) {
      @throw create_JavaNetConnectException_initWithNSString_(JreStrcat("$@CI", @"Socket timeout error (8sec)", address, ':', port));
    }
    return sock;
  }
  else {
    JavaNetSocket *sock = create_JavaNetSocket_init();
    @try {
      [sock connectWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(address, port) withInt:8000];
    }
    @catch (JavaNetSocketTimeoutException *e) {
      @throw create_JavaNetConnectException_initWithNSString_(JreStrcat("$@CI", @"Socket timeout error (8sec)", address, ':', port));
    }
    return sock;
  }
}

- (JavaNetSocket *)createSocketWithJavaNetInetAddress:(JavaNetInetAddress *)address
                                              withInt:(jint)port
                               withJavaNetInetAddress:(JavaNetInetAddress *)myAddress
                                              withInt:(jint)myPort {
  if (myAddress != nil) {
    JavaNetSocket *sock = create_JavaNetSocket_init();
    [sock bindWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(myAddress, 0)];
    @try {
      [sock connectWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(address, port) withInt:8000];
    }
    @catch (JavaNetSocketTimeoutException *e) {
      @throw create_JavaNetConnectException_initWithNSString_(JreStrcat("$@CI", @"Socket timeout error (8sec)", address, ':', port));
    }
    return sock;
  }
  else {
    JavaNetSocket *sock = create_JavaNetSocket_init();
    if (myPort != 0) {
      [sock bindWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithInt_(port)];
    }
    @try {
      [sock connectWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(address, port) withInt:8000];
    }
    @catch (JavaNetSocketTimeoutException *e) {
      @throw create_JavaNetConnectException_initWithNSString_(JreStrcat("$@CI", @"Socket timeout error (8sec)", address, ':', port));
    }
    return sock;
  }
}

- (void)setSipStackWithAndroidGovNistJavaxSipSipStackImpl:(AndroidGovNistJavaxSipSipStackImpl *)sipStackImpl {
}

- (void)dealloc {
  RELEASE_(sslSocketFactory_);
  RELEASE_(sslServerSocketFactory_);
  RELEASE_(trustAllCerts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LJavaNetServerSocket;", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LJavaNetSocket;", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "LJavaNetDatagramSocket;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "LJavaNetDatagramSocket;", 0x1, 8, 9, 7, -1, -1, -1 },
    { NULL, "LJavaxNetSslSSLServerSocket;", 0x1, 10, 3, 4, -1, -1, -1 },
    { NULL, "LJavaxNetSslSSLSocket;", 0x1, 11, 6, 4, -1, -1, -1 },
    { NULL, "LJavaxNetSslSSLSocket;", 0x1, 11, 12, 4, -1, -1, -1 },
    { NULL, "LJavaNetSocket;", 0x1, 5, 12, 4, -1, -1, -1 },
    { NULL, "LJavaNetSocket;", 0x1, 5, 13, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistJavaxSipSipStackImpl:withNSString:withNSString:withCharArray:withCharArray:withNSString:withNSString:);
  methods[1].selector = @selector(createServerSocketWithInt:withInt:withJavaNetInetAddress:);
  methods[2].selector = @selector(createSocketWithJavaNetInetAddress:withInt:);
  methods[3].selector = @selector(createDatagramSocket);
  methods[4].selector = @selector(createDatagramSocketWithInt:withJavaNetInetAddress:);
  methods[5].selector = @selector(createSSLServerSocketWithInt:withInt:withJavaNetInetAddress:);
  methods[6].selector = @selector(createSSLSocketWithJavaNetInetAddress:withInt:);
  methods[7].selector = @selector(createSSLSocketWithJavaNetInetAddress:withInt:withJavaNetInetAddress:);
  methods[8].selector = @selector(createSocketWithJavaNetInetAddress:withInt:withJavaNetInetAddress:);
  methods[9].selector = @selector(createSocketWithJavaNetInetAddress:withInt:withJavaNetInetAddress:withInt:);
  methods[10].selector = @selector(setSipStackWithAndroidGovNistJavaxSipSipStackImpl:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0xa, -1, 16, -1, -1 },
    { "sslSocketFactory_", "LJavaxNetSslSSLSocketFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sslServerSocketFactory_", "LJavaxNetSslSSLServerSocketFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "trustAllCerts_", "[LJavaxNetSslTrustManager;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistJavaxSipSipStackImpl;LNSString;LNSString;[C[CLNSString;LNSString;", "LJavaSecurityGeneralSecurityException;LJavaIoFileNotFoundException;LJavaIoIOException;", "createServerSocket", "IILJavaNetInetAddress;", "LJavaIoIOException;", "createSocket", "LJavaNetInetAddress;I", "LJavaNetSocketException;", "createDatagramSocket", "ILJavaNetInetAddress;", "createSSLServerSocket", "createSSLSocket", "LJavaNetInetAddress;ILJavaNetInetAddress;", "LJavaNetInetAddress;ILJavaNetInetAddress;I", "setSipStack", "LAndroidGovNistJavaxSipSipStackImpl;", &AndroidGovNistCoreNetSslNetworkLayer_logger };
  static const J2ObjcClassInfo _AndroidGovNistCoreNetSslNetworkLayer = { "SslNetworkLayer", "android.gov.nist.core.net", ptrTable, methods, fields, 7, 0x1, 11, 4, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistCoreNetSslNetworkLayer;
}

+ (void)initialize {
  if (self == [AndroidGovNistCoreNetSslNetworkLayer class]) {
    JreStrongAssign(&AndroidGovNistCoreNetSslNetworkLayer_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistCoreNetSslNetworkLayer_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistCoreNetSslNetworkLayer)
  }
}

@end

void AndroidGovNistCoreNetSslNetworkLayer_initWithAndroidGovNistJavaxSipSipStackImpl_withNSString_withNSString_withCharArray_withCharArray_withNSString_withNSString_(AndroidGovNistCoreNetSslNetworkLayer *self, AndroidGovNistJavaxSipSipStackImpl *sipStack, NSString *trustStoreFile, NSString *keyStoreFile, IOSCharArray *keyStorePassword, IOSCharArray *trustStorePassword, NSString *keyStoreType, NSString *trustStoreType) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->trustAllCerts_, [IOSObjectArray newArrayWithObjects:(id[]){ create_AndroidGovNistCoreNetSslNetworkLayer_1_init() } count:1 type:JavaxNetSslTrustManager_class_()]);
  JavaxNetSslSSLContext *sslContext;
  sslContext = JavaxNetSslSSLContext_getInstanceWithNSString_(@"TLS");
  NSString *algorithm = JavaxNetSslKeyManagerFactory_getDefaultAlgorithm();
  JavaxNetSslTrustManagerFactory *tmFactory = JavaxNetSslTrustManagerFactory_getInstanceWithNSString_(algorithm);
  JavaxNetSslKeyManagerFactory *kmFactory = JavaxNetSslKeyManagerFactory_getInstanceWithNSString_(algorithm);
  JavaSecuritySecureRandom *secureRandom = create_JavaSecuritySecureRandom_init();
  [secureRandom nextInt];
  JavaSecurityKeyStore *keyStore = JavaSecurityKeyStore_getInstanceWithNSString_(keyStoreType != nil ? keyStoreType : JavaSecurityKeyStore_getDefaultType());
  JavaSecurityKeyStore *trustStore = JavaSecurityKeyStore_getInstanceWithNSString_(trustStoreType != nil ? trustStoreType : JavaSecurityKeyStore_getDefaultType());
  [((JavaSecurityKeyStore *) nil_chk(keyStore)) load__WithJavaIoInputStream:create_JavaIoFileInputStream_initWithNSString_(keyStoreFile) withCharArray:keyStorePassword];
  [((JavaSecurityKeyStore *) nil_chk(trustStore)) load__WithJavaIoInputStream:create_JavaIoFileInputStream_initWithNSString_(trustStoreFile) withCharArray:trustStorePassword];
  [((JavaxNetSslTrustManagerFactory *) nil_chk(tmFactory)) init__WithJavaSecurityKeyStore:trustStore];
  [((JavaxNetSslKeyManagerFactory *) nil_chk(kmFactory)) init__WithJavaSecurityKeyStore:keyStore withCharArray:keyStorePassword];
  if ([((AndroidGovNistJavaxSipSipStackImpl *) nil_chk(sipStack)) getClientAuth] == JreLoadEnum(AndroidGovNistJavaxSipStackClientAuthType, DisabledAll)) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistCoreNetSslNetworkLayer_logger)) debugWithNSString:JreStrcat("$@$", @"ClientAuth ", [sipStack getClientAuth], @" bypassing all cert validations")];
    [((JavaxNetSslSSLContext *) nil_chk(sslContext)) init__WithJavaxNetSslKeyManagerArray:nil withJavaxNetSslTrustManagerArray:self->trustAllCerts_ withJavaSecuritySecureRandom:secureRandom];
  }
  else {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistCoreNetSslNetworkLayer_logger)) debugWithNSString:JreStrcat("$@", @"ClientAuth ", [sipStack getClientAuth])];
    [((JavaxNetSslSSLContext *) nil_chk(sslContext)) init__WithJavaxNetSslKeyManagerArray:[kmFactory getKeyManagers] withJavaxNetSslTrustManagerArray:[tmFactory getTrustManagers] withJavaSecuritySecureRandom:secureRandom];
  }
  JreStrongAssign(&self->sslServerSocketFactory_, [sslContext getServerSocketFactory]);
  JreStrongAssign(&self->sslSocketFactory_, [sslContext getSocketFactory]);
}

AndroidGovNistCoreNetSslNetworkLayer *new_AndroidGovNistCoreNetSslNetworkLayer_initWithAndroidGovNistJavaxSipSipStackImpl_withNSString_withNSString_withCharArray_withCharArray_withNSString_withNSString_(AndroidGovNistJavaxSipSipStackImpl *sipStack, NSString *trustStoreFile, NSString *keyStoreFile, IOSCharArray *keyStorePassword, IOSCharArray *trustStorePassword, NSString *keyStoreType, NSString *trustStoreType) {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreNetSslNetworkLayer, initWithAndroidGovNistJavaxSipSipStackImpl_withNSString_withNSString_withCharArray_withCharArray_withNSString_withNSString_, sipStack, trustStoreFile, keyStoreFile, keyStorePassword, trustStorePassword, keyStoreType, trustStoreType)
}

AndroidGovNistCoreNetSslNetworkLayer *create_AndroidGovNistCoreNetSslNetworkLayer_initWithAndroidGovNistJavaxSipSipStackImpl_withNSString_withNSString_withCharArray_withCharArray_withNSString_withNSString_(AndroidGovNistJavaxSipSipStackImpl *sipStack, NSString *trustStoreFile, NSString *keyStoreFile, IOSCharArray *keyStorePassword, IOSCharArray *trustStorePassword, NSString *keyStoreType, NSString *trustStoreType) {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreNetSslNetworkLayer, initWithAndroidGovNistJavaxSipSipStackImpl_withNSString_withNSString_withCharArray_withCharArray_withNSString_withNSString_, sipStack, trustStoreFile, keyStoreFile, keyStorePassword, trustStorePassword, keyStoreType, trustStoreType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistCoreNetSslNetworkLayer)

@implementation AndroidGovNistCoreNetSslNetworkLayer_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistCoreNetSslNetworkLayer_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSObjectArray *)getAcceptedIssuers {
  return [IOSObjectArray arrayWithLength:0 type:JavaSecurityCertX509Certificate_class_()];
}

- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certs
                                                      withNSString:(NSString *)authType {
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistCoreNetSslNetworkLayer, logger))) debugWithNSString:JreStrcat("$@$$", @"checkClientTrusted : Not validating certs ", certs, @" authType ", authType)];
}

- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certs
                                                      withNSString:(NSString *)authType {
  [((id<OrgSlf4jLogger>) nil_chk(JreLoadStatic(AndroidGovNistCoreNetSslNetworkLayer, logger))) debugWithNSString:JreStrcat("$@$$", @"checkServerTrusted : Not validating certs ", certs, @" authType ", authType)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertX509Certificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAcceptedIssuers);
  methods[2].selector = @selector(checkClientTrustedWithJavaSecurityCertX509CertificateArray:withNSString:);
  methods[3].selector = @selector(checkServerTrustedWithJavaSecurityCertX509CertificateArray:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "checkClientTrusted", "[LJavaSecurityCertX509Certificate;LNSString;", "checkServerTrusted", "LAndroidGovNistCoreNetSslNetworkLayer;" };
  static const J2ObjcClassInfo _AndroidGovNistCoreNetSslNetworkLayer_1 = { "", "android.gov.nist.core.net", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 3, -1, -1, -1, -1 };
  return &_AndroidGovNistCoreNetSslNetworkLayer_1;
}

@end

void AndroidGovNistCoreNetSslNetworkLayer_1_init(AndroidGovNistCoreNetSslNetworkLayer_1 *self) {
  NSObject_init(self);
}

AndroidGovNistCoreNetSslNetworkLayer_1 *new_AndroidGovNistCoreNetSslNetworkLayer_1_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreNetSslNetworkLayer_1, init)
}

AndroidGovNistCoreNetSslNetworkLayer_1 *create_AndroidGovNistCoreNetSslNetworkLayer_1_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreNetSslNetworkLayer_1, init)
}
