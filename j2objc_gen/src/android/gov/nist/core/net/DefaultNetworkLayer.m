//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/core/net/DefaultNetworkLayer.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/net/DefaultNetworkLayer.h"
#include "android/gov/nist/javax/sip/SipStackImpl.h"
#include "java/io/IOException.h"
#include "java/net/ConnectException.h"
#include "java/net/DatagramSocket.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/MulticastSocket.h"
#include "java/net/ServerSocket.h"
#include "java/net/Socket.h"
#include "java/net/SocketException.h"
#include "java/net/SocketTimeoutException.h"
#include "javax/net/ServerSocketFactory.h"
#include "javax/net/SocketFactory.h"
#include "javax/net/ssl/SSLServerSocket.h"
#include "javax/net/ssl/SSLServerSocketFactory.h"
#include "javax/net/ssl/SSLSocket.h"
#include "javax/net/ssl/SSLSocketFactory.h"

@interface AndroidGovNistCoreNetDefaultNetworkLayer () {
 @public
  JavaxNetSslSSLSocketFactory *sslSocketFactory_;
  JavaxNetSslSSLServerSocketFactory *sslServerSocketFactory_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistCoreNetDefaultNetworkLayer, sslSocketFactory_, JavaxNetSslSSLSocketFactory *)
J2OBJC_FIELD_SETTER(AndroidGovNistCoreNetDefaultNetworkLayer, sslServerSocketFactory_, JavaxNetSslSSLServerSocketFactory *)

__attribute__((unused)) static void AndroidGovNistCoreNetDefaultNetworkLayer_init(AndroidGovNistCoreNetDefaultNetworkLayer *self);

__attribute__((unused)) static AndroidGovNistCoreNetDefaultNetworkLayer *new_AndroidGovNistCoreNetDefaultNetworkLayer_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidGovNistCoreNetDefaultNetworkLayer *create_AndroidGovNistCoreNetDefaultNetworkLayer_init();

J2OBJC_INITIALIZED_DEFN(AndroidGovNistCoreNetDefaultNetworkLayer)

AndroidGovNistCoreNetDefaultNetworkLayer *AndroidGovNistCoreNetDefaultNetworkLayer_SINGLETON;

@implementation AndroidGovNistCoreNetDefaultNetworkLayer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistCoreNetDefaultNetworkLayer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaNetServerSocket *)createServerSocketWithInt:(jint)port
                                           withInt:(jint)backlog
                            withJavaNetInetAddress:(JavaNetInetAddress *)bindAddress {
  return create_JavaNetServerSocket_initWithInt_withInt_withJavaNetInetAddress_(port, backlog, bindAddress);
}

- (JavaNetSocket *)createSocketWithJavaNetInetAddress:(JavaNetInetAddress *)address
                                              withInt:(jint)port {
  return create_JavaNetSocket_initWithJavaNetInetAddress_withInt_(address, port);
}

- (JavaNetDatagramSocket *)createDatagramSocket {
  return create_JavaNetDatagramSocket_init();
}

- (JavaNetDatagramSocket *)createDatagramSocketWithInt:(jint)port
                                withJavaNetInetAddress:(JavaNetInetAddress *)laddr {
  if ([((JavaNetInetAddress *) nil_chk(laddr)) isMulticastAddress]) {
    @try {
      JavaNetMulticastSocket *ds = create_JavaNetMulticastSocket_initWithInt_(port);
      [ds joinGroupWithJavaNetInetAddress:laddr];
      return ds;
    }
    @catch (JavaIoIOException *e) {
      @throw create_JavaNetSocketException_initWithNSString_([((JavaIoIOException *) nil_chk(e)) getLocalizedMessage]);
    }
  }
  else return create_JavaNetDatagramSocket_initWithInt_withJavaNetInetAddress_(port, laddr);
}

- (JavaxNetSslSSLServerSocket *)createSSLServerSocketWithInt:(jint)port
                                                     withInt:(jint)backlog
                                      withJavaNetInetAddress:(JavaNetInetAddress *)bindAddress {
  return (JavaxNetSslSSLServerSocket *) cast_chk([((JavaxNetSslSSLServerSocketFactory *) nil_chk(sslServerSocketFactory_)) createServerSocketWithInt:port withInt:backlog withJavaNetInetAddress:bindAddress], [JavaxNetSslSSLServerSocket class]);
}

- (JavaxNetSslSSLSocket *)createSSLSocketWithJavaNetInetAddress:(JavaNetInetAddress *)address
                                                        withInt:(jint)port {
  return [self createSSLSocketWithJavaNetInetAddress:address withInt:port withJavaNetInetAddress:nil];
}

- (JavaxNetSslSSLSocket *)createSSLSocketWithJavaNetInetAddress:(JavaNetInetAddress *)address
                                                        withInt:(jint)port
                                         withJavaNetInetAddress:(JavaNetInetAddress *)myAddress {
  JavaxNetSslSSLSocket *sock = (JavaxNetSslSSLSocket *) cast_chk([((JavaxNetSslSSLSocketFactory *) nil_chk(sslSocketFactory_)) createSocket], [JavaxNetSslSSLSocket class]);
  if (myAddress != nil) {
    [((JavaxNetSslSSLSocket *) nil_chk(sock)) bindWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(myAddress, 0)];
  }
  @try {
    [((JavaxNetSslSSLSocket *) nil_chk(sock)) connectWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(address, port) withInt:8000];
  }
  @catch (JavaNetSocketTimeoutException *e) {
    @throw create_JavaNetConnectException_initWithNSString_(JreStrcat("$@CI", @"Socket timeout error (8sec)", address, ':', port));
  }
  return sock;
}

- (JavaNetSocket *)createSocketWithJavaNetInetAddress:(JavaNetInetAddress *)address
                                              withInt:(jint)port
                               withJavaNetInetAddress:(JavaNetInetAddress *)myAddress {
  if (myAddress != nil) {
    JavaNetSocket *sock = create_JavaNetSocket_init();
    [sock bindWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(myAddress, 0)];
    @try {
      [sock connectWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(address, port) withInt:8000];
    }
    @catch (JavaNetSocketTimeoutException *e) {
      @throw create_JavaNetConnectException_initWithNSString_(JreStrcat("$@CI", @"Socket timeout error (8sec)", address, ':', port));
    }
    return sock;
  }
  else {
    JavaNetSocket *sock = create_JavaNetSocket_init();
    @try {
      [sock connectWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(address, port) withInt:8000];
    }
    @catch (JavaNetSocketTimeoutException *e) {
      @throw create_JavaNetConnectException_initWithNSString_(JreStrcat("$@CI", @"Socket timeout error (8sec)", address, ':', port));
    }
    return sock;
  }
}

- (JavaNetSocket *)createSocketWithJavaNetInetAddress:(JavaNetInetAddress *)address
                                              withInt:(jint)port
                               withJavaNetInetAddress:(JavaNetInetAddress *)myAddress
                                              withInt:(jint)myPort {
  if (myAddress != nil) {
    JavaNetSocket *sock = create_JavaNetSocket_init();
    [sock bindWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(myAddress, 0)];
    @try {
      [sock connectWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(address, port) withInt:8000];
    }
    @catch (JavaNetSocketTimeoutException *e) {
      @throw create_JavaNetConnectException_initWithNSString_(JreStrcat("$@CI", @"Socket timeout error (8sec)", address, ':', port));
    }
    return sock;
  }
  else {
    JavaNetSocket *sock = create_JavaNetSocket_init();
    if (myPort != 0) {
      [sock bindWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithInt_(port)];
    }
    @try {
      [sock connectWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(address, port) withInt:8000];
    }
    @catch (JavaNetSocketTimeoutException *e) {
      @throw create_JavaNetConnectException_initWithNSString_(JreStrcat("$@CI", @"Socket timeout error (8sec)", address, ':', port));
    }
    return sock;
  }
}

- (void)setSipStackWithAndroidGovNistJavaxSipSipStackImpl:(AndroidGovNistJavaxSipSipStackImpl *)sipStackImpl {
}

- (void)dealloc {
  RELEASE_(sslSocketFactory_);
  RELEASE_(sslServerSocketFactory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetServerSocket;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaNetSocket;", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "LJavaNetDatagramSocket;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "LJavaNetDatagramSocket;", 0x1, 6, 7, 5, -1, -1, -1 },
    { NULL, "LJavaxNetSslSSLServerSocket;", 0x1, 8, 1, 2, -1, -1, -1 },
    { NULL, "LJavaxNetSslSSLSocket;", 0x1, 9, 4, 2, -1, -1, -1 },
    { NULL, "LJavaxNetSslSSLSocket;", 0x1, 9, 10, 2, -1, -1, -1 },
    { NULL, "LJavaNetSocket;", 0x1, 3, 10, 2, -1, -1, -1 },
    { NULL, "LJavaNetSocket;", 0x1, 3, 11, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createServerSocketWithInt:withInt:withJavaNetInetAddress:);
  methods[2].selector = @selector(createSocketWithJavaNetInetAddress:withInt:);
  methods[3].selector = @selector(createDatagramSocket);
  methods[4].selector = @selector(createDatagramSocketWithInt:withJavaNetInetAddress:);
  methods[5].selector = @selector(createSSLServerSocketWithInt:withInt:withJavaNetInetAddress:);
  methods[6].selector = @selector(createSSLSocketWithJavaNetInetAddress:withInt:);
  methods[7].selector = @selector(createSSLSocketWithJavaNetInetAddress:withInt:withJavaNetInetAddress:);
  methods[8].selector = @selector(createSocketWithJavaNetInetAddress:withInt:withJavaNetInetAddress:);
  methods[9].selector = @selector(createSocketWithJavaNetInetAddress:withInt:withJavaNetInetAddress:withInt:);
  methods[10].selector = @selector(setSipStackWithAndroidGovNistJavaxSipSipStackImpl:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sslSocketFactory_", "LJavaxNetSslSSLSocketFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sslServerSocketFactory_", "LJavaxNetSslSSLServerSocketFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "SINGLETON", "LAndroidGovNistCoreNetDefaultNetworkLayer;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
  };
  static const void *ptrTable[] = { "createServerSocket", "IILJavaNetInetAddress;", "LJavaIoIOException;", "createSocket", "LJavaNetInetAddress;I", "LJavaNetSocketException;", "createDatagramSocket", "ILJavaNetInetAddress;", "createSSLServerSocket", "createSSLSocket", "LJavaNetInetAddress;ILJavaNetInetAddress;", "LJavaNetInetAddress;ILJavaNetInetAddress;I", "setSipStack", "LAndroidGovNistJavaxSipSipStackImpl;", &AndroidGovNistCoreNetDefaultNetworkLayer_SINGLETON };
  static const J2ObjcClassInfo _AndroidGovNistCoreNetDefaultNetworkLayer = { "DefaultNetworkLayer", "android.gov.nist.core.net", ptrTable, methods, fields, 7, 0x1, 11, 3, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistCoreNetDefaultNetworkLayer;
}

+ (void)initialize {
  if (self == [AndroidGovNistCoreNetDefaultNetworkLayer class]) {
    JreStrongAssignAndConsume(&AndroidGovNistCoreNetDefaultNetworkLayer_SINGLETON, new_AndroidGovNistCoreNetDefaultNetworkLayer_init());
    J2OBJC_SET_INITIALIZED(AndroidGovNistCoreNetDefaultNetworkLayer)
  }
}

@end

void AndroidGovNistCoreNetDefaultNetworkLayer_init(AndroidGovNistCoreNetDefaultNetworkLayer *self) {
  NSObject_init(self);
  JreStrongAssign(&self->sslServerSocketFactory_, (JavaxNetSslSSLServerSocketFactory *) cast_chk(JavaxNetSslSSLServerSocketFactory_getDefault(), [JavaxNetSslSSLServerSocketFactory class]));
  JreStrongAssign(&self->sslSocketFactory_, (JavaxNetSslSSLSocketFactory *) cast_chk(JavaxNetSslSSLSocketFactory_getDefault(), [JavaxNetSslSSLSocketFactory class]));
}

AndroidGovNistCoreNetDefaultNetworkLayer *new_AndroidGovNistCoreNetDefaultNetworkLayer_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreNetDefaultNetworkLayer, init)
}

AndroidGovNistCoreNetDefaultNetworkLayer *create_AndroidGovNistCoreNetDefaultNetworkLayer_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreNetDefaultNetworkLayer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistCoreNetDefaultNetworkLayer)
