//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/core/net/DefaultSecurityManagerProvider.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/net/DefaultSecurityManagerProvider.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/security/KeyStore.h"
#include "java/security/Security.h"
#include "java/util/Properties.h"
#include "javax/net/ssl/KeyManagerFactory.h"
#include "javax/net/ssl/TrustManagerFactory.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface AndroidGovNistCoreNetDefaultSecurityManagerProvider () {
 @public
  JavaxNetSslKeyManagerFactory *keyManagerFactory_;
  JavaxNetSslTrustManagerFactory *trustManagerFactory_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistCoreNetDefaultSecurityManagerProvider, keyManagerFactory_, JavaxNetSslKeyManagerFactory *)
J2OBJC_FIELD_SETTER(AndroidGovNistCoreNetDefaultSecurityManagerProvider, trustManagerFactory_, JavaxNetSslTrustManagerFactory *)

inline id<OrgSlf4jLogger> AndroidGovNistCoreNetDefaultSecurityManagerProvider_get_logger();
static id<OrgSlf4jLogger> AndroidGovNistCoreNetDefaultSecurityManagerProvider_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistCoreNetDefaultSecurityManagerProvider, logger, id<OrgSlf4jLogger>)

J2OBJC_INITIALIZED_DEFN(AndroidGovNistCoreNetDefaultSecurityManagerProvider)

@implementation AndroidGovNistCoreNetDefaultSecurityManagerProvider

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistCoreNetDefaultSecurityManagerProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithJavaUtilProperties:(JavaUtilProperties *)properties {
  NSString *keyStoreFilename = [((JavaUtilProperties *) nil_chk(properties)) getPropertyWithNSString:@"javax.net.ssl.keyStore"];
  NSString *keyStorePassword = [properties getPropertyWithNSString:@"javax.net.ssl.keyStorePassword"];
  NSString *keyStoreType = [properties getPropertyWithNSString:@"javax.net.ssl.keyStoreType"];
  if (keyStoreType == nil) {
    keyStoreType = JavaSecurityKeyStore_getDefaultType();
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistCoreNetDefaultSecurityManagerProvider_logger)) warnWithNSString:JreStrcat("$$", @"Using default keystore type ", keyStoreType)];
  }
  if (keyStoreFilename == nil || keyStorePassword == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistCoreNetDefaultSecurityManagerProvider_logger)) warnWithNSString:JreStrcat("$$$$$$", @"TLS server settings will be inactive - TLS key store will use JVM defaults keyStoreType=", keyStoreType, @" javax.net.ssl.keyStore=", keyStoreFilename, @" javax.net.ssl.keyStorePassword=", (keyStorePassword == nil ? nil : @"***"))];
  }
  NSString *trustStoreFilename = [properties getPropertyWithNSString:@"javax.net.ssl.trustStore"];
  NSString *trustStorePassword = [properties getPropertyWithNSString:@"javax.net.ssl.trustStorePassword"];
  if (trustStorePassword == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistCoreNetDefaultSecurityManagerProvider_logger)) infoWithNSString:@"javax.net.ssl.trustStorePassword is null, using the password passed through javax.net.ssl.keyStorePassword"];
    trustStorePassword = keyStorePassword;
  }
  NSString *trustStoreType = [properties getPropertyWithNSString:@"javax.net.ssl.trustStoreType"];
  if (trustStoreType == nil) {
    trustStoreType = JavaSecurityKeyStore_getDefaultType();
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistCoreNetDefaultSecurityManagerProvider_logger)) warnWithNSString:JreStrcat("$$", @"Using default truststore type ", trustStoreType)];
  }
  if (trustStoreFilename == nil || trustStorePassword == nil) {
    [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistCoreNetDefaultSecurityManagerProvider_logger)) warnWithNSString:JreStrcat("$$$$$$", @"TLS trust settings will be inactive - TLS trust store will use JVM defaults. trustStoreType=", trustStoreType, @" javax.net.ssl.trustStore=", trustStoreFilename, @" javax.net.ssl.trustStorePassword=", (trustStorePassword == nil ? nil : @"***"))];
  }
  NSString *algorithm = JavaSecuritySecurity_getPropertyWithNSString_(@"ssl.KeyManagerFactory.algorithm");
  if (algorithm == nil) {
    algorithm = @"SunX509";
  }
  [((id<OrgSlf4jLogger>) nil_chk(AndroidGovNistCoreNetDefaultSecurityManagerProvider_logger)) debugWithNSString:JreStrcat("$$$$", @"SecurityManagerProvider ", [[self java_getClass] getCanonicalName], @" will use algorithm ", algorithm)];
  JreStrongAssign(&keyManagerFactory_, JavaxNetSslKeyManagerFactory_getInstanceWithNSString_(algorithm));
  if (keyStoreFilename != nil) {
    JavaSecurityKeyStore *ks = JavaSecurityKeyStore_getInstanceWithNSString_(keyStoreType);
    [((JavaSecurityKeyStore *) nil_chk(ks)) load__WithJavaIoInputStream:create_JavaIoFileInputStream_initWithJavaIoFile_(create_JavaIoFile_initWithNSString_(keyStoreFilename)) withCharArray:[((NSString *) nil_chk(keyStorePassword)) java_toCharArray]];
    [((JavaxNetSslKeyManagerFactory *) nil_chk(keyManagerFactory_)) init__WithJavaSecurityKeyStore:ks withCharArray:[keyStorePassword java_toCharArray]];
  }
  else {
    [((JavaxNetSslKeyManagerFactory *) nil_chk(keyManagerFactory_)) init__WithJavaSecurityKeyStore:nil withCharArray:nil];
  }
  JreStrongAssign(&trustManagerFactory_, JavaxNetSslTrustManagerFactory_getInstanceWithNSString_(algorithm));
  if (trustStoreFilename != nil) {
    JavaSecurityKeyStore *ts = JavaSecurityKeyStore_getInstanceWithNSString_(trustStoreType);
    [((JavaSecurityKeyStore *) nil_chk(ts)) load__WithJavaIoInputStream:create_JavaIoFileInputStream_initWithJavaIoFile_(create_JavaIoFile_initWithNSString_(trustStoreFilename)) withCharArray:[((NSString *) nil_chk(trustStorePassword)) java_toCharArray]];
    [((JavaxNetSslTrustManagerFactory *) nil_chk(trustManagerFactory_)) init__WithJavaSecurityKeyStore:ts];
  }
  else {
    [((JavaxNetSslTrustManagerFactory *) nil_chk(trustManagerFactory_)) init__WithJavaSecurityKeyStore:nil];
  }
  [AndroidGovNistCoreNetDefaultSecurityManagerProvider_logger debugWithNSString:JreStrcat("$$$", @"TLS settings OK. SecurityManagerProvider ", [[self java_getClass] getCanonicalName], @" initialized.")];
}

- (IOSObjectArray *)getKeyManagersWithBoolean:(jboolean)client {
  if (keyManagerFactory_ == nil) return nil;
  return [keyManagerFactory_ getKeyManagers];
}

- (IOSObjectArray *)getTrustManagersWithBoolean:(jboolean)client {
  if (trustManagerFactory_ == nil) return nil;
  return [trustManagerFactory_ getTrustManagers];
}

- (void)dealloc {
  RELEASE_(keyManagerFactory_);
  RELEASE_(trustManagerFactory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "[LJavaxNetSslKeyManager;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "[LJavaxNetSslTrustManager;", 0x1, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithJavaUtilProperties:);
  methods[2].selector = @selector(getKeyManagersWithBoolean:);
  methods[3].selector = @selector(getTrustManagersWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "keyManagerFactory_", "LJavaxNetSslKeyManagerFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "trustManagerFactory_", "LJavaxNetSslTrustManagerFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LJavaUtilProperties;", "LJavaSecurityGeneralSecurityException;LJavaIoIOException;", "getKeyManagers", "Z", "getTrustManagers", &AndroidGovNistCoreNetDefaultSecurityManagerProvider_logger };
  static const J2ObjcClassInfo _AndroidGovNistCoreNetDefaultSecurityManagerProvider = { "DefaultSecurityManagerProvider", "android.gov.nist.core.net", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistCoreNetDefaultSecurityManagerProvider;
}

+ (void)initialize {
  if (self == [AndroidGovNistCoreNetDefaultSecurityManagerProvider class]) {
    JreStrongAssign(&AndroidGovNistCoreNetDefaultSecurityManagerProvider_logger, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(AndroidGovNistCoreNetDefaultSecurityManagerProvider_class_()));
    J2OBJC_SET_INITIALIZED(AndroidGovNistCoreNetDefaultSecurityManagerProvider)
  }
}

@end

void AndroidGovNistCoreNetDefaultSecurityManagerProvider_init(AndroidGovNistCoreNetDefaultSecurityManagerProvider *self) {
  NSObject_init(self);
}

AndroidGovNistCoreNetDefaultSecurityManagerProvider *new_AndroidGovNistCoreNetDefaultSecurityManagerProvider_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreNetDefaultSecurityManagerProvider, init)
}

AndroidGovNistCoreNetDefaultSecurityManagerProvider *create_AndroidGovNistCoreNetDefaultSecurityManagerProvider_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreNetDefaultSecurityManagerProvider, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistCoreNetDefaultSecurityManagerProvider)
