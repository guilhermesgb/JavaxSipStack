//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/core/LexerCore.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/Debug.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/StringTokenizer.h"
#include "android/gov/nist/core/Token.h"
#include "android/gov/nist/javax/sip/Utils.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/text/ParseException.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

J2OBJC_INITIALIZED_DEFN(AndroidGovNistCoreLexerCore)

JavaUtilConcurrentConcurrentHashMap *AndroidGovNistCoreLexerCore_globalSymbolTable;
JavaUtilConcurrentConcurrentHashMap *AndroidGovNistCoreLexerCore_lexerTables;

@implementation AndroidGovNistCoreLexerCore

- (void)addKeywordWithNSString:(NSString *)name
                       withInt:(jint)value {
  name = AndroidGovNistJavaxSipUtils_toUpperCaseWithNSString_(name);
  JavaLangInteger *val = JavaLangInteger_valueOfWithInt_(value);
  [((id<JavaUtilMap>) nil_chk(currentLexer_)) putWithId:name withId:val];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(AndroidGovNistCoreLexerCore_globalSymbolTable)) putIfAbsentWithId:val withId:name];
}

- (NSString *)lookupTokenWithInt:(jint)value {
  if (value > AndroidGovNistCoreLexerCore_START) {
    return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(AndroidGovNistCoreLexerCore_globalSymbolTable)) getWithId:JavaLangInteger_valueOfWithInt_(value)];
  }
  else {
    JavaLangCharacter *ch = JavaLangCharacter_valueOfWithChar_((jchar) value);
    return [ch description];
  }
}

- (void)selectLexerWithNSString:(NSString *)lexerName {
  JreStrongAssign(&self->currentLexerName_, lexerName);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistCoreLexerCore_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)lexerName
                    withNSString:(NSString *)buffer {
  AndroidGovNistCoreLexerCore_initWithNSString_withNSString_(self, lexerName, buffer);
  return self;
}

- (NSString *)peekNextId {
  jint oldPtr = ptr_;
  NSString *retval = [self ttoken];
  savedPtr_ = ptr_;
  ptr_ = oldPtr;
  return retval;
}

- (NSString *)getNextId {
  return [self ttoken];
}

- (NSString *)getNextIdNoWhiteSpace {
  return [self ttokenNoWhiteSpace];
}

- (AndroidGovNistCoreToken *)getNextToken {
  return self->currentMatch_;
}

- (AndroidGovNistCoreToken *)peekNextToken {
  return IOSObjectArray_Get(nil_chk([self peekNextTokenWithInt:1]), 0);
}

- (IOSObjectArray *)peekNextTokenWithInt:(jint)ntokens {
  jint old = ptr_;
  IOSObjectArray *retval = [IOSObjectArray arrayWithLength:ntokens type:AndroidGovNistCoreToken_class_()];
  for (jint i = 0; i < ntokens; i++) {
    AndroidGovNistCoreToken *tok = create_AndroidGovNistCoreToken_init();
    if ([self startsId]) {
      NSString *id_ = [self ttoken];
      JreStrongAssign(&tok->tokenValue_, id_);
      NSString *idUppercase = AndroidGovNistJavaxSipUtils_toUpperCaseWithNSString_(id_);
      if ([((id<JavaUtilMap>) nil_chk(currentLexer_)) containsKeyWithId:idUppercase]) {
        JavaLangInteger *type = [((id<JavaUtilMap>) nil_chk(currentLexer_)) getWithId:idUppercase];
        tok->tokenType_ = [((JavaLangInteger *) nil_chk(type)) intValue];
      }
      else tok->tokenType_ = AndroidGovNistCoreLexerCore_ID;
    }
    else {
      jchar nextChar = [self getNextChar];
      JreStrongAssign(&tok->tokenValue_, NSString_java_valueOfChar_(nextChar));
      if (AndroidGovNistCoreStringTokenizer_isAlphaWithChar_(nextChar)) {
        tok->tokenType_ = AndroidGovNistCoreLexerCore_ALPHA;
      }
      else if (AndroidGovNistCoreStringTokenizer_isDigitWithChar_(nextChar)) {
        tok->tokenType_ = AndroidGovNistCoreLexerCore_DIGIT;
      }
      else tok->tokenType_ = (jint) nextChar;
    }
    IOSObjectArray_Set(retval, i, tok);
  }
  savedPtr_ = ptr_;
  ptr_ = old;
  return retval;
}

- (AndroidGovNistCoreToken *)matchWithInt:(jint)tok {
  if (JreLoadStatic(AndroidGovNistCoreDebug, parserDebug)) {
    AndroidGovNistCoreDebug_printlnWithNSString_(JreStrcat("$I", @"match ", tok));
  }
  if (tok > AndroidGovNistCoreLexerCore_START && tok < AndroidGovNistCoreLexerCore_END) {
    if (tok == AndroidGovNistCoreLexerCore_ID) {
      if (![self startsId]) @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("@$", buffer_, @"\nID expected"), ptr_);
      NSString *id_ = [self getNextId];
      JreStrongAssignAndConsume(&self->currentMatch_, new_AndroidGovNistCoreToken_init());
      JreStrongAssign(&self->currentMatch_->tokenValue_, id_);
      self->currentMatch_->tokenType_ = AndroidGovNistCoreLexerCore_ID;
    }
    else if (tok == AndroidGovNistCoreLexerCore_SAFE) {
      if (![self startsSafeToken]) @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("@$", buffer_, @"\nID expected"), ptr_);
      NSString *id_ = [self ttokenSafe];
      JreStrongAssignAndConsume(&self->currentMatch_, new_AndroidGovNistCoreToken_init());
      JreStrongAssign(&self->currentMatch_->tokenValue_, id_);
      self->currentMatch_->tokenType_ = AndroidGovNistCoreLexerCore_SAFE;
    }
    else if (tok == AndroidGovNistCoreLexerCore_ID_NO_WHITESPACE) {
      if (![self startsIdNoWhiteSpace]) @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("@$", buffer_, @"\nID no white space expected"), ptr_);
      NSString *id_ = [self getNextIdNoWhiteSpace];
      JreStrongAssignAndConsume(&self->currentMatch_, new_AndroidGovNistCoreToken_init());
      JreStrongAssign(&self->currentMatch_->tokenValue_, id_);
      self->currentMatch_->tokenType_ = AndroidGovNistCoreLexerCore_ID_NO_WHITESPACE;
    }
    else {
      NSString *nexttok = [self getNextId];
      JavaLangInteger *cur = [((id<JavaUtilMap>) nil_chk(currentLexer_)) getWithId:AndroidGovNistJavaxSipUtils_toUpperCaseWithNSString_(nexttok)];
      if (cur == nil || [cur intValue] != tok) @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("@$$", buffer_, @"\nUnexpected Token : ", nexttok), ptr_);
      JreStrongAssignAndConsume(&self->currentMatch_, new_AndroidGovNistCoreToken_init());
      JreStrongAssign(&self->currentMatch_->tokenValue_, nexttok);
      self->currentMatch_->tokenType_ = tok;
    }
  }
  else if (tok > AndroidGovNistCoreLexerCore_END) {
    jchar next = [self lookAheadWithInt:0];
    if (tok == AndroidGovNistCoreLexerCore_DIGIT) {
      if (!AndroidGovNistCoreStringTokenizer_isDigitWithChar_(next)) @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("@$", buffer_, @"\nExpecting DIGIT"), ptr_);
      JreStrongAssignAndConsume(&self->currentMatch_, new_AndroidGovNistCoreToken_init());
      JreStrongAssign(&self->currentMatch_->tokenValue_, NSString_java_valueOfChar_(next));
      ((AndroidGovNistCoreToken *) nil_chk(self->currentMatch_))->tokenType_ = tok;
      [self consumeWithInt:1];
    }
    else if (tok == AndroidGovNistCoreLexerCore_ALPHA) {
      if (!AndroidGovNistCoreStringTokenizer_isAlphaWithChar_(next)) @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("@$", buffer_, @"\nExpecting ALPHA"), ptr_);
      JreStrongAssignAndConsume(&self->currentMatch_, new_AndroidGovNistCoreToken_init());
      JreStrongAssign(&self->currentMatch_->tokenValue_, NSString_java_valueOfChar_(next));
      ((AndroidGovNistCoreToken *) nil_chk(self->currentMatch_))->tokenType_ = tok;
      [self consumeWithInt:1];
    }
  }
  else {
    jchar ch = (jchar) tok;
    jchar next = [self lookAheadWithInt:0];
    if (next == ch) {
      [self consumeWithInt:1];
    }
    else @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("@$C$C$", buffer_, @"\nExpecting  >>>", ch, @"<<< got >>>", next, @"<<<"), ptr_);
  }
  return self->currentMatch_;
}

- (void)SPorHT {
  @try {
    jchar c = [self lookAheadWithInt:0];
    while (c == ' ' || c == 0x0009) {
      [self consumeWithInt:1];
      c = [self lookAheadWithInt:0];
    }
  }
  @catch (JavaTextParseException *ex) {
  }
}

+ (jboolean)isTokenCharWithChar:(jchar)c {
  return AndroidGovNistCoreLexerCore_isTokenCharWithChar_(c);
}

- (jboolean)startsId {
  @try {
    jchar nextChar = [self lookAheadWithInt:0];
    return AndroidGovNistCoreLexerCore_isTokenCharWithChar_(nextChar);
  }
  @catch (JavaTextParseException *ex) {
    return false;
  }
}

- (jboolean)startsIdNoWhiteSpace {
  @try {
    jchar nextChar = [self lookAheadWithInt:0];
    return nextChar != ' ' && nextChar != 0x0009 && nextChar != 0x000a;
  }
  @catch (JavaTextParseException *ex) {
    return false;
  }
}

- (jboolean)startsSafeToken {
  @try {
    jchar nextChar = [self lookAheadWithInt:0];
    if (AndroidGovNistCoreStringTokenizer_isAlphaDigitWithChar_(nextChar)) {
      return true;
    }
    else {
      switch (nextChar) {
        case '_':
        case '+':
        case '-':
        case '!':
        case '`':
        case '\'':
        case '.':
        case '/':
        case '}':
        case '{':
        case ']':
        case '[':
        case '^':
        case '|':
        case '~':
        case '%':
        case '#':
        case '@':
        case '$':
        case ':':
        case ';':
        case '?':
        case '"':
        case '*':
        case '=':
        return true;
        default:
        return false;
      }
    }
  }
  @catch (JavaTextParseException *ex) {
    return false;
  }
}

- (NSString *)ttoken {
  jint startIdx = ptr_;
  @try {
    while ([self hasMoreChars]) {
      jchar nextChar = [self lookAheadWithInt:0];
      if (AndroidGovNistCoreLexerCore_isTokenCharWithChar_(nextChar)) {
        [self consumeWithInt:1];
      }
      else {
        break;
      }
    }
    return NSString_java_valueOfChars_offset_count_(buffer_, startIdx, ptr_ - startIdx);
  }
  @catch (JavaTextParseException *ex) {
    return nil;
  }
}

- (NSString *)ttokenNoWhiteSpace {
  jint startIdx = ptr_;
  @try {
    while ([self hasMoreChars]) {
      jchar nextChar = [self lookAheadWithInt:0];
      if (nextChar == ' ' || nextChar == 0x000a || nextChar == 0x0009) {
        break;
      }
      else {
        [self consumeWithInt:1];
      }
    }
    return NSString_java_valueOfChars_offset_count_(buffer_, startIdx, ptr_ - startIdx);
  }
  @catch (JavaTextParseException *ex) {
    return nil;
  }
}

- (NSString *)ttokenSafe {
  jint startIdx = ptr_;
  @try {
    while ([self hasMoreChars]) {
      jchar nextChar = [self lookAheadWithInt:0];
      if (AndroidGovNistCoreStringTokenizer_isAlphaDigitWithChar_(nextChar)) {
        [self consumeWithInt:1];
      }
      else {
        jboolean isValidChar = false;
        switch (nextChar) {
          case '_':
          case '+':
          case '-':
          case '!':
          case '`':
          case '\'':
          case '.':
          case '/':
          case '}':
          case '{':
          case ']':
          case '[':
          case '^':
          case '|':
          case '~':
          case '%':
          case '#':
          case '@':
          case '$':
          case ':':
          case ';':
          case '?':
          case '"':
          case '*':
          isValidChar = true;
        }
        if (isValidChar) {
          [self consumeWithInt:1];
        }
        else {
          break;
        }
      }
    }
    return NSString_java_valueOfChars_offset_count_(buffer_, startIdx, ptr_ - startIdx);
  }
  @catch (JavaTextParseException *ex) {
    return nil;
  }
}

- (void)consumeValidCharsWithCharArray:(IOSCharArray *)validChars {
  jint validCharsLength = ((IOSCharArray *) nil_chk(validChars))->size_;
  @try {
    while ([self hasMoreChars]) {
      jchar nextChar = [self lookAheadWithInt:0];
      jboolean isValid = false;
      for (jint i = 0; i < validCharsLength; i++) {
        jchar validChar = IOSCharArray_Get(validChars, i);
        switch (validChar) {
          case AndroidGovNistCoreLexerCore_ALPHA_VALID_CHARS:
          isValid = AndroidGovNistCoreStringTokenizer_isAlphaWithChar_(nextChar);
          break;
          case AndroidGovNistCoreLexerCore_DIGIT_VALID_CHARS:
          isValid = AndroidGovNistCoreStringTokenizer_isDigitWithChar_(nextChar);
          break;
          case AndroidGovNistCoreLexerCore_ALPHADIGIT_VALID_CHARS:
          isValid = AndroidGovNistCoreStringTokenizer_isAlphaDigitWithChar_(nextChar);
          break;
          default:
          isValid = (nextChar == validChar);
        }
        if (isValid) {
          break;
        }
      }
      if (isValid) {
        [self consumeWithInt:1];
      }
      else {
        break;
      }
    }
  }
  @catch (JavaTextParseException *ex) {
  }
}

- (NSString *)quotedString {
  jint startIdx = ptr_ + 1;
  if ([self lookAheadWithInt:0] != '"') return nil;
  [self consumeWithInt:1];
  while (true) {
    jchar next = [self getNextChar];
    if (next == '"') {
      break;
    }
    else if (next == 0x0000) {
      @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", NSString_java_valueOfChars_(self->buffer_), @" :unexpected EOL"), self->ptr_);
    }
    else if (next == '\\') {
      [self consumeWithInt:1];
    }
  }
  return NSString_java_valueOfChars_offset_count_(buffer_, startIdx, ptr_ - startIdx - 1);
}

- (NSString *)comment {
  JavaLangStringBuilder *retval = create_JavaLangStringBuilder_init();
  if ([self lookAheadWithInt:0] != '(') return nil;
  [self consumeWithInt:1];
  while (true) {
    jchar next = [self getNextChar];
    if (next == ')') {
      break;
    }
    else if (next == 0x0000) {
      @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("@$", self->buffer_, @" :unexpected EOL"), self->ptr_);
    }
    else if (next == '\\') {
      [retval appendWithChar:next];
      next = [self getNextChar];
      if (next == 0x0000) @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("@$", self->buffer_, @" : unexpected EOL"), self->ptr_);
      [retval appendWithChar:next];
    }
    else {
      [retval appendWithChar:next];
    }
  }
  return [retval description];
}

- (NSString *)byteStringNoSemicolon {
  JavaLangStringBuilder *retval = create_JavaLangStringBuilder_init();
  @try {
    while (true) {
      jchar next = [self lookAheadWithInt:0];
      if (next == 0x0000 || next == 0x000a || next == ';' || next == ',') {
        break;
      }
      else {
        [self consumeWithInt:1];
        [retval appendWithChar:next];
      }
    }
  }
  @catch (JavaTextParseException *ex) {
    return [retval description];
  }
  return [retval description];
}

- (NSString *)byteStringNoSlash {
  JavaLangStringBuilder *retval = create_JavaLangStringBuilder_init();
  @try {
    while (true) {
      jchar next = [self lookAheadWithInt:0];
      if (next == 0x0000 || next == 0x000a || next == '/') {
        break;
      }
      else {
        [self consumeWithInt:1];
        [retval appendWithChar:next];
      }
    }
  }
  @catch (JavaTextParseException *ex) {
    return [retval description];
  }
  return [retval description];
}

- (NSString *)byteStringNoComma {
  JavaLangStringBuilder *retval = create_JavaLangStringBuilder_init();
  @try {
    while (true) {
      jchar next = [self lookAheadWithInt:0];
      if (next == 0x000a || next == ',') {
        break;
      }
      else {
        [self consumeWithInt:1];
        [retval appendWithChar:next];
      }
    }
  }
  @catch (JavaTextParseException *ex) {
  }
  return [retval description];
}

+ (NSString *)charAsStringWithChar:(jchar)ch {
  return AndroidGovNistCoreLexerCore_charAsStringWithChar_(ch);
}

- (NSString *)charAsStringWithInt:(jint)nchars {
  return NSString_java_valueOfChars_offset_count_(buffer_, ptr_, nchars - 1);
}

- (NSString *)number {
  jint startIdx = ptr_;
  @try {
    if (!AndroidGovNistCoreStringTokenizer_isDigitWithChar_([self lookAheadWithInt:0])) {
      @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("@$C", buffer_, @": Unexpected token at ", [self lookAheadWithInt:0]), ptr_);
    }
    [self consumeWithInt:1];
    while (true) {
      jchar next = [self lookAheadWithInt:0];
      if (AndroidGovNistCoreStringTokenizer_isDigitWithChar_(next)) {
        [self consumeWithInt:1];
      }
      else break;
    }
    return NSString_java_valueOfChars_offset_count_(buffer_, startIdx, ptr_ - startIdx);
  }
  @catch (JavaTextParseException *ex) {
    return NSString_java_valueOfChars_offset_count_(buffer_, startIdx, ptr_ - startIdx);
  }
}

- (jint)markInputPosition {
  return ptr_;
}

- (void)rewindInputPositionWithInt:(jint)position {
  self->ptr_ = position;
}

- (NSString *)getRest {
  if (ptr_ > bufferLen_) return nil;
  else if (ptr_ == bufferLen_) return @"";
  else return NSString_java_valueOfChars_offset_count_(buffer_, ptr_, bufferLen_ - ptr_);
}

- (NSString *)getStringWithChar:(jchar)c {
  JavaLangStringBuilder *retval = create_JavaLangStringBuilder_init();
  while (true) {
    jchar next = [self lookAheadWithInt:0];
    if (next == 0x0000) {
      @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("@$", self->buffer_, @"unexpected EOL"), self->ptr_);
    }
    else if (next == c) {
      [self consumeWithInt:1];
      break;
    }
    else if (next == '\\') {
      [self consumeWithInt:1];
      jchar nextchar = [self lookAheadWithInt:0];
      if (nextchar == 0x0000) {
        @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("@$", self->buffer_, @"unexpected EOL"), self->ptr_);
      }
      else {
        [self consumeWithInt:1];
        [retval appendWithChar:nextchar];
      }
    }
    else {
      [self consumeWithInt:1];
      [retval appendWithChar:next];
    }
  }
  return [retval description];
}

- (jint)getPtr {
  return self->ptr_;
}

- (NSString *)getBuffer {
  return NSString_java_valueOfChars_(buffer_);
}

- (JavaTextParseException *)createParseException {
  return create_JavaTextParseException_initWithNSString_withInt_([self getBuffer], self->ptr_);
}

- (void)dealloc {
  RELEASE_(currentLexer_);
  RELEASE_(currentLexerName_);
  RELEASE_(currentMatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreToken;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreToken;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "[LAndroidGovNistCoreToken;", 0x1, 8, 3, 7, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreToken;", 0x1, 9, 3, 7, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, 11, 7, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaTextParseException;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(addKeywordWithNSString:withInt:);
  methods[1].selector = @selector(lookupTokenWithInt:);
  methods[2].selector = @selector(selectLexerWithNSString:);
  methods[3].selector = @selector(init);
  methods[4].selector = @selector(initWithNSString:withNSString:);
  methods[5].selector = @selector(peekNextId);
  methods[6].selector = @selector(getNextId);
  methods[7].selector = @selector(getNextIdNoWhiteSpace);
  methods[8].selector = @selector(getNextToken);
  methods[9].selector = @selector(peekNextToken);
  methods[10].selector = @selector(peekNextTokenWithInt:);
  methods[11].selector = @selector(matchWithInt:);
  methods[12].selector = @selector(SPorHT);
  methods[13].selector = @selector(isTokenCharWithChar:);
  methods[14].selector = @selector(startsId);
  methods[15].selector = @selector(startsIdNoWhiteSpace);
  methods[16].selector = @selector(startsSafeToken);
  methods[17].selector = @selector(ttoken);
  methods[18].selector = @selector(ttokenNoWhiteSpace);
  methods[19].selector = @selector(ttokenSafe);
  methods[20].selector = @selector(consumeValidCharsWithCharArray:);
  methods[21].selector = @selector(quotedString);
  methods[22].selector = @selector(comment);
  methods[23].selector = @selector(byteStringNoSemicolon);
  methods[24].selector = @selector(byteStringNoSlash);
  methods[25].selector = @selector(byteStringNoComma);
  methods[26].selector = @selector(charAsStringWithChar:);
  methods[27].selector = @selector(charAsStringWithInt:);
  methods[28].selector = @selector(number);
  methods[29].selector = @selector(markInputPosition);
  methods[30].selector = @selector(rewindInputPositionWithInt:);
  methods[31].selector = @selector(getRest);
  methods[32].selector = @selector(getStringWithChar:);
  methods[33].selector = @selector(getPtr);
  methods[34].selector = @selector(getBuffer);
  methods[35].selector = @selector(createParseException);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "START", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_START, 0x19, -1, -1, -1, -1 },
    { "END", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_END, 0x19, -1, -1, -1, -1 },
    { "ID_NO_WHITESPACE", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_ID_NO_WHITESPACE, 0x19, -1, -1, -1, -1 },
    { "ID", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_ID, 0x19, -1, -1, -1, -1 },
    { "SAFE", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_SAFE, 0x19, -1, -1, -1, -1 },
    { "WHITESPACE", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_WHITESPACE, 0x19, -1, -1, -1, -1 },
    { "DIGIT", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_DIGIT, 0x19, -1, -1, -1, -1 },
    { "ALPHA", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_ALPHA, 0x19, -1, -1, -1, -1 },
    { "BACKSLASH", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_BACKSLASH, 0x19, -1, -1, -1, -1 },
    { "QUOTE", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_QUOTE, 0x19, -1, -1, -1, -1 },
    { "AT", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_AT, 0x19, -1, -1, -1, -1 },
    { "SP", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_SP, 0x19, -1, -1, -1, -1 },
    { "HT", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_HT, 0x19, -1, -1, -1, -1 },
    { "COLON", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_COLON, 0x19, -1, -1, -1, -1 },
    { "STAR", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_STAR, 0x19, -1, -1, -1, -1 },
    { "DOLLAR", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_DOLLAR, 0x19, -1, -1, -1, -1 },
    { "PLUS", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_PLUS, 0x19, -1, -1, -1, -1 },
    { "POUND", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_POUND, 0x19, -1, -1, -1, -1 },
    { "MINUS", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_MINUS, 0x19, -1, -1, -1, -1 },
    { "DOUBLEQUOTE", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_DOUBLEQUOTE, 0x19, -1, -1, -1, -1 },
    { "TILDE", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_TILDE, 0x19, -1, -1, -1, -1 },
    { "BACK_QUOTE", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_BACK_QUOTE, 0x19, -1, -1, -1, -1 },
    { "NULL", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_NULL, 0x19, -1, -1, -1, -1 },
    { "EQUALS", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_EQUALS, 0x19, -1, -1, -1, -1 },
    { "SEMICOLON", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_SEMICOLON, 0x19, -1, -1, -1, -1 },
    { "SLASH", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_SLASH, 0x19, -1, -1, -1, -1 },
    { "L_SQUARE_BRACKET", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_L_SQUARE_BRACKET, 0x19, -1, -1, -1, -1 },
    { "R_SQUARE_BRACKET", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_R_SQUARE_BRACKET, 0x19, -1, -1, -1, -1 },
    { "R_CURLY", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_R_CURLY, 0x19, -1, -1, -1, -1 },
    { "L_CURLY", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_L_CURLY, 0x19, -1, -1, -1, -1 },
    { "HAT", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_HAT, 0x19, -1, -1, -1, -1 },
    { "BAR", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_BAR, 0x19, -1, -1, -1, -1 },
    { "DOT", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_DOT, 0x19, -1, -1, -1, -1 },
    { "EXCLAMATION", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_EXCLAMATION, 0x19, -1, -1, -1, -1 },
    { "LPAREN", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_LPAREN, 0x19, -1, -1, -1, -1 },
    { "RPAREN", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_RPAREN, 0x19, -1, -1, -1, -1 },
    { "GREATER_THAN", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_GREATER_THAN, 0x19, -1, -1, -1, -1 },
    { "LESS_THAN", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_LESS_THAN, 0x19, -1, -1, -1, -1 },
    { "PERCENT", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_PERCENT, 0x19, -1, -1, -1, -1 },
    { "QUESTION", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_QUESTION, 0x19, -1, -1, -1, -1 },
    { "AND", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_AND, 0x19, -1, -1, -1, -1 },
    { "UNDERSCORE", "I", .constantValue.asInt = AndroidGovNistCoreLexerCore_UNDERSCORE, 0x19, -1, -1, -1, -1 },
    { "globalSymbolTable", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x1c, -1, 17, 18, -1 },
    { "lexerTables", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x1c, -1, 19, 20, -1 },
    { "currentLexer_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x4, -1, -1, 21, -1 },
    { "currentLexerName_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "currentMatch_", "LAndroidGovNistCoreToken;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ALPHA_VALID_CHARS", "C", .constantValue.asUnichar = AndroidGovNistCoreLexerCore_ALPHA_VALID_CHARS, 0x18, -1, -1, -1, -1 },
    { "DIGIT_VALID_CHARS", "C", .constantValue.asUnichar = AndroidGovNistCoreLexerCore_DIGIT_VALID_CHARS, 0x18, -1, -1, -1, -1 },
    { "ALPHADIGIT_VALID_CHARS", "C", .constantValue.asUnichar = AndroidGovNistCoreLexerCore_ALPHADIGIT_VALID_CHARS, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addKeyword", "LNSString;I", "lookupToken", "I", "selectLexer", "LNSString;", "LNSString;LNSString;", "LJavaTextParseException;", "peekNextToken", "match", "isTokenChar", "C", "consumeValidChars", "[C", "charAsString", "rewindInputPosition", "getString", &AndroidGovNistCoreLexerCore_globalSymbolTable, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Integer;Ljava/lang/String;>;", &AndroidGovNistCoreLexerCore_lexerTables, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Integer;>;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _AndroidGovNistCoreLexerCore = { "LexerCore", "android.gov.nist.core", ptrTable, methods, fields, 7, 0x1, 36, 50, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistCoreLexerCore;
}

+ (void)initialize {
  if (self == [AndroidGovNistCoreLexerCore class]) {
    {
      JreStrongAssignAndConsume(&AndroidGovNistCoreLexerCore_globalSymbolTable, new_JavaUtilConcurrentConcurrentHashMap_init());
      JreStrongAssignAndConsume(&AndroidGovNistCoreLexerCore_lexerTables, new_JavaUtilConcurrentConcurrentHashMap_init());
    }
    J2OBJC_SET_INITIALIZED(AndroidGovNistCoreLexerCore)
  }
}

@end

void AndroidGovNistCoreLexerCore_init(AndroidGovNistCoreLexerCore *self) {
  AndroidGovNistCoreStringTokenizer_init(self);
  JreStrongAssignAndConsume(&self->currentLexer_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssign(&self->currentLexerName_, @"charLexer");
}

AndroidGovNistCoreLexerCore *new_AndroidGovNistCoreLexerCore_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreLexerCore, init)
}

AndroidGovNistCoreLexerCore *create_AndroidGovNistCoreLexerCore_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreLexerCore, init)
}

void AndroidGovNistCoreLexerCore_initWithNSString_withNSString_(AndroidGovNistCoreLexerCore *self, NSString *lexerName, NSString *buffer) {
  AndroidGovNistCoreStringTokenizer_initWithNSString_(self, buffer);
  JreStrongAssign(&self->currentLexerName_, lexerName);
}

AndroidGovNistCoreLexerCore *new_AndroidGovNistCoreLexerCore_initWithNSString_withNSString_(NSString *lexerName, NSString *buffer) {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreLexerCore, initWithNSString_withNSString_, lexerName, buffer)
}

AndroidGovNistCoreLexerCore *create_AndroidGovNistCoreLexerCore_initWithNSString_withNSString_(NSString *lexerName, NSString *buffer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreLexerCore, initWithNSString_withNSString_, lexerName, buffer)
}

jboolean AndroidGovNistCoreLexerCore_isTokenCharWithChar_(jchar c) {
  AndroidGovNistCoreLexerCore_initialize();
  if (AndroidGovNistCoreStringTokenizer_isAlphaDigitWithChar_(c)) return true;
  else switch (c) {
    case '-':
    case '.':
    case '!':
    case '%':
    case '*':
    case '_':
    case '+':
    case '`':
    case '\'':
    case '~':
    return true;
    default:
    return false;
  }
}

NSString *AndroidGovNistCoreLexerCore_charAsStringWithChar_(jchar ch) {
  AndroidGovNistCoreLexerCore_initialize();
  return NSString_java_valueOfChar_(ch);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistCoreLexerCore)
