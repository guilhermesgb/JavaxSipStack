//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/core/Host.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/core/Host.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"

@interface AndroidGovNistCoreHost () {
 @public
  JavaNetInetAddress *inetAddress_;
}

- (void)setHostWithNSString:(NSString *)host
                    withInt:(jint)type;

- (jboolean)isIPv6AddressWithNSString:(NSString *)address;

@end

J2OBJC_FIELD_SETTER(AndroidGovNistCoreHost, inetAddress_, JavaNetInetAddress *)

inline jboolean AndroidGovNistCoreHost_get_stripAddressScopeZones();
inline jboolean AndroidGovNistCoreHost_set_stripAddressScopeZones(jboolean value);
inline jboolean *AndroidGovNistCoreHost_getRef_stripAddressScopeZones();
static jboolean AndroidGovNistCoreHost_stripAddressScopeZones = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(AndroidGovNistCoreHost, stripAddressScopeZones, jboolean)

inline jlong AndroidGovNistCoreHost_get_serialVersionUID();
#define AndroidGovNistCoreHost_serialVersionUID -7233564517978323344LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistCoreHost, serialVersionUID, jlong)

__attribute__((unused)) static void AndroidGovNistCoreHost_setHostWithNSString_withInt_(AndroidGovNistCoreHost *self, NSString *host, jint type);

__attribute__((unused)) static jboolean AndroidGovNistCoreHost_isIPv6AddressWithNSString_(AndroidGovNistCoreHost *self, NSString *address);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistCoreHost)

@implementation AndroidGovNistCoreHost

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistCoreHost_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)hostName {
  AndroidGovNistCoreHost_initWithNSString_(self, hostName);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)addrType {
  AndroidGovNistCoreHost_initWithNSString_withInt_(self, name, addrType);
  return self;
}

- (NSString *)encode {
  return [((JavaLangStringBuilder *) nil_chk([self encodeWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])) description];
}

- (JavaLangStringBuilder *)encodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  if (addressType_ == AndroidGovNistCoreHost_IPV6ADDRESS && !AndroidGovNistCoreHost_isIPv6ReferenceWithNSString_(hostname_)) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buffer)) appendWithChar:'['])) appendWithNSString:hostname_])) appendWithChar:']'];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:hostname_];
  }
  return buffer;
}

- (jboolean)isEqual:(id)obj {
  if (obj == nil) return false;
  if (![[self java_getClass] isEqual:[obj java_getClass]]) {
    return false;
  }
  AndroidGovNistCoreHost *otherHost = (AndroidGovNistCoreHost *) cast_chk(obj, [AndroidGovNistCoreHost class]);
  return [((NSString *) nil_chk(otherHost->hostname_)) isEqual:hostname_];
}

- (NSString *)getHostname {
  return hostname_;
}

- (NSString *)getAddress {
  return hostname_;
}

- (NSString *)getIpAddress {
  NSString *rawIpAddress = nil;
  if (hostname_ == nil) return nil;
  if (addressType_ == AndroidGovNistCoreHost_HOSTNAME) {
    @try {
      if (inetAddress_ == nil) JreStrongAssign(&inetAddress_, JavaNetInetAddress_getByNameWithNSString_(hostname_));
      rawIpAddress = [((JavaNetInetAddress *) nil_chk(inetAddress_)) getHostAddress];
    }
    @catch (JavaNetUnknownHostException *ex) {
      [self dbgPrintWithNSString:JreStrcat("$@", @"Could not resolve hostname ", ex)];
    }
  }
  else {
    rawIpAddress = hostname_;
  }
  return rawIpAddress;
}

- (void)setHostnameWithNSString:(NSString *)h {
  AndroidGovNistCoreHost_setHostWithNSString_withInt_(self, h, AndroidGovNistCoreHost_HOSTNAME);
}

- (void)setHostAddressWithNSString:(NSString *)address {
  AndroidGovNistCoreHost_setHostWithNSString_withInt_(self, address, AndroidGovNistCoreHost_IPV4ADDRESS);
}

- (void)setHostWithNSString:(NSString *)host
                    withInt:(jint)type {
  AndroidGovNistCoreHost_setHostWithNSString_withInt_(self, host, type);
}

- (void)setAddressWithNSString:(NSString *)address {
  [self setHostAddressWithNSString:address];
}

- (jboolean)isHostname {
  return addressType_ == AndroidGovNistCoreHost_HOSTNAME;
}

- (jboolean)isIPAddress {
  return addressType_ != AndroidGovNistCoreHost_HOSTNAME;
}

- (JavaNetInetAddress *)getInetAddress {
  if (hostname_ == nil) return nil;
  if (inetAddress_ != nil) return inetAddress_;
  JreStrongAssign(&inetAddress_, JavaNetInetAddress_getByNameWithNSString_(hostname_));
  return inetAddress_;
}

- (jboolean)isIPv6AddressWithNSString:(NSString *)address {
  return AndroidGovNistCoreHost_isIPv6AddressWithNSString_(self, address);
}

+ (jboolean)isIPv6ReferenceWithNSString:(NSString *)address {
  return AndroidGovNistCoreHost_isIPv6ReferenceWithNSString_(address);
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk([self getHostname])) hash]);
}

- (void)dealloc {
  RELEASE_(hostname_);
  RELEASE_(inetAddress_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, 11, -1, -1, -1 },
    { NULL, "Z", 0x2, 12, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 13, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(initWithNSString:withInt:);
  methods[3].selector = @selector(encode);
  methods[4].selector = @selector(encodeWithJavaLangStringBuilder:);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(getHostname);
  methods[7].selector = @selector(getAddress);
  methods[8].selector = @selector(getIpAddress);
  methods[9].selector = @selector(setHostnameWithNSString:);
  methods[10].selector = @selector(setHostAddressWithNSString:);
  methods[11].selector = @selector(setHostWithNSString:withInt:);
  methods[12].selector = @selector(setAddressWithNSString:);
  methods[13].selector = @selector(isHostname);
  methods[14].selector = @selector(isIPAddress);
  methods[15].selector = @selector(getInetAddress);
  methods[16].selector = @selector(isIPv6AddressWithNSString:);
  methods[17].selector = @selector(isIPv6ReferenceWithNSString:);
  methods[18].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stripAddressScopeZones", "Z", .constantValue.asLong = 0, 0xa, -1, 15, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistCoreHost_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "HOSTNAME", "I", .constantValue.asInt = AndroidGovNistCoreHost_HOSTNAME, 0x1c, -1, -1, -1, -1 },
    { "IPV4ADDRESS", "I", .constantValue.asInt = AndroidGovNistCoreHost_IPV4ADDRESS, 0x1c, -1, -1, -1, -1 },
    { "IPV6ADDRESS", "I", .constantValue.asInt = AndroidGovNistCoreHost_IPV6ADDRESS, 0x1c, -1, -1, -1, -1 },
    { "hostname_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "addressType_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "inetAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaLangIllegalArgumentException;", "LNSString;I", "encode", "LJavaLangStringBuilder;", "equals", "LNSObject;", "setHostname", "setHostAddress", "setHost", "setAddress", "LJavaNetUnknownHostException;", "isIPv6Address", "isIPv6Reference", "hashCode", &AndroidGovNistCoreHost_stripAddressScopeZones };
  static const J2ObjcClassInfo _AndroidGovNistCoreHost = { "Host", "android.gov.nist.core", ptrTable, methods, fields, 7, 0x1, 19, 8, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistCoreHost;
}

+ (void)initialize {
  if (self == [AndroidGovNistCoreHost class]) {
    {
      AndroidGovNistCoreHost_stripAddressScopeZones = JavaLangBoolean_getBooleanWithNSString_(@"gov.nist.core.STRIP_ADDR_SCOPES");
    }
    J2OBJC_SET_INITIALIZED(AndroidGovNistCoreHost)
  }
}

@end

void AndroidGovNistCoreHost_init(AndroidGovNistCoreHost *self) {
  AndroidGovNistCoreGenericObject_init(self);
  self->addressType_ = AndroidGovNistCoreHost_HOSTNAME;
}

AndroidGovNistCoreHost *new_AndroidGovNistCoreHost_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreHost, init)
}

AndroidGovNistCoreHost *create_AndroidGovNistCoreHost_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreHost, init)
}

void AndroidGovNistCoreHost_initWithNSString_(AndroidGovNistCoreHost *self, NSString *hostName) {
  AndroidGovNistCoreGenericObject_init(self);
  if (hostName == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"null host name");
  AndroidGovNistCoreHost_setHostWithNSString_withInt_(self, hostName, AndroidGovNistCoreHost_IPV4ADDRESS);
}

AndroidGovNistCoreHost *new_AndroidGovNistCoreHost_initWithNSString_(NSString *hostName) {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreHost, initWithNSString_, hostName)
}

AndroidGovNistCoreHost *create_AndroidGovNistCoreHost_initWithNSString_(NSString *hostName) {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreHost, initWithNSString_, hostName)
}

void AndroidGovNistCoreHost_initWithNSString_withInt_(AndroidGovNistCoreHost *self, NSString *name, jint addrType) {
  AndroidGovNistCoreGenericObject_init(self);
  AndroidGovNistCoreHost_setHostWithNSString_withInt_(self, name, addrType);
}

AndroidGovNistCoreHost *new_AndroidGovNistCoreHost_initWithNSString_withInt_(NSString *name, jint addrType) {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreHost, initWithNSString_withInt_, name, addrType)
}

AndroidGovNistCoreHost *create_AndroidGovNistCoreHost_initWithNSString_withInt_(NSString *name, jint addrType) {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreHost, initWithNSString_withInt_, name, addrType)
}

void AndroidGovNistCoreHost_setHostWithNSString_withInt_(AndroidGovNistCoreHost *self, NSString *host, jint type) {
  JreStrongAssign(&self->inetAddress_, nil);
  if (AndroidGovNistCoreHost_isIPv6AddressWithNSString_(self, host)) self->addressType_ = AndroidGovNistCoreHost_IPV6ADDRESS;
  else self->addressType_ = type;
  if (host != nil) {
    JreStrongAssign(&self->hostname_, [host java_trim]);
    if (self->addressType_ == AndroidGovNistCoreHost_HOSTNAME) JreStrongAssign(&self->hostname_, [((NSString *) nil_chk(self->hostname_)) lowercaseString]);
    jint zoneStart = -1;
    if (self->addressType_ == AndroidGovNistCoreHost_IPV6ADDRESS && AndroidGovNistCoreHost_stripAddressScopeZones && (zoneStart = [((NSString *) nil_chk(self->hostname_)) java_indexOf:'%']) != -1) {
      JreStrongAssign(&self->hostname_, [((NSString *) nil_chk(self->hostname_)) java_substring:0 endIndex:zoneStart]);
      if ([((NSString *) nil_chk(self->hostname_)) hasPrefix:@"["] && ![((NSString *) nil_chk(self->hostname_)) hasSuffix:@"]"]) JreStrAppendStrong(&self->hostname_, "C", ']');
    }
  }
}

jboolean AndroidGovNistCoreHost_isIPv6AddressWithNSString_(AndroidGovNistCoreHost *self, NSString *address) {
  return (address != nil && [address java_indexOf:':'] != -1);
}

jboolean AndroidGovNistCoreHost_isIPv6ReferenceWithNSString_(NSString *address) {
  AndroidGovNistCoreHost_initialize();
  return [((NSString *) nil_chk(address)) charAtWithInt:0] == '[' && [address charAtWithInt:((jint) [address length]) - 1] == ']';
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistCoreHost)
