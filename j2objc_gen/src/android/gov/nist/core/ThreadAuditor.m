//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/core/ThreadAuditor.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/ThreadAuditor.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Thread.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

@interface AndroidGovNistCoreThreadAuditor () {
 @public
  id<JavaUtilMap> threadHandles_;
  jlong pingIntervalInMillisecs_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistCoreThreadAuditor, threadHandles_, id<JavaUtilMap>)

@interface AndroidGovNistCoreThreadAuditor_ThreadHandle () {
 @public
  jboolean isThreadActive_;
  JavaLangThread *thread_;
  AndroidGovNistCoreThreadAuditor *threadAuditor_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistCoreThreadAuditor_ThreadHandle, thread_, JavaLangThread *)
J2OBJC_FIELD_SETTER(AndroidGovNistCoreThreadAuditor_ThreadHandle, threadAuditor_, AndroidGovNistCoreThreadAuditor *)

@implementation AndroidGovNistCoreThreadAuditor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistCoreThreadAuditor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jlong)getPingIntervalInMillisecs {
  return pingIntervalInMillisecs_;
}

- (void)setPingIntervalInMillisecsWithLong:(jlong)value {
  pingIntervalInMillisecs_ = value;
}

- (jboolean)isEnabled {
  return (pingIntervalInMillisecs_ > 0);
}

- (AndroidGovNistCoreThreadAuditor_ThreadHandle *)addCurrentThread {
  AndroidGovNistCoreThreadAuditor_ThreadHandle *threadHandle = create_AndroidGovNistCoreThreadAuditor_ThreadHandle_initWithAndroidGovNistCoreThreadAuditor_withAndroidGovNistCoreThreadAuditor_(self, self);
  if ([self isEnabled]) {
    [((id<JavaUtilMap>) nil_chk(threadHandles_)) putWithId:JavaLangThread_currentThread() withId:threadHandle];
  }
  return threadHandle;
}

- (void)removeThreadWithJavaLangThread:(JavaLangThread *)thread {
  [((id<JavaUtilMap>) nil_chk(threadHandles_)) removeWithId:thread];
}

- (void)pingWithAndroidGovNistCoreThreadAuditor_ThreadHandle:(AndroidGovNistCoreThreadAuditor_ThreadHandle *)threadHandle {
  [((AndroidGovNistCoreThreadAuditor_ThreadHandle *) nil_chk(threadHandle)) setThreadActiveWithBoolean:true];
}

- (void)reset {
  [((id<JavaUtilMap>) nil_chk(threadHandles_)) clear];
}

- (NSString *)auditThreads {
  NSString *auditReport = nil;
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(threadHandles_)) values])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    AndroidGovNistCoreThreadAuditor_ThreadHandle *threadHandle = [it next];
    if (![((AndroidGovNistCoreThreadAuditor_ThreadHandle *) nil_chk(threadHandle)) isThreadActive]) {
      JavaLangThread *thread = [threadHandle getThread];
      if (auditReport == nil) {
        auditReport = @"Thread Auditor Report:\n";
      }
      JreStrAppend(&auditReport, "$$$", @"   Thread [", [((JavaLangThread *) nil_chk(thread)) getName], @"] has failed to respond to an audit request.\n");
    }
    [threadHandle setThreadActiveWithBoolean:false];
  }
  return auditReport;
}

- (NSString *)description {
  @synchronized(self) {
    NSString *toString = @"Thread Auditor - List of monitored threads:\n";
    id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(threadHandles_)) values])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      AndroidGovNistCoreThreadAuditor_ThreadHandle *threadHandle = [it next];
      JreStrAppend(&toString, "$$C", @"   ", [((AndroidGovNistCoreThreadAuditor_ThreadHandle *) nil_chk(threadHandle)) description], 0x000a);
    }
    return toString;
  }
}

- (void)dealloc {
  RELEASE_(threadHandles_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreThreadAuditor_ThreadHandle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x21, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getPingIntervalInMillisecs);
  methods[2].selector = @selector(setPingIntervalInMillisecsWithLong:);
  methods[3].selector = @selector(isEnabled);
  methods[4].selector = @selector(addCurrentThread);
  methods[5].selector = @selector(removeThreadWithJavaLangThread:);
  methods[6].selector = @selector(pingWithAndroidGovNistCoreThreadAuditor_ThreadHandle:);
  methods[7].selector = @selector(reset);
  methods[8].selector = @selector(auditThreads);
  methods[9].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "threadHandles_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
    { "pingIntervalInMillisecs_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setPingIntervalInMillisecs", "J", "removeThread", "LJavaLangThread;", "ping", "LAndroidGovNistCoreThreadAuditor_ThreadHandle;", "toString", "Ljava/util/Map<Ljava/lang/Thread;Landroid/gov/nist/core/ThreadAuditor$ThreadHandle;>;" };
  static const J2ObjcClassInfo _AndroidGovNistCoreThreadAuditor = { "ThreadAuditor", "android.gov.nist.core", ptrTable, methods, fields, 7, 0x1, 10, 2, -1, 5, -1, -1, -1 };
  return &_AndroidGovNistCoreThreadAuditor;
}

@end

void AndroidGovNistCoreThreadAuditor_init(AndroidGovNistCoreThreadAuditor *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->threadHandles_, new_JavaUtilConcurrentConcurrentHashMap_init());
  self->pingIntervalInMillisecs_ = 0;
}

AndroidGovNistCoreThreadAuditor *new_AndroidGovNistCoreThreadAuditor_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreThreadAuditor, init)
}

AndroidGovNistCoreThreadAuditor *create_AndroidGovNistCoreThreadAuditor_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreThreadAuditor, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistCoreThreadAuditor)

@implementation AndroidGovNistCoreThreadAuditor_ThreadHandle

- (instancetype)initWithAndroidGovNistCoreThreadAuditor:(AndroidGovNistCoreThreadAuditor *)outer$
                    withAndroidGovNistCoreThreadAuditor:(AndroidGovNistCoreThreadAuditor *)aThreadAuditor {
  AndroidGovNistCoreThreadAuditor_ThreadHandle_initWithAndroidGovNistCoreThreadAuditor_withAndroidGovNistCoreThreadAuditor_(self, outer$, aThreadAuditor);
  return self;
}

- (jboolean)isThreadActive {
  return isThreadActive_;
}

- (void)setThreadActiveWithBoolean:(jboolean)value {
  isThreadActive_ = value;
}

- (JavaLangThread *)getThread {
  return thread_;
}

- (void)ping {
  [((AndroidGovNistCoreThreadAuditor *) nil_chk(threadAuditor_)) pingWithAndroidGovNistCoreThreadAuditor_ThreadHandle:self];
}

- (jlong)getPingIntervalInMillisecs {
  return [((AndroidGovNistCoreThreadAuditor *) nil_chk(threadAuditor_)) getPingIntervalInMillisecs];
}

- (NSString *)description {
  JavaLangStringBuilder *toString = [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_init() appendWithNSString:@"Thread Name: "])) appendWithNSString:[((JavaLangThread *) nil_chk(thread_)) getName]])) appendWithNSString:@", Alive: "])) appendWithBoolean:[((JavaLangThread *) nil_chk(thread_)) isAlive]];
  return [((JavaLangStringBuilder *) nil_chk(toString)) description];
}

- (void)dealloc {
  RELEASE_(thread_);
  RELEASE_(threadAuditor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidGovNistCoreThreadAuditor:withAndroidGovNistCoreThreadAuditor:);
  methods[1].selector = @selector(isThreadActive);
  methods[2].selector = @selector(setThreadActiveWithBoolean:);
  methods[3].selector = @selector(getThread);
  methods[4].selector = @selector(ping);
  methods[5].selector = @selector(getPingIntervalInMillisecs);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "isThreadActive_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "thread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "threadAuditor_", "LAndroidGovNistCoreThreadAuditor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidGovNistCoreThreadAuditor;", "setThreadActive", "Z", "toString" };
  static const J2ObjcClassInfo _AndroidGovNistCoreThreadAuditor_ThreadHandle = { "ThreadHandle", "android.gov.nist.core", ptrTable, methods, fields, 7, 0x1, 7, 3, 0, -1, -1, -1, -1 };
  return &_AndroidGovNistCoreThreadAuditor_ThreadHandle;
}

@end

void AndroidGovNistCoreThreadAuditor_ThreadHandle_initWithAndroidGovNistCoreThreadAuditor_withAndroidGovNistCoreThreadAuditor_(AndroidGovNistCoreThreadAuditor_ThreadHandle *self, AndroidGovNistCoreThreadAuditor *outer$, AndroidGovNistCoreThreadAuditor *aThreadAuditor) {
  NSObject_init(self);
  self->isThreadActive_ = false;
  JreStrongAssign(&self->thread_, JavaLangThread_currentThread());
  JreStrongAssign(&self->threadAuditor_, aThreadAuditor);
}

AndroidGovNistCoreThreadAuditor_ThreadHandle *new_AndroidGovNistCoreThreadAuditor_ThreadHandle_initWithAndroidGovNistCoreThreadAuditor_withAndroidGovNistCoreThreadAuditor_(AndroidGovNistCoreThreadAuditor *outer$, AndroidGovNistCoreThreadAuditor *aThreadAuditor) {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreThreadAuditor_ThreadHandle, initWithAndroidGovNistCoreThreadAuditor_withAndroidGovNistCoreThreadAuditor_, outer$, aThreadAuditor)
}

AndroidGovNistCoreThreadAuditor_ThreadHandle *create_AndroidGovNistCoreThreadAuditor_ThreadHandle_initWithAndroidGovNistCoreThreadAuditor_withAndroidGovNistCoreThreadAuditor_(AndroidGovNistCoreThreadAuditor *outer$, AndroidGovNistCoreThreadAuditor *aThreadAuditor) {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreThreadAuditor_ThreadHandle, initWithAndroidGovNistCoreThreadAuditor_withAndroidGovNistCoreThreadAuditor_, outer$, aThreadAuditor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistCoreThreadAuditor_ThreadHandle)
