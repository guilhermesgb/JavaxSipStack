//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/core/InternalErrorHandler.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/InternalErrorHandler.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "org/slf4j/Logger.h"

@implementation AndroidGovNistCoreInternalErrorHandler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistCoreInternalErrorHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)handleExceptionWithJavaLangException:(JavaLangException *)ex {
  AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(ex);
}

+ (void)handleExceptionWithJavaLangException:(JavaLangException *)ex
                          withOrgSlf4jLogger:(id<OrgSlf4jLogger>)stackLogger {
  AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_withOrgSlf4jLogger_(ex, stackLogger);
}

+ (void)handleExceptionWithNSString:(NSString *)emsg {
  AndroidGovNistCoreInternalErrorHandler_handleExceptionWithNSString_(emsg);
}

+ (void)handleExceptionWithNSString:(NSString *)emsg
                 withOrgSlf4jLogger:(id<OrgSlf4jLogger>)stackLogger {
  AndroidGovNistCoreInternalErrorHandler_handleExceptionWithNSString_withOrgSlf4jLogger_(emsg, stackLogger);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(handleExceptionWithJavaLangException:);
  methods[2].selector = @selector(handleExceptionWithJavaLangException:withOrgSlf4jLogger:);
  methods[3].selector = @selector(handleExceptionWithNSString:);
  methods[4].selector = @selector(handleExceptionWithNSString:withOrgSlf4jLogger:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "handleException", "LJavaLangException;", "LJavaLangRuntimeException;", "LJavaLangException;LOrgSlf4jLogger;", "LNSString;", "LNSString;LOrgSlf4jLogger;" };
  static const J2ObjcClassInfo _AndroidGovNistCoreInternalErrorHandler = { "InternalErrorHandler", "android.gov.nist.core", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistCoreInternalErrorHandler;
}

@end

void AndroidGovNistCoreInternalErrorHandler_init(AndroidGovNistCoreInternalErrorHandler *self) {
  NSObject_init(self);
}

AndroidGovNistCoreInternalErrorHandler *new_AndroidGovNistCoreInternalErrorHandler_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreInternalErrorHandler, init)
}

AndroidGovNistCoreInternalErrorHandler *create_AndroidGovNistCoreInternalErrorHandler_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreInternalErrorHandler, init)
}

void AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_(JavaLangException *ex) {
  AndroidGovNistCoreInternalErrorHandler_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Unexpected internal error  ", [((JavaLangException *) nil_chk(ex)) getMessage])];
  [ex printStackTrace];
  @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$", @"Unexpected internal error  ", [ex getMessage]), ex);
}

void AndroidGovNistCoreInternalErrorHandler_handleExceptionWithJavaLangException_withOrgSlf4jLogger_(JavaLangException *ex, id<OrgSlf4jLogger> stackLogger) {
  AndroidGovNistCoreInternalErrorHandler_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Unexpected internal error  ", [((JavaLangException *) nil_chk(ex)) getMessage])];
  [((id<OrgSlf4jLogger>) nil_chk(stackLogger)) errorWithNSString:JreStrcat("$$", @"UNEXPECTED INTERNAL ERROR ", [ex getMessage])];
  [ex printStackTrace];
  [stackLogger errorWithNSString:@"StackTrace" withNSException:ex];
  @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$", @"Unexpected internal error !! ", [ex getMessage]), ex);
}

void AndroidGovNistCoreInternalErrorHandler_handleExceptionWithNSString_(NSString *emsg) {
  AndroidGovNistCoreInternalErrorHandler_initialize();
  [create_JavaLangException_init() printStackTrace];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Unexepcted INTERNAL ERROR !!"];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:emsg];
  @throw create_JavaLangRuntimeException_initWithNSString_(emsg);
}

void AndroidGovNistCoreInternalErrorHandler_handleExceptionWithNSString_withOrgSlf4jLogger_(NSString *emsg, id<OrgSlf4jLogger> stackLogger) {
  AndroidGovNistCoreInternalErrorHandler_initialize();
  [((id<OrgSlf4jLogger>) nil_chk(stackLogger)) errorWithNSString:@"Unexepcted INTERNAL ERROR !!"];
  [stackLogger errorWithNSString:emsg];
  @throw create_JavaLangRuntimeException_initWithNSString_(emsg);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistCoreInternalErrorHandler)
