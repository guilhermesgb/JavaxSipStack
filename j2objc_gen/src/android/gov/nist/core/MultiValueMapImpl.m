//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/core/MultiValueMapImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/MultiValueMapImpl.h"
#include "java/lang/Boolean.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/function/BiConsumer.h"
#include "java/util/function/BiFunction.h"
#include "java/util/function/Function.h"

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface AndroidGovNistCoreMultiValueMapImpl () {
 @public
  JavaUtilHashMap *map_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistCoreMultiValueMapImpl, map_, JavaUtilHashMap *)

inline jlong AndroidGovNistCoreMultiValueMapImpl_get_serialVersionUID();
#define AndroidGovNistCoreMultiValueMapImpl_serialVersionUID 4275505380960964605LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistCoreMultiValueMapImpl, serialVersionUID, jlong)

@implementation AndroidGovNistCoreMultiValueMapImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistCoreMultiValueMapImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilList>)putWithNSString:(NSString *)key
                             withId:(id)value {
  JavaUtilArrayList *keyList = nil;
  if (map_ != nil) {
    keyList = [map_ getWithId:key];
  }
  if (keyList == nil) {
    keyList = create_JavaUtilArrayList_init();
    [((JavaUtilHashMap *) nil_chk([self getMap])) putWithId:key withId:keyList];
  }
  [keyList addWithId:value];
  return keyList;
}

- (jboolean)containsValueWithId:(id)value {
  id<JavaUtilSet> pairs = nil;
  if (map_ != nil) {
    pairs = [map_ entrySet];
  }
  if (pairs == nil) return false;
  id<JavaUtilIterator> pairsIterator = [pairs iterator];
  while ([((id<JavaUtilIterator>) nil_chk(pairsIterator)) hasNext]) {
    id<JavaUtilMap_Entry> keyValuePair = (id<JavaUtilMap_Entry>) cast_check(([pairsIterator next]), JavaUtilMap_Entry_class_());
    JavaUtilArrayList *list = (JavaUtilArrayList *) cast_chk(([((id<JavaUtilMap_Entry>) nil_chk(keyValuePair)) getValue]), [JavaUtilArrayList class]);
    if ([((JavaUtilArrayList *) nil_chk(list)) containsWithId:value]) return true;
  }
  return false;
}

- (void)clear {
  if (map_ != nil) {
    id<JavaUtilSet> pairs = [map_ entrySet];
    id<JavaUtilIterator> pairsIterator = [((id<JavaUtilSet>) nil_chk(pairs)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(pairsIterator)) hasNext]) {
      id<JavaUtilMap_Entry> keyValuePair = (id<JavaUtilMap_Entry>) cast_check(([pairsIterator next]), JavaUtilMap_Entry_class_());
      JavaUtilArrayList *list = (JavaUtilArrayList *) cast_chk(([((id<JavaUtilMap_Entry>) nil_chk(keyValuePair)) getValue]), [JavaUtilArrayList class]);
      [((JavaUtilArrayList *) nil_chk(list)) clear];
    }
    [((JavaUtilHashMap *) nil_chk(map_)) clear];
  }
}

- (id<JavaUtilCollection>)values {
  if (map_ == nil) {
    return create_JavaUtilArrayList_init();
  }
  JavaUtilArrayList *returnList = create_JavaUtilArrayList_initWithInt_([map_ size]);
  id<JavaUtilSet> pairs = [((JavaUtilHashMap *) nil_chk(map_)) entrySet];
  id<JavaUtilIterator> pairsIterator = [((id<JavaUtilSet>) nil_chk(pairs)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(pairsIterator)) hasNext]) {
    id<JavaUtilMap_Entry> keyValuePair = (id<JavaUtilMap_Entry>) cast_check(([pairsIterator next]), JavaUtilMap_Entry_class_());
    JavaUtilArrayList *list = (JavaUtilArrayList *) cast_chk(([((id<JavaUtilMap_Entry>) nil_chk(keyValuePair)) getValue]), [JavaUtilArrayList class]);
    IOSObjectArray *values = [((JavaUtilArrayList *) nil_chk(list)) toArray];
    for (jint ii = 0; ii < ((IOSObjectArray *) nil_chk(values))->size_; ii++) {
      [returnList addWithId:IOSObjectArray_Get(values, ii)];
    }
  }
  return returnList;
}

- (id)java_clone {
  AndroidGovNistCoreMultiValueMapImpl *obj = create_AndroidGovNistCoreMultiValueMapImpl_init();
  if (map_ != nil) {
    JreStrongAssign(&obj->map_, (JavaUtilHashMap *) cast_chk([self->map_ java_clone], [JavaUtilHashMap class]));
  }
  return obj;
}

- (jint)size {
  if (map_ == nil) {
    return 0;
  }
  return [self->map_ size];
}

- (jboolean)containsKeyWithId:(id)key {
  if (map_ == nil) {
    return false;
  }
  return [map_ containsKeyWithId:key];
}

- (id<JavaUtilSet>)entrySet {
  if (map_ == nil) {
    return create_JavaUtilHashSet_init();
  }
  return [map_ entrySet];
}

- (jboolean)isEmpty {
  if (map_ == nil) {
    return true;
  }
  return [map_ isEmpty];
}

- (id<JavaUtilSet>)keySet {
  if (map_ == nil) {
    return create_JavaUtilHashSet_init();
  }
  return [self->map_ keySet];
}

- (id)removeWithNSString:(NSString *)key
                  withId:(id)item {
  if (map_ == nil) {
    return nil;
  }
  JavaUtilArrayList *list = [self->map_ getWithId:key];
  if (list == nil) {
    return nil;
  }
  else {
    return JavaLangBoolean_valueOfWithBoolean_([list removeWithId:item]);
  }
}

- (id<JavaUtilList>)getWithId:(id)key {
  if (map_ == nil) {
    return nil;
  }
  return [map_ getWithId:key];
}

- (id<JavaUtilList>)putWithId:(NSString *)key
                       withId:(id<JavaUtilList>)value {
  return [((JavaUtilHashMap *) nil_chk([self getMap])) putWithId:key withId:(JavaUtilArrayList *) cast_chk(value, [JavaUtilArrayList class])];
}

- (id<JavaUtilList>)removeWithId:(id)key {
  if (map_ == nil) {
    return nil;
  }
  return [map_ removeWithId:key];
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)mapToPut {
  for (NSString * __strong k in nil_chk([((id<JavaUtilMap>) nil_chk(mapToPut)) keySet])) {
    JavaUtilArrayList *al = create_JavaUtilArrayList_init();
    [al addAllWithJavaUtilCollection:[mapToPut getWithId:k]];
    [((JavaUtilHashMap *) nil_chk([self getMap])) putWithId:k withId:al];
  }
}

- (JavaUtilHashMap *)getMap {
  if (map_ == nil) {
    JreStrongAssignAndConsume(&map_, new_JavaUtilHashMap_initWithInt_(0));
  }
  return map_;
}

- (id<JavaUtilList>)computeWithId:(NSString *)arg0
   withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1 {
  return JavaUtilMap_computeWithId_withJavaUtilFunctionBiFunction_(self, arg0, arg1);
}

- (id<JavaUtilList>)computeIfAbsentWithId:(NSString *)arg0
             withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg1 {
  return JavaUtilMap_computeIfAbsentWithId_withJavaUtilFunctionFunction_(self, arg0, arg1);
}

- (id<JavaUtilList>)computeIfPresentWithId:(NSString *)arg0
            withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1 {
  return JavaUtilMap_computeIfPresentWithId_withJavaUtilFunctionBiFunction_(self, arg0, arg1);
}

- (void)forEachWithJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)arg0 {
  JavaUtilMap_forEachWithJavaUtilFunctionBiConsumer_(self, arg0);
}

- (id<JavaUtilList>)getOrDefaultWithId:(id)arg0
                                withId:(id<JavaUtilList>)arg1 {
  return JavaUtilMap_getOrDefaultWithId_withId_(self, arg0, arg1);
}

- (id<JavaUtilList>)mergeWithId:(NSString *)arg0
                         withId:(id<JavaUtilList>)arg1
 withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg2 {
  return JavaUtilMap_mergeWithId_withId_withJavaUtilFunctionBiFunction_(self, arg0, arg1, arg2);
}

- (id<JavaUtilList>)putIfAbsentWithId:(NSString *)arg0
                               withId:(id<JavaUtilList>)arg1 {
  return JavaUtilMap_putIfAbsentWithId_withId_(self, arg0, arg1);
}

- (jboolean)removeWithId:(id)arg0
                  withId:(id)arg1 {
  return JavaUtilMap_removeWithId_withId_(self, arg0, arg1);
}

- (id<JavaUtilList>)replaceWithId:(NSString *)arg0
                           withId:(id<JavaUtilList>)arg1 {
  return JavaUtilMap_replaceWithId_withId_(self, arg0, arg1);
}

- (jboolean)replaceWithId:(NSString *)arg0
                   withId:(id<JavaUtilList>)arg1
                   withId:(id<JavaUtilList>)arg2 {
  return JavaUtilMap_replaceWithId_withId_withId_(self, arg0, arg1, arg2);
}

- (void)replaceAllWithJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg0 {
  JavaUtilMap_replaceAllWithJavaUtilFunctionBiFunction_(self, arg0);
}

- (void)dealloc {
  RELEASE_(map_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 1, -1, 9, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 10, 4, -1, 11, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 0, 12, -1, 13, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 8, 4, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, 16, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x1, -1, -1, -1, 17, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(putWithNSString:withId:);
  methods[2].selector = @selector(containsValueWithId:);
  methods[3].selector = @selector(clear);
  methods[4].selector = @selector(values);
  methods[5].selector = @selector(java_clone);
  methods[6].selector = @selector(size);
  methods[7].selector = @selector(containsKeyWithId:);
  methods[8].selector = @selector(entrySet);
  methods[9].selector = @selector(isEmpty);
  methods[10].selector = @selector(keySet);
  methods[11].selector = @selector(removeWithNSString:withId:);
  methods[12].selector = @selector(getWithId:);
  methods[13].selector = @selector(putWithId:withId:);
  methods[14].selector = @selector(removeWithId:);
  methods[15].selector = @selector(putAllWithJavaUtilMap:);
  methods[16].selector = @selector(getMap);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "map_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 18, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistCoreMultiValueMapImpl_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "put", "LNSString;LNSObject;", "(Ljava/lang/String;TV;)Ljava/util/List<TV;>;", "containsValue", "LNSObject;", "clone", "containsKey", "()Ljava/util/Set<Ljava/lang/String;>;", "remove", "(Ljava/lang/String;TV;)Ljava/lang/Object;", "get", "(Ljava/lang/Object;)Ljava/util/List<TV;>;", "LNSString;LJavaUtilList;", "(Ljava/lang/String;Ljava/util/List<TV;>;)Ljava/util/List<TV;>;", "putAll", "LJavaUtilMap;", "(Ljava/util/Map<+Ljava/lang/String;+Ljava/util/List<TV;>;>;)V", "()Ljava/util/HashMap<Ljava/lang/String;Ljava/util/ArrayList<TV;>;>;", "Ljava/util/HashMap<Ljava/lang/String;Ljava/util/ArrayList<TV;>;>;", "<V:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Map<Ljava/lang/String;Ljava/util/List<TV;>;>;Ljava/lang/Cloneable;" };
  static const J2ObjcClassInfo _AndroidGovNistCoreMultiValueMapImpl = { "MultiValueMapImpl", "android.gov.nist.core", ptrTable, methods, fields, 7, 0x1, 17, 2, -1, -1, -1, 19, -1 };
  return &_AndroidGovNistCoreMultiValueMapImpl;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void AndroidGovNistCoreMultiValueMapImpl_init(AndroidGovNistCoreMultiValueMapImpl *self) {
  NSObject_init(self);
  JreStrongAssign(&self->map_, nil);
}

AndroidGovNistCoreMultiValueMapImpl *new_AndroidGovNistCoreMultiValueMapImpl_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreMultiValueMapImpl, init)
}

AndroidGovNistCoreMultiValueMapImpl *create_AndroidGovNistCoreMultiValueMapImpl_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreMultiValueMapImpl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistCoreMultiValueMapImpl)
