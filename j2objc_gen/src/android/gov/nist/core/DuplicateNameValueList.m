//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/core/DuplicateNameValueList.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/DuplicateNameValueList.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/core/MultiValueMapImpl.h"
#include "android/gov/nist/core/NameValue.h"
#include "android/gov/nist/core/Separators.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface AndroidGovNistCoreDuplicateNameValueList () {
 @public
  AndroidGovNistCoreMultiValueMapImpl *nameValueMap_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistCoreDuplicateNameValueList, nameValueMap_, AndroidGovNistCoreMultiValueMapImpl *)

inline jlong AndroidGovNistCoreDuplicateNameValueList_get_serialVersionUID();
#define AndroidGovNistCoreDuplicateNameValueList_serialVersionUID -5611332957903796952LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistCoreDuplicateNameValueList, serialVersionUID, jlong)

@implementation AndroidGovNistCoreDuplicateNameValueList

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistCoreDuplicateNameValueList_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)encode {
  return [((JavaLangStringBuilder *) nil_chk([self encodeWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])) description];
}

- (JavaLangStringBuilder *)encodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  if (![((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(nameValueMap_)) isEmpty]) {
    id<JavaUtilIterator> iterator = [((id<JavaUtilCollection>) nil_chk([((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(nameValueMap_)) values])) iterator];
    if ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      while (true) {
        id obj = [iterator next];
        if ([obj isKindOfClass:[AndroidGovNistCoreGenericObject class]]) {
          AndroidGovNistCoreGenericObject *gobj = (AndroidGovNistCoreGenericObject *) cast_chk(obj, [AndroidGovNistCoreGenericObject class]);
          [((AndroidGovNistCoreGenericObject *) nil_chk(gobj)) encodeWithJavaLangStringBuilder:buffer];
        }
        else {
          [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:[nil_chk(obj) description]];
        }
        if ([iterator hasNext]) [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:AndroidGovNistCoreSeparators_SEMICOLON];
        else break;
      }
    }
  }
  return buffer;
}

- (NSString *)description {
  return [self encode];
}

- (void)setWithAndroidGovNistCoreNameValue:(AndroidGovNistCoreNameValue *)nv {
  [((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(self->nameValueMap_)) putWithNSString:[((NSString *) nil_chk([((AndroidGovNistCoreNameValue *) nil_chk(nv)) getName])) lowercaseString] withId:nv];
}

- (void)setWithNSString:(NSString *)name
                 withId:(id)value {
  AndroidGovNistCoreNameValue *nameValue = create_AndroidGovNistCoreNameValue_initWithNSString_withId_(name, value);
  [((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(nameValueMap_)) putWithNSString:[((NSString *) nil_chk(name)) lowercaseString] withId:nameValue];
}

- (jboolean)isEqual:(id)otherObject {
  if (otherObject == nil) {
    return false;
  }
  if (![[otherObject java_getClass] isEqual:[self java_getClass]]) {
    return false;
  }
  AndroidGovNistCoreDuplicateNameValueList *other = (AndroidGovNistCoreDuplicateNameValueList *) cast_chk(otherObject, [AndroidGovNistCoreDuplicateNameValueList class]);
  if ([((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(nameValueMap_)) size] != [((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(other->nameValueMap_)) size]) {
    return false;
  }
  id<JavaUtilIterator> li = [((id<JavaUtilSet>) nil_chk([((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(self->nameValueMap_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(li)) hasNext]) {
    NSString *key = [li next];
    id<JavaUtilCollection> nv1 = [self getNameValueWithNSString:key];
    id<JavaUtilCollection> nv2 = [((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(other->nameValueMap_)) getWithId:key];
    if (nv2 == nil) return false;
    else if (![nv2 isEqual:nv1]) return false;
  }
  return true;
}

- (id)getValueWithNSString:(NSString *)name {
  id<JavaUtilCollection> nv = [self getNameValueWithNSString:[((NSString *) nil_chk(name)) lowercaseString]];
  if (nv != nil) return nv;
  else return nil;
}

- (id<JavaUtilCollection>)getNameValueWithNSString:(NSString *)name {
  return [((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(self->nameValueMap_)) getWithId:[((NSString *) nil_chk(name)) lowercaseString]];
}

- (jboolean)hasNameValueWithNSString:(NSString *)name {
  return [((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(nameValueMap_)) containsKeyWithId:[((NSString *) nil_chk(name)) lowercaseString]];
}

- (jboolean)delete__WithNSString:(NSString *)name {
  NSString *lcName = [((NSString *) nil_chk(name)) lowercaseString];
  if ([((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(self->nameValueMap_)) containsKeyWithId:lcName]) {
    [((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(self->nameValueMap_)) removeWithId:lcName];
    return true;
  }
  else {
    return false;
  }
}

- (id)java_clone {
  AndroidGovNistCoreDuplicateNameValueList *retval = create_AndroidGovNistCoreDuplicateNameValueList_init();
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(self->nameValueMap_)) values])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    [retval setWithAndroidGovNistCoreNameValue:(AndroidGovNistCoreNameValue *) cast_chk([((AndroidGovNistCoreNameValue *) nil_chk(([it next]))) java_clone], [AndroidGovNistCoreNameValue class])];
  }
  return retval;
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilCollection>) nil_chk([((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(self->nameValueMap_)) values])) iterator];
}

- (id<JavaUtilIterator>)getNames {
  return [((id<JavaUtilSet>) nil_chk([((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(self->nameValueMap_)) keySet])) iterator];
}

- (NSString *)getParameterWithNSString:(NSString *)name {
  id val = [self getValueWithNSString:name];
  if (val == nil) return nil;
  if ([val isKindOfClass:[AndroidGovNistCoreGenericObject class]]) return [((AndroidGovNistCoreGenericObject *) cast_chk(val, [AndroidGovNistCoreGenericObject class])) encode];
  else return [val description];
}

- (void)clear {
  [((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(nameValueMap_)) clear];
}

- (jboolean)isEmpty {
  return [((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(self->nameValueMap_)) isEmpty];
}

- (AndroidGovNistCoreNameValue *)putWithNSString:(NSString *)key
                 withAndroidGovNistCoreNameValue:(AndroidGovNistCoreNameValue *)value {
  return (AndroidGovNistCoreNameValue *) cast_chk([((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(self->nameValueMap_)) putWithNSString:key withId:value], [AndroidGovNistCoreNameValue class]);
}

- (AndroidGovNistCoreNameValue *)removeWithId:(id)key {
  return (AndroidGovNistCoreNameValue *) cast_chk([((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(self->nameValueMap_)) removeWithId:key], [AndroidGovNistCoreNameValue class]);
}

- (jint)size {
  return [((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(self->nameValueMap_)) size];
}

- (id<JavaUtilCollection>)values {
  return [((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(self->nameValueMap_)) values];
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilSet>) nil_chk([((AndroidGovNistCoreMultiValueMapImpl *) nil_chk(self->nameValueMap_)) keySet])) hash]);
}

- (void)dealloc {
  RELEASE_(nameValueMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValue;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValue;", 0x1, 19, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 20, -1, -1 },
    { NULL, "I", 0x1, 21, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(encode);
  methods[2].selector = @selector(encodeWithJavaLangStringBuilder:);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(setWithAndroidGovNistCoreNameValue:);
  methods[5].selector = @selector(setWithNSString:withId:);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(getValueWithNSString:);
  methods[8].selector = @selector(getNameValueWithNSString:);
  methods[9].selector = @selector(hasNameValueWithNSString:);
  methods[10].selector = @selector(delete__WithNSString:);
  methods[11].selector = @selector(java_clone);
  methods[12].selector = @selector(iterator);
  methods[13].selector = @selector(getNames);
  methods[14].selector = @selector(getParameterWithNSString:);
  methods[15].selector = @selector(clear);
  methods[16].selector = @selector(isEmpty);
  methods[17].selector = @selector(putWithNSString:withAndroidGovNistCoreNameValue:);
  methods[18].selector = @selector(removeWithId:);
  methods[19].selector = @selector(size);
  methods[20].selector = @selector(values);
  methods[21].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nameValueMap_", "LAndroidGovNistCoreMultiValueMapImpl;", .constantValue.asLong = 0, 0x2, -1, -1, 22, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistCoreDuplicateNameValueList_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "encode", "LJavaLangStringBuilder;", "toString", "set", "LAndroidGovNistCoreNameValue;", "LNSString;LNSObject;", "equals", "LNSObject;", "getValue", "LNSString;", "getNameValue", "hasNameValue", "delete", "clone", "()Ljava/util/Iterator<Landroid/gov/nist/core/NameValue;>;", "()Ljava/util/Iterator<Ljava/lang/String;>;", "getParameter", "put", "LNSString;LAndroidGovNistCoreNameValue;", "remove", "()Ljava/util/Collection<Landroid/gov/nist/core/NameValue;>;", "hashCode", "Landroid/gov/nist/core/MultiValueMapImpl<Landroid/gov/nist/core/NameValue;>;" };
  static const J2ObjcClassInfo _AndroidGovNistCoreDuplicateNameValueList = { "DuplicateNameValueList", "android.gov.nist.core", ptrTable, methods, fields, 7, 0x1, 22, 2, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistCoreDuplicateNameValueList;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void AndroidGovNistCoreDuplicateNameValueList_init(AndroidGovNistCoreDuplicateNameValueList *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->nameValueMap_, new_AndroidGovNistCoreMultiValueMapImpl_init());
}

AndroidGovNistCoreDuplicateNameValueList *new_AndroidGovNistCoreDuplicateNameValueList_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreDuplicateNameValueList, init)
}

AndroidGovNistCoreDuplicateNameValueList *create_AndroidGovNistCoreDuplicateNameValueList_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreDuplicateNameValueList, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistCoreDuplicateNameValueList)
