//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/core/HostPort.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/GenericObject.h"
#include "android/gov/nist/core/Host.h"
#include "android/gov/nist/core/HostPort.h"
#include "java/lang/StringBuilder.h"
#include "java/net/InetAddress.h"

inline jlong AndroidGovNistCoreHostPort_get_serialVersionUID();
#define AndroidGovNistCoreHostPort_serialVersionUID -7103412227431884523LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidGovNistCoreHostPort, serialVersionUID, jlong)

@implementation AndroidGovNistCoreHostPort

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistCoreHostPort_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)encode {
  return [((JavaLangStringBuilder *) nil_chk([self encodeWithJavaLangStringBuilder:create_JavaLangStringBuilder_init()])) description];
}

- (JavaLangStringBuilder *)encodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer {
  [((AndroidGovNistCoreHost *) nil_chk(host_)) encodeWithJavaLangStringBuilder:buffer];
  if (port_ != -1) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:AndroidGovNistCoreGenericObject_COLON])) appendWithInt:port_];
  return buffer;
}

- (jboolean)isEqual:(id)other {
  if (other == nil) return false;
  if ([self java_getClass] != [other java_getClass]) {
    return false;
  }
  AndroidGovNistCoreHostPort *that = (AndroidGovNistCoreHostPort *) cast_chk(other, [AndroidGovNistCoreHostPort class]);
  return port_ == that->port_ && [((AndroidGovNistCoreHost *) nil_chk(host_)) isEqual:that->host_];
}

- (AndroidGovNistCoreHost *)getHost {
  return host_;
}

- (jint)getPort {
  return port_;
}

- (jboolean)hasPort {
  return port_ != -1;
}

- (void)removePort {
  port_ = -1;
}

- (void)setHostWithAndroidGovNistCoreHost:(AndroidGovNistCoreHost *)h {
  JreStrongAssign(&host_, h);
}

- (void)setPortWithInt:(jint)p {
  port_ = p;
}

- (JavaNetInetAddress *)getInetAddress {
  if (host_ == nil) return nil;
  else return [host_ getInetAddress];
}

- (void)mergeWithId:(id)mergeObject {
  [super mergeWithId:mergeObject];
  if (port_ == -1) port_ = ((AndroidGovNistCoreHostPort *) nil_chk(((AndroidGovNistCoreHostPort *) cast_chk(mergeObject, [AndroidGovNistCoreHostPort class]))))->port_;
}

- (id)java_clone {
  AndroidGovNistCoreHostPort *retval = (AndroidGovNistCoreHostPort *) cast_chk([super java_clone], [AndroidGovNistCoreHostPort class]);
  if (self->host_ != nil) JreStrongAssign(&((AndroidGovNistCoreHostPort *) nil_chk(retval))->host_, (AndroidGovNistCoreHost *) cast_chk([self->host_ java_clone], [AndroidGovNistCoreHost class]));
  return retval;
}

- (NSString *)description {
  return [self encode];
}

- (NSUInteger)hash {
  return ((jint) [((AndroidGovNistCoreHost *) nil_chk(self->host_)) hash]) + self->port_;
}

- (void)dealloc {
  RELEASE_(host_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreHost;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(encode);
  methods[2].selector = @selector(encodeWithJavaLangStringBuilder:);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(getHost);
  methods[5].selector = @selector(getPort);
  methods[6].selector = @selector(hasPort);
  methods[7].selector = @selector(removePort);
  methods[8].selector = @selector(setHostWithAndroidGovNistCoreHost:);
  methods[9].selector = @selector(setPortWithInt:);
  methods[10].selector = @selector(getInetAddress);
  methods[11].selector = @selector(mergeWithId:);
  methods[12].selector = @selector(java_clone);
  methods[13].selector = @selector(description);
  methods[14].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidGovNistCoreHostPort_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "host_", "LAndroidGovNistCoreHost;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "encode", "LJavaLangStringBuilder;", "equals", "LNSObject;", "setHost", "LAndroidGovNistCoreHost;", "setPort", "I", "LJavaNetUnknownHostException;", "merge", "clone", "toString", "hashCode" };
  static const J2ObjcClassInfo _AndroidGovNistCoreHostPort = { "HostPort", "android.gov.nist.core", ptrTable, methods, fields, 7, 0x11, 15, 3, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistCoreHostPort;
}

@end

void AndroidGovNistCoreHostPort_init(AndroidGovNistCoreHostPort *self) {
  AndroidGovNistCoreGenericObject_init(self);
  JreStrongAssign(&self->host_, nil);
  self->port_ = -1;
}

AndroidGovNistCoreHostPort *new_AndroidGovNistCoreHostPort_init() {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreHostPort, init)
}

AndroidGovNistCoreHostPort *create_AndroidGovNistCoreHostPort_init() {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreHostPort, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistCoreHostPort)
