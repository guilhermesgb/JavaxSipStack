//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/core/ParserCore.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/Debug.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/NameValue.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/Token.h"
#include "java/io/PrintStream.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/text/ParseException.h"

J2OBJC_INITIALIZED_DEFN(AndroidGovNistCoreParserCore)

jboolean AndroidGovNistCoreParserCore_debug;
jint AndroidGovNistCoreParserCore_nesting_level;

@implementation AndroidGovNistCoreParserCore

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidGovNistCoreParserCore_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (AndroidGovNistCoreNameValue *)nameValueWithChar:(jchar)separator {
  if (AndroidGovNistCoreParserCore_debug) [self dbg_enterWithNSString:@"nameValue"];
  @try {
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:AndroidGovNistCoreLexerCore_ID];
    AndroidGovNistCoreToken *name = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) SPorHT];
    @try {
      jboolean quoted = false;
      jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
      if (la == separator) {
        [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
        [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) SPorHT];
        NSString *str = nil;
        jboolean isFlag = false;
        if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == '"') {
          str = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) quotedString];
          quoted = true;
        }
        else {
          [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) matchWithInt:AndroidGovNistCoreLexerCore_ID];
          AndroidGovNistCoreToken *value = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getNextToken];
          str = ((AndroidGovNistCoreToken *) nil_chk(value))->tokenValue_;
          if (str == nil) {
            str = @"";
            isFlag = true;
          }
        }
        AndroidGovNistCoreNameValue *nv = create_AndroidGovNistCoreNameValue_initWithNSString_withId_withBoolean_(((AndroidGovNistCoreToken *) nil_chk(name))->tokenValue_, str, isFlag);
        if (quoted) [nv setQuotedValue];
        return nv;
      }
      else {
        return create_AndroidGovNistCoreNameValue_initWithNSString_withId_withBoolean_(((AndroidGovNistCoreToken *) nil_chk(name))->tokenValue_, @"", true);
      }
    }
    @catch (JavaTextParseException *ex) {
      return create_AndroidGovNistCoreNameValue_initWithNSString_withId_withBoolean_(((AndroidGovNistCoreToken *) nil_chk(name))->tokenValue_, nil, false);
    }
  }
  @finally {
    if (AndroidGovNistCoreParserCore_debug) [self dbg_leaveWithNSString:@"nameValue"];
  }
}

- (void)dbg_enterWithNSString:(NSString *)rule {
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_init();
  for (jint i = 0; i < AndroidGovNistCoreParserCore_nesting_level; i++) [stringBuilder appendWithNSString:@">"];
  if (AndroidGovNistCoreParserCore_debug) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("@$$$", stringBuilder, rule, @"\nlexer buffer = \n", [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getRest])];
  }
  AndroidGovNistCoreParserCore_nesting_level++;
}

- (void)dbg_leaveWithNSString:(NSString *)rule {
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_init();
  for (jint i = 0; i < AndroidGovNistCoreParserCore_nesting_level; i++) [stringBuilder appendWithNSString:@"<"];
  if (AndroidGovNistCoreParserCore_debug) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("@$$$", stringBuilder, rule, @"\nlexer buffer = \n", [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getRest])];
  }
  AndroidGovNistCoreParserCore_nesting_level--;
}

- (AndroidGovNistCoreNameValue *)nameValue {
  return [self nameValueWithChar:'='];
}

- (void)peekLineWithNSString:(NSString *)rule {
  if (AndroidGovNistCoreParserCore_debug) {
    AndroidGovNistCoreDebug_printlnWithNSString_(JreStrcat("$C$", rule, ' ', [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) peekLine]));
  }
}

- (void)dealloc {
  RELEASE_(lexer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValue;", 0x4, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 4, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreNameValue;", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(nameValueWithChar:);
  methods[2].selector = @selector(dbg_enterWithNSString:);
  methods[3].selector = @selector(dbg_leaveWithNSString:);
  methods[4].selector = @selector(nameValue);
  methods[5].selector = @selector(peekLineWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "debug", "Z", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "nesting_level", "I", .constantValue.asLong = 0, 0x8, -1, 8, -1, -1 },
    { "lexer_", "LAndroidGovNistCoreLexerCore;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "nameValue", "C", "LJavaTextParseException;", "dbg_enter", "LNSString;", "dbg_leave", "peekLine", &AndroidGovNistCoreParserCore_debug, &AndroidGovNistCoreParserCore_nesting_level };
  static const J2ObjcClassInfo _AndroidGovNistCoreParserCore = { "ParserCore", "android.gov.nist.core", ptrTable, methods, fields, 7, 0x401, 6, 3, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistCoreParserCore;
}

+ (void)initialize {
  if (self == [AndroidGovNistCoreParserCore class]) {
    AndroidGovNistCoreParserCore_debug = JreLoadStatic(AndroidGovNistCoreDebug, parserDebug);
    J2OBJC_SET_INITIALIZED(AndroidGovNistCoreParserCore)
  }
}

@end

void AndroidGovNistCoreParserCore_init(AndroidGovNistCoreParserCore *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistCoreParserCore)
