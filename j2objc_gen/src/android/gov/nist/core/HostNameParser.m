//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/core/HostNameParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/gov/nist/core/Host.h"
#include "android/gov/nist/core/HostNameParser.h"
#include "android/gov/nist/core/HostPort.h"
#include "android/gov/nist/core/LexerCore.h"
#include "android/gov/nist/core/ParserCore.h"
#include "android/gov/nist/core/StringTokenizer.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/text/ParseException.h"

@interface AndroidGovNistCoreHostNameParser ()

- (jboolean)isIPv6AddressWithNSString:(NSString *)uriHeader;

@end

inline jboolean AndroidGovNistCoreHostNameParser_get_stripAddressScopeZones();
inline jboolean AndroidGovNistCoreHostNameParser_set_stripAddressScopeZones(jboolean value);
inline jboolean *AndroidGovNistCoreHostNameParser_getRef_stripAddressScopeZones();
static jboolean AndroidGovNistCoreHostNameParser_stripAddressScopeZones = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(AndroidGovNistCoreHostNameParser, stripAddressScopeZones, jboolean)

inline IOSCharArray *AndroidGovNistCoreHostNameParser_get_VALID_DOMAIN_LABEL_CHAR();
static IOSCharArray *AndroidGovNistCoreHostNameParser_VALID_DOMAIN_LABEL_CHAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidGovNistCoreHostNameParser, VALID_DOMAIN_LABEL_CHAR, IOSCharArray *)

__attribute__((unused)) static jboolean AndroidGovNistCoreHostNameParser_isIPv6AddressWithNSString_(AndroidGovNistCoreHostNameParser *self, NSString *uriHeader);

J2OBJC_INITIALIZED_DEFN(AndroidGovNistCoreHostNameParser)

@implementation AndroidGovNistCoreHostNameParser

- (instancetype)initWithNSString:(NSString *)hname {
  AndroidGovNistCoreHostNameParser_initWithNSString_(self, hname);
  return self;
}

- (instancetype)initWithAndroidGovNistCoreLexerCore:(AndroidGovNistCoreLexerCore *)lexer {
  AndroidGovNistCoreHostNameParser_initWithAndroidGovNistCoreLexerCore_(self, lexer);
  return self;
}

- (void)consumeDomainLabel {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"domainLabel"];
  @try {
    [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeValidCharsWithCharArray:AndroidGovNistCoreHostNameParser_VALID_DOMAIN_LABEL_CHAR];
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"domainLabel"];
  }
}

- (NSString *)ipv6Reference {
  JavaLangStringBuilder *retval = create_JavaLangStringBuilder_init();
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"ipv6Reference"];
  @try {
    if (AndroidGovNistCoreHostNameParser_stripAddressScopeZones) {
      while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) hasMoreChars]) {
        jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
        if (AndroidGovNistCoreStringTokenizer_isHexDigitWithChar_(la) || la == '.' || la == ':' || la == '[') {
          [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
          [retval appendWithChar:la];
        }
        else if (la == ']') {
          [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
          [retval appendWithChar:la];
          return [retval description];
        }
        else if (la == '%') {
          [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
          NSString *rest = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getRest];
          if (rest == nil || ((jint) [rest length]) == 0) {
            break;
          }
          jint stripLen = [rest java_indexOf:']'];
          if (stripLen == -1) {
            break;
          }
          [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:stripLen + 1];
          [retval appendWithNSString:@"]"];
          return [retval description];
        }
        else break;
      }
    }
    else {
      while ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) hasMoreChars]) {
        jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
        if (AndroidGovNistCoreStringTokenizer_isHexDigitWithChar_(la) || la == '.' || la == ':' || la == '[') {
          [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
          [retval appendWithChar:la];
        }
        else if (la == ']') {
          [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
          [retval appendWithChar:la];
          return [retval description];
        }
        else break;
      }
    }
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getBuffer], @": Illegal Host name "), [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getPtr]);
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"ipv6Reference"];
  }
}

- (AndroidGovNistCoreHost *)host {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"host"];
  @try {
    NSString *hostname;
    if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0] == '[') {
      hostname = [self ipv6Reference];
    }
    else if (AndroidGovNistCoreHostNameParser_isIPv6AddressWithNSString_(self, [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getRest])) {
      jint startPtr = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getPtr];
      [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeValidCharsWithCharArray:[IOSCharArray arrayWithChars:(jchar[]){ AndroidGovNistCoreLexerCore_ALPHADIGIT_VALID_CHARS, ':' } count:2]];
      hostname = [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_initWithNSString_(@"[") appendWithNSString:[((NSString *) nil_chk([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getBuffer])) java_substring:startPtr endIndex:[((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getPtr]]])) appendWithNSString:@"]"])) description];
    }
    else {
      jint startPtr = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getPtr];
      [self consumeDomainLabel];
      hostname = [((NSString *) nil_chk([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getBuffer])) java_substring:startPtr endIndex:[((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getPtr]];
    }
    if (((jint) [((NSString *) nil_chk(hostname)) length]) == 0) @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getBuffer], @": Missing host name"), [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getPtr]);
    else return create_AndroidGovNistCoreHost_initWithNSString_(hostname);
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"host"];
  }
}

- (jboolean)isIPv6AddressWithNSString:(NSString *)uriHeader {
  return AndroidGovNistCoreHostNameParser_isIPv6AddressWithNSString_(self, uriHeader);
}

- (AndroidGovNistCoreHostPort *)hostPortWithBoolean:(jboolean)allowWS {
  if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_enterWithNSString:@"hostPort"];
  @try {
    AndroidGovNistCoreHost *host = [self host];
    AndroidGovNistCoreHostPort *hp = create_AndroidGovNistCoreHostPort_init();
    [hp setHostWithAndroidGovNistCoreHost:host];
    if (allowWS) [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) SPorHT];
    if ([((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) hasMoreChars]) {
      jchar la = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0];
      switch (la) {
        case ':':
        [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) consumeWithInt:1];
        if (allowWS) [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) SPorHT];
        @try {
          NSString *port = [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) number];
          [hp setPortWithInt:JavaLangInteger_parseIntWithNSString_(port)];
        }
        @catch (JavaLangNumberFormatException *nfe) {
          @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getBuffer], @" :Error parsing port "), [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getPtr]);
        }
        break;
        case ',':
        case ';':
        case '?':
        case '>':
        case ' ':
        case 0x0009:
        case 0x000d:
        case 0x000a:
        case '/':
        break;
        case '%':
        if (AndroidGovNistCoreHostNameParser_stripAddressScopeZones) {
          break;
        }
        default:
        if (!allowWS) {
          @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$C", [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getBuffer], @" Illegal character in hostname:", [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) lookAheadWithInt:0]), [((AndroidGovNistCoreLexerCore *) nil_chk(lexer_)) getPtr]);
        }
      }
    }
    return hp;
  }
  @finally {
    if (JreLoadStatic(AndroidGovNistCoreParserCore, debug)) [self dbg_leaveWithNSString:@"hostPort"];
  }
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  AndroidGovNistCoreHostNameParser_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreHost;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidGovNistCoreHostPort;", 0x1, 4, 5, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithAndroidGovNistCoreLexerCore:);
  methods[2].selector = @selector(consumeDomainLabel);
  methods[3].selector = @selector(ipv6Reference);
  methods[4].selector = @selector(host);
  methods[5].selector = @selector(isIPv6AddressWithNSString:);
  methods[6].selector = @selector(hostPortWithBoolean:);
  methods[7].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stripAddressScopeZones", "Z", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
    { "VALID_DOMAIN_LABEL_CHAR", "[C", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LAndroidGovNistCoreLexerCore;", "LJavaTextParseException;", "isIPv6Address", "hostPort", "Z", "main", "[LNSString;", &AndroidGovNistCoreHostNameParser_stripAddressScopeZones, &AndroidGovNistCoreHostNameParser_VALID_DOMAIN_LABEL_CHAR };
  static const J2ObjcClassInfo _AndroidGovNistCoreHostNameParser = { "HostNameParser", "android.gov.nist.core", ptrTable, methods, fields, 7, 0x1, 8, 2, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistCoreHostNameParser;
}

+ (void)initialize {
  if (self == [AndroidGovNistCoreHostNameParser class]) {
    {
      AndroidGovNistCoreHostNameParser_stripAddressScopeZones = JavaLangBoolean_getBooleanWithNSString_(@"gov.nist.core.STRIP_ADDR_SCOPES");
    }
    JreStrongAssignAndConsume(&AndroidGovNistCoreHostNameParser_VALID_DOMAIN_LABEL_CHAR, [IOSCharArray newArrayWithChars:(jchar[]){ AndroidGovNistCoreLexerCore_ALPHADIGIT_VALID_CHARS, '-', '.', '_' } count:4]);
    J2OBJC_SET_INITIALIZED(AndroidGovNistCoreHostNameParser)
  }
}

@end

void AndroidGovNistCoreHostNameParser_initWithNSString_(AndroidGovNistCoreHostNameParser *self, NSString *hname) {
  AndroidGovNistCoreParserCore_init(self);
  JreStrongAssignAndConsume(&self->lexer_, new_AndroidGovNistCoreLexerCore_initWithNSString_withNSString_(@"charLexer", hname));
}

AndroidGovNistCoreHostNameParser *new_AndroidGovNistCoreHostNameParser_initWithNSString_(NSString *hname) {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreHostNameParser, initWithNSString_, hname)
}

AndroidGovNistCoreHostNameParser *create_AndroidGovNistCoreHostNameParser_initWithNSString_(NSString *hname) {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreHostNameParser, initWithNSString_, hname)
}

void AndroidGovNistCoreHostNameParser_initWithAndroidGovNistCoreLexerCore_(AndroidGovNistCoreHostNameParser *self, AndroidGovNistCoreLexerCore *lexer) {
  AndroidGovNistCoreParserCore_init(self);
  JreStrongAssign(&self->lexer_, lexer);
  [((AndroidGovNistCoreLexerCore *) nil_chk(lexer)) selectLexerWithNSString:@"charLexer"];
}

AndroidGovNistCoreHostNameParser *new_AndroidGovNistCoreHostNameParser_initWithAndroidGovNistCoreLexerCore_(AndroidGovNistCoreLexerCore *lexer) {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreHostNameParser, initWithAndroidGovNistCoreLexerCore_, lexer)
}

AndroidGovNistCoreHostNameParser *create_AndroidGovNistCoreHostNameParser_initWithAndroidGovNistCoreLexerCore_(AndroidGovNistCoreLexerCore *lexer) {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreHostNameParser, initWithAndroidGovNistCoreLexerCore_, lexer)
}

jboolean AndroidGovNistCoreHostNameParser_isIPv6AddressWithNSString_(AndroidGovNistCoreHostNameParser *self, NSString *uriHeader) {
  NSString *hostName = uriHeader;
  jint indexOfComma = [((NSString *) nil_chk(uriHeader)) java_indexOfString:@","];
  if (indexOfComma != -1) {
    hostName = [uriHeader java_substring:0 endIndex:indexOfComma];
  }
  jint hostEnd = [((NSString *) nil_chk(hostName)) java_indexOf:AndroidGovNistCoreLexerCore_QUESTION];
  jint semiColonIndex = [hostName java_indexOf:AndroidGovNistCoreLexerCore_SEMICOLON];
  if (hostEnd == -1 || (semiColonIndex != -1 && hostEnd > semiColonIndex)) hostEnd = semiColonIndex;
  if (hostEnd == -1) hostEnd = ((jint) [hostName length]);
  NSString *host = [hostName java_substring:0 endIndex:hostEnd];
  jint firstColonIndex = [((NSString *) nil_chk(host)) java_indexOf:AndroidGovNistCoreLexerCore_COLON];
  if (firstColonIndex == -1) return false;
  jint secondColonIndex = [host java_indexOf:AndroidGovNistCoreLexerCore_COLON fromIndex:firstColonIndex + 1];
  if (secondColonIndex == -1) return false;
  return true;
}

void AndroidGovNistCoreHostNameParser_mainWithNSStringArray_(IOSObjectArray *args) {
  AndroidGovNistCoreHostNameParser_initialize();
  IOSObjectArray *hostNames = [IOSObjectArray arrayWithObjects:(id[]){ @"foo.bar.com:1234", @"proxima.chaplin.bt.co.uk", @"129.6.55.181:2345", @":1234", @"foo.bar.com:         1234", @"foo.bar.com     :      1234   ", @"MIK_S:1234" } count:7 type:NSString_class_()];
  for (jint i = 0; i < hostNames->size_; i++) {
    @try {
      AndroidGovNistCoreHostNameParser *hnp = create_AndroidGovNistCoreHostNameParser_initWithNSString_(IOSObjectArray_Get(hostNames, i));
      AndroidGovNistCoreHostPort *hp = [hnp hostPortWithBoolean:true];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("C$C", '[', [((AndroidGovNistCoreHostPort *) nil_chk(hp)) encode], ']')];
    }
    @catch (JavaTextParseException *ex) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"exception text = ", [((JavaTextParseException *) nil_chk(ex)) getMessage])];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistCoreHostNameParser)
