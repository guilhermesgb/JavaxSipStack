//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/gov/nist/core/NamingThreadFactory.java
//

#include "J2ObjC_source.h"
#include "android/gov/nist/core/NamingThreadFactory.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

@interface AndroidGovNistCoreNamingThreadFactory () {
 @public
  id<JavaUtilConcurrentThreadFactory> delegate_;
  NSString *baseName_;
  JavaUtilConcurrentAtomicAtomicInteger *index_;
}

@end

J2OBJC_FIELD_SETTER(AndroidGovNistCoreNamingThreadFactory, delegate_, id<JavaUtilConcurrentThreadFactory>)
J2OBJC_FIELD_SETTER(AndroidGovNistCoreNamingThreadFactory, baseName_, NSString *)
J2OBJC_FIELD_SETTER(AndroidGovNistCoreNamingThreadFactory, index_, JavaUtilConcurrentAtomicAtomicInteger *)

@implementation AndroidGovNistCoreNamingThreadFactory

- (instancetype)initWithNSString:(NSString *)baseName {
  AndroidGovNistCoreNamingThreadFactory_initWithNSString_(self, baseName);
  return self;
}

- (instancetype)initWithNSString:(NSString *)baseName
withJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)delegate {
  AndroidGovNistCoreNamingThreadFactory_initWithNSString_withJavaUtilConcurrentThreadFactory_(self, baseName, delegate);
  return self;
}

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  NSString *name = JreStrcat("$$$I", @"pool-", baseName_, @"-thread-", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(index_)) getAndIncrement]);
  JavaLangThread *ret = [((id<JavaUtilConcurrentThreadFactory>) nil_chk(delegate_)) newThreadWithJavaLangRunnable:r];
  [((JavaLangThread *) nil_chk(ret)) setNameWithNSString:name];
  return ret;
}

- (void)dealloc {
  RELEASE_(delegate_);
  RELEASE_(baseName_);
  RELEASE_(index_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withJavaUtilConcurrentThreadFactory:);
  methods[2].selector = @selector(newThreadWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LJavaUtilConcurrentThreadFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "baseName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "index_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;LJavaUtilConcurrentThreadFactory;", "newThread", "LJavaLangRunnable;" };
  static const J2ObjcClassInfo _AndroidGovNistCoreNamingThreadFactory = { "NamingThreadFactory", "android.gov.nist.core", ptrTable, methods, fields, 7, 0x1, 3, 3, -1, -1, -1, -1, -1 };
  return &_AndroidGovNistCoreNamingThreadFactory;
}

@end

void AndroidGovNistCoreNamingThreadFactory_initWithNSString_(AndroidGovNistCoreNamingThreadFactory *self, NSString *baseName) {
  AndroidGovNistCoreNamingThreadFactory_initWithNSString_withJavaUtilConcurrentThreadFactory_(self, baseName, nil);
}

AndroidGovNistCoreNamingThreadFactory *new_AndroidGovNistCoreNamingThreadFactory_initWithNSString_(NSString *baseName) {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreNamingThreadFactory, initWithNSString_, baseName)
}

AndroidGovNistCoreNamingThreadFactory *create_AndroidGovNistCoreNamingThreadFactory_initWithNSString_(NSString *baseName) {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreNamingThreadFactory, initWithNSString_, baseName)
}

void AndroidGovNistCoreNamingThreadFactory_initWithNSString_withJavaUtilConcurrentThreadFactory_(AndroidGovNistCoreNamingThreadFactory *self, NSString *baseName, id<JavaUtilConcurrentThreadFactory> delegate) {
  NSObject_init(self);
  JreStrongAssign(&self->baseName_, baseName);
  JreStrongAssign(&self->delegate_, delegate);
  if (self->delegate_ == nil) {
    JreStrongAssign(&self->delegate_, JavaUtilConcurrentExecutors_defaultThreadFactory());
  }
  JreStrongAssignAndConsume(&self->index_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(1));
}

AndroidGovNistCoreNamingThreadFactory *new_AndroidGovNistCoreNamingThreadFactory_initWithNSString_withJavaUtilConcurrentThreadFactory_(NSString *baseName, id<JavaUtilConcurrentThreadFactory> delegate) {
  J2OBJC_NEW_IMPL(AndroidGovNistCoreNamingThreadFactory, initWithNSString_withJavaUtilConcurrentThreadFactory_, baseName, delegate)
}

AndroidGovNistCoreNamingThreadFactory *create_AndroidGovNistCoreNamingThreadFactory_initWithNSString_withJavaUtilConcurrentThreadFactory_(NSString *baseName, id<JavaUtilConcurrentThreadFactory> delegate) {
  J2OBJC_CREATE_IMPL(AndroidGovNistCoreNamingThreadFactory, initWithNSString_withJavaUtilConcurrentThreadFactory_, baseName, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidGovNistCoreNamingThreadFactory)
