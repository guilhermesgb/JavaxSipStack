//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/javax/sip/Timeout.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/javax/sip/Timeout.h"
#include "java/lang/IllegalArgumentException.h"

@interface AndroidJavaxSipTimeout () {
 @public
  jint m_timeout_;
}

- (instancetype)initWithInt:(jint)timeout;

- (id)readResolve;

@end

inline jint AndroidJavaxSipTimeout_get_m_size();
inline jint AndroidJavaxSipTimeout_set_m_size(jint value);
inline jint *AndroidJavaxSipTimeout_getRef_m_size();
static jint AndroidJavaxSipTimeout_m_size = 2;
J2OBJC_STATIC_FIELD_PRIMITIVE(AndroidJavaxSipTimeout, m_size, jint)

inline IOSObjectArray *AndroidJavaxSipTimeout_get_m_timeoutArray();
inline IOSObjectArray *AndroidJavaxSipTimeout_set_m_timeoutArray(IOSObjectArray *value);
static IOSObjectArray *AndroidJavaxSipTimeout_m_timeoutArray;
J2OBJC_STATIC_FIELD_OBJ(AndroidJavaxSipTimeout, m_timeoutArray, IOSObjectArray *)

__attribute__((unused)) static void AndroidJavaxSipTimeout_initWithInt_(AndroidJavaxSipTimeout *self, jint timeout);

__attribute__((unused)) static AndroidJavaxSipTimeout *new_AndroidJavaxSipTimeout_initWithInt_(jint timeout) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidJavaxSipTimeout *create_AndroidJavaxSipTimeout_initWithInt_(jint timeout);

J2OBJC_INITIALIZED_DEFN(AndroidJavaxSipTimeout)

AndroidJavaxSipTimeout *AndroidJavaxSipTimeout_RETRANSMIT;
AndroidJavaxSipTimeout *AndroidJavaxSipTimeout_TRANSACTION;

@implementation AndroidJavaxSipTimeout

- (instancetype)initWithInt:(jint)timeout {
  AndroidJavaxSipTimeout_initWithInt_(self, timeout);
  return self;
}

- (AndroidJavaxSipTimeout *)getObjectWithInt:(jint)timeout {
  if (timeout >= 0 && timeout < AndroidJavaxSipTimeout_m_size) {
    return IOSObjectArray_Get(nil_chk(AndroidJavaxSipTimeout_m_timeoutArray), timeout);
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid timeout value");
  }
}

- (jint)getValue {
  return m_timeout_;
}

- (id)readResolve {
  return IOSObjectArray_Get(nil_chk(AndroidJavaxSipTimeout_m_timeoutArray), m_timeout_);
}

- (NSString *)description {
  NSString *text = @"";
  switch (m_timeout_) {
    case AndroidJavaxSipTimeout__RETRANSMIT:
    text = @"Retransmission Timeout";
    break;
    case AndroidJavaxSipTimeout__TRANSACTION:
    text = @"Transaction Timeout";
    break;
    default:
    text = @"Error while printing Timeout";
    break;
  }
  return text;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipTimeout;", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(getObjectWithInt:);
  methods[2].selector = @selector(getValue);
  methods[3].selector = @selector(readResolve);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "m_timeout_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_size", "I", .constantValue.asLong = 0, 0xa, -1, 4, -1, -1 },
    { "m_timeoutArray", "[LAndroidJavaxSipTimeout;", .constantValue.asLong = 0, 0xa, -1, 5, -1, -1 },
    { "_RETRANSMIT", "I", .constantValue.asInt = AndroidJavaxSipTimeout__RETRANSMIT, 0x19, -1, -1, -1, -1 },
    { "RETRANSMIT", "LAndroidJavaxSipTimeout;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "_TRANSACTION", "I", .constantValue.asInt = AndroidJavaxSipTimeout__TRANSACTION, 0x19, -1, -1, -1, -1 },
    { "TRANSACTION", "LAndroidJavaxSipTimeout;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "getObject", "LJavaIoObjectStreamException;", "toString", &AndroidJavaxSipTimeout_m_size, &AndroidJavaxSipTimeout_m_timeoutArray, &AndroidJavaxSipTimeout_RETRANSMIT, &AndroidJavaxSipTimeout_TRANSACTION };
  static const J2ObjcClassInfo _AndroidJavaxSipTimeout = { "Timeout", "android.javax.sip", ptrTable, methods, fields, 7, 0x11, 5, 7, -1, -1, -1, -1, -1 };
  return &_AndroidJavaxSipTimeout;
}

+ (void)initialize {
  if (self == [AndroidJavaxSipTimeout class]) {
    JreStrongAssignAndConsume(&AndroidJavaxSipTimeout_m_timeoutArray, [IOSObjectArray newArrayWithLength:AndroidJavaxSipTimeout_m_size type:AndroidJavaxSipTimeout_class_()]);
    JreStrongAssignAndConsume(&AndroidJavaxSipTimeout_RETRANSMIT, new_AndroidJavaxSipTimeout_initWithInt_(AndroidJavaxSipTimeout__RETRANSMIT));
    JreStrongAssignAndConsume(&AndroidJavaxSipTimeout_TRANSACTION, new_AndroidJavaxSipTimeout_initWithInt_(AndroidJavaxSipTimeout__TRANSACTION));
    J2OBJC_SET_INITIALIZED(AndroidJavaxSipTimeout)
  }
}

@end

void AndroidJavaxSipTimeout_initWithInt_(AndroidJavaxSipTimeout *self, jint timeout) {
  NSObject_init(self);
  self->m_timeout_ = timeout;
  IOSObjectArray_Set(nil_chk(AndroidJavaxSipTimeout_m_timeoutArray), self->m_timeout_, self);
}

AndroidJavaxSipTimeout *new_AndroidJavaxSipTimeout_initWithInt_(jint timeout) {
  J2OBJC_NEW_IMPL(AndroidJavaxSipTimeout, initWithInt_, timeout)
}

AndroidJavaxSipTimeout *create_AndroidJavaxSipTimeout_initWithInt_(jint timeout) {
  J2OBJC_CREATE_IMPL(AndroidJavaxSipTimeout, initWithInt_, timeout)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidJavaxSipTimeout)
