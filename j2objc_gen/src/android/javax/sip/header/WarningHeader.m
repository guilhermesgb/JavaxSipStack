//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/javax/sip/header/WarningHeader.java
//

#include "J2ObjC_source.h"
#include "android/javax/sip/header/WarningHeader.h"

@interface AndroidJavaxSipHeaderWarningHeader : NSObject

@end

NSString *AndroidJavaxSipHeaderWarningHeader_NAME = @"Warning";

@implementation AndroidJavaxSipHeaderWarningHeader

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 3, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 5, 6, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getAgent);
  methods[1].selector = @selector(setAgentWithNSString:);
  methods[2].selector = @selector(getText);
  methods[3].selector = @selector(setTextWithNSString:);
  methods[4].selector = @selector(setCodeWithInt:);
  methods[5].selector = @selector(getCode);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "INCOMPATIBLE_NETWORK_PROTOCOL", "I", .constantValue.asInt = AndroidJavaxSipHeaderWarningHeader_INCOMPATIBLE_NETWORK_PROTOCOL, 0x19, -1, -1, -1, -1 },
    { "INCOMPATIBLE_NETWORK_ADDRESS_FORMATS", "I", .constantValue.asInt = AndroidJavaxSipHeaderWarningHeader_INCOMPATIBLE_NETWORK_ADDRESS_FORMATS, 0x19, -1, -1, -1, -1 },
    { "INCOMPATIBLE_TRANSPORT_PROTOCOL", "I", .constantValue.asInt = AndroidJavaxSipHeaderWarningHeader_INCOMPATIBLE_TRANSPORT_PROTOCOL, 0x19, -1, -1, -1, -1 },
    { "INCOMPATIBLE_BANDWIDTH_UNITS", "I", .constantValue.asInt = AndroidJavaxSipHeaderWarningHeader_INCOMPATIBLE_BANDWIDTH_UNITS, 0x19, -1, -1, -1, -1 },
    { "MEDIA_TYPE_NOT_AVAILABLE", "I", .constantValue.asInt = AndroidJavaxSipHeaderWarningHeader_MEDIA_TYPE_NOT_AVAILABLE, 0x19, -1, -1, -1, -1 },
    { "INCOMPATIBLE_MEDIA_FORMAT", "I", .constantValue.asInt = AndroidJavaxSipHeaderWarningHeader_INCOMPATIBLE_MEDIA_FORMAT, 0x19, -1, -1, -1, -1 },
    { "ATTRIBUTE_NOT_UNDERSTOOD", "I", .constantValue.asInt = AndroidJavaxSipHeaderWarningHeader_ATTRIBUTE_NOT_UNDERSTOOD, 0x19, -1, -1, -1, -1 },
    { "SESSION_DESCRIPTION_PARAMETER_NOT_UNDERSTOOD", "I", .constantValue.asInt = AndroidJavaxSipHeaderWarningHeader_SESSION_DESCRIPTION_PARAMETER_NOT_UNDERSTOOD, 0x19, -1, -1, -1, -1 },
    { "MULTICAST_NOT_AVAILABLE", "I", .constantValue.asInt = AndroidJavaxSipHeaderWarningHeader_MULTICAST_NOT_AVAILABLE, 0x19, -1, -1, -1, -1 },
    { "UNICAST_NOT_AVAILABLE", "I", .constantValue.asInt = AndroidJavaxSipHeaderWarningHeader_UNICAST_NOT_AVAILABLE, 0x19, -1, -1, -1, -1 },
    { "INSUFFICIENT_BANDWIDTH", "I", .constantValue.asInt = AndroidJavaxSipHeaderWarningHeader_INSUFFICIENT_BANDWIDTH, 0x19, -1, -1, -1, -1 },
    { "MISCELLANEOUS_WARNING", "I", .constantValue.asInt = AndroidJavaxSipHeaderWarningHeader_MISCELLANEOUS_WARNING, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setAgent", "LNSString;", "LJavaTextParseException;", "setText", "setCode", "I", "LAndroidJavaxSipInvalidArgumentException;", &AndroidJavaxSipHeaderWarningHeader_NAME };
  static const J2ObjcClassInfo _AndroidJavaxSipHeaderWarningHeader = { "WarningHeader", "android.javax.sip.header", ptrTable, methods, fields, 7, 0x609, 6, 13, -1, -1, -1, -1, -1 };
  return &_AndroidJavaxSipHeaderWarningHeader;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidJavaxSipHeaderWarningHeader)
