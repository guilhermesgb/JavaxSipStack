//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/android/javax/sip/header/HeaderFactory.java
//

#include "J2ObjC_source.h"
#include "android/javax/sip/header/HeaderFactory.h"

@interface AndroidJavaxSipHeaderHeaderFactory : NSObject

@end

@implementation AndroidJavaxSipHeaderHeaderFactory

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidJavaxSipHeaderAcceptEncodingHeader;", 0x401, 0, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderAcceptHeader;", 0x401, 3, 4, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderAcceptLanguageHeader;", 0x401, 5, 6, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderAlertInfoHeader;", 0x401, 7, 8, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderAllowEventsHeader;", 0x401, 9, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderAllowHeader;", 0x401, 10, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderAuthenticationInfoHeader;", 0x401, 11, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderAuthorizationHeader;", 0x401, 12, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderCSeqHeader;", 0x401, 13, 14, 15, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderCSeqHeader;", 0x401, 13, 16, 15, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderCallIdHeader;", 0x401, 17, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderCallInfoHeader;", 0x401, 18, 8, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContactHeader;", 0x401, 19, 20, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContactHeader;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContentDispositionHeader;", 0x401, 21, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContentEncodingHeader;", 0x401, 22, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContentLanguageHeader;", 0x401, 23, 6, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContentLengthHeader;", 0x401, 24, 25, 26, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderContentTypeHeader;", 0x401, 27, 4, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderDateHeader;", 0x401, 28, 29, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderErrorInfoHeader;", 0x401, 30, 8, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderEventHeader;", 0x401, 31, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderExpiresHeader;", 0x401, 32, 25, 26, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderHeader;", 0x401, 33, 4, 2, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, 34, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderFromHeader;", 0x401, 35, 36, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderInReplyToHeader;", 0x401, 37, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderMaxForwardsHeader;", 0x401, 38, 25, 26, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderMimeVersionHeader;", 0x401, 39, 40, 26, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderMinExpiresHeader;", 0x401, 41, 25, 26, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderOrganizationHeader;", 0x401, 42, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderPriorityHeader;", 0x401, 43, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderProxyAuthenticateHeader;", 0x401, 44, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderProxyAuthorizationHeader;", 0x401, 45, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderProxyRequireHeader;", 0x401, 46, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderRAckHeader;", 0x401, 47, 48, 49, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderRSeqHeader;", 0x401, 50, 25, 26, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderReasonHeader;", 0x401, 51, 52, 49, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderRecordRouteHeader;", 0x401, 53, 20, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderReplyToHeader;", 0x401, 54, 20, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderReferToHeader;", 0x401, 55, 20, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderRequireHeader;", 0x401, 56, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderRetryAfterHeader;", 0x401, 57, 25, 26, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderRouteHeader;", 0x401, 58, 20, -1, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderServerHeader;", 0x401, 59, 60, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderSubjectHeader;", 0x401, 61, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderSubscriptionStateHeader;", 0x401, 62, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderSupportedHeader;", 0x401, 63, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderTimeStampHeader;", 0x401, 64, 65, 26, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderToHeader;", 0x401, 66, 36, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderUnsupportedHeader;", 0x401, 67, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderUserAgentHeader;", 0x401, 68, 60, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderViaHeader;", 0x401, 69, 70, 15, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderWWWAuthenticateHeader;", 0x401, 71, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderWarningHeader;", 0x401, 72, 52, 49, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderSIPETagHeader;", 0x401, 73, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidJavaxSipHeaderSIPIfMatchHeader;", 0x401, 74, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createAcceptEncodingHeaderWithNSString:);
  methods[1].selector = @selector(createAcceptHeaderWithNSString:withNSString:);
  methods[2].selector = @selector(createAcceptLanguageHeaderWithJavaUtilLocale:);
  methods[3].selector = @selector(createAlertInfoHeaderWithAndroidJavaxSipAddressURI:);
  methods[4].selector = @selector(createAllowEventsHeaderWithNSString:);
  methods[5].selector = @selector(createAllowHeaderWithNSString:);
  methods[6].selector = @selector(createAuthenticationInfoHeaderWithNSString:);
  methods[7].selector = @selector(createAuthorizationHeaderWithNSString:);
  methods[8].selector = @selector(createCSeqHeaderWithInt:withNSString:);
  methods[9].selector = @selector(createCSeqHeaderWithLong:withNSString:);
  methods[10].selector = @selector(createCallIdHeaderWithNSString:);
  methods[11].selector = @selector(createCallInfoHeaderWithAndroidJavaxSipAddressURI:);
  methods[12].selector = @selector(createContactHeaderWithAndroidJavaxSipAddressAddress:);
  methods[13].selector = @selector(createContactHeader);
  methods[14].selector = @selector(createContentDispositionHeaderWithNSString:);
  methods[15].selector = @selector(createContentEncodingHeaderWithNSString:);
  methods[16].selector = @selector(createContentLanguageHeaderWithJavaUtilLocale:);
  methods[17].selector = @selector(createContentLengthHeaderWithInt:);
  methods[18].selector = @selector(createContentTypeHeaderWithNSString:withNSString:);
  methods[19].selector = @selector(createDateHeaderWithJavaUtilCalendar:);
  methods[20].selector = @selector(createErrorInfoHeaderWithAndroidJavaxSipAddressURI:);
  methods[21].selector = @selector(createEventHeaderWithNSString:);
  methods[22].selector = @selector(createExpiresHeaderWithInt:);
  methods[23].selector = @selector(createHeaderWithNSString:withNSString:);
  methods[24].selector = @selector(createHeadersWithNSString:);
  methods[25].selector = @selector(createFromHeaderWithAndroidJavaxSipAddressAddress:withNSString:);
  methods[26].selector = @selector(createInReplyToHeaderWithNSString:);
  methods[27].selector = @selector(createMaxForwardsHeaderWithInt:);
  methods[28].selector = @selector(createMimeVersionHeaderWithInt:withInt:);
  methods[29].selector = @selector(createMinExpiresHeaderWithInt:);
  methods[30].selector = @selector(createOrganizationHeaderWithNSString:);
  methods[31].selector = @selector(createPriorityHeaderWithNSString:);
  methods[32].selector = @selector(createProxyAuthenticateHeaderWithNSString:);
  methods[33].selector = @selector(createProxyAuthorizationHeaderWithNSString:);
  methods[34].selector = @selector(createProxyRequireHeaderWithNSString:);
  methods[35].selector = @selector(createRAckHeaderWithInt:withInt:withNSString:);
  methods[36].selector = @selector(createRSeqHeaderWithInt:);
  methods[37].selector = @selector(createReasonHeaderWithNSString:withInt:withNSString:);
  methods[38].selector = @selector(createRecordRouteHeaderWithAndroidJavaxSipAddressAddress:);
  methods[39].selector = @selector(createReplyToHeaderWithAndroidJavaxSipAddressAddress:);
  methods[40].selector = @selector(createReferToHeaderWithAndroidJavaxSipAddressAddress:);
  methods[41].selector = @selector(createRequireHeaderWithNSString:);
  methods[42].selector = @selector(createRetryAfterHeaderWithInt:);
  methods[43].selector = @selector(createRouteHeaderWithAndroidJavaxSipAddressAddress:);
  methods[44].selector = @selector(createServerHeaderWithJavaUtilList:);
  methods[45].selector = @selector(createSubjectHeaderWithNSString:);
  methods[46].selector = @selector(createSubscriptionStateHeaderWithNSString:);
  methods[47].selector = @selector(createSupportedHeaderWithNSString:);
  methods[48].selector = @selector(createTimeStampHeaderWithFloat:);
  methods[49].selector = @selector(createToHeaderWithAndroidJavaxSipAddressAddress:withNSString:);
  methods[50].selector = @selector(createUnsupportedHeaderWithNSString:);
  methods[51].selector = @selector(createUserAgentHeaderWithJavaUtilList:);
  methods[52].selector = @selector(createViaHeaderWithNSString:withInt:withNSString:withNSString:);
  methods[53].selector = @selector(createWWWAuthenticateHeaderWithNSString:);
  methods[54].selector = @selector(createWarningHeaderWithNSString:withInt:withNSString:);
  methods[55].selector = @selector(createSIPETagHeaderWithNSString:);
  methods[56].selector = @selector(createSIPIfMatchHeaderWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createAcceptEncodingHeader", "LNSString;", "LJavaTextParseException;", "createAcceptHeader", "LNSString;LNSString;", "createAcceptLanguageHeader", "LJavaUtilLocale;", "createAlertInfoHeader", "LAndroidJavaxSipAddressURI;", "createAllowEventsHeader", "createAllowHeader", "createAuthenticationInfoHeader", "createAuthorizationHeader", "createCSeqHeader", "ILNSString;", "LJavaTextParseException;LAndroidJavaxSipInvalidArgumentException;", "JLNSString;", "createCallIdHeader", "createCallInfoHeader", "createContactHeader", "LAndroidJavaxSipAddressAddress;", "createContentDispositionHeader", "createContentEncodingHeader", "createContentLanguageHeader", "createContentLengthHeader", "I", "LAndroidJavaxSipInvalidArgumentException;", "createContentTypeHeader", "createDateHeader", "LJavaUtilCalendar;", "createErrorInfoHeader", "createEventHeader", "createExpiresHeader", "createHeader", "createHeaders", "createFromHeader", "LAndroidJavaxSipAddressAddress;LNSString;", "createInReplyToHeader", "createMaxForwardsHeader", "createMimeVersionHeader", "II", "createMinExpiresHeader", "createOrganizationHeader", "createPriorityHeader", "createProxyAuthenticateHeader", "createProxyAuthorizationHeader", "createProxyRequireHeader", "createRAckHeader", "IILNSString;", "LAndroidJavaxSipInvalidArgumentException;LJavaTextParseException;", "createRSeqHeader", "createReasonHeader", "LNSString;ILNSString;", "createRecordRouteHeader", "createReplyToHeader", "createReferToHeader", "createRequireHeader", "createRetryAfterHeader", "createRouteHeader", "createServerHeader", "LJavaUtilList;", "createSubjectHeader", "createSubscriptionStateHeader", "createSupportedHeader", "createTimeStampHeader", "F", "createToHeader", "createUnsupportedHeader", "createUserAgentHeader", "createViaHeader", "LNSString;ILNSString;LNSString;", "createWWWAuthenticateHeader", "createWarningHeader", "createSIPETagHeader", "createSIPIfMatchHeader" };
  static const J2ObjcClassInfo _AndroidJavaxSipHeaderHeaderFactory = { "HeaderFactory", "android.javax.sip.header", ptrTable, methods, NULL, 7, 0x609, 57, 0, -1, -1, -1, -1, -1 };
  return &_AndroidJavaxSipHeaderHeaderFactory;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidJavaxSipHeaderHeaderFactory)
